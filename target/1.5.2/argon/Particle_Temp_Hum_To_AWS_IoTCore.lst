
/Users/kathrinburtscher/Particle/Particle_Temp_Hum_To_AWS_IoTCore/target/1.5.2/argon/Particle_Temp_Hum_To_AWS_IoTCore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00016c70  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000eac90  000eac90  0001ac90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000eac98  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a4  2003b9e4  000eac9c  0002b9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002d68  2003ba88  2003ba88  0003ba88  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000ead40  000ead40  0003ad40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000ead68  000ead68  0003ad68  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0012a41d  00000000  00000000  0003ad6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000195ae  00000000  00000000  00165189  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000526d3  00000000  00000000  0017e737  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000040e0  00000000  00000000  001d0e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000071e8  00000000  00000000  001d4eea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000402fe  00000000  00000000  001dc0d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003fad6  00000000  00000000  0021c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00123acf  00000000  00000000  0025bea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000123a8  00000000  00000000  0037f978  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f013 ff18 	bl	e7e66 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f013 ff38 	bl	e7eb2 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003b9e4 	.word	0x2003b9e4
   d404c:	000eac9c 	.word	0x000eac9c
   d4050:	2003ba88 	.word	0x2003ba88
   d4054:	2003ba88 	.word	0x2003ba88
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f012 fe9d 	bl	e6d9c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000eac84 	.word	0x000eac84
   d4084:	000eac44 	.word	0x000eac44

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b832 	b.w	d40f0 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f859 	bl	d4144 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f012 be43 	b.w	e6d20 <_post_loop>

000d409a <_Znwj>:
   d409a:	f011 bd49 	b.w	e5b30 <malloc>

000d409e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409e:	f011 bd47 	b.w	e5b30 <malloc>

000d40a2 <_ZdlPv>:
   d40a2:	f011 bd4d 	b.w	e5b40 <free>

000d40a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a6:	f011 bd4b 	b.w	e5b40 <free>

000d40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40aa:	7800      	ldrb	r0, [r0, #0]
   d40ac:	fab0 f080 	clz	r0, r0
   d40b0:	0940      	lsrs	r0, r0, #5
   d40b2:	4770      	bx	lr

000d40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b4:	2301      	movs	r3, #1
   d40b6:	7003      	strb	r3, [r0, #0]
   d40b8:	4770      	bx	lr

000d40ba <_Z8callbackPcPhj>:

//Create MQTT client with AWS IoT-Core endpoint as host
MQTT client("******************.iot.eu-central-1.amazonaws.com", 8883, callback);

void callback(char *topic, byte *payload, unsigned int length)
{
   d40ba:	b590      	push	{r4, r7, lr}
  char p[length + 1];
   d40bc:	f102 0308 	add.w	r3, r2, #8

//Create MQTT client with AWS IoT-Core endpoint as host
MQTT client("******************.iot.eu-central-1.amazonaws.com", 8883, callback);

void callback(char *topic, byte *payload, unsigned int length)
{
   d40c0:	b085      	sub	sp, #20
  char p[length + 1];
   d40c2:	f023 0307 	bic.w	r3, r3, #7

//Create MQTT client with AWS IoT-Core endpoint as host
MQTT client("******************.iot.eu-central-1.amazonaws.com", 8883, callback);

void callback(char *topic, byte *payload, unsigned int length)
{
   d40c6:	af00      	add	r7, sp, #0
  char p[length + 1];
   d40c8:	ebad 0d03 	sub.w	sp, sp, r3

//Create MQTT client with AWS IoT-Core endpoint as host
MQTT client("******************.iot.eu-central-1.amazonaws.com", 8883, callback);

void callback(char *topic, byte *payload, unsigned int length)
{
   d40cc:	4614      	mov	r4, r2
  char p[length + 1];
  memcpy(p, payload, length);
   d40ce:	4668      	mov	r0, sp
   d40d0:	f013 fec9 	bl	e7e66 <memcpy>
  p[length] = NULL;
   d40d4:	2300      	movs	r3, #0
  String message(p);
   d40d6:	4669      	mov	r1, sp
   d40d8:	4638      	mov	r0, r7

void callback(char *topic, byte *payload, unsigned int length)
{
  char p[length + 1];
  memcpy(p, payload, length);
  p[length] = NULL;
   d40da:	f80d 3004 	strb.w	r3, [sp, r4]
  String message(p);
   d40de:	f012 f920 	bl	e6322 <_ZN6StringC1EPK19__FlashStringHelper>
   d40e2:	4638      	mov	r0, r7
   d40e4:	f012 f8d6 	bl	e6294 <_ZN6StringD1Ev>
}
   d40e8:	3714      	adds	r7, #20
   d40ea:	46bd      	mov	sp, r7
   d40ec:	bd90      	pop	{r4, r7, pc}
	...

000d40f0 <setup>:
String temp;
String hum;

// setup() runs once, when the device is first turned on.
void setup()
{
   d40f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  //AWS
  client.enableTls(awsRootCert, sizeof(awsRootCert), awsClientCert, sizeof(awsClientCert), awsClientKey, sizeof(awsClientKey));
   d40f2:	23bf      	movs	r3, #191	; 0xbf
   d40f4:	4c0d      	ldr	r4, [pc, #52]	; (d412c <setup+0x3c>)
   d40f6:	9302      	str	r3, [sp, #8]
   d40f8:	4b0d      	ldr	r3, [pc, #52]	; (d4130 <setup+0x40>)
   d40fa:	9301      	str	r3, [sp, #4]
   d40fc:	23c0      	movs	r3, #192	; 0xc0
   d40fe:	22a1      	movs	r2, #161	; 0xa1
   d4100:	9300      	str	r3, [sp, #0]
   d4102:	490c      	ldr	r1, [pc, #48]	; (d4134 <setup+0x44>)
   d4104:	4b0c      	ldr	r3, [pc, #48]	; (d4138 <setup+0x48>)
   d4106:	4620      	mov	r0, r4
   d4108:	f000 fda0 	bl	d4c4c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j>
  //Use some kind of unique text for the connection
  client.connect("Particle_1");
   d410c:	490b      	ldr	r1, [pc, #44]	; (d413c <setup+0x4c>)
   d410e:	4620      	mov	r0, r4
   d4110:	f000 ff88 	bl	d5024 <_ZN4MQTT7connectEPKc>

  //Temperature and Humidity Sensor
  Serial.begin(9600);
   d4114:	f012 fd48 	bl	e6ba8 <_Z16_fetch_usbserialv>
   d4118:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d411c:	f012 fd38 	bl	e6b90 <_ZN9USBSerial5beginEl>
  sensor.begin();
   d4120:	4807      	ldr	r0, [pc, #28]	; (d4140 <setup+0x50>)
}
   d4122:	b004      	add	sp, #16
   d4124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  //Use some kind of unique text for the connection
  client.connect("Particle_1");

  //Temperature and Humidity Sensor
  Serial.begin(9600);
  sensor.begin();
   d4128:	f000 b8c6 	b.w	d42b8 <_ZN3DHT5beginEv>
   d412c:	2003ba90 	.word	0x2003ba90
   d4130:	000e817d 	.word	0x000e817d
   d4134:	000e7fcc 	.word	0x000e7fcc
   d4138:	000e80bd 	.word	0x000e80bd
   d413c:	000e806d 	.word	0x000e806d
   d4140:	2003c148 	.word	0x2003c148

000d4144 <loop>:
}

// loop() runs over and over again 
void loop()
{
   d4144:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  //get sensor data
  temp = String(sensor.getTempCelcius());
   d4146:	4817      	ldr	r0, [pc, #92]	; (d41a4 <loop+0x60>)
   d4148:	4c17      	ldr	r4, [pc, #92]	; (d41a8 <loop+0x64>)
   d414a:	f000 f99f 	bl	d448c <_ZN3DHT14getTempCelciusEv>
   d414e:	2106      	movs	r1, #6
   d4150:	4668      	mov	r0, sp
   d4152:	f012 f92f 	bl	e63b4 <_ZN6StringC1Efi>
   d4156:	4669      	mov	r1, sp
   d4158:	4620      	mov	r0, r4
   d415a:	f012 f912 	bl	e6382 <_ZN6StringaSEOS_>
   d415e:	4668      	mov	r0, sp
   d4160:	f012 f898 	bl	e6294 <_ZN6StringD1Ev>
  hum = String(sensor.getHumidity());
   d4164:	480f      	ldr	r0, [pc, #60]	; (d41a4 <loop+0x60>)
   d4166:	f000 f9a3 	bl	d44b0 <_ZN3DHT11getHumidityEv>
   d416a:	2106      	movs	r1, #6
   d416c:	4668      	mov	r0, sp
   d416e:	f012 f921 	bl	e63b4 <_ZN6StringC1Efi>
   d4172:	4669      	mov	r1, sp
   d4174:	480d      	ldr	r0, [pc, #52]	; (d41ac <loop+0x68>)
   d4176:	f012 f904 	bl	e6382 <_ZN6StringaSEOS_>
   d417a:	4668      	mov	r0, sp
   d417c:	f012 f88a 	bl	e6294 <_ZN6StringD1Ev>

  //AWS
  if (client.isConnected())
   d4180:	480b      	ldr	r0, [pc, #44]	; (d41b0 <loop+0x6c>)
   d4182:	f000 fb1e 	bl	d47c2 <_ZN4MQTT11isConnectedEv>
   d4186:	b138      	cbz	r0, d4198 <loop+0x54>
  {
    client.loop();
   d4188:	4809      	ldr	r0, [pc, #36]	; (d41b0 <loop+0x6c>)
   d418a:	f000 fc5b 	bl	d4a44 <_ZN4MQTT4loopEv>
    client.publish("sensor/temperature", temp);
   d418e:	6822      	ldr	r2, [r4, #0]
   d4190:	4908      	ldr	r1, [pc, #32]	; (d41b4 <loop+0x70>)
   d4192:	4807      	ldr	r0, [pc, #28]	; (d41b0 <loop+0x6c>)
   d4194:	f000 fbf4 	bl	d4980 <_ZN4MQTT7publishEPKcS1_>
  }

  //wait for 30 seconds
  delay(30 * 1000);
   d4198:	f247 5030 	movw	r0, #30000	; 0x7530
   d419c:	f011 fd00 	bl	e5ba0 <delay>
}
   d41a0:	b004      	add	sp, #16
   d41a2:	bd10      	pop	{r4, pc}
   d41a4:	2003c148 	.word	0x2003c148
   d41a8:	2003c138 	.word	0x2003c138
   d41ac:	2003c15c 	.word	0x2003c15c
   d41b0:	2003ba90 	.word	0x2003ba90
   d41b4:	000e8078 	.word	0x000e8078

000d41b8 <_GLOBAL__sub_I_client>:
   d41b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
const char awsClientKey[] = "-----BEGIN RSA PRIVATE KEY-----\r\nMIIEowIBAAKCAQEA2dS+/HsIGCN6d0tz+BZQ8eNj18OiyjNBzevQEdJ4tRKcfXgk\r\r******\r\nJnrlUw37EZMHI6EFF8AaVHRGshoOge8X9Xg8WJelwTkTZo38lZzU\r\n-----END RSA PRIVATE KEY-----";

void callback(char *topic, byte *payload, unsigned int length);

//Create MQTT client with AWS IoT-Core endpoint as host
MQTT client("******************.iot.eu-central-1.amazonaws.com", 8883, callback);
   d41ba:	4d16      	ldr	r5, [pc, #88]	; (d4214 <_GLOBAL__sub_I_client+0x5c>)
   d41bc:	4c16      	ldr	r4, [pc, #88]	; (d4218 <_GLOBAL__sub_I_client+0x60>)
  String message(p);
}

//Temperature and Humidity Sensor
DHT sensor(D2);
String temp;
   d41be:	4f17      	ldr	r7, [pc, #92]	; (d421c <_GLOBAL__sub_I_client+0x64>)
   d41c0:	4e17      	ldr	r6, [pc, #92]	; (d4220 <_GLOBAL__sub_I_client+0x68>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41c2:	f011 fae9 	bl	e5798 <HAL_Pin_Map>
const char awsClientKey[] = "-----BEGIN RSA PRIVATE KEY-----\r\nMIIEowIBAAKCAQEA2dS+/HsIGCN6d0tz+BZQ8eNj18OiyjNBzevQEdJ4tRKcfXgk\r\r******\r\nJnrlUw37EZMHI6EFF8AaVHRGshoOge8X9Xg8WJelwTkTZo38lZzU\r\n-----END RSA PRIVATE KEY-----";

void callback(char *topic, byte *payload, unsigned int length);

//Create MQTT client with AWS IoT-Core endpoint as host
MQTT client("******************.iot.eu-central-1.amazonaws.com", 8883, callback);
   d41c6:	4b17      	ldr	r3, [pc, #92]	; (d4224 <_GLOBAL__sub_I_client+0x6c>)
   d41c8:	4917      	ldr	r1, [pc, #92]	; (d4228 <_GLOBAL__sub_I_client+0x70>)
   d41ca:	f242 22b3 	movw	r2, #8883	; 0x22b3
   d41ce:	4628      	mov	r0, r5
   d41d0:	f000 fa20 	bl	d4614 <_ZN4MQTTC1EPctPFvS0_PhjE>
   d41d4:	4622      	mov	r2, r4
   d41d6:	4915      	ldr	r1, [pc, #84]	; (d422c <_GLOBAL__sub_I_client+0x74>)
   d41d8:	4628      	mov	r0, r5
  String message(p);
}

//Temperature and Humidity Sensor
DHT sensor(D2);
String temp;
   d41da:	4d15      	ldr	r5, [pc, #84]	; (d4230 <_GLOBAL__sub_I_client+0x78>)
const char awsClientKey[] = "-----BEGIN RSA PRIVATE KEY-----\r\nMIIEowIBAAKCAQEA2dS+/HsIGCN6d0tz+BZQ8eNj18OiyjNBzevQEdJ4tRKcfXgk\r\r******\r\nJnrlUw37EZMHI6EFF8AaVHRGshoOge8X9Xg8WJelwTkTZo38lZzU\r\n-----END RSA PRIVATE KEY-----";

void callback(char *topic, byte *payload, unsigned int length);

//Create MQTT client with AWS IoT-Core endpoint as host
MQTT client("******************.iot.eu-central-1.amazonaws.com", 8883, callback);
   d41dc:	f012 fe92 	bl	e6f04 <__aeabi_atexit>
  p[length] = NULL;
  String message(p);
}

//Temperature and Humidity Sensor
DHT sensor(D2);
   d41e0:	2206      	movs	r2, #6
   d41e2:	2102      	movs	r1, #2
   d41e4:	4813      	ldr	r0, [pc, #76]	; (d4234 <_GLOBAL__sub_I_client+0x7c>)
   d41e6:	f000 f861 	bl	d42ac <_ZN3DHTC1Ehh>
String temp;
   d41ea:	4639      	mov	r1, r7
   d41ec:	4628      	mov	r0, r5
   d41ee:	f012 f898 	bl	e6322 <_ZN6StringC1EPK19__FlashStringHelper>
   d41f2:	4628      	mov	r0, r5
String hum;
   d41f4:	4d10      	ldr	r5, [pc, #64]	; (d4238 <_GLOBAL__sub_I_client+0x80>)
  String message(p);
}

//Temperature and Humidity Sensor
DHT sensor(D2);
String temp;
   d41f6:	4622      	mov	r2, r4
   d41f8:	4631      	mov	r1, r6
   d41fa:	f012 fe83 	bl	e6f04 <__aeabi_atexit>
String hum;
   d41fe:	4639      	mov	r1, r7
   d4200:	4628      	mov	r0, r5
   d4202:	f012 f88e 	bl	e6322 <_ZN6StringC1EPK19__FlashStringHelper>
   d4206:	4622      	mov	r2, r4
   d4208:	4631      	mov	r1, r6
   d420a:	4628      	mov	r0, r5
    client.publish("sensor/temperature", temp);
  }

  //wait for 30 seconds
  delay(30 * 1000);
}
   d420c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
}

//Temperature and Humidity Sensor
DHT sensor(D2);
String temp;
String hum;
   d4210:	f012 be78 	b.w	e6f04 <__aeabi_atexit>
   d4214:	2003ba90 	.word	0x2003ba90
   d4218:	2003ba88 	.word	0x2003ba88
   d421c:	000e8b09 	.word	0x000e8b09
   d4220:	000e6295 	.word	0x000e6295
   d4224:	000d40bb 	.word	0x000d40bb
   d4228:	000e808b 	.word	0x000e808b
   d422c:	000d4a0f 	.word	0x000d4a0f
   d4230:	2003c138 	.word	0x2003c138
   d4234:	2003c148 	.word	0x2003c148
   d4238:	2003c15c 	.word	0x2003c15c

000d423c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d423c:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d423e:	6803      	ldr	r3, [r0, #0]
   d4240:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4242:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4244:	d904      	bls.n	d4250 <nrf_gpio_pin_port_decode+0x14>
   d4246:	4a07      	ldr	r2, [pc, #28]	; (d4264 <nrf_gpio_pin_port_decode+0x28>)
   d4248:	2100      	movs	r1, #0
   d424a:	200a      	movs	r0, #10
   d424c:	f011 fbe4 	bl	e5a18 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4250:	6823      	ldr	r3, [r4, #0]
   d4252:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4254:	bf83      	ittte	hi
   d4256:	f003 031f 	andhi.w	r3, r3, #31
   d425a:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d425c:	4802      	ldrhi	r0, [pc, #8]	; (d4268 <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d425e:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d4262:	bd10      	pop	{r4, pc}
   d4264:	000e5769 	.word	0x000e5769
   d4268:	50000300 	.word	0x50000300

000d426c <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d426c:	b507      	push	{r0, r1, r2, lr}
   d426e:	ab02      	add	r3, sp, #8
   d4270:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4274:	4618      	mov	r0, r3
   d4276:	f7ff ffe1 	bl	d423c <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d427a:	9a01      	ldr	r2, [sp, #4]
   d427c:	2301      	movs	r3, #1
   d427e:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4280:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}
   d4284:	b003      	add	sp, #12
   d4286:	f85d fb04 	ldr.w	pc, [sp], #4

000d428a <nrf_gpio_pin_read>:
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   d428a:	b507      	push	{r0, r1, r2, lr}
   d428c:	ab02      	add	r3, sp, #8
   d428e:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4292:	4618      	mov	r0, r3
   d4294:	f7ff ffd2 	bl	d423c <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4298:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510

__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d429c:	9801      	ldr	r0, [sp, #4]
   d429e:	fa23 f000 	lsr.w	r0, r3, r0
}
   d42a2:	f000 0001 	and.w	r0, r0, #1
   d42a6:	b003      	add	sp, #12
   d42a8:	f85d fb04 	ldr.w	pc, [sp], #4

000d42ac <_ZN3DHTC1Ehh>:
#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
	_count = count;
   d42ac:	7202      	strb	r2, [r0, #8]
	firstreading = true;
   d42ae:	2201      	movs	r2, #1

#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
   d42b0:	7181      	strb	r1, [r0, #6]
	_count = count;
	firstreading = true;
   d42b2:	7402      	strb	r2, [r0, #16]
}
   d42b4:	4770      	bx	lr
	...

000d42b8 <_ZN3DHT5beginEv>:

void DHT::begin(void)
{
   d42b8:	b510      	push	{r4, lr}
// set up the pins!
	pinMode(_pin, INPUT);
   d42ba:	2100      	movs	r1, #0
	_count = count;
	firstreading = true;
}

void DHT::begin(void)
{
   d42bc:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   d42be:	7980      	ldrb	r0, [r0, #6]
   d42c0:	f012 fdce 	bl	e6e60 <pinMode>

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d42c4:	4a07      	ldr	r2, [pc, #28]	; (d42e4 <_ZN3DHT5beginEv+0x2c>)
   d42c6:	79a3      	ldrb	r3, [r4, #6]
   d42c8:	6812      	ldr	r2, [r2, #0]
   d42ca:	011b      	lsls	r3, r3, #4
   d42cc:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d42ce:	5cd0      	ldrb	r0, [r2, r3]
   d42d0:	784b      	ldrb	r3, [r1, #1]
   d42d2:	f003 031f 	and.w	r3, r3, #31
   d42d6:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d42da:	f7ff ffc7 	bl	d426c <nrf_gpio_pin_set>
	pinSetFast(_pin);
	_lastreadtime = 0;
   d42de:	2300      	movs	r3, #0
   d42e0:	60e3      	str	r3, [r4, #12]
   d42e2:	bd10      	pop	{r4, pc}
   d42e4:	2003c16c 	.word	0x2003c16c

000d42e8 <_ZN3DHT4readEv>:
	return NAN;
}


boolean DHT::read(void)
{
   d42e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d42ec:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42ee:	f011 fa43 	bl	e5778 <HAL_Timer_Get_Milli_Seconds>
	u32 currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime)
   d42f2:	68e3      	ldr	r3, [r4, #12]
   d42f4:	4283      	cmp	r3, r0
	{
// ie there was a rollover
		_lastreadtime = 0;
   d42f6:	bf84      	itt	hi
   d42f8:	2300      	movhi	r3, #0
   d42fa:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d42fc:	7c23      	ldrb	r3, [r4, #16]
   d42fe:	b933      	cbnz	r3, d430e <_ZN3DHT4readEv+0x26>
   d4300:	68e3      	ldr	r3, [r4, #12]
   d4302:	1ac0      	subs	r0, r0, r3
   d4304:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4308:	d201      	bcs.n	d430e <_ZN3DHT4readEv+0x26>
		return true; // return last correct measurement
   d430a:	2001      	movs	r0, #1
   d430c:	e0a8      	b.n	d4460 <_ZN3DHT4readEv+0x178>
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d430e:	2500      	movs	r5, #0

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4310:	4e55      	ldr	r6, [pc, #340]	; (d4468 <_ZN3DHT4readEv+0x180>)
   d4312:	7425      	strb	r5, [r4, #16]
   d4314:	f011 fa30 	bl	e5778 <HAL_Timer_Get_Milli_Seconds>
   d4318:	79a3      	ldrb	r3, [r4, #6]
   d431a:	6832      	ldr	r2, [r6, #0]
/*
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();
   d431c:	60e0      	str	r0, [r4, #12]
   d431e:	011b      	lsls	r3, r3, #4
   d4320:	18d1      	adds	r1, r2, r3

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d4322:	7125      	strb	r5, [r4, #4]
   d4324:	70e5      	strb	r5, [r4, #3]
   d4326:	70a5      	strb	r5, [r4, #2]
   d4328:	7065      	strb	r5, [r4, #1]
   d432a:	7025      	strb	r5, [r4, #0]
    nrf_gpio_pin_set(nrf_pin);
   d432c:	5cd0      	ldrb	r0, [r2, r3]
   d432e:	784b      	ldrb	r3, [r1, #1]
   d4330:	f003 031f 	and.w	r3, r3, #31
   d4334:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4338:	f7ff ff98 	bl	d426c <nrf_gpio_pin_set>

// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
	delay(250);
   d433c:	20fa      	movs	r0, #250	; 0xfa
   d433e:	f011 fc2f 	bl	e5ba0 <delay>

// send begin signal
	pinMode(_pin, OUTPUT);
   d4342:	2101      	movs	r1, #1
   d4344:	79a0      	ldrb	r0, [r4, #6]
   d4346:	f012 fd8b 	bl	e6e60 <pinMode>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d434a:	79a3      	ldrb	r3, [r4, #6]
   d434c:	6832      	ldr	r2, [r6, #0]
   d434e:	011b      	lsls	r3, r3, #4
   d4350:	18d1      	adds	r1, r2, r3
   d4352:	5cd2      	ldrb	r2, [r2, r3]
   d4354:	784b      	ldrb	r3, [r1, #1]
   d4356:	a802      	add	r0, sp, #8
   d4358:	f003 031f 	and.w	r3, r3, #31
   d435c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4360:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4364:	f7ff ff6a 	bl	d423c <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4368:	9b01      	ldr	r3, [sp, #4]
   d436a:	f04f 0801 	mov.w	r8, #1
   d436e:	fa08 f303 	lsl.w	r3, r8, r3
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4372:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	pinResetFast(_pin);
	delay(20);
   d4376:	2014      	movs	r0, #20
   d4378:	f011 fc12 	bl	e5ba0 <delay>
	noInterrupts();
   d437c:	f011 fcba 	bl	e5cf4 <_Z12noInterruptsv>

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4380:	79a3      	ldrb	r3, [r4, #6]
   d4382:	6832      	ldr	r2, [r6, #0]
   d4384:	011b      	lsls	r3, r3, #4
   d4386:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d4388:	5cd0      	ldrb	r0, [r2, r3]
   d438a:	784b      	ldrb	r3, [r1, #1]
   d438c:	f003 031f 	and.w	r3, r3, #31
   d4390:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4394:	f7ff ff6a 	bl	d426c <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4398:	2028      	movs	r0, #40	; 0x28
   d439a:	f011 f9e5 	bl	e5768 <HAL_Delay_Microseconds>
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d439e:	4629      	mov	r1, r5
   d43a0:	79a0      	ldrb	r0, [r4, #6]
   d43a2:	f012 fd5d 	bl	e6e60 <pinMode>

boolean DHT::read(void)
{
	u8 laststate = HIGH;
	u8 counter = 0;
	u8 j = 0, i;
   d43a6:	462f      	mov	r7, r5
}


boolean DHT::read(void)
{
	u8 laststate = HIGH;
   d43a8:	f04f 0b00 	mov.w	fp, #0
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d43ac:	79a3      	ldrb	r3, [r4, #6]
   d43ae:	6832      	ldr	r2, [r6, #0]
   d43b0:	011b      	lsls	r3, r3, #4
   d43b2:	18d1      	adds	r1, r2, r3
   d43b4:	f812 a003 	ldrb.w	sl, [r2, r3]
   d43b8:	784b      	ldrb	r3, [r1, #1]
   d43ba:	f003 031f 	and.w	r3, r3, #31
   d43be:	ea43 1a4a 	orr.w	sl, r3, sl, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d43c2:	4650      	mov	r0, sl
   d43c4:	f7ff ff61 	bl	d428a <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d43c8:	4650      	mov	r0, sl
   d43ca:	f7ff ff5e 	bl	d428a <nrf_gpio_pin_read>
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (pinReadFast(_pin) == laststate) {
   d43ce:	4580      	cmp	r8, r0
   d43d0:	fa5f f98b 	uxtb.w	r9, fp
   d43d4:	d108      	bne.n	d43e8 <_ZN3DHT4readEv+0x100>
   d43d6:	2001      	movs	r0, #1
   d43d8:	f10b 0b01 	add.w	fp, fp, #1
   d43dc:	f011 f9c4 	bl	e5768 <HAL_Delay_Microseconds>
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   d43e0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   d43e4:	d1e2      	bne.n	d43ac <_ZN3DHT4readEv+0xc4>
   d43e6:	46d9      	mov	r9, fp
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d43e8:	79a3      	ldrb	r3, [r4, #6]
   d43ea:	6832      	ldr	r2, [r6, #0]
   d43ec:	011b      	lsls	r3, r3, #4
   d43ee:	18d1      	adds	r1, r2, r3
   d43f0:	f812 8003 	ldrb.w	r8, [r2, r3]
   d43f4:	784b      	ldrb	r3, [r1, #1]
   d43f6:	f003 031f 	and.w	r3, r3, #31
   d43fa:	ea43 1848 	orr.w	r8, r3, r8, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d43fe:	4640      	mov	r0, r8
   d4400:	f7ff ff43 	bl	d428a <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4404:	4640      	mov	r0, r8
   d4406:	f7ff ff40 	bl	d428a <nrf_gpio_pin_read>
				break;
			}
		}
		laststate = pinReadFast(_pin);

		if (counter == 255) break;
   d440a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
			delayMicroseconds(1);
			if (counter == 255) {
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d440e:	fa5f f880 	uxtb.w	r8, r0

		if (counter == 255) break;
   d4412:	d014      	beq.n	d443e <_ZN3DHT4readEv+0x156>

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
   d4414:	2d03      	cmp	r5, #3
   d4416:	d90e      	bls.n	d4436 <_ZN3DHT4readEv+0x14e>
   d4418:	07eb      	lsls	r3, r5, #31
   d441a:	d40c      	bmi.n	d4436 <_ZN3DHT4readEv+0x14e>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d441c:	08fa      	lsrs	r2, r7, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d441e:	3701      	adds	r7, #1
		if (counter == 255) break;

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4420:	5ca3      	ldrb	r3, [r4, r2]
   d4422:	005b      	lsls	r3, r3, #1
   d4424:	b2db      	uxtb	r3, r3
   d4426:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d4428:	7a21      	ldrb	r1, [r4, #8]
   d442a:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d442c:	bf3c      	itt	cc
   d442e:	f043 0301 	orrcc.w	r3, r3, #1
   d4432:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4434:	b2ff      	uxtb	r7, r7
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
   d4436:	3501      	adds	r5, #1
   d4438:	b2ed      	uxtb	r5, r5
   d443a:	2d55      	cmp	r5, #85	; 0x55
   d443c:	d1b4      	bne.n	d43a8 <_ZN3DHT4readEv+0xc0>
			j++;
		}

	}

	interrupts();
   d443e:	f011 fc5b 	bl	e5cf8 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// Verify that the data is correct
	if ((j >= 40) &&
   d4442:	2f27      	cmp	r7, #39	; 0x27
   d4444:	d90b      	bls.n	d445e <_ZN3DHT4readEv+0x176>
   d4446:	7822      	ldrb	r2, [r4, #0]
   d4448:	7863      	ldrb	r3, [r4, #1]
   d444a:	7921      	ldrb	r1, [r4, #4]
   d444c:	4413      	add	r3, r2
   d444e:	78a2      	ldrb	r2, [r4, #2]
   d4450:	4413      	add	r3, r2
   d4452:	78e2      	ldrb	r2, [r4, #3]
   d4454:	4413      	add	r3, r2
   d4456:	b2db      	uxtb	r3, r3
   d4458:	4299      	cmp	r1, r3
   d445a:	f43f af56 	beq.w	d430a <_ZN3DHT4readEv+0x22>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
		return true;
	}

	return false;
   d445e:	2000      	movs	r0, #0

}
   d4460:	b003      	add	sp, #12
   d4462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4466:	bf00      	nop
   d4468:	2003c16c 	.word	0x2003c16c

000d446c <_ZN3DHT15readTemperatureEv>:
	pinSetFast(_pin);
	_lastreadtime = 0;
}

float DHT::readTemperature()
{
   d446c:	b510      	push	{r4, lr}
   d446e:	4604      	mov	r4, r0
	float f;

	if (read())
   d4470:	f7ff ff3a 	bl	d42e8 <_ZN3DHT4readEv>
   d4474:	b128      	cbz	r0, d4482 <_ZN3DHT15readTemperatureEv+0x16>
	{
		f = data[2];
   d4476:	78a3      	ldrb	r3, [r4, #2]
   d4478:	ee00 3a10 	vmov	s0, r3
   d447c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
		return f;
   d4480:	bd10      	pop	{r4, pc}
	}
	return NAN;
   d4482:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4488 <_ZN3DHT15readTemperatureEv+0x1c>
}
   d4486:	bd10      	pop	{r4, pc}
   d4488:	7fc00000 	.word	0x7fc00000

000d448c <_ZN3DHT14getTempCelciusEv>:
	return readHumidity();
}

float DHT::getTempCelcius()
{
	return readTemperature();
   d448c:	f7ff bfee 	b.w	d446c <_ZN3DHT15readTemperatureEv>

000d4490 <_ZN3DHT12readHumidityEv>:
{
	return c * 9 / 5 + 32;
}

float DHT::readHumidity(void)
{
   d4490:	b510      	push	{r4, lr}
   d4492:	4604      	mov	r4, r0
	float f;

	if (read())
   d4494:	f7ff ff28 	bl	d42e8 <_ZN3DHT4readEv>
   d4498:	b128      	cbz	r0, d44a6 <_ZN3DHT12readHumidityEv+0x16>
	{
		f = data[0];
   d449a:	7823      	ldrb	r3, [r4, #0]
   d449c:	ee00 3a10 	vmov	s0, r3
   d44a0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
		return f;
   d44a4:	bd10      	pop	{r4, pc}
	}
	return NAN;
   d44a6:	ed9f 0a01 	vldr	s0, [pc, #4]	; d44ac <_ZN3DHT12readHumidityEv+0x1c>
}
   d44aa:	bd10      	pop	{r4, pc}
   d44ac:	7fc00000 	.word	0x7fc00000

000d44b0 <_ZN3DHT11getHumidityEv>:
	return NAN;
}

float DHT::getHumidity()
{
	return readHumidity();
   d44b0:	f7ff bfee 	b.w	d4490 <_ZN3DHT12readHumidityEv>

000d44b4 <_GLOBAL__sub_I__ZN3DHTC2Ehh>:
		return true;
	}

	return false;

}
   d44b4:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d44b6:	f011 f96f 	bl	e5798 <HAL_Pin_Map>
   d44ba:	4b01      	ldr	r3, [pc, #4]	; (d44c0 <_GLOBAL__sub_I__ZN3DHTC2Ehh+0xc>)
   d44bc:	6018      	str	r0, [r3, #0]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	2003c16c 	.word	0x2003c16c

000d44c4 <_ZN4MQTT9debug_TlsEPviPKciS2_>:
  return 0;
}

void MQTT::debug_Tls( void *ctx, int level,
                      const char *file, int line,
                      const char *str ) {
   d44c4:	4770      	bx	lr
	...

000d44c8 <_ZN4MQTT8send_TlsEPvPKhj>:

bool MQTT::available() {
    return tcpClient.available();
}

int MQTT::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
   d44c8:	b570      	push	{r4, r5, r6, lr}
   d44ca:	4605      	mov	r5, r0
   d44cc:	460c      	mov	r4, r1
   d44ce:	4616      	mov	r6, r2
  MQTT *sock = (MQTT *)ctx;

  if (!sock->tcpClient.connected()) {
   d44d0:	f011 ffd7 	bl	e6482 <_ZN9TCPClient9connectedEv>
   d44d4:	b158      	cbz	r0, d44ee <_ZN4MQTT8send_TlsEPvPKhj+0x26>
    return -1;
  }

  int ret = sock->tcpClient.write(buf, len);
   d44d6:	4621      	mov	r1, r4
   d44d8:	4632      	mov	r2, r6
   d44da:	4628      	mov	r0, r5
   d44dc:	f011 ffbb 	bl	e6456 <_ZN9TCPClient5writeEPKhj>
  if (ret == 0) {
   d44e0:	4604      	mov	r4, r0
   d44e2:	b138      	cbz	r0, d44f4 <_ZN4MQTT8send_TlsEPvPKhj+0x2c>
      return MBEDTLS_ERR_SSL_WANT_WRITE;
  }
  sock->tcpClient.flush();
   d44e4:	4628      	mov	r0, r5
   d44e6:	f011 ffcb 	bl	e6480 <_ZN9TCPClient5flushEv>
  return ret;
   d44ea:	4620      	mov	r0, r4
   d44ec:	bd70      	pop	{r4, r5, r6, pc}

int MQTT::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
  MQTT *sock = (MQTT *)ctx;

  if (!sock->tcpClient.connected()) {
    return -1;
   d44ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d44f2:	bd70      	pop	{r4, r5, r6, pc}
  }

  int ret = sock->tcpClient.write(buf, len);
  if (ret == 0) {
      return MBEDTLS_ERR_SSL_WANT_WRITE;
   d44f4:	4800      	ldr	r0, [pc, #0]	; (d44f8 <_ZN4MQTT8send_TlsEPvPKhj+0x30>)
  }
  sock->tcpClient.flush();
  return ret;
}
   d44f6:	bd70      	pop	{r4, r5, r6, pc}
   d44f8:	ffff9780 	.word	0xffff9780

000d44fc <_ZN4MQTT8recv_TlsEPvPhj>:

int MQTT::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
   d44fc:	b570      	push	{r4, r5, r6, lr}
   d44fe:	4604      	mov	r4, r0
   d4500:	460d      	mov	r5, r1
   d4502:	4616      	mov	r6, r2
  MQTT *sock = (MQTT *)ctx;
  if (!sock->tcpClient.connected()) {
   d4504:	f011 ffbd 	bl	e6482 <_ZN9TCPClient9connectedEv>
   d4508:	b158      	cbz	r0, d4522 <_ZN4MQTT8recv_TlsEPvPhj+0x26>
    return -1;
  }

  if (sock->tcpClient.available() == 0) {
   d450a:	4620      	mov	r0, r4
   d450c:	f012 f9a4 	bl	e6858 <_ZN9TCPClient9availableEv>
   d4510:	b128      	cbz	r0, d451e <_ZN4MQTT8recv_TlsEPvPhj+0x22>
    return MBEDTLS_ERR_SSL_WANT_READ;
  }

  int ret = sock->tcpClient.read(buf, len);
   d4512:	4632      	mov	r2, r6
   d4514:	4629      	mov	r1, r5
   d4516:	4620      	mov	r0, r4
   d4518:	f012 f861 	bl	e65de <_ZN9TCPClient4readEPhj>
  if (ret == 0) {
   d451c:	b918      	cbnz	r0, d4526 <_ZN4MQTT8recv_TlsEPvPhj+0x2a>
    return MBEDTLS_ERR_SSL_WANT_READ;
   d451e:	4802      	ldr	r0, [pc, #8]	; (d4528 <_ZN4MQTT8recv_TlsEPvPhj+0x2c>)
   d4520:	bd70      	pop	{r4, r5, r6, pc}
}

int MQTT::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
  MQTT *sock = (MQTT *)ctx;
  if (!sock->tcpClient.connected()) {
    return -1;
   d4522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  int ret = sock->tcpClient.read(buf, len);
  if (ret == 0) {
    return MBEDTLS_ERR_SSL_WANT_READ;
  }
  return ret;
}
   d4526:	bd70      	pop	{r4, r5, r6, pc}
   d4528:	ffff9700 	.word	0xffff9700

000d452c <_ZN4MQTT7rng_TlsEPvPhj>:

int MQTT::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
   d452c:	b570      	push	{r4, r5, r6, lr}
   d452e:	460e      	mov	r6, r1
   d4530:	4615      	mov	r5, r2
   d4532:	460c      	mov	r4, r1
  size_t len = len_;
  while (len>=4) {
   d4534:	1b2b      	subs	r3, r5, r4
   d4536:	4433      	add	r3, r6
   d4538:	2b03      	cmp	r3, #3
   d453a:	d904      	bls.n	d4546 <_ZN4MQTT7rng_TlsEPvPhj+0x1a>
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
   d453c:	f011 f90c 	bl	e5758 <HAL_RNG_GetRandomNumber>
   d4540:	f844 0b04 	str.w	r0, [r4], #4
  return ret;
}

int MQTT::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
  size_t len = len_;
  while (len>=4) {
   d4544:	e7f6      	b.n	d4534 <_ZN4MQTT7rng_TlsEPvPhj+0x8>
   d4546:	08ac      	lsrs	r4, r5, #2
   d4548:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   d454c:	4435      	add	r5, r6
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
      data += 4;
      len -= 4;
  }

  while (len-->0) {
   d454e:	42ac      	cmp	r4, r5
   d4550:	d004      	beq.n	d455c <_ZN4MQTT7rng_TlsEPvPhj+0x30>
      *data++ = HAL_RNG_GetRandomNumber();
   d4552:	f011 f901 	bl	e5758 <HAL_RNG_GetRandomNumber>
   d4556:	f804 0b01 	strb.w	r0, [r4], #1
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
      data += 4;
      len -= 4;
  }

  while (len-->0) {
   d455a:	e7f8      	b.n	d454e <_ZN4MQTT7rng_TlsEPvPhj+0x22>
      *data++ = HAL_RNG_GetRandomNumber();
  }
  return 0;
}
   d455c:	2000      	movs	r0, #0
   d455e:	bd70      	pop	{r4, r5, r6, pc}

000d4560 <_ZN4MQTT14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm>:
    return false;
  }
  return true;
}

int MQTT::veryfyCert_Tls(void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags) {
   d4560:	b500      	push	{lr}
   d4562:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
  char buf[1024];
  ((void) data);

  debug_tls("Verify requested for (Depth %d):\n", depth);
  mbedtls_x509_crt_info(buf, sizeof(buf) - 1, "", crt);
   d4566:	460b      	mov	r3, r1
   d4568:	4a05      	ldr	r2, [pc, #20]	; (d4580 <_ZN4MQTT14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm+0x20>)
   d456a:	f240 31ff 	movw	r1, #1023	; 0x3ff
   d456e:	4668      	mov	r0, sp
   d4570:	f00f fe94 	bl	e429c <mbedtls_x509_crt_info>
  } else {
    debug_tls(buf, sizeof(buf), "  ! ", *flags);
    debug_tls("%s\n", buf);
  }
  return 0;
}
   d4574:	2000      	movs	r0, #0
   d4576:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
   d457a:	f85d fb04 	ldr.w	pc, [sp], #4
   d457e:	bf00      	nop
   d4580:	000e8b09 	.word	0x000e8b09

000d4584 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4584:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4586:	6984      	ldr	r4, [r0, #24]
   d4588:	4b0a      	ldr	r3, [pc, #40]	; (d45b4 <_ZN9TCPClientD1Ev+0x30>)
   d458a:	6003      	str	r3, [r0, #0]
   d458c:	4605      	mov	r5, r0
   d458e:	b17c      	cbz	r4, d45b0 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4590:	6863      	ldr	r3, [r4, #4]
   d4592:	3b01      	subs	r3, #1
   d4594:	6063      	str	r3, [r4, #4]
   d4596:	b95b      	cbnz	r3, d45b0 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d4598:	6823      	ldr	r3, [r4, #0]
   d459a:	4620      	mov	r0, r4
   d459c:	689b      	ldr	r3, [r3, #8]
   d459e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d45a0:	68a3      	ldr	r3, [r4, #8]
   d45a2:	3b01      	subs	r3, #1
   d45a4:	60a3      	str	r3, [r4, #8]
   d45a6:	b91b      	cbnz	r3, d45b0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d45a8:	6823      	ldr	r3, [r4, #0]
   d45aa:	4620      	mov	r0, r4
   d45ac:	68db      	ldr	r3, [r3, #12]
   d45ae:	4798      	blx	r3
   d45b0:	4628      	mov	r0, r5
   d45b2:	bd38      	pop	{r3, r4, r5, pc}
   d45b4:	000eaac8 	.word	0x000eaac8

000d45b8 <_ZN9TCPClientD0Ev>:
   d45b8:	b510      	push	{r4, lr}
   d45ba:	4604      	mov	r4, r0
   d45bc:	f7ff ffe2 	bl	d4584 <_ZN9TCPClientD1Ev>
   d45c0:	4620      	mov	r0, r4
   d45c2:	211c      	movs	r1, #28
   d45c4:	f012 fca3 	bl	e6f0e <_ZdlPvj>
   d45c8:	4620      	mov	r0, r4
   d45ca:	bd10      	pop	{r4, pc}

000d45cc <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:
        disconnect();
        free(buffer);
    }
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d45cc:	b538      	push	{r3, r4, r5, lr}
   d45ce:	4604      	mov	r4, r0
   d45d0:	461d      	mov	r5, r3
    this->callback = callback;
   d45d2:	9b05      	ldr	r3, [sp, #20]
   d45d4:	6303      	str	r3, [r0, #48]	; 0x30
    this->tls = false;
   d45d6:	2000      	movs	r0, #0
   d45d8:	f884 06a5 	strb.w	r0, [r4, #1701]	; 0x6a5
    this->tlsConnected = false;
   d45dc:	f884 06a4 	strb.w	r0, [r4, #1700]	; 0x6a4
    this->qoscallback = NULL;
   d45e0:	6360      	str	r0, [r4, #52]	; 0x34
    if (ip != NULL)
   d45e2:	b102      	cbz	r2, d45e6 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1a>
        this->ip = ip;
   d45e4:	64a2      	str	r2, [r4, #72]	; 0x48
    if (domain != NULL)
   d45e6:	b119      	cbz	r1, d45f0 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x24>
        this->domain = domain;
   d45e8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d45ec:	f011 fed1 	bl	e6392 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d45f0:	9b04      	ldr	r3, [sp, #16]

    this->maxpacketsize = maxpacketsize;
    if (buffer != NULL)
   d45f2:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
   d45f4:	6523      	str	r3, [r4, #80]	; 0x50

    this->maxpacketsize = maxpacketsize;
   d45f6:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
   d45f8:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    this->maxpacketsize = maxpacketsize;
   d45fc:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d4600:	b108      	cbz	r0, d4606 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x3a>
      delete[] buffer;
   d4602:	f7ff fd50 	bl	d40a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d4606:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d460a:	f7ff fd48 	bl	d409e <_Znaj>
   d460e:	61e0      	str	r0, [r4, #28]
   d4610:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4614 <_ZN4MQTTC1EPctPFvS0_PhjE>:

MQTT::MQTT() {
    this->ip = NULL;
}

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d4614:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4618:	4604      	mov	r4, r0
   d461a:	2500      	movs	r5, #0
   d461c:	4617      	mov	r7, r2
   d461e:	4698      	mov	r8, r3
   d4620:	460e      	mov	r6, r1
   d4622:	f012 f9b5 	bl	e6990 <_ZN9TCPClientC1Ev>
   d4626:	61e5      	str	r5, [r4, #28]
   d4628:	490c      	ldr	r1, [pc, #48]	; (d465c <_ZN4MQTTC1EPctPFvS0_PhjE+0x48>)
   d462a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d462e:	f011 fe78 	bl	e6322 <_ZN6StringC1EPK19__FlashStringHelper>
   d4632:	2301      	movs	r3, #1
   d4634:	f884 36a6 	strb.w	r3, [r4, #1702]	; 0x6a6
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d4638:	23ff      	movs	r3, #255	; 0xff
   d463a:	9302      	str	r3, [sp, #8]
   d463c:	230f      	movs	r3, #15
   d463e:	9300      	str	r3, [sp, #0]
   d4640:	4620      	mov	r0, r4

MQTT::MQTT() {
    this->ip = NULL;
}

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d4642:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d4644:	f8cd 8004 	str.w	r8, [sp, #4]
   d4648:	463b      	mov	r3, r7
   d464a:	462a      	mov	r2, r5
   d464c:	4631      	mov	r1, r6
   d464e:	f7ff ffbd 	bl	d45cc <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
   d4652:	4620      	mov	r0, r4
   d4654:	b004      	add	sp, #16
   d4656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d465a:	bf00      	nop
   d465c:	000e8b09 	.word	0x000e8b09

000d4660 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d4660:	3302      	adds	r3, #2
    }
    tcpClient.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d4662:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d4664:	b29b      	uxth	r3, r3
   d4666:	460d      	mov	r5, r1
   d4668:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
   d466a:	f815 6b01 	ldrb.w	r6, [r5], #1
   d466e:	b2a4      	uxth	r4, r4
   d4670:	b13e      	cbz	r6, d4682 <_ZN4MQTT11writeStringEPKcPht+0x22>
   d4672:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
   d4676:	429f      	cmp	r7, r3
   d4678:	d903      	bls.n	d4682 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
   d467a:	1c5c      	adds	r4, r3, #1
   d467c:	54d6      	strb	r6, [r2, r3]
   d467e:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
   d4680:	e7f2      	b.n	d4668 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d4682:	1b19      	subs	r1, r3, r4
   d4684:	440a      	add	r2, r1
   d4686:	1221      	asrs	r1, r4, #8
   d4688:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d468c:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
   d4690:	4618      	mov	r0, r3
   d4692:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4694 <_ZN4MQTT8netWriteEPhi>:


uint16_t MQTT::netWrite(unsigned char *buff, int length) {
   d4694:	b510      	push	{r4, lr}
    debug_tls("netWrite!!\n");
    if (tls == false) {
   d4696:	f890 46a5 	ldrb.w	r4, [r0, #1701]	; 0x6a5
   d469a:	b914      	cbnz	r4, d46a2 <_ZN4MQTT8netWriteEPhi+0xe>
        return tcpClient.write(buff, length);
   d469c:	f011 fedb 	bl	e6456 <_ZN9TCPClient5writeEPKhj>
   d46a0:	e003      	b.n	d46aa <_ZN4MQTT8netWriteEPhi+0x16>
    } else {
        return mbedtls_ssl_write(&ssl, buff, length);
   d46a2:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
   d46a6:	f00e fc43 	bl	e2f30 <mbedtls_ssl_write>
   d46aa:	b280      	uxth	r0, r0
    }
}
   d46ac:	bd10      	pop	{r4, pc}

000d46ae <_ZN4MQTT5writeEhPht>:
        return netWrite(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d46ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d46b0:	4607      	mov	r7, r0
   d46b2:	468e      	mov	lr, r1
   d46b4:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d46b6:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   d46b8:	2400      	movs	r4, #0
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d46ba:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   d46bc:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d46c0:	4421      	add	r1, r4
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d46c2:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
   d46c4:	bf18      	it	ne
   d46c6:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
   d46ca:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d46cc:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
   d46d0:	b2e4      	uxtb	r4, r4
    } while(len > 0);
   d46d2:	2d00      	cmp	r5, #0
   d46d4:	d1f1      	bne.n	d46ba <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
   d46d6:	f1c4 0304 	rsb	r3, r4, #4
   d46da:	18d1      	adds	r1, r2, r3
   d46dc:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d46e0:	42a5      	cmp	r5, r4
   d46e2:	da06      	bge.n	d46f2 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
   d46e4:	1b2b      	subs	r3, r5, r4
   d46e6:	a801      	add	r0, sp, #4
   d46e8:	4413      	add	r3, r2
   d46ea:	5c28      	ldrb	r0, [r5, r0]
   d46ec:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
   d46ee:	3501      	adds	r5, #1
   d46f0:	e7f6      	b.n	d46e0 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = netWrite(buf+(4-llen), length+1+llen);
   d46f2:	1c72      	adds	r2, r6, #1
   d46f4:	4422      	add	r2, r4
   d46f6:	4638      	mov	r0, r7
   d46f8:	f7ff ffcc 	bl	d4694 <_ZN4MQTT8netWriteEPhi>
   d46fc:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d46fe:	f011 f83b 	bl	e5778 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d4702:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = netWrite(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
   d4704:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d4706:	19a0      	adds	r0, r4, r6
}
   d4708:	1b43      	subs	r3, r0, r5
   d470a:	4258      	negs	r0, r3
   d470c:	4158      	adcs	r0, r3
   d470e:	b003      	add	sp, #12
   d4710:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4712 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d4712:	b538      	push	{r3, r4, r5, lr}
    debug_tls("mqtt disconnected\n");

    buffer[0] = MQTTDISCONNECT;
   d4714:	69c3      	ldr	r3, [r0, #28]
   d4716:	22e0      	movs	r2, #224	; 0xe0
   d4718:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d471a:	69c3      	ldr	r3, [r0, #28]
   d471c:	2500      	movs	r5, #0
   d471e:	705d      	strb	r5, [r3, #1]
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d4720:	4604      	mov	r4, r0
    debug_tls("mqtt disconnected\n");

    buffer[0] = MQTTDISCONNECT;
    buffer[1] = 0;
    netWrite(buffer,2);
   d4722:	2202      	movs	r2, #2
   d4724:	69c1      	ldr	r1, [r0, #28]
   d4726:	f7ff ffb5 	bl	d4694 <_ZN4MQTT8netWriteEPhi>

    if (tls) {
   d472a:	f894 36a5 	ldrb.w	r3, [r4, #1701]	; 0x6a5
   d472e:	b1bb      	cbz	r3, d4760 <_ZN4MQTT10disconnectEv+0x4e>
        debug_tls("tls close\n");
        tlsConnected = false;
        tls = false;
        mbedtls_x509_crt_free(&cacert);
   d4730:	f204 400c 	addw	r0, r4, #1036	; 0x40c
    buffer[1] = 0;
    netWrite(buffer,2);

    if (tls) {
        debug_tls("tls close\n");
        tlsConnected = false;
   d4734:	f884 56a4 	strb.w	r5, [r4, #1700]	; 0x6a4
        tls = false;
   d4738:	f884 56a5 	strb.w	r5, [r4, #1701]	; 0x6a5
        mbedtls_x509_crt_free(&cacert);
   d473c:	f010 fbc1 	bl	e4ec2 <mbedtls_x509_crt_free>
        mbedtls_x509_crt_free(&clicert);
   d4740:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   d4744:	f010 fbbd 	bl	e4ec2 <mbedtls_x509_crt_free>
        mbedtls_pk_free(&pkey);
   d4748:	f204 6074 	addw	r0, r4, #1652	; 0x674
   d474c:	f006 fca5 	bl	db09a <mbedtls_pk_free>
        mbedtls_ssl_config_free (&conf);
   d4750:	f504 7063 	add.w	r0, r4, #908	; 0x38c
   d4754:	f00e fe0a 	bl	e336c <mbedtls_ssl_config_free>
        mbedtls_ssl_free (&ssl);
   d4758:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
   d475c:	f00e fd68 	bl	e3230 <mbedtls_ssl_free>
    }
    tcpClient.stop();
   d4760:	4620      	mov	r0, r4
   d4762:	f012 f861 	bl	e6828 <_ZN9TCPClient4stopEv>
   d4766:	f011 f807 	bl	e5778 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d476a:	6260      	str	r0, [r4, #36]	; 0x24
   d476c:	62a0      	str	r0, [r4, #40]	; 0x28
   d476e:	bd38      	pop	{r3, r4, r5, pc}

000d4770 <_ZN4MQTT8readByteEv>:
        disconnect();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d4770:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (tls == false) {
   d4772:	f890 36a5 	ldrb.w	r3, [r0, #1701]	; 0x6a5
        disconnect();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d4776:	4604      	mov	r4, r0
    if (tls == false) {
   d4778:	b94b      	cbnz	r3, d478e <_ZN4MQTT8readByteEv+0x1e>
        while(!tcpClient.available()) {}
   d477a:	4620      	mov	r0, r4
   d477c:	f012 f86c 	bl	e6858 <_ZN9TCPClient9availableEv>
   d4780:	2800      	cmp	r0, #0
   d4782:	d0fa      	beq.n	d477a <_ZN4MQTT8readByteEv+0xa>
        return tcpClient.read();
   d4784:	4620      	mov	r0, r4
   d4786:	f011 ff10 	bl	e65aa <_ZN9TCPClient4readEv>
   d478a:	b2c0      	uxtb	r0, r0
   d478c:	e017      	b.n	d47be <_ZN4MQTT8readByteEv+0x4e>
    } else {
        uint8_t val = 0;
        uint8_t buff;

        if (tlsConnected) {
   d478e:	f890 36a4 	ldrb.w	r3, [r0, #1700]	; 0x6a4
   d4792:	b19b      	cbz	r3, d47bc <_ZN4MQTT8readByteEv+0x4c>
            while (1) {
                int ret = mbedtls_ssl_read(&ssl, &buff, 1);
   d4794:	f500 7534 	add.w	r5, r0, #720	; 0x2d0
   d4798:	2201      	movs	r2, #1
   d479a:	f10d 0107 	add.w	r1, sp, #7
   d479e:	4628      	mov	r0, r5
   d47a0:	f00e fb3e 	bl	e2e20 <mbedtls_ssl_read>
                if (ret < 0) {
   d47a4:	2800      	cmp	r0, #0
   d47a6:	da06      	bge.n	d47b6 <_ZN4MQTT8readByteEv+0x46>
                      switch (ret) {
   d47a8:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
   d47ac:	d0f4      	beq.n	d4798 <_ZN4MQTT8readByteEv+0x28>
                        case MBEDTLS_ERR_SSL_WANT_READ:
                          break;
                      case MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE:
                      case MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY:
                      default:
                          disconnect();
   d47ae:	4620      	mov	r0, r4
   d47b0:	f7ff ffaf 	bl	d4712 <_ZN4MQTT10disconnectEv>
   d47b4:	e002      	b.n	d47bc <_ZN4MQTT8readByteEv+0x4c>
                          return -1;
                    }
                } else {
                    return buff;
   d47b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d47ba:	e000      	b.n	d47be <_ZN4MQTT8readByteEv+0x4e>
                }
            }
        } else {
            return -1;
   d47bc:	20ff      	movs	r0, #255	; 0xff
        }
    }
}
   d47be:	b003      	add	sp, #12
   d47c0:	bd30      	pop	{r4, r5, pc}

000d47c2 <_ZN4MQTT11isConnectedEv>:
        return mbedtls_ssl_write(&ssl, buff, length);
    }
}


bool MQTT::isConnected() {
   d47c2:	b510      	push	{r4, lr}
   d47c4:	4604      	mov	r4, r0
    bool rc = (int)tcpClient.connected();
   d47c6:	f011 fe5c 	bl	e6482 <_ZN9TCPClient9connectedEv>
    if (rc && tls)
   d47ca:	b130      	cbz	r0, d47da <_ZN4MQTT11isConnectedEv+0x18>
   d47cc:	f894 36a5 	ldrb.w	r3, [r4, #1701]	; 0x6a5
   d47d0:	b113      	cbz	r3, d47d8 <_ZN4MQTT11isConnectedEv+0x16>
        return tlsConnected;
   d47d2:	f894 06a4 	ldrb.w	r0, [r4, #1700]	; 0x6a4
   d47d6:	bd10      	pop	{r4, pc}
    return rc;
   d47d8:	2001      	movs	r0, #1
}
   d47da:	bd10      	pop	{r4, pc}

000d47dc <_ZN4MQTT10readPacketEPh>:
            return -1;
        }
    }
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d47dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d47e0:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d47e2:	69c4      	ldr	r4, [r0, #28]
            return -1;
        }
    }
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d47e4:	4689      	mov	r9, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   d47e6:	f7ff ffc3 	bl	d4770 <_ZN4MQTT8readByteEv>
   d47ea:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d47ec:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
   d47ee:	f04f 0a01 	mov.w	sl, #1
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d47f2:	f893 8000 	ldrb.w	r8, [r3]
    uint32_t multiplier = 1;
    uint16_t length = 0;
   d47f6:	2700      	movs	r7, #0
    }
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
   d47f8:	4656      	mov	r6, sl
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        // check connection for TLS or TCP disconnection.
        if (!isConnected()) return -1;
   d47fa:	4628      	mov	r0, r5
   d47fc:	f7ff ffe1 	bl	d47c2 <_ZN4MQTT11isConnectedEv>
   d4800:	2800      	cmp	r0, #0
   d4802:	d049      	beq.n	d4898 <_ZN4MQTT10readPacketEPh+0xbc>
        digit = readByte();
   d4804:	4628      	mov	r0, r5
   d4806:	f7ff ffb3 	bl	d4770 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d480a:	69eb      	ldr	r3, [r5, #28]
   d480c:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d480e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d4812:	fb13 f30a 	smulbb	r3, r3, sl
   d4816:	441f      	add	r7, r3

    do {
        // check connection for TLS or TCP disconnection.
        if (!isConnected()) return -1;
        digit = readByte();
        buffer[len++] = digit;
   d4818:	1c74      	adds	r4, r6, #1
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d481a:	0603      	lsls	r3, r0, #24

    do {
        // check connection for TLS or TCP disconnection.
        if (!isConnected()) return -1;
        digit = readByte();
        buffer[len++] = digit;
   d481c:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d481e:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d4820:	ea4f 1aca 	mov.w	sl, sl, lsl #7
    } while ((digit & 128) != 0);
   d4824:	d501      	bpl.n	d482a <_ZN4MQTT10readPacketEPh+0x4e>

    do {
        // check connection for TLS or TCP disconnection.
        if (!isConnected()) return -1;
        digit = readByte();
        buffer[len++] = digit;
   d4826:	4626      	mov	r6, r4
   d4828:	e7e7      	b.n	d47fa <_ZN4MQTT10readPacketEPh+0x1e>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;

    if (isPublish) {
   d482a:	f008 08f0 	and.w	r8, r8, #240	; 0xf0
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d482e:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d4830:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d4834:	f889 3000 	strb.w	r3, [r9]

    if (isPublish) {
   d4838:	d113      	bne.n	d4862 <_ZN4MQTT10readPacketEPh+0x86>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d483a:	4628      	mov	r0, r5
   d483c:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d4840:	f7ff ff96 	bl	d4770 <_ZN4MQTT8readByteEv>
   d4844:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
   d4848:	4628      	mov	r0, r5
   d484a:	1cf4      	adds	r4, r6, #3
   d484c:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d4850:	3602      	adds	r6, #2
   d4852:	f7ff ff8d 	bl	d4770 <_ZN4MQTT8readByteEv>
   d4856:	b2b6      	uxth	r6, r6
   d4858:	b2a4      	uxth	r4, r4
   d485a:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d485e:	2302      	movs	r3, #2
   d4860:	e000      	b.n	d4864 <_ZN4MQTT10readPacketEPh+0x88>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   d4862:	2300      	movs	r3, #0
   d4864:	1b1b      	subs	r3, r3, r4
   d4866:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d4868:	19a3      	adds	r3, r4, r6
   d486a:	b29b      	uxth	r3, r3
   d486c:	429f      	cmp	r7, r3
   d486e:	d90b      	bls.n	d4888 <_ZN4MQTT10readPacketEPh+0xac>
        digit = readByte();
   d4870:	4628      	mov	r0, r5
   d4872:	f7ff ff7d 	bl	d4770 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d4876:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d487a:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   d487c:	bf84      	itt	hi
   d487e:	69eb      	ldrhi	r3, [r5, #28]
   d4880:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   d4882:	3401      	adds	r4, #1
   d4884:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d4886:	e7ef      	b.n	d4868 <_ZN4MQTT10readPacketEPh+0x8c>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
   d4888:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
   d488c:	42a0      	cmp	r0, r4
   d488e:	bf2c      	ite	cs
   d4890:	4620      	movcs	r0, r4
   d4892:	2000      	movcc	r0, #0
   d4894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        // check connection for TLS or TCP disconnection.
        if (!isConnected()) return -1;
   d4898:	f64f 70ff 	movw	r0, #65535	; 0xffff
    if (len > this->maxpacketsize) {
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d489c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d48a0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d48a0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d48a4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d48a6:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d48aa:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d48ae:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d48b2:	4604      	mov	r4, r0
   d48b4:	468b      	mov	fp, r1
   d48b6:	4691      	mov	r9, r2
   d48b8:	469a      	mov	sl, r3
    if (isConnected()) {
   d48ba:	f7ff ff82 	bl	d47c2 <_ZN4MQTT11isConnectedEv>
   d48be:	2800      	cmp	r0, #0
   d48c0:	d04c      	beq.n	d495c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, sizeof(uint8_t) * this->maxpacketsize);
   d48c2:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d48c6:	69e0      	ldr	r0, [r4, #28]
   d48c8:	2100      	movs	r1, #0
   d48ca:	f013 faf2 	bl	e7eb2 <memset>

        length = writeString(topic, buffer, length);
   d48ce:	2305      	movs	r3, #5
   d48d0:	69e2      	ldr	r2, [r4, #28]
   d48d2:	4659      	mov	r1, fp
   d48d4:	4620      	mov	r0, r4
   d48d6:	f7ff fec3 	bl	d4660 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
   d48da:	1e6b      	subs	r3, r5, #1
   d48dc:	2b01      	cmp	r3, #1
   d48de:	d812      	bhi.n	d4906 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
   d48e0:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d48e2:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, sizeof(uint8_t) * this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
   d48e4:	3301      	adds	r3, #1
   d48e6:	b29b      	uxth	r3, r3
   d48e8:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d48ea:	121b      	asrs	r3, r3, #8
   d48ec:	5413      	strb	r3, [r2, r0]
   d48ee:	1c41      	adds	r1, r0, #1
   d48f0:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
   d48f2:	69e3      	ldr	r3, [r4, #28]
   d48f4:	8c22      	ldrh	r2, [r4, #32]
   d48f6:	545a      	strb	r2, [r3, r1]
   d48f8:	3002      	adds	r0, #2
   d48fa:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d48fc:	b11e      	cbz	r6, d4906 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
   d48fe:	8c23      	ldrh	r3, [r4, #32]
   d4900:	1c5a      	adds	r2, r3, #1
   d4902:	8422      	strh	r2, [r4, #32]
   d4904:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d4906:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d4908:	b291      	uxth	r1, r2
   d490a:	1883      	adds	r3, r0, r2
   d490c:	458a      	cmp	sl, r1
   d490e:	b29b      	uxth	r3, r3
   d4910:	d90a      	bls.n	d4928 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
   d4912:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d4916:	429e      	cmp	r6, r3
   d4918:	f102 0201 	add.w	r2, r2, #1
   d491c:	d904      	bls.n	d4928 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
            buffer[length++] = payload[i];
   d491e:	f819 6001 	ldrb.w	r6, [r9, r1]
   d4922:	69e1      	ldr	r1, [r4, #28]
   d4924:	54ce      	strb	r6, [r1, r3]
   d4926:	e7ef      	b.n	d4908 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
   d4928:	f1b8 0f00 	cmp.w	r8, #0
   d492c:	bf0c      	ite	eq
   d492e:	2130      	moveq	r1, #48	; 0x30
   d4930:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
   d4932:	b10f      	cbz	r7, d4938 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x98>
            header |= DUP_FLAG_ON_MASK;
   d4934:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
   d4938:	2d02      	cmp	r5, #2
   d493a:	d102      	bne.n	d4942 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
            header |= MQTTQOS2_HEADER_MASK;
   d493c:	f041 0104 	orr.w	r1, r1, #4
   d4940:	e003      	b.n	d494a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xaa>
        else if (qos == QOS1)
   d4942:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d4944:	bf08      	it	eq
   d4946:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d494a:	3b05      	subs	r3, #5
   d494c:	69e2      	ldr	r2, [r4, #28]
   d494e:	b29b      	uxth	r3, r3
   d4950:	4620      	mov	r0, r4
    }
    return false;
}
   d4952:	b001      	add	sp, #4
   d4954:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d4958:	f7ff bea9 	b.w	d46ae <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d495c:	b001      	add	sp, #4
   d495e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4962 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d4962:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d4964:	9c08      	ldr	r4, [sp, #32]
   d4966:	9403      	str	r4, [sp, #12]
   d4968:	2400      	movs	r4, #0
   d496a:	9402      	str	r4, [sp, #8]
   d496c:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d4970:	9401      	str	r4, [sp, #4]
   d4972:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4976:	9400      	str	r4, [sp, #0]
   d4978:	f7ff ff92 	bl	d48a0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d497c:	b004      	add	sp, #16
   d497e:	bd10      	pop	{r4, pc}

000d4980 <_ZN4MQTT7publishEPKcS1_>:
        }
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d4980:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4982:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d4984:	4610      	mov	r0, r2
        }
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d4986:	460e      	mov	r6, r1
   d4988:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d498a:	f013 fad9 	bl	e7f40 <strlen>
   d498e:	2300      	movs	r3, #0
   d4990:	9302      	str	r3, [sp, #8]
   d4992:	9301      	str	r3, [sp, #4]
   d4994:	9300      	str	r3, [sp, #0]
   d4996:	4622      	mov	r2, r4
   d4998:	4603      	mov	r3, r0
   d499a:	4631      	mov	r1, r6
   d499c:	4628      	mov	r0, r5
   d499e:	f7ff ffe0 	bl	d4962 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d49a2:	b004      	add	sp, #16
   d49a4:	bd70      	pop	{r4, r5, r6, pc}

000d49a6 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
   d49a6:	b538      	push	{r3, r4, r5, lr}
   d49a8:	4604      	mov	r4, r0
   d49aa:	460d      	mov	r5, r1
    if (isConnected()) {
   d49ac:	f7ff ff09 	bl	d47c2 <_ZN4MQTT11isConnectedEv>
   d49b0:	b190      	cbz	r0, d49d8 <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d49b2:	69e3      	ldr	r3, [r4, #28]
   d49b4:	2262      	movs	r2, #98	; 0x62
   d49b6:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d49b8:	69e3      	ldr	r3, [r4, #28]
   d49ba:	2202      	movs	r2, #2
   d49bc:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d49be:	69e3      	ldr	r3, [r4, #28]
   d49c0:	122a      	asrs	r2, r5, #8
   d49c2:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d49c4:	69e3      	ldr	r3, [r4, #28]
   d49c6:	70dd      	strb	r5, [r3, #3]
        return netWrite(buffer, length);
   d49c8:	2204      	movs	r2, #4
   d49ca:	69e1      	ldr	r1, [r4, #28]
   d49cc:	4620      	mov	r0, r4
   d49ce:	f7ff fe61 	bl	d4694 <_ZN4MQTT8netWriteEPhi>
   d49d2:	3000      	adds	r0, #0
   d49d4:	bf18      	it	ne
   d49d6:	2001      	movne	r0, #1
    }
    return false;
}
   d49d8:	bd38      	pop	{r3, r4, r5, pc}

000d49da <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
   d49da:	b538      	push	{r3, r4, r5, lr}
   d49dc:	4604      	mov	r4, r0
   d49de:	460d      	mov	r5, r1
    if (isConnected()) {
   d49e0:	f7ff feef 	bl	d47c2 <_ZN4MQTT11isConnectedEv>
   d49e4:	b190      	cbz	r0, d4a0c <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d49e6:	69e3      	ldr	r3, [r4, #28]
   d49e8:	2272      	movs	r2, #114	; 0x72
   d49ea:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d49ec:	69e3      	ldr	r3, [r4, #28]
   d49ee:	2202      	movs	r2, #2
   d49f0:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d49f2:	69e3      	ldr	r3, [r4, #28]
   d49f4:	122a      	asrs	r2, r5, #8
   d49f6:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d49f8:	69e3      	ldr	r3, [r4, #28]
   d49fa:	70dd      	strb	r5, [r3, #3]
        return netWrite(buffer, length);
   d49fc:	2204      	movs	r2, #4
   d49fe:	69e1      	ldr	r1, [r4, #28]
   d4a00:	4620      	mov	r0, r4
   d4a02:	f7ff fe47 	bl	d4694 <_ZN4MQTT8netWriteEPhi>
   d4a06:	3000      	adds	r0, #0
   d4a08:	bf18      	it	ne
   d4a0a:	2001      	movne	r0, #1
    }
    return false;
}
   d4a0c:	bd38      	pop	{r3, r4, r5, pc}

000d4a0e <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d4a0e:	b510      	push	{r4, lr}
   d4a10:	4604      	mov	r4, r0
    if (isConnected()) {
   d4a12:	f7ff fed6 	bl	d47c2 <_ZN4MQTT11isConnectedEv>
   d4a16:	b128      	cbz	r0, d4a24 <_ZN4MQTTD1Ev+0x16>
        disconnect();
   d4a18:	4620      	mov	r0, r4
   d4a1a:	f7ff fe7a 	bl	d4712 <_ZN4MQTT10disconnectEv>
        free(buffer);
   d4a1e:	69e0      	ldr	r0, [r4, #28]
   d4a20:	f011 f88e 	bl	e5b40 <free>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d4a24:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4a28:	f011 fc34 	bl	e6294 <_ZN6StringD1Ev>
   d4a2c:	4620      	mov	r0, r4
   d4a2e:	f7ff fda9 	bl	d4584 <_ZN9TCPClientD1Ev>
    if (isConnected()) {
        disconnect();
        free(buffer);
    }
}
   d4a32:	4620      	mov	r0, r4
   d4a34:	bd10      	pop	{r4, pc}

000d4a36 <_ZN4MQTT9availableEv>:
    if (buffer != NULL)
      delete[] buffer;
    buffer = new uint8_t[this->maxpacketsize];
}

bool MQTT::available() {
   d4a36:	b508      	push	{r3, lr}
    return tcpClient.available();
   d4a38:	f011 ff0e 	bl	e6858 <_ZN9TCPClient9availableEv>
}
   d4a3c:	3000      	adds	r0, #0
   d4a3e:	bf18      	it	ne
   d4a40:	2001      	movne	r0, #1
   d4a42:	bd08      	pop	{r3, pc}

000d4a44 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
   d4a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a48:	b083      	sub	sp, #12
   d4a4a:	af00      	add	r7, sp, #0
   d4a4c:	4604      	mov	r4, r0
    if (isConnected()) {
   d4a4e:	f7ff feb8 	bl	d47c2 <_ZN4MQTT11isConnectedEv>
   d4a52:	b1a0      	cbz	r0, d4a7e <_ZN4MQTT4loopEv+0x3a>
   d4a54:	f010 fe90 	bl	e5778 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d4a58:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d4a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4a5e:	4353      	muls	r3, r2
   d4a60:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d4a62:	1a82      	subs	r2, r0, r2
   d4a64:	429a      	cmp	r2, r3
   d4a66:	4605      	mov	r5, r0
   d4a68:	d803      	bhi.n	d4a72 <_ZN4MQTT4loopEv+0x2e>
   d4a6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d4a6c:	1a82      	subs	r2, r0, r2
   d4a6e:	4293      	cmp	r3, r2
   d4a70:	d217      	bcs.n	d4aa2 <_ZN4MQTT4loopEv+0x5e>
            if (pingOutstanding) {
   d4a72:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d4a76:	b12b      	cbz	r3, d4a84 <_ZN4MQTT4loopEv+0x40>
                disconnect();
   d4a78:	4620      	mov	r0, r4
   d4a7a:	f7ff fe4a 	bl	d4712 <_ZN4MQTT10disconnectEv>
                return false;
   d4a7e:	f04f 0900 	mov.w	r9, #0
   d4a82:	e0dd      	b.n	d4c40 <_ZN4MQTT4loopEv+0x1fc>
            } else {
                buffer[0] = MQTTPINGREQ;
   d4a84:	69e2      	ldr	r2, [r4, #28]
   d4a86:	21c0      	movs	r1, #192	; 0xc0
   d4a88:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d4a8a:	69e2      	ldr	r2, [r4, #28]
   d4a8c:	7053      	strb	r3, [r2, #1]
                netWrite(buffer,2);
   d4a8e:	69e1      	ldr	r1, [r4, #28]
   d4a90:	2202      	movs	r2, #2
   d4a92:	4620      	mov	r0, r4
   d4a94:	f7ff fdfe 	bl	d4694 <_ZN4MQTT8netWriteEPhi>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
   d4a98:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                netWrite(buffer,2);
                lastOutActivity = t;
   d4a9a:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
   d4a9c:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
   d4a9e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (available()) {
   d4aa2:	4620      	mov	r0, r4
   d4aa4:	f7ff ffc7 	bl	d4a36 <_ZN4MQTT9availableEv>
   d4aa8:	4681      	mov	r9, r0
   d4aaa:	2800      	cmp	r0, #0
   d4aac:	d0e7      	beq.n	d4a7e <_ZN4MQTT4loopEv+0x3a>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d4aae:	1df9      	adds	r1, r7, #7
   d4ab0:	4620      	mov	r0, r4
   d4ab2:	f7ff fe93 	bl	d47dc <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   d4ab6:	4602      	mov	r2, r0
   d4ab8:	2800      	cmp	r0, #0
   d4aba:	f000 80c1 	beq.w	d4c40 <_ZN4MQTT4loopEv+0x1fc>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
   d4abe:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
   d4ac0:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d4ac2:	7818      	ldrb	r0, [r3, #0]
   d4ac4:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d4ac8:	2930      	cmp	r1, #48	; 0x30
   d4aca:	d17d      	bne.n	d4bc8 <_ZN4MQTT4loopEv+0x184>
                    if (callback) {
   d4acc:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   d4ad0:	f1bb 0f00 	cmp.w	fp, #0
   d4ad4:	f000 80b4 	beq.w	d4c40 <_ZN4MQTT4loopEv+0x1fc>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   d4ad8:	f897 c007 	ldrb.w	ip, [r7, #7]
   d4adc:	eb03 000c 	add.w	r0, r3, ip
              							netWrite(buffer, 4);
              							lastOutActivity = t;
                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   d4ae0:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   d4ae2:	7881      	ldrb	r1, [r0, #2]
   d4ae4:	f890 e001 	ldrb.w	lr, [r0, #1]
   d4ae8:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
   d4aec:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
   d4af0:	f10e 0108 	add.w	r1, lr, #8
   d4af4:	f021 0107 	bic.w	r1, r1, #7
   d4af8:	ebad 0d01 	sub.w	sp, sp, r1
   d4afc:	4668      	mov	r0, sp
   d4afe:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
   d4b00:	b28e      	uxth	r6, r1
   d4b02:	45b6      	cmp	lr, r6
   d4b04:	d906      	bls.n	d4b14 <_ZN4MQTT4loopEv+0xd0>
                            topic[i] = buffer[llen+3+i];
   d4b06:	eb0c 0601 	add.w	r6, ip, r1
   d4b0a:	441e      	add	r6, r3
   d4b0c:	78f6      	ldrb	r6, [r6, #3]
   d4b0e:	5446      	strb	r6, [r0, r1]
   d4b10:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
   d4b12:	e7f5      	b.n	d4b00 <_ZN4MQTT4loopEv+0xbc>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
   d4b14:	2100      	movs	r1, #0
   d4b16:	f800 100e 	strb.w	r1, [r0, lr]
   d4b1a:	781e      	ldrb	r6, [r3, #0]
   d4b1c:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
   d4b20:	2e02      	cmp	r6, #2
   d4b22:	f10c 0103 	add.w	r1, ip, #3
   d4b26:	ebcc 0202 	rsb	r2, ip, r2
   d4b2a:	d11e      	bne.n	d4b6a <_ZN4MQTT4loopEv+0x126>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4b2c:	4471      	add	r1, lr
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d4b2e:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4b32:	f813 8001 	ldrb.w	r8, [r3, r1]
   d4b36:	4419      	add	r1, r3
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d4b38:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4b3a:	7849      	ldrb	r1, [r1, #1]
   d4b3c:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d4b40:	f10c 0105 	add.w	r1, ip, #5
   d4b44:	4471      	add	r1, lr
   d4b46:	4419      	add	r1, r3
   d4b48:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK;
   d4b4a:	69e3      	ldr	r3, [r4, #28]
   d4b4c:	2240      	movs	r2, #64	; 0x40
   d4b4e:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d4b50:	69e3      	ldr	r3, [r4, #28]
   d4b52:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d4b54:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4b56:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK;
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
   d4b5a:	ea4f 2228 	mov.w	r2, r8, asr #8
   d4b5e:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d4b60:	69e3      	ldr	r3, [r4, #28]
                            netWrite(buffer,4);
   d4b62:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK;
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
   d4b64:	f883 8003 	strb.w	r8, [r3, #3]
   d4b68:	e020      	b.n	d4bac <_ZN4MQTT4loopEv+0x168>
                            netWrite(buffer,4);
                            lastOutActivity = t;
                        } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d4b6a:	2e04      	cmp	r6, #4
   d4b6c:	d124      	bne.n	d4bb8 <_ZN4MQTT4loopEv+0x174>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4b6e:	4471      	add	r1, lr
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d4b70:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            netWrite(buffer,4);
                            lastOutActivity = t;
                        } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4b74:	f813 8001 	ldrb.w	r8, [r3, r1]
   d4b78:	4419      	add	r1, r3
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d4b7a:	3a05      	subs	r2, #5
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            netWrite(buffer,4);
                            lastOutActivity = t;
                        } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4b7c:	7849      	ldrb	r1, [r1, #1]
   d4b7e:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d4b82:	f10c 0105 	add.w	r1, ip, #5
   d4b86:	4471      	add	r1, lr
   d4b88:	4419      	add	r1, r3
   d4b8a:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
   d4b8c:	69e3      	ldr	r3, [r4, #28]
   d4b8e:	2250      	movs	r2, #80	; 0x50
   d4b90:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
   d4b92:	69e3      	ldr	r3, [r4, #28]
   d4b94:	2202      	movs	r2, #2
   d4b96:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
   d4b98:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            netWrite(buffer,4);
                            lastOutActivity = t;
                        } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4b9a:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
   d4b9e:	ea4f 2228 	mov.w	r2, r8, asr #8
   d4ba2:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
   d4ba4:	69e3      	ldr	r3, [r4, #28]
              							netWrite(buffer, 4);
   d4ba6:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
   d4ba8:	f883 8003 	strb.w	r8, [r3, #3]
              							netWrite(buffer, 4);
   d4bac:	69e1      	ldr	r1, [r4, #28]
   d4bae:	4620      	mov	r0, r4
   d4bb0:	f7ff fd70 	bl	d4694 <_ZN4MQTT8netWriteEPhi>
              							lastOutActivity = t;
   d4bb4:	6265      	str	r5, [r4, #36]	; 0x24
   d4bb6:	e005      	b.n	d4bc4 <_ZN4MQTT4loopEv+0x180>
                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   d4bb8:	3a03      	subs	r2, #3
   d4bba:	4471      	add	r1, lr
   d4bbc:	ebce 0202 	rsb	r2, lr, r2
   d4bc0:	4419      	add	r1, r3
   d4bc2:	47d8      	blx	fp
   d4bc4:	46d5      	mov	sp, sl
   d4bc6:	e03b      	b.n	d4c40 <_ZN4MQTT4loopEv+0x1fc>
                        }
                    }
                } else if (type == MQTTPUBREC) {
   d4bc8:	2950      	cmp	r1, #80	; 0x50
   d4bca:	d108      	bne.n	d4bde <_ZN4MQTT4loopEv+0x19a>
                  // check for the situation that QoS2 receive PUBREC, should return PUBREL
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishRelease(msgId);
   d4bcc:	7899      	ldrb	r1, [r3, #2]
   d4bce:	78db      	ldrb	r3, [r3, #3]
   d4bd0:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d4bd4:	b289      	uxth	r1, r1
   d4bd6:	4620      	mov	r0, r4
   d4bd8:	f7ff fee5 	bl	d49a6 <_ZN4MQTT14publishReleaseEt>
   d4bdc:	e030      	b.n	d4c40 <_ZN4MQTT4loopEv+0x1fc>
                } else if (type == MQTTPUBACK) {
   d4bde:	2940      	cmp	r1, #64	; 0x40
   d4be0:	d00c      	beq.n	d4bfc <_ZN4MQTT4loopEv+0x1b8>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
   d4be2:	2960      	cmp	r1, #96	; 0x60
   d4be4:	d108      	bne.n	d4bf8 <_ZN4MQTT4loopEv+0x1b4>
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishComplete(msgId);
   d4be6:	7899      	ldrb	r1, [r3, #2]
   d4be8:	78db      	ldrb	r3, [r3, #3]
   d4bea:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d4bee:	b289      	uxth	r1, r1
   d4bf0:	4620      	mov	r0, r4
   d4bf2:	f7ff fef2 	bl	d49da <_ZN4MQTT15publishCompleteEt>
   d4bf6:	e023      	b.n	d4c40 <_ZN4MQTT4loopEv+0x1fc>
                } else if (type == MQTTPUBCOMP) {
   d4bf8:	2970      	cmp	r1, #112	; 0x70
   d4bfa:	d10d      	bne.n	d4c18 <_ZN4MQTT4loopEv+0x1d4>
                    if (qoscallback) {
   d4bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d4bfe:	b1f9      	cbz	r1, d4c40 <_ZN4MQTT4loopEv+0x1fc>
                        // msgId only present for QOS==0
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d4c00:	2a04      	cmp	r2, #4
   d4c02:	d11d      	bne.n	d4c40 <_ZN4MQTT4loopEv+0x1fc>
   d4c04:	f010 0f06 	tst.w	r0, #6
   d4c08:	d11a      	bne.n	d4c40 <_ZN4MQTT4loopEv+0x1fc>
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
   d4c0a:	7898      	ldrb	r0, [r3, #2]
   d4c0c:	78db      	ldrb	r3, [r3, #3]
   d4c0e:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   d4c12:	b280      	uxth	r0, r0
   d4c14:	4788      	blx	r1
   d4c16:	e013      	b.n	d4c40 <_ZN4MQTT4loopEv+0x1fc>
                        }
                    }
                } else if (type == MQTTSUBACK) {
   d4c18:	2990      	cmp	r1, #144	; 0x90
   d4c1a:	d011      	beq.n	d4c40 <_ZN4MQTT4loopEv+0x1fc>
                    // if something...
                } else if (type == MQTTPINGREQ) {
   d4c1c:	29c0      	cmp	r1, #192	; 0xc0
   d4c1e:	d10a      	bne.n	d4c36 <_ZN4MQTT4loopEv+0x1f2>
                    buffer[0] = MQTTPINGRESP;
   d4c20:	22d0      	movs	r2, #208	; 0xd0
   d4c22:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d4c24:	69e3      	ldr	r3, [r4, #28]
   d4c26:	2200      	movs	r2, #0
   d4c28:	705a      	strb	r2, [r3, #1]
                    netWrite(buffer,2);
   d4c2a:	69e1      	ldr	r1, [r4, #28]
   d4c2c:	2202      	movs	r2, #2
   d4c2e:	4620      	mov	r0, r4
   d4c30:	f7ff fd30 	bl	d4694 <_ZN4MQTT8netWriteEPhi>
   d4c34:	e004      	b.n	d4c40 <_ZN4MQTT4loopEv+0x1fc>
                } else if (type == MQTTPINGRESP) {
   d4c36:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
   d4c38:	bf04      	itt	eq
   d4c3a:	2300      	moveq	r3, #0
   d4c3c:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
            return true;
        }
    }
    return false;
}
   d4c40:	4648      	mov	r0, r9
   d4c42:	370c      	adds	r7, #12
   d4c44:	46bd      	mov	sp, r7
   d4c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d4c4c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j>:
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
   d4c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c50:	4605      	mov	r5, r0
   d4c52:	b085      	sub	sp, #20
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
   d4c54:	f500 7463 	add.w	r4, r0, #908	; 0x38c
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
   d4c58:	4699      	mov	r9, r3
    int ret;
    tls = true;
   d4c5a:	2301      	movs	r3, #1
   d4c5c:	f880 36a5 	strb.w	r3, [r0, #1701]	; 0x6a5

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
   d4c60:	f505 7634 	add.w	r6, r5, #720	; 0x2d0
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
   d4c64:	4620      	mov	r0, r4
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
   d4c66:	4693      	mov	fp, r2
   d4c68:	9103      	str	r1, [sp, #12]
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
   d4c6a:	f205 4a0c 	addw	sl, r5, #1036	; 0x40c
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
   d4c6e:	f00e fb2e 	bl	e32ce <mbedtls_ssl_config_init>
    mbedtls_ssl_init(&ssl);
   d4c72:	4630      	mov	r0, r6
   d4c74:	f00d fffe 	bl	e2c74 <mbedtls_ssl_init>
    mbedtls_x509_crt_init(&cacert);
    mbedtls_x509_crt_init(&clicert);
   d4c78:	f505 67a8 	add.w	r7, r5, #1344	; 0x540
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
   d4c7c:	4650      	mov	r0, sl
   d4c7e:	f010 f91b 	bl	e4eb8 <mbedtls_x509_crt_init>
    mbedtls_x509_crt_init(&clicert);
    mbedtls_pk_init(&pkey);
   d4c82:	f205 6874 	addw	r8, r5, #1652	; 0x674
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
    mbedtls_x509_crt_init(&clicert);
   d4c86:	4638      	mov	r0, r7
   d4c88:	f010 f916 	bl	e4eb8 <mbedtls_x509_crt_init>
    mbedtls_pk_init(&pkey);
   d4c8c:	4640      	mov	r0, r8
   d4c8e:	f006 fa00 	bl	db092 <mbedtls_pk_init>

    mbedtls_ssl_conf_dbg(&conf, &MQTT::debug_Tls, nullptr);
   d4c92:	2200      	movs	r2, #0
   d4c94:	4935      	ldr	r1, [pc, #212]	; (d4d6c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x120>)
   d4c96:	4620      	mov	r0, r4
   d4c98:	f00d fffd 	bl	e2c96 <mbedtls_ssl_conf_dbg>
    #if defined(MBEDTLS_DEBUG_C)
      mbedtls_debug_set_threshold(DEBUG_TLS_CORE_LEVEL);
    #endif

    if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
   d4c9c:	465a      	mov	r2, fp
   d4c9e:	9903      	ldr	r1, [sp, #12]
   d4ca0:	4650      	mov	r0, sl
   d4ca2:	f010 fcbf 	bl	e5624 <mbedtls_x509_crt_parse>
   d4ca6:	2800      	cmp	r0, #0
   d4ca8:	db5d      	blt.n	d4d66 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
      debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }

    if (clientCertPem != NULL && clientCertPemSize > 0) {
   d4caa:	f1b9 0f00 	cmp.w	r9, #0
   d4cae:	d102      	bne.n	d4cb6 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x6a>
        debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
   d4cb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d4cb2:	b95b      	cbnz	r3, d4ccc <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x80>
   d4cb4:	e00c      	b.n	d4cd0 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x84>
    if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
      debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }

    if (clientCertPem != NULL && clientCertPemSize > 0) {
   d4cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d4cb8:	2b00      	cmp	r3, #0
   d4cba:	d0f9      	beq.n	d4cb0 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x64>
      if ((ret = mbedtls_x509_crt_parse(&clicert, (const unsigned char *)clientCertPem, clientCertPemSize)) < 0) {
   d4cbc:	461a      	mov	r2, r3
   d4cbe:	4649      	mov	r1, r9
   d4cc0:	4638      	mov	r0, r7
   d4cc2:	f010 fcaf 	bl	e5624 <mbedtls_x509_crt_parse>
   d4cc6:	2800      	cmp	r0, #0
   d4cc8:	daf2      	bge.n	d4cb0 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x64>
   d4cca:	e04c      	b.n	d4d66 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
        debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
   d4ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d4cce:	b94b      	cbnz	r3, d4ce4 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x98>
        debug_tls(" tlsClientKey mbedtls_pk_parse_key error : %d\n", ret);
        return ret;
      }
    }

    if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
   d4cd0:	2300      	movs	r3, #0
   d4cd2:	461a      	mov	r2, r3
   d4cd4:	4619      	mov	r1, r3
   d4cd6:	4620      	mov	r0, r4
   d4cd8:	f00e fafe 	bl	e32d8 <mbedtls_ssl_config_defaults>
   d4cdc:	4683      	mov	fp, r0
   d4cde:	2800      	cmp	r0, #0
   d4ce0:	d141      	bne.n	d4d66 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
   d4ce2:	e009      	b.n	d4cf8 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xac>
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
      if ((ret = mbedtls_pk_parse_key(&pkey, (const unsigned char *)clientKeyPem, clientKeyPemSize, NULL, 0)) != 0) {
   d4ce4:	2300      	movs	r3, #0
   d4ce6:	9300      	str	r3, [sp, #0]
   d4ce8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d4cea:	990f      	ldr	r1, [sp, #60]	; 0x3c
   d4cec:	4640      	mov	r0, r8
   d4cee:	f007 fb5d 	bl	dc3ac <mbedtls_pk_parse_key>
   d4cf2:	2800      	cmp	r0, #0
   d4cf4:	d0ec      	beq.n	d4cd0 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x84>
   d4cf6:	e036      	b.n	d4d66 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>

    if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
                   MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT)) != 0) {
      return ret;
    }
    mbedtls_ssl_conf_min_version(&conf, MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3);
   d4cf8:	2203      	movs	r2, #3
   d4cfa:	4611      	mov	r1, r2
   d4cfc:	4620      	mov	r0, r4
   d4cfe:	f00e f819 	bl	e2d34 <mbedtls_ssl_conf_min_version>
    mbedtls_ssl_conf_verify(&conf, &MQTT::veryfyCert_Tls, NULL);
   d4d02:	465a      	mov	r2, fp
   d4d04:	491a      	ldr	r1, [pc, #104]	; (d4d70 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x124>)
   d4d06:	4620      	mov	r0, r4
   d4d08:	f00d ffbf 	bl	e2c8a <mbedtls_ssl_conf_verify>

    // if server certificates is not valid, connection will success. check certificates on verify() function.
    mbedtls_ssl_conf_authmode(&conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
   d4d0c:	2101      	movs	r1, #1
   d4d0e:	4620      	mov	r0, r4
   d4d10:	f00d ffb4 	bl	e2c7c <mbedtls_ssl_conf_authmode>
    mbedtls_ssl_conf_rng(&conf, &MQTT::rng_Tls, nullptr);
   d4d14:	465a      	mov	r2, fp
   d4d16:	4917      	ldr	r1, [pc, #92]	; (d4d74 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x128>)
   d4d18:	4620      	mov	r0, r4
   d4d1a:	f00d ffb9 	bl	e2c90 <mbedtls_ssl_conf_rng>
    mbedtls_ssl_conf_ca_chain(&conf, &cacert, nullptr);
   d4d1e:	465a      	mov	r2, fp
   d4d20:	4651      	mov	r1, sl
   d4d22:	4620      	mov	r0, r4
   d4d24:	f00d ffcc 	bl	e2cc0 <mbedtls_ssl_conf_ca_chain>

    if (clientCertPem != NULL && clientKeyPem != NULL) {
   d4d28:	f1b9 0f00 	cmp.w	r9, #0
   d4d2c:	d006      	beq.n	d4d3c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xf0>
   d4d2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d4d30:	b123      	cbz	r3, d4d3c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xf0>
      mbedtls_ssl_conf_own_cert(&conf, &clicert, &pkey);
   d4d32:	4642      	mov	r2, r8
   d4d34:	4639      	mov	r1, r7
   d4d36:	4620      	mov	r0, r4
   d4d38:	f00d ffbf 	bl	e2cba <mbedtls_ssl_conf_own_cert>
    }

    if((ret = mbedtls_ssl_setup(&ssl, &conf)) != 0) {
   d4d3c:	4621      	mov	r1, r4
   d4d3e:	4630      	mov	r0, r6
   d4d40:	f00e fa36 	bl	e31b0 <mbedtls_ssl_setup>
   d4d44:	4604      	mov	r4, r0
   d4d46:	b968      	cbnz	r0, d4d64 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x118>
      return ret;
    }

    mbedtls_ssl_set_timer_cb(&ssl, &timer, mbedtls_timing_set_delay, mbedtls_timing_get_delay);
   d4d48:	4b0b      	ldr	r3, [pc, #44]	; (d4d78 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x12c>)
   d4d4a:	4a0c      	ldr	r2, [pc, #48]	; (d4d7c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x130>)
   d4d4c:	f205 617c 	addw	r1, r5, #1660	; 0x67c
   d4d50:	4630      	mov	r0, r6
   d4d52:	f00d ffa9 	bl	e2ca8 <mbedtls_ssl_set_timer_cb>
    mbedtls_ssl_set_bio(&ssl, this, &MQTT::send_Tls,  &MQTT::recv_Tls, nullptr);
   d4d56:	9400      	str	r4, [sp, #0]
   d4d58:	4b09      	ldr	r3, [pc, #36]	; (d4d80 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x134>)
   d4d5a:	4a0a      	ldr	r2, [pc, #40]	; (d4d84 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x138>)
   d4d5c:	4629      	mov	r1, r5
   d4d5e:	4630      	mov	r0, r6
   d4d60:	f00d ff9c 	bl	e2c9c <mbedtls_ssl_set_bio>
   d4d64:	4620      	mov	r0, r4
    return 0;
}
   d4d66:	b005      	add	sp, #20
   d4d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4d6c:	000d44c5 	.word	0x000d44c5
   d4d70:	000d4561 	.word	0x000d4561
   d4d74:	000d452d 	.word	0x000d452d
   d4d78:	000e382b 	.word	0x000e382b
   d4d7c:	000e381d 	.word	0x000e381d
   d4d80:	000d44fd 	.word	0x000d44fd
   d4d84:	000d44c9 	.word	0x000d44c9

000d4d88 <_ZN4MQTT6verifyEv>:
      return 0;
  }
  return ret;
}

bool MQTT::verify() {
   d4d88:	b500      	push	{lr}
  int ret;
  if ((ret = mbedtls_ssl_get_verify_result(&ssl)) != 0 ) {
   d4d8a:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
      return 0;
  }
  return ret;
}

bool MQTT::verify() {
   d4d8e:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
  int ret;
  if ((ret = mbedtls_ssl_get_verify_result(&ssl)) != 0 ) {
   d4d92:	f00d ffd4 	bl	e2d3e <mbedtls_ssl_get_verify_result>
   d4d96:	4603      	mov	r3, r0
   d4d98:	b138      	cbz	r0, d4daa <_ZN4MQTT6verifyEv+0x22>
    char vrfy_buf[512];
    mbedtls_x509_crt_verify_info( vrfy_buf, sizeof( vrfy_buf ), "  ! ", ret );
   d4d9a:	4a06      	ldr	r2, [pc, #24]	; (d4db4 <_ZN4MQTT6verifyEv+0x2c>)
   d4d9c:	f44f 7100 	mov.w	r1, #512	; 0x200
   d4da0:	4668      	mov	r0, sp
   d4da2:	f00f fdb3 	bl	e490c <mbedtls_x509_crt_verify_info>
    debug_tls("%s\n", vrfy_buf);
    return false;
   d4da6:	2000      	movs	r0, #0
   d4da8:	e000      	b.n	d4dac <_ZN4MQTT6verifyEv+0x24>
  }
  return true;
   d4daa:	2001      	movs	r0, #1
}
   d4dac:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
   d4db0:	f85d fb04 	ldr.w	pc, [sp], #4
   d4db4:	000e824c 	.word	0x000e824c

000d4db8 <_ZN4MQTT12handShakeTlsEv>:
    mbedtls_ssl_set_bio(&ssl, this, &MQTT::send_Tls,  &MQTT::recv_Tls, nullptr);
    return 0;
}


int MQTT::handShakeTls() {
   d4db8:	b570      	push	{r4, r5, r6, lr}
   d4dba:	4604      	mov	r4, r0
  int ret;
  debug_tls("hand shake start\n");
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
          ret = mbedtls_ssl_handshake_client_step(&ssl);
   d4dbc:	f500 7634 	add.w	r6, r0, #720	; 0x2d0

int MQTT::handShakeTls() {
  int ret;
  debug_tls("hand shake start\n");
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
   d4dc0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
   d4dc4:	2b10      	cmp	r3, #16
   d4dc6:	d005      	beq.n	d4dd4 <_ZN4MQTT12handShakeTlsEv+0x1c>
          ret = mbedtls_ssl_handshake_client_step(&ssl);
   d4dc8:	4630      	mov	r0, r6
   d4dca:	f00c f86b 	bl	e0ea4 <mbedtls_ssl_handshake_client_step>
          if (ret != 0)
   d4dce:	4605      	mov	r5, r0
   d4dd0:	2800      	cmp	r0, #0
   d4dd2:	d0f5      	beq.n	d4dc0 <_ZN4MQTT12handShakeTlsEv+0x8>
              break;
      }
  } while (ret == MBEDTLS_ERR_SSL_WANT_READ || ret == MBEDTLS_ERR_SSL_WANT_WRITE);
   d4dd4:	f515 4fd2 	cmn.w	r5, #26880	; 0x6900
   d4dd8:	d0f2      	beq.n	d4dc0 <_ZN4MQTT12handShakeTlsEv+0x8>
   d4dda:	f515 4fd1 	cmn.w	r5, #26752	; 0x6880
   d4dde:	d0ef      	beq.n	d4dc0 <_ZN4MQTT12handShakeTlsEv+0x8>

  // clean ca cert/crt/pkey for memory limitation
  mbedtls_x509_crt_free(&cacert);
   d4de0:	f204 400c 	addw	r0, r4, #1036	; 0x40c
   d4de4:	f010 f86d 	bl	e4ec2 <mbedtls_x509_crt_free>
  mbedtls_x509_crt_free(&clicert);
   d4de8:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   d4dec:	f010 f869 	bl	e4ec2 <mbedtls_x509_crt_free>
  mbedtls_pk_free(&pkey);
   d4df0:	f204 6074 	addw	r0, r4, #1652	; 0x674
   d4df4:	f006 f951 	bl	db09a <mbedtls_pk_free>

  debug_tls("%s, ret = %d\n", "handshake done", ret);
  if (ssl.state == MBEDTLS_SSL_HANDSHAKE_OVER) {
   d4df8:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
   d4dfc:	2b10      	cmp	r3, #16
   d4dfe:	d109      	bne.n	d4e14 <_ZN4MQTT12handShakeTlsEv+0x5c>
      if (enableVerify && !verify())
   d4e00:	f894 36a6 	ldrb.w	r3, [r4, #1702]	; 0x6a6
   d4e04:	b143      	cbz	r3, d4e18 <_ZN4MQTT12handShakeTlsEv+0x60>
   d4e06:	4620      	mov	r0, r4
   d4e08:	f7ff ffbe 	bl	d4d88 <_ZN4MQTT6verifyEv>
   d4e0c:	b920      	cbnz	r0, d4e18 <_ZN4MQTT12handShakeTlsEv+0x60>
        return -1;
   d4e0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4e12:	bd70      	pop	{r4, r5, r6, pc}
   d4e14:	4628      	mov	r0, r5
   d4e16:	bd70      	pop	{r4, r5, r6, pc}
      tlsConnected = true;
   d4e18:	2301      	movs	r3, #1
   d4e1a:	f884 36a4 	strb.w	r3, [r4, #1700]	; 0x6a4
      debug_tls("tls connected\n");
      return 0;
   d4e1e:	2000      	movs	r0, #0
  }
  return ret;
}
   d4e20:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4e24 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage) {
    return connect(id,NULL,NULL,willTopic,willQos,willRetain,willMessage,true,MQTT_V311);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d4e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4e28:	b08d      	sub	sp, #52	; 0x34
   d4e2a:	4604      	mov	r4, r0
   d4e2c:	4689      	mov	r9, r1
   d4e2e:	4617      	mov	r7, r2
   d4e30:	461e      	mov	r6, r3
   d4e32:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
    if (!isConnected()) {
   d4e36:	f7ff fcc4 	bl	d47c2 <_ZN4MQTT11isConnectedEv>
   d4e3a:	4605      	mov	r5, r0
   d4e3c:	2800      	cmp	r0, #0
   d4e3e:	f040 80e7 	bne.w	d5010 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ec>
        int result = 0;
        if (ip == NULL) {
   d4e42:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4e44:	2900      	cmp	r1, #0
   d4e46:	d138      	bne.n	d4eba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
            result = tcpClient.connect(this->domain.c_str(), this->port);
   d4e48:	4603      	mov	r3, r0
   d4e4a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d4e4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d4e50:	4620      	mov	r0, r4
   d4e52:	f011 fbed 	bl	e6630 <_ZN9TCPClient7connectEPKctm>
            if (tls) {
   d4e56:	f894 36a5 	ldrb.w	r3, [r4, #1701]	; 0x6a5
   d4e5a:	2b00      	cmp	r3, #0
   d4e5c:	d050      	beq.n	d4f00 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
                mbedtls_ssl_set_hostname(&ssl, domain);
   d4e5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d4e60:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
   d4e64:	f00d ff30 	bl	e2cc8 <mbedtls_ssl_set_hostname>
                result = (0 == this->handShakeTls() ? 1 : 0);
   d4e68:	4620      	mov	r0, r4
   d4e6a:	f7ff ffa5 	bl	d4db8 <_ZN4MQTT12handShakeTlsEv>
   d4e6e:	2800      	cmp	r0, #0
   d4e70:	f040 80ca 	bne.w	d5008 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
                result = (0 == this->handShakeTls() ? 1 : 0);
            }
        }

        if (result) {
            nextMsgId = 1;
   d4e74:	2301      	movs	r3, #1
   d4e76:	8423      	strh	r3, [r4, #32]

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d4e78:	4b68      	ldr	r3, [pc, #416]	; (d501c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1f8>)
   d4e7a:	6859      	ldr	r1, [r3, #4]
   d4e7c:	6818      	ldr	r0, [r3, #0]
   d4e7e:	aa06      	add	r2, sp, #24
   d4e80:	c203      	stmia	r2!, {r0, r1}
   d4e82:	7a19      	ldrb	r1, [r3, #8]
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4e84:	f853 0f09 	ldr.w	r0, [r3, #9]!
        if (result) {
            nextMsgId = 1;

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d4e88:	7011      	strb	r1, [r2, #0]
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4e8a:	889a      	ldrh	r2, [r3, #4]
   d4e8c:	799b      	ldrb	r3, [r3, #6]
   d4e8e:	f88d 3016 	strb.w	r3, [sp, #22]

            if (version == MQTT_V311) {
   d4e92:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
            nextMsgId = 1;

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4e96:	f8ad 2014 	strh.w	r2, [sp, #20]

            if (version == MQTT_V311) {
   d4e9a:	2b04      	cmp	r3, #4
            nextMsgId = 1;

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4e9c:	9004      	str	r0, [sp, #16]
   d4e9e:	69e2      	ldr	r2, [r4, #28]

            if (version == MQTT_V311) {
   d4ea0:	d131      	bne.n	d4f06 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe2>
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d4ea2:	1d53      	adds	r3, r2, #5
   d4ea4:	9804      	ldr	r0, [sp, #16]
   d4ea6:	f8c2 0005 	str.w	r0, [r2, #5]
   d4eaa:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   d4eae:	f89d 2016 	ldrb.w	r2, [sp, #22]
   d4eb2:	8099      	strh	r1, [r3, #4]
   d4eb4:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
   d4eb6:	230c      	movs	r3, #12
   d4eb8:	e02e      	b.n	d4f18 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xf4>
                mbedtls_ssl_set_hostname(&ssl, domain);
                result = (0 == this->handShakeTls() ? 1 : 0);
            }

        } else {
            result = tcpClient.connect(this->ip, this->port);
   d4eba:	a806      	add	r0, sp, #24
   d4ebc:	f010 ffa6 	bl	e5e0c <_ZN9IPAddressC1EPKh>
   d4ec0:	462b      	mov	r3, r5
   d4ec2:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d4ec6:	a906      	add	r1, sp, #24
   d4ec8:	4620      	mov	r0, r4
   d4eca:	f011 fc33 	bl	e6734 <_ZN9TCPClient7connectE9IPAddresstm>
            if (tls) {
   d4ece:	f894 36a5 	ldrb.w	r3, [r4, #1701]	; 0x6a5
   d4ed2:	b1ab      	cbz	r3, d4f00 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
                char buffername[16];
                sprintf(buffername, "%d.%d.%d.%d", ip[0], ip[1], ip[2], ip[3]);
   d4ed4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4ed6:	78c8      	ldrb	r0, [r1, #3]
   d4ed8:	784b      	ldrb	r3, [r1, #1]
   d4eda:	780a      	ldrb	r2, [r1, #0]
   d4edc:	9001      	str	r0, [sp, #4]
   d4ede:	7889      	ldrb	r1, [r1, #2]
   d4ee0:	9100      	str	r1, [sp, #0]
   d4ee2:	a806      	add	r0, sp, #24
   d4ee4:	494e      	ldr	r1, [pc, #312]	; (d5020 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1fc>)
   d4ee6:	f010 fe3b 	bl	e5b60 <sprintf>
                mbedtls_ssl_set_hostname(&ssl, buffername);
   d4eea:	a906      	add	r1, sp, #24
   d4eec:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
   d4ef0:	f00d feea 	bl	e2cc8 <mbedtls_ssl_set_hostname>
                result = (0 == this->handShakeTls() ? 1 : 0);
   d4ef4:	4620      	mov	r0, r4
   d4ef6:	f7ff ff5f 	bl	d4db8 <_ZN4MQTT12handShakeTlsEv>
   d4efa:	fab0 f080 	clz	r0, r0
   d4efe:	0940      	lsrs	r0, r0, #5
            }
        }

        if (result) {
   d4f00:	2800      	cmp	r0, #0
   d4f02:	d1b7      	bne.n	d4e74 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x50>
   d4f04:	e080      	b.n	d5008 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>

            if (version == MQTT_V311) {
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d4f06:	ab06      	add	r3, sp, #24
   d4f08:	cb03      	ldmia	r3!, {r0, r1}
   d4f0a:	f8c2 0005 	str.w	r0, [r2, #5]
   d4f0e:	f8c2 1009 	str.w	r1, [r2, #9]
   d4f12:	781b      	ldrb	r3, [r3, #0]
   d4f14:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d4f16:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
   d4f18:	f1b8 0f00 	cmp.w	r8, #0
   d4f1c:	d00a      	beq.n	d4f34 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x110>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d4f1e:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   d4f22:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
   d4f26:	0152      	lsls	r2, r2, #5
   d4f28:	f042 0206 	orr.w	r2, r2, #6
   d4f2c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
   d4f30:	b2d2      	uxtb	r2, r2
   d4f32:	e000      	b.n	d4f36 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x112>
            } else {
                v = 0x02;
   d4f34:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
   d4f36:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
   d4f3a:	b909      	cbnz	r1, d4f40 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x11c>
              v = v&0xfd;
   d4f3c:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
   d4f40:	b12f      	cbz	r7, d4f4e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x12a>
                v = v|0x80;

                if(pass != NULL) {
   d4f42:	b916      	cbnz	r6, d4f4a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x126>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
   d4f44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d4f48:	e001      	b.n	d4f4e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x12a>

                if(pass != NULL) {
                    v = v|(0x80>>1);
   d4f4a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
   d4f4e:	69e1      	ldr	r1, [r4, #28]
   d4f50:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
   d4f52:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d4f54:	69e1      	ldr	r1, [r4, #28]
   d4f56:	1c58      	adds	r0, r3, #1
   d4f58:	1212      	asrs	r2, r2, #8
   d4f5a:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d4f5c:	1c9a      	adds	r2, r3, #2
   d4f5e:	69e1      	ldr	r1, [r4, #28]
   d4f60:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d4f62:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d4f64:	3303      	adds	r3, #3
   d4f66:	69e2      	ldr	r2, [r4, #28]
   d4f68:	4649      	mov	r1, r9
   d4f6a:	4620      	mov	r0, r4
   d4f6c:	f7ff fb78 	bl	d4660 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
   d4f70:	f1b8 0f00 	cmp.w	r8, #0
   d4f74:	d00b      	beq.n	d4f8e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x16a>
                length = writeString(willTopic, buffer, length);
   d4f76:	4603      	mov	r3, r0
   d4f78:	69e2      	ldr	r2, [r4, #28]
   d4f7a:	4641      	mov	r1, r8
   d4f7c:	4620      	mov	r0, r4
   d4f7e:	f7ff fb6f 	bl	d4660 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d4f82:	69e2      	ldr	r2, [r4, #28]
   d4f84:	9917      	ldr	r1, [sp, #92]	; 0x5c
   d4f86:	4603      	mov	r3, r0
   d4f88:	4620      	mov	r0, r4
   d4f8a:	f7ff fb69 	bl	d4660 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
   d4f8e:	b167      	cbz	r7, d4faa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x186>
                length = writeString(user,buffer,length);
   d4f90:	4603      	mov	r3, r0
   d4f92:	69e2      	ldr	r2, [r4, #28]
   d4f94:	4639      	mov	r1, r7
   d4f96:	4620      	mov	r0, r4
   d4f98:	f7ff fb62 	bl	d4660 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
   d4f9c:	b12e      	cbz	r6, d4faa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x186>
                    length = writeString(pass,buffer,length);
   d4f9e:	4603      	mov	r3, r0
   d4fa0:	69e2      	ldr	r2, [r4, #28]
   d4fa2:	4631      	mov	r1, r6
   d4fa4:	4620      	mov	r0, r4
   d4fa6:	f7ff fb5b 	bl	d4660 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
   d4faa:	1f43      	subs	r3, r0, #5
   d4fac:	b29b      	uxth	r3, r3
   d4fae:	69e2      	ldr	r2, [r4, #28]
   d4fb0:	2110      	movs	r1, #16
   d4fb2:	4620      	mov	r0, r4
   d4fb4:	f7ff fb7b 	bl	d46ae <_ZN4MQTT5writeEhPht>
   d4fb8:	f010 fbde 	bl	e5778 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d4fbc:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
   d4fc0:	6260      	str	r0, [r4, #36]	; 0x24
   d4fc2:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!available()) {
   d4fc4:	4620      	mov	r0, r4
   d4fc6:	f7ff fd36 	bl	d4a36 <_ZN4MQTT9availableEv>
   d4fca:	4606      	mov	r6, r0
   d4fcc:	b958      	cbnz	r0, d4fe6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c2>
   d4fce:	f010 fbd3 	bl	e5778 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d4fd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4fd4:	1ac0      	subs	r0, r0, r3
   d4fd6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d4fd8:	437b      	muls	r3, r7
   d4fda:	4298      	cmp	r0, r3
   d4fdc:	d9f2      	bls.n	d4fc4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a0>
                    debug_tls("MQTT connection timeout.\n");
                    disconnect();
   d4fde:	4620      	mov	r0, r4
   d4fe0:	f7ff fb97 	bl	d4712 <_ZN4MQTT10disconnectEv>
   d4fe4:	e00e      	b.n	d5004 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e0>
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d4fe6:	f10d 010f 	add.w	r1, sp, #15
   d4fea:	4620      	mov	r0, r4
   d4fec:	f7ff fbf6 	bl	d47dc <_ZN4MQTT10readPacketEPh>

            if (len == 4 && buffer[3] == 0) {
   d4ff0:	2804      	cmp	r0, #4
   d4ff2:	d109      	bne.n	d5008 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
   d4ff4:	69e3      	ldr	r3, [r4, #28]
   d4ff6:	78df      	ldrb	r7, [r3, #3]
   d4ff8:	b937      	cbnz	r7, d5008 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
   d4ffa:	f010 fbbd 	bl	e5778 <HAL_Timer_Get_Milli_Seconds>
                lastInActivity = millis();
                pingOutstanding = false;
   d4ffe:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4 && buffer[3] == 0) {
                lastInActivity = millis();
   d5002:	62a0      	str	r0, [r4, #40]	; 0x28
            while (!available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
                    debug_tls("MQTT connection timeout.\n");
                    disconnect();
                    return false;
   d5004:	4635      	mov	r5, r6
   d5006:	e004      	b.n	d5012 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ee>
                pingOutstanding = false;
                debug_tls("MQTT connected.\n");
                return true;
            }
        }
        disconnect();
   d5008:	4620      	mov	r0, r4
   d500a:	f7ff fb82 	bl	d4712 <_ZN4MQTT10disconnectEv>
   d500e:	e000      	b.n	d5012 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ee>
    }
    return false;
   d5010:	2500      	movs	r5, #0
}
   d5012:	4628      	mov	r0, r5
   d5014:	b00d      	add	sp, #52	; 0x34
   d5016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d501a:	bf00      	nop
   d501c:	000e823c 	.word	0x000e823c
   d5020:	000e8251 	.word	0x000e8251

000d5024 <_ZN4MQTT7connectEPKc>:

void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}

bool MQTT::connect(const char *id) {
   d5024:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id,NULL,NULL,0,QOS0,0,0,true,MQTT_V311);
   d5026:	2304      	movs	r3, #4
   d5028:	9305      	str	r3, [sp, #20]
   d502a:	2301      	movs	r3, #1
   d502c:	9304      	str	r3, [sp, #16]
   d502e:	2300      	movs	r3, #0
   d5030:	9303      	str	r3, [sp, #12]
   d5032:	9302      	str	r3, [sp, #8]
   d5034:	9301      	str	r3, [sp, #4]
   d5036:	9300      	str	r3, [sp, #0]
   d5038:	461a      	mov	r2, r3
   d503a:	f7ff fef3 	bl	d4e24 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d503e:	b007      	add	sp, #28
   d5040:	f85d fb04 	ldr.w	pc, [sp], #4

000d5044 <_GLOBAL__sub_I__ZN4MQTTC2Ev>:
   d5044:	f010 bba8 	b.w	e5798 <HAL_Pin_Map>

000d5048 <_ZL14aes_gen_tablesv>:
#define MUL(x,y) ( ( (x) && (y) ) ? pow[(log[(x)]+log[(y)]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
   d5048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d504c:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
   d5050:	2301      	movs	r3, #1
   d5052:	2200      	movs	r2, #0
    {
        pow[i] = x;
        log[x] = i;
   d5054:	f50d 6082 	add.w	r0, sp, #1040	; 0x410
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
   d5058:	a904      	add	r1, sp, #16
        log[x] = i;
   d505a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
   d505e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
   d5062:	f013 0180 	ands.w	r1, r3, #128	; 0x80
   d5066:	bf18      	it	ne
   d5068:	211b      	movne	r1, #27
   d506a:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
   d506e:	3201      	adds	r2, #1
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
   d5070:	404b      	eors	r3, r1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
   d5072:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
   d5076:	b2db      	uxtb	r3, r3
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
   d5078:	d1ee      	bne.n	d5058 <_ZL14aes_gen_tablesv+0x10>
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
   d507a:	4c66      	ldr	r4, [pc, #408]	; (d5214 <_ZL14aes_gen_tablesv+0x1cc>)
   d507c:	2301      	movs	r3, #1
   d507e:	2200      	movs	r2, #0
        x = XTIME( x ) & 0xFF;
   d5080:	f013 0180 	ands.w	r1, r3, #128	; 0x80
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
   d5084:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        x = XTIME( x ) & 0xFF;
   d5088:	bf18      	it	ne
   d508a:	211b      	movne	r1, #27
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
   d508c:	3201      	adds	r2, #1
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
   d508e:	ea81 0343 	eor.w	r3, r1, r3, lsl #1
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
   d5092:	2a0a      	cmp	r2, #10
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
   d5094:	b2db      	uxtb	r3, r3
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
   d5096:	d1f3      	bne.n	d5080 <_ZL14aes_gen_tablesv+0x38>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
   d5098:	4e5f      	ldr	r6, [pc, #380]	; (d5218 <_ZL14aes_gen_tablesv+0x1d0>)
    RSb[0x63] = 0x00;
   d509a:	4d60      	ldr	r5, [pc, #384]	; (d521c <_ZL14aes_gen_tablesv+0x1d4>)
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
   d509c:	2363      	movs	r3, #99	; 0x63
   d509e:	7033      	strb	r3, [r6, #0]
    RSb[0x63] = 0x00;
   d50a0:	2300      	movs	r3, #0
   d50a2:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63

    for( i = 1; i < 256; i++ )
   d50a6:	2401      	movs	r4, #1
    {
        x = pow[255 - log[i]];
   d50a8:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d50ac:	aa04      	add	r2, sp, #16
   d50ae:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
   d50b2:	f852 e023 	ldr.w	lr, [r2, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   d50b6:	ea4f 11ee 	mov.w	r1, lr, asr #7
   d50ba:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
   d50be:	b2c9      	uxtb	r1, r1
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   d50c0:	11ca      	asrs	r2, r1, #7
   d50c2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
   d50c6:	b2d2      	uxtb	r2, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   d50c8:	11d3      	asrs	r3, r2, #7
   d50ca:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   d50ce:	b2db      	uxtb	r3, r3
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y ^ 0x63;
   d50d0:	f08e 0e63 	eor.w	lr, lr, #99	; 0x63
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   d50d4:	11df      	asrs	r7, r3, #7
        x ^= y ^ 0x63;
   d50d6:	ea8e 0101 	eor.w	r1, lr, r1
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   d50da:	ea47 0743 	orr.w	r7, r7, r3, lsl #1
        x ^= y ^ 0x63;
   d50de:	404a      	eors	r2, r1
   d50e0:	4053      	eors	r3, r2
   d50e2:	b2fa      	uxtb	r2, r7
   d50e4:	4053      	eors	r3, r2

        FSb[i] = (unsigned char) x;
   d50e6:	5533      	strb	r3, [r6, r4]
        RSb[x] = (unsigned char) i;
   d50e8:	54ec      	strb	r4, [r5, r3]
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
    RSb[0x63] = 0x00;

    for( i = 1; i < 256; i++ )
   d50ea:	3401      	adds	r4, #1
   d50ec:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   d50f0:	d1da      	bne.n	d50a8 <_ZL14aes_gen_tablesv+0x60>
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   d50f2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   d50f4:	9301      	str	r3, [sp, #4]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   d50f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d50f8:	9302      	str	r3, [sp, #8]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
   d50fa:	6ac7      	ldr	r7, [r0, #44]	; 0x2c

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   d50fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
   d50fe:	f8df e118 	ldr.w	lr, [pc, #280]	; d5218 <_ZL14aes_gen_tablesv+0x1d0>
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
                 ( (uint32_t) z << 24 );
   d5102:	f8df c12c 	ldr.w	ip, [pc, #300]	; d5230 <_ZL14aes_gen_tablesv+0x1e8>

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
   d5106:	f8df 812c 	ldr.w	r8, [pc, #300]	; d5234 <_ZL14aes_gen_tablesv+0x1ec>
        FT2[i] = ROTL8( FT1[i] );
   d510a:	f8df 912c 	ldr.w	r9, [pc, #300]	; d5238 <_ZL14aes_gen_tablesv+0x1f0>
        FT3[i] = ROTL8( FT2[i] );
   d510e:	f8df a12c 	ldr.w	sl, [pc, #300]	; d523c <_ZL14aes_gen_tablesv+0x1f4>
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
   d5112:	f8df b108 	ldr.w	fp, [pc, #264]	; d521c <_ZL14aes_gen_tablesv+0x1d4>

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   d5116:	9303      	str	r3, [sp, #12]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
   d5118:	2200      	movs	r2, #0
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
   d511a:	f812 000e 	ldrb.w	r0, [r2, lr]
        y = XTIME( x ) & 0xFF;
   d511e:	f010 0f80 	tst.w	r0, #128	; 0x80
   d5122:	bf14      	ite	ne
   d5124:	211b      	movne	r1, #27
   d5126:	2100      	moveq	r1, #0
   d5128:	ea81 0140 	eor.w	r1, r1, r0, lsl #1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
   d512c:	0403      	lsls	r3, r0, #16
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
   d512e:	b2c9      	uxtb	r1, r1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
   d5130:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   d5134:	404b      	eors	r3, r1
   d5136:	4041      	eors	r1, r0
   d5138:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                 ( (uint32_t) z << 24 );
   d513c:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
   d5140:	ea4f 6333 	mov.w	r3, r3, ror #24
   d5144:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
   d5148:	ea4f 6333 	mov.w	r3, r3, ror #24
   d514c:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
   d5150:	ea4f 6333 	mov.w	r3, r3, ror #24
   d5154:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
   d5158:	f81b 3002 	ldrb.w	r3, [fp, r2]
   d515c:	0094      	lsls	r4, r2, #2

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   d515e:	b1d3      	cbz	r3, d5196 <_ZL14aes_gen_tablesv+0x14e>
   d5160:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
   d5164:	9801      	ldr	r0, [sp, #4]
   d5166:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   d516a:	1845      	adds	r5, r0, r1
   d516c:	20ff      	movs	r0, #255	; 0xff
   d516e:	fb95 f6f0 	sdiv	r6, r5, r0
   d5172:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
   d5176:	1bae      	subs	r6, r5, r6
   d5178:	ad04      	add	r5, sp, #16
   d517a:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   d517e:	9e02      	ldr	r6, [sp, #8]
   d5180:	4431      	add	r1, r6
   d5182:	fb91 f0f0 	sdiv	r0, r1, r0
   d5186:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
   d518a:	1a09      	subs	r1, r1, r0
   d518c:	a804      	add	r0, sp, #16
   d518e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   d5192:	0209      	lsls	r1, r1, #8
   d5194:	e001      	b.n	d519a <_ZL14aes_gen_tablesv+0x152>
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   d5196:	461d      	mov	r5, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   d5198:	4619      	mov	r1, r3
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   d519a:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   d519c:	b183      	cbz	r3, d51c0 <_ZL14aes_gen_tablesv+0x178>
   d519e:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
   d51a2:	9803      	ldr	r0, [sp, #12]
   d51a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   d51a8:	4401      	add	r1, r0
   d51aa:	20ff      	movs	r0, #255	; 0xff
   d51ac:	fb91 f0f0 	sdiv	r0, r1, r0
   d51b0:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
   d51b4:	1a08      	subs	r0, r1, r0
   d51b6:	a904      	add	r1, sp, #16
   d51b8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   d51bc:	0409      	lsls	r1, r1, #16
   d51be:	e000      	b.n	d51c2 <_ZL14aes_gen_tablesv+0x17a>
   d51c0:	4619      	mov	r1, r3
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   d51c2:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
   d51c4:	b173      	cbz	r3, d51e4 <_ZL14aes_gen_tablesv+0x19c>
   d51c6:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
   d51ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   d51ce:	21ff      	movs	r1, #255	; 0xff
   d51d0:	443b      	add	r3, r7
   d51d2:	fb93 f1f1 	sdiv	r1, r3, r1
   d51d6:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
   d51da:	1a59      	subs	r1, r3, r1
   d51dc:	ab04      	add	r3, sp, #16
   d51de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   d51e2:	061b      	lsls	r3, r3, #24

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   d51e4:	405d      	eors	r5, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
   d51e6:	4b0e      	ldr	r3, [pc, #56]	; (d5220 <_ZL14aes_gen_tablesv+0x1d8>)
   d51e8:	50e5      	str	r5, [r4, r3]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
   d51ea:	4b0e      	ldr	r3, [pc, #56]	; (d5224 <_ZL14aes_gen_tablesv+0x1dc>)
   d51ec:	ea4f 6535 	mov.w	r5, r5, ror #24
   d51f0:	50e5      	str	r5, [r4, r3]
        RT2[i] = ROTL8( RT1[i] );
   d51f2:	4b0d      	ldr	r3, [pc, #52]	; (d5228 <_ZL14aes_gen_tablesv+0x1e0>)
   d51f4:	ea4f 6535 	mov.w	r5, r5, ror #24
   d51f8:	50e5      	str	r5, [r4, r3]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
   d51fa:	3201      	adds	r2, #1
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
   d51fc:	4b0b      	ldr	r3, [pc, #44]	; (d522c <_ZL14aes_gen_tablesv+0x1e4>)
   d51fe:	ea4f 6535 	mov.w	r5, r5, ror #24
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
   d5202:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
   d5206:	50e5      	str	r5, [r4, r3]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
   d5208:	d187      	bne.n	d511a <_ZL14aes_gen_tablesv+0xd2>
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
   d520a:	f60d 0d14 	addw	sp, sp, #2068	; 0x814
   d520e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5212:	bf00      	nop
   d5214:	2003e374 	.word	0x2003e374
   d5218:	2003d274 	.word	0x2003d274
   d521c:	2003d174 	.word	0x2003d174
   d5220:	2003d774 	.word	0x2003d774
   d5224:	2003db74 	.word	0x2003db74
   d5228:	2003df74 	.word	0x2003df74
   d522c:	2003d374 	.word	0x2003d374
   d5230:	2003c174 	.word	0x2003c174
   d5234:	2003c574 	.word	0x2003c574
   d5238:	2003c974 	.word	0x2003c974
   d523c:	2003cd74 	.word	0x2003cd74

000d5240 <mbedtls_aes_init>:

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
   d5240:	f44f 728c 	mov.w	r2, #280	; 0x118
   d5244:	2100      	movs	r1, #0
   d5246:	f012 be34 	b.w	e7eb2 <memset>

000d524a <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
   d524a:	b118      	cbz	r0, d5254 <mbedtls_aes_free+0xa>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
   d524c:	f44f 718c 	mov.w	r1, #280	; 0x118
   d5250:	f007 b9ce 	b.w	dc5f0 <mbedtls_platform_zeroize>
   d5254:	4770      	bx	lr
	...

000d5258 <mbedtls_aes_setkey_enc>:
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
   d5258:	2ac0      	cmp	r2, #192	; 0xc0
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
   d525a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d525c:	4604      	mov	r4, r0
   d525e:	460f      	mov	r7, r1
   d5260:	4615      	mov	r5, r2
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
   d5262:	d007      	beq.n	d5274 <mbedtls_aes_setkey_enc+0x1c>
   d5264:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   d5268:	d006      	beq.n	d5278 <mbedtls_aes_setkey_enc+0x20>
   d526a:	2a80      	cmp	r2, #128	; 0x80
   d526c:	f040 80e2 	bne.w	d5434 <mbedtls_aes_setkey_enc+0x1dc>
    {
        case 128: ctx->nr = 10; break;
   d5270:	230a      	movs	r3, #10
   d5272:	e002      	b.n	d527a <mbedtls_aes_setkey_enc+0x22>
        case 192: ctx->nr = 12; break;
   d5274:	230c      	movs	r3, #12
   d5276:	e000      	b.n	d527a <mbedtls_aes_setkey_enc+0x22>
        case 256: ctx->nr = 14; break;
   d5278:	230e      	movs	r3, #14
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
   d527a:	4e71      	ldr	r6, [pc, #452]	; (d5440 <mbedtls_aes_setkey_enc+0x1e8>)

    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
   d527c:	6023      	str	r3, [r4, #0]
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
   d527e:	6833      	ldr	r3, [r6, #0]
   d5280:	b91b      	cbnz	r3, d528a <mbedtls_aes_setkey_enc+0x32>
    {
        aes_gen_tables();
   d5282:	f7ff fee1 	bl	d5048 <_ZL14aes_gen_tablesv>
        aes_init_done = 1;
   d5286:	2301      	movs	r3, #1
   d5288:	6033      	str	r3, [r6, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
   d528a:	f104 0308 	add.w	r3, r4, #8
   d528e:	6063      	str	r3, [r4, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
   d5290:	096d      	lsrs	r5, r5, #5
   d5292:	2000      	movs	r0, #0
   d5294:	42a8      	cmp	r0, r5
   d5296:	d010      	beq.n	d52ba <mbedtls_aes_setkey_enc+0x62>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
   d5298:	eb07 0180 	add.w	r1, r7, r0, lsl #2
   d529c:	788a      	ldrb	r2, [r1, #2]
   d529e:	784e      	ldrb	r6, [r1, #1]
   d52a0:	78c9      	ldrb	r1, [r1, #3]
   d52a2:	0412      	lsls	r2, r2, #16
   d52a4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
   d52a8:	f817 6020 	ldrb.w	r6, [r7, r0, lsl #2]
   d52ac:	4332      	orrs	r2, r6
   d52ae:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   d52b2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
   d52b6:	3001      	adds	r0, #1
   d52b8:	e7ec      	b.n	d5294 <mbedtls_aes_setkey_enc+0x3c>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
   d52ba:	6822      	ldr	r2, [r4, #0]
   d52bc:	2a0c      	cmp	r2, #12
   d52be:	d031      	beq.n	d5324 <mbedtls_aes_setkey_enc+0xcc>
   d52c0:	2a0e      	cmp	r2, #14
   d52c2:	d066      	beq.n	d5392 <mbedtls_aes_setkey_enc+0x13a>
   d52c4:	2a0a      	cmp	r2, #10
   d52c6:	f040 80b8 	bne.w	d543a <mbedtls_aes_setkey_enc+0x1e2>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
   d52ca:	4f5e      	ldr	r7, [pc, #376]	; (d5444 <mbedtls_aes_setkey_enc+0x1ec>)
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
   d52cc:	4e5e      	ldr	r6, [pc, #376]	; (d5448 <mbedtls_aes_setkey_enc+0x1f0>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
   d52ce:	2500      	movs	r5, #0
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
   d52d0:	68dc      	ldr	r4, [r3, #12]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   d52d2:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
   d52d6:	681a      	ldr	r2, [r3, #0]
   d52d8:	4051      	eors	r1, r2
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
   d52da:	f3c4 2207 	ubfx	r2, r4, #8, #8

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
   d52de:	3501      	adds	r5, #1
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   d52e0:	5cb0      	ldrb	r0, [r6, r2]
   d52e2:	0e22      	lsrs	r2, r4, #24
   d52e4:	4041      	eors	r1, r0
   d52e6:	5cb2      	ldrb	r2, [r6, r2]
   d52e8:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
   d52ec:	b2e2      	uxtb	r2, r4

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
   d52ee:	2d0a      	cmp	r5, #10
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   d52f0:	5cb2      	ldrb	r2, [r6, r2]
   d52f2:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
   d52f6:	f3c4 4207 	ubfx	r2, r4, #16, #8

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
   d52fa:	f103 0310 	add.w	r3, r3, #16
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   d52fe:	5cb2      	ldrb	r2, [r6, r2]
   d5300:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
   d5304:	f853 1c0c 	ldr.w	r1, [r3, #-12]
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
   d5308:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
   d530a:	ea82 0201 	eor.w	r2, r2, r1
                RK[6]  = RK[2] ^ RK[5];
   d530e:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
   d5312:	605a      	str	r2, [r3, #4]
                RK[6]  = RK[2] ^ RK[5];
   d5314:	ea82 0201 	eor.w	r2, r2, r1
   d5318:	609a      	str	r2, [r3, #8]
                RK[7]  = RK[3] ^ RK[6];
   d531a:	ea82 0204 	eor.w	r2, r2, r4
   d531e:	60da      	str	r2, [r3, #12]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
   d5320:	d1d6      	bne.n	d52d0 <mbedtls_aes_setkey_enc+0x78>
   d5322:	e08a      	b.n	d543a <mbedtls_aes_setkey_enc+0x1e2>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
   d5324:	4e47      	ldr	r6, [pc, #284]	; (d5444 <mbedtls_aes_setkey_enc+0x1ec>)
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
   d5326:	4d48      	ldr	r5, [pc, #288]	; (d5448 <mbedtls_aes_setkey_enc+0x1f0>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
   d5328:	2400      	movs	r4, #0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   d532a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
   d532e:	6958      	ldr	r0, [r3, #20]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   d5330:	681a      	ldr	r2, [r3, #0]
   d5332:	404a      	eors	r2, r1
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
   d5334:	f3c0 2107 	ubfx	r1, r0, #8, #8
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
   d5338:	3401      	adds	r4, #1
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   d533a:	5c69      	ldrb	r1, [r5, r1]
   d533c:	404a      	eors	r2, r1
   d533e:	0e01      	lsrs	r1, r0, #24
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
   d5340:	2c08      	cmp	r4, #8
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   d5342:	5c69      	ldrb	r1, [r5, r1]
   d5344:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
   d5348:	b2c1      	uxtb	r1, r0
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
   d534a:	f103 0318 	add.w	r3, r3, #24
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   d534e:	5c69      	ldrb	r1, [r5, r1]
   d5350:	ea82 6201 	eor.w	r2, r2, r1, lsl #24

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
   d5354:	f3c0 4107 	ubfx	r1, r0, #16, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   d5358:	5c69      	ldrb	r1, [r5, r1]
   d535a:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
   d535e:	f853 1c14 	ldr.w	r1, [r3, #-20]
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
   d5362:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
   d5364:	ea82 0201 	eor.w	r2, r2, r1
                RK[8]  = RK[2] ^ RK[7];
   d5368:	f853 1c10 	ldr.w	r1, [r3, #-16]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
   d536c:	605a      	str	r2, [r3, #4]
                RK[8]  = RK[2] ^ RK[7];
   d536e:	ea82 0201 	eor.w	r2, r2, r1
                RK[9]  = RK[3] ^ RK[8];
   d5372:	f853 1c0c 	ldr.w	r1, [r3, #-12]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
   d5376:	609a      	str	r2, [r3, #8]
                RK[9]  = RK[3] ^ RK[8];
   d5378:	ea82 0201 	eor.w	r2, r2, r1
                RK[10] = RK[4] ^ RK[9];
   d537c:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
   d5380:	60da      	str	r2, [r3, #12]
                RK[10] = RK[4] ^ RK[9];
   d5382:	ea82 0201 	eor.w	r2, r2, r1
   d5386:	611a      	str	r2, [r3, #16]
                RK[11] = RK[5] ^ RK[10];
   d5388:	ea82 0200 	eor.w	r2, r2, r0
   d538c:	615a      	str	r2, [r3, #20]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
   d538e:	d1cc      	bne.n	d532a <mbedtls_aes_setkey_enc+0xd2>
   d5390:	e053      	b.n	d543a <mbedtls_aes_setkey_enc+0x1e2>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
   d5392:	4e2c      	ldr	r6, [pc, #176]	; (d5444 <mbedtls_aes_setkey_enc+0x1ec>)
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
   d5394:	482c      	ldr	r0, [pc, #176]	; (d5448 <mbedtls_aes_setkey_enc+0x1f0>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
   d5396:	2500      	movs	r5, #0
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   d5398:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
   d539c:	69dc      	ldr	r4, [r3, #28]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   d539e:	681a      	ldr	r2, [r3, #0]
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
   d53a0:	685f      	ldr	r7, [r3, #4]
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   d53a2:	4051      	eors	r1, r2
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
   d53a4:	f3c4 2207 	ubfx	r2, r4, #8, #8
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
   d53a8:	3501      	adds	r5, #1
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   d53aa:	5c82      	ldrb	r2, [r0, r2]
   d53ac:	4051      	eors	r1, r2
   d53ae:	0e22      	lsrs	r2, r4, #24
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
   d53b0:	2d07      	cmp	r5, #7
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   d53b2:	5c82      	ldrb	r2, [r0, r2]
   d53b4:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
   d53b8:	b2e2      	uxtb	r2, r4
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
   d53ba:	f103 0320 	add.w	r3, r3, #32
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   d53be:	5c82      	ldrb	r2, [r0, r2]
   d53c0:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
   d53c4:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   d53c8:	5c82      	ldrb	r2, [r0, r2]
   d53ca:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
   d53ce:	f853 2c18 	ldr.w	r2, [r3, #-24]
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
   d53d2:	6019      	str	r1, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
   d53d4:	ea81 0107 	eor.w	r1, r1, r7
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];
   d53d8:	f853 7c14 	ldr.w	r7, [r3, #-20]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
   d53dc:	6059      	str	r1, [r3, #4]
                RK[10] = RK[2] ^ RK[9];
   d53de:	ea81 0102 	eor.w	r1, r1, r2
                RK[11] = RK[3] ^ RK[10];
   d53e2:	ea87 0701 	eor.w	r7, r7, r1

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
   d53e6:	b2fa      	uxtb	r2, r7
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
   d53e8:	6099      	str	r1, [r3, #8]
                RK[11] = RK[3] ^ RK[10];
   d53ea:	60df      	str	r7, [r3, #12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   d53ec:	5c82      	ldrb	r2, [r0, r2]
   d53ee:	f853 1c10 	ldr.w	r1, [r3, #-16]
   d53f2:	ea81 0102 	eor.w	r1, r1, r2
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
   d53f6:	ea4f 6217 	mov.w	r2, r7, lsr #24
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   d53fa:	5c82      	ldrb	r2, [r0, r2]
   d53fc:	ea81 6102 	eor.w	r1, r1, r2, lsl #24
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
   d5400:	f3c7 2207 	ubfx	r2, r7, #8, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   d5404:	f3c7 4707 	ubfx	r7, r7, #16, #8
   d5408:	5c82      	ldrb	r2, [r0, r2]
   d540a:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
   d540e:	5dc2      	ldrb	r2, [r0, r7]
   d5410:	ea81 4202 	eor.w	r2, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
   d5414:	f853 1c0c 	ldr.w	r1, [r3, #-12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
   d5418:	611a      	str	r2, [r3, #16]

                RK[13] = RK[5] ^ RK[12];
   d541a:	ea82 0201 	eor.w	r2, r2, r1
                RK[14] = RK[6] ^ RK[13];
   d541e:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
   d5422:	615a      	str	r2, [r3, #20]
                RK[14] = RK[6] ^ RK[13];
   d5424:	ea82 0201 	eor.w	r2, r2, r1
   d5428:	619a      	str	r2, [r3, #24]
                RK[15] = RK[7] ^ RK[14];
   d542a:	ea82 0204 	eor.w	r2, r2, r4
   d542e:	61da      	str	r2, [r3, #28]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
   d5430:	d1b2      	bne.n	d5398 <mbedtls_aes_setkey_enc+0x140>
   d5432:	e002      	b.n	d543a <mbedtls_aes_setkey_enc+0x1e2>
    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
   d5434:	f06f 001f 	mvn.w	r0, #31
   d5438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
   d543a:	2000      	movs	r0, #0
}
   d543c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d543e:	bf00      	nop
   d5440:	2003c170 	.word	0x2003c170
   d5444:	2003e374 	.word	0x2003e374
   d5448:	2003d274 	.word	0x2003d274

000d544c <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
   d544c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5450:	b0c9      	sub	sp, #292	; 0x124
   d5452:	4604      	mov	r4, r0
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
   d5454:	a802      	add	r0, sp, #8
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
   d5456:	460d      	mov	r5, r1
   d5458:	4616      	mov	r6, r2
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
   d545a:	f7ff fef1 	bl	d5240 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
   d545e:	f104 0308 	add.w	r3, r4, #8
   d5462:	6063      	str	r3, [r4, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
   d5464:	4632      	mov	r2, r6
   d5466:	4629      	mov	r1, r5
   d5468:	a802      	add	r0, sp, #8
   d546a:	f7ff fef5 	bl	d5258 <mbedtls_aes_setkey_enc>
   d546e:	4680      	mov	r8, r0
   d5470:	2800      	cmp	r0, #0
   d5472:	d14c      	bne.n	d550e <mbedtls_aes_setkey_dec+0xc2>
        goto exit;

    ctx->nr = cty.nr;
   d5474:	9902      	ldr	r1, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
   d5476:	9803      	ldr	r0, [sp, #12]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
        goto exit;

    ctx->nr = cty.nr;
   d5478:	6021      	str	r1, [r4, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
   d547a:	010a      	lsls	r2, r1, #4
   d547c:	1883      	adds	r3, r0, r2

    *RK++ = *SK++;
   d547e:	5882      	ldr	r2, [r0, r2]
   d5480:	60a2      	str	r2, [r4, #8]
    *RK++ = *SK++;
   d5482:	685a      	ldr	r2, [r3, #4]
   d5484:	60e2      	str	r2, [r4, #12]
    *RK++ = *SK++;
   d5486:	689a      	ldr	r2, [r3, #8]
   d5488:	6122      	str	r2, [r4, #16]
    *RK++ = *SK++;
   d548a:	68d8      	ldr	r0, [r3, #12]
   d548c:	6160      	str	r0, [r4, #20]
   d548e:	f104 0218 	add.w	r2, r4, #24
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
   d5492:	f8df c090 	ldr.w	ip, [pc, #144]	; d5524 <mbedtls_aes_setkey_dec+0xd8>

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
   d5496:	4c21      	ldr	r4, [pc, #132]	; (d551c <mbedtls_aes_setkey_dec+0xd0>)
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
   d5498:	f8df 908c 	ldr.w	r9, [pc, #140]	; d5528 <mbedtls_aes_setkey_dec+0xdc>
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
   d549c:	f8df a08c 	ldr.w	sl, [pc, #140]	; d552c <mbedtls_aes_setkey_dec+0xe0>
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
   d54a0:	3901      	subs	r1, #1
   d54a2:	3b10      	subs	r3, #16
   d54a4:	2900      	cmp	r1, #0
   d54a6:	dd2a      	ble.n	d54fe <mbedtls_aes_setkey_dec+0xb2>
   d54a8:	1f1d      	subs	r5, r3, #4
   d54aa:	f1a2 0e04 	sub.w	lr, r2, #4
   d54ae:	f103 0b0c 	add.w	fp, r3, #12
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
   d54b2:	f855 0f04 	ldr.w	r0, [r5, #4]!
   d54b6:	b2c6      	uxtb	r6, r0
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
   d54b8:	45ab      	cmp	fp, r5
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
   d54ba:	5da7      	ldrb	r7, [r4, r6]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
   d54bc:	ea4f 6610 	mov.w	r6, r0, lsr #24
   d54c0:	5da6      	ldrb	r6, [r4, r6]
   d54c2:	9601      	str	r6, [sp, #4]
   d54c4:	4e16      	ldr	r6, [pc, #88]	; (d5520 <mbedtls_aes_setkey_dec+0xd4>)
   d54c6:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
   d54ca:	9e01      	ldr	r6, [sp, #4]
   d54cc:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
   d54d0:	ea87 0706 	eor.w	r7, r7, r6
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
   d54d4:	f3c0 2607 	ubfx	r6, r0, #8, #8
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
   d54d8:	f3c0 4007 	ubfx	r0, r0, #16, #8
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
   d54dc:	5da6      	ldrb	r6, [r4, r6]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
   d54de:	5c20      	ldrb	r0, [r4, r0]
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
   d54e0:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   d54e4:	ea86 0607 	eor.w	r6, r6, r7
   d54e8:	f85a 7020 	ldr.w	r7, [sl, r0, lsl #2]
   d54ec:	ea86 0607 	eor.w	r6, r6, r7
   d54f0:	f84e 6f04 	str.w	r6, [lr, #4]!
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
   d54f4:	d1dd      	bne.n	d54b2 <mbedtls_aes_setkey_dec+0x66>
   d54f6:	3210      	adds	r2, #16
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
   d54f8:	3901      	subs	r1, #1
   d54fa:	3b10      	subs	r3, #16
   d54fc:	e7d2      	b.n	d54a4 <mbedtls_aes_setkey_dec+0x58>
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
        }
    }

    *RK++ = *SK++;
   d54fe:	6819      	ldr	r1, [r3, #0]
   d5500:	6011      	str	r1, [r2, #0]
    *RK++ = *SK++;
   d5502:	6859      	ldr	r1, [r3, #4]
   d5504:	6051      	str	r1, [r2, #4]
    *RK++ = *SK++;
   d5506:	6899      	ldr	r1, [r3, #8]
   d5508:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
   d550a:	68db      	ldr	r3, [r3, #12]
   d550c:	60d3      	str	r3, [r2, #12]

exit:
    mbedtls_aes_free( &cty );
   d550e:	a802      	add	r0, sp, #8
   d5510:	f7ff fe9b 	bl	d524a <mbedtls_aes_free>

    return( ret );
}
   d5514:	4640      	mov	r0, r8
   d5516:	b049      	add	sp, #292	; 0x124
   d5518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d551c:	2003d274 	.word	0x2003d274
   d5520:	2003d774 	.word	0x2003d774
   d5524:	2003d374 	.word	0x2003d374
   d5528:	2003db74 	.word	0x2003db74
   d552c:	2003df74 	.word	0x2003df74

000d5530 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
   d5530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
   d5534:	6846      	ldr	r6, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   d5536:	680c      	ldr	r4, [r1, #0]
   d5538:	6833      	ldr	r3, [r6, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   d553a:	688d      	ldr	r5, [r1, #8]
   d553c:	f8df c374 	ldr.w	ip, [pc, #884]	; d58b4 <mbedtls_internal_aes_encrypt+0x384>
   d5540:	f8df e374 	ldr.w	lr, [pc, #884]	; d58b8 <mbedtls_internal_aes_encrypt+0x388>
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d5544:	4fd8      	ldr	r7, [pc, #864]	; (d58a8 <mbedtls_internal_aes_encrypt+0x378>)
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   d5546:	ea84 0b03 	eor.w	fp, r4, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   d554a:	684c      	ldr	r4, [r1, #4]
   d554c:	6873      	ldr	r3, [r6, #4]
   d554e:	4063      	eors	r3, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   d5550:	68b4      	ldr	r4, [r6, #8]
   d5552:	406c      	eors	r4, r5
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   d5554:	68cd      	ldr	r5, [r1, #12]
   d5556:	68f1      	ldr	r1, [r6, #12]
   d5558:	404d      	eors	r5, r1

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   d555a:	6801      	ldr	r1, [r0, #0]
   d555c:	1049      	asrs	r1, r1, #1
   d555e:	3901      	subs	r1, #1
   d5560:	9101      	str	r1, [sp, #4]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   d5562:	f106 0110 	add.w	r1, r6, #16

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   d5566:	9e01      	ldr	r6, [sp, #4]
   d5568:	f8df 9348 	ldr.w	r9, [pc, #840]	; d58b4 <mbedtls_internal_aes_encrypt+0x384>
   d556c:	f8df 8348 	ldr.w	r8, [pc, #840]	; d58b8 <mbedtls_internal_aes_encrypt+0x388>
   d5570:	2e00      	cmp	r6, #0
   d5572:	4608      	mov	r0, r1
   d5574:	fa5f f68b 	uxtb.w	r6, fp
   d5578:	f101 0120 	add.w	r1, r1, #32
   d557c:	ea4f 6a15 	mov.w	sl, r5, lsr #24
   d5580:	f340 80be 	ble.w	d5700 <mbedtls_internal_aes_encrypt+0x1d0>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d5584:	f85e 002a 	ldr.w	r0, [lr, sl, lsl #2]
   d5588:	f85c 8026 	ldr.w	r8, [ip, r6, lsl #2]
   d558c:	4ec7      	ldr	r6, [pc, #796]	; (d58ac <mbedtls_internal_aes_encrypt+0x37c>)
   d558e:	ea88 0800 	eor.w	r8, r8, r0
   d5592:	f851 0c20 	ldr.w	r0, [r1, #-32]
   d5596:	ea88 0800 	eor.w	r8, r8, r0
   d559a:	f3c3 2007 	ubfx	r0, r3, #8, #8
   d559e:	fa5f f983 	uxtb.w	r9, r3
   d55a2:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
   d55a6:	f85c 9029 	ldr.w	r9, [ip, r9, lsl #2]
   d55aa:	ea88 0000 	eor.w	r0, r8, r0
   d55ae:	f3c4 4807 	ubfx	r8, r4, #16, #8
   d55b2:	fa5f fa84 	uxtb.w	sl, r4
   d55b6:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
   d55ba:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
   d55be:	ea80 0808 	eor.w	r8, r0, r8
   d55c2:	ea4f 601b 	mov.w	r0, fp, lsr #24
   d55c6:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
   d55ca:	ea89 0900 	eor.w	r9, r9, r0
   d55ce:	f851 0c1c 	ldr.w	r0, [r1, #-28]
   d55d2:	ea89 0000 	eor.w	r0, r9, r0
   d55d6:	f3c4 2907 	ubfx	r9, r4, #8, #8
   d55da:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
   d55de:	ea80 0009 	eor.w	r0, r0, r9
   d55e2:	f3c5 4907 	ubfx	r9, r5, #16, #8
   d55e6:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
   d55ea:	ea80 0909 	eor.w	r9, r0, r9
   d55ee:	0e18      	lsrs	r0, r3, #24
   d55f0:	f3c3 4307 	ubfx	r3, r3, #16, #8
   d55f4:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
   d55f8:	ea8a 0a00 	eor.w	sl, sl, r0
   d55fc:	f851 0c18 	ldr.w	r0, [r1, #-24]
   d5600:	ea8a 0000 	eor.w	r0, sl, r0
   d5604:	f3c5 2a07 	ubfx	sl, r5, #8, #8
   d5608:	b2ed      	uxtb	r5, r5
   d560a:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
   d560e:	ea80 000a 	eor.w	r0, r0, sl
   d5612:	f3cb 4a07 	ubfx	sl, fp, #16, #8
   d5616:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
   d561a:	ea80 000a 	eor.w	r0, r0, sl
   d561e:	ea4f 6a14 	mov.w	sl, r4, lsr #24
   d5622:	f85c 4025 	ldr.w	r4, [ip, r5, lsl #2]
   d5626:	f85e 502a 	ldr.w	r5, [lr, sl, lsl #2]
   d562a:	4065      	eors	r5, r4
   d562c:	f851 4c14 	ldr.w	r4, [r1, #-20]
   d5630:	406c      	eors	r4, r5
   d5632:	f3cb 2507 	ubfx	r5, fp, #8, #8
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   d5636:	fa5f fa80 	uxtb.w	sl, r0
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d563a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   d563e:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d5642:	406c      	eors	r4, r5
   d5644:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
   d5648:	4065      	eors	r5, r4
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   d564a:	0e2b      	lsrs	r3, r5, #24
   d564c:	fa5f f488 	uxtb.w	r4, r8
   d5650:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   d5654:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
   d5658:	405c      	eors	r4, r3
   d565a:	f851 3c10 	ldr.w	r3, [r1, #-16]
   d565e:	4063      	eors	r3, r4
   d5660:	f3c9 2407 	ubfx	r4, r9, #8, #8
   d5664:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   d5668:	4063      	eors	r3, r4
   d566a:	f3c0 4407 	ubfx	r4, r0, #16, #8
   d566e:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
   d5672:	ea83 0b04 	eor.w	fp, r3, r4
   d5676:	fa5f f489 	uxtb.w	r4, r9
   d567a:	ea4f 6318 	mov.w	r3, r8, lsr #24
   d567e:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
   d5682:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   d5686:	405c      	eors	r4, r3
   d5688:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   d568c:	4063      	eors	r3, r4
   d568e:	f3c0 2407 	ubfx	r4, r0, #8, #8
   d5692:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   d5696:	4063      	eors	r3, r4
   d5698:	f3c5 4407 	ubfx	r4, r5, #16, #8
   d569c:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
   d56a0:	4063      	eors	r3, r4
   d56a2:	ea4f 6419 	mov.w	r4, r9, lsr #24
   d56a6:	f3c9 4907 	ubfx	r9, r9, #16, #8
   d56aa:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
   d56ae:	ea8a 0a04 	eor.w	sl, sl, r4
   d56b2:	f851 4c08 	ldr.w	r4, [r1, #-8]
   d56b6:	ea8a 0404 	eor.w	r4, sl, r4
   d56ba:	f3c5 2a07 	ubfx	sl, r5, #8, #8
   d56be:	b2ed      	uxtb	r5, r5
   d56c0:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
   d56c4:	ea84 040a 	eor.w	r4, r4, sl
   d56c8:	f3c8 4a07 	ubfx	sl, r8, #16, #8
   d56cc:	f3c8 2807 	ubfx	r8, r8, #8, #8
   d56d0:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
   d56d4:	ea84 040a 	eor.w	r4, r4, sl
   d56d8:	ea4f 6a10 	mov.w	sl, r0, lsr #24
   d56dc:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
   d56e0:	f85e 502a 	ldr.w	r5, [lr, sl, lsl #2]
   d56e4:	4045      	eors	r5, r0
   d56e6:	f851 0c04 	ldr.w	r0, [r1, #-4]
   d56ea:	4068      	eors	r0, r5
   d56ec:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
   d56f0:	4068      	eors	r0, r5
   d56f2:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
   d56f6:	4045      	eors	r5, r0
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   d56f8:	9801      	ldr	r0, [sp, #4]
   d56fa:	3801      	subs	r0, #1
   d56fc:	9001      	str	r0, [sp, #4]
   d56fe:	e732      	b.n	d5566 <mbedtls_internal_aes_encrypt+0x36>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d5700:	f858 102a 	ldr.w	r1, [r8, sl, lsl #2]
   d5704:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
   d5708:	f8df c19c 	ldr.w	ip, [pc, #412]	; d58a8 <mbedtls_internal_aes_encrypt+0x378>
   d570c:	f8df e19c 	ldr.w	lr, [pc, #412]	; d58ac <mbedtls_internal_aes_encrypt+0x37c>
   d5710:	f3c3 2607 	ubfx	r6, r3, #8, #8
   d5714:	404f      	eors	r7, r1
   d5716:	6801      	ldr	r1, [r0, #0]
   d5718:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
   d571c:	4079      	eors	r1, r7
   d571e:	4071      	eors	r1, r6
   d5720:	f3c4 4607 	ubfx	r6, r4, #16, #8
   d5724:	f85e 7026 	ldr.w	r7, [lr, r6, lsl #2]
   d5728:	b2de      	uxtb	r6, r3
   d572a:	404f      	eors	r7, r1
   d572c:	ea4f 611b 	mov.w	r1, fp, lsr #24
   d5730:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   d5734:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
   d5738:	ea86 0a01 	eor.w	sl, r6, r1
   d573c:	f3c4 2607 	ubfx	r6, r4, #8, #8
   d5740:	6841      	ldr	r1, [r0, #4]
   d5742:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
   d5746:	ea8a 0101 	eor.w	r1, sl, r1
   d574a:	4071      	eors	r1, r6
   d574c:	f3c5 4607 	ubfx	r6, r5, #16, #8
   d5750:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
   d5754:	ea81 0a06 	eor.w	sl, r1, r6
   d5758:	b2e6      	uxtb	r6, r4
   d575a:	0e19      	lsrs	r1, r3, #24
   d575c:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   d5760:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
   d5764:	4071      	eors	r1, r6
   d5766:	6886      	ldr	r6, [r0, #8]
   d5768:	404e      	eors	r6, r1
   d576a:	f3c5 2107 	ubfx	r1, r5, #8, #8
   d576e:	0e24      	lsrs	r4, r4, #24
   d5770:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
   d5774:	404e      	eors	r6, r1
   d5776:	f3cb 4107 	ubfx	r1, fp, #16, #8
   d577a:	b2ed      	uxtb	r5, r5
   d577c:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   d5780:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
   d5784:	404e      	eors	r6, r1
   d5786:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
   d578a:	68c4      	ldr	r4, [r0, #12]
   d578c:	4069      	eors	r1, r5
   d578e:	404c      	eors	r4, r1
   d5790:	f3cb 2107 	ubfx	r1, fp, #8, #8
   d5794:	f3c3 4307 	ubfx	r3, r3, #16, #8
   d5798:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
   d579c:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   d57a0:	404c      	eors	r4, r1
   d57a2:	405c      	eors	r4, r3

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
   d57a4:	b2f9      	uxtb	r1, r7
   d57a6:	4b42      	ldr	r3, [pc, #264]	; (d58b0 <mbedtls_internal_aes_encrypt+0x380>)
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
   d57a8:	0e25      	lsrs	r5, r4, #24
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
   d57aa:	f813 e001 	ldrb.w	lr, [r3, r1]
   d57ae:	6901      	ldr	r1, [r0, #16]
   d57b0:	ea8e 0101 	eor.w	r1, lr, r1
   d57b4:	f813 e005 	ldrb.w	lr, [r3, r5]

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
   d57b8:	f3ca 2507 	ubfx	r5, sl, #8, #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
   d57bc:	ea81 610e 	eor.w	r1, r1, lr, lsl #24
   d57c0:	f813 e005 	ldrb.w	lr, [r3, r5]
   d57c4:	f3c6 4507 	ubfx	r5, r6, #16, #8
   d57c8:	ea81 210e 	eor.w	r1, r1, lr, lsl #8
   d57cc:	f813 e005 	ldrb.w	lr, [r3, r5]
   d57d0:	ea81 4e0e 	eor.w	lr, r1, lr, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
   d57d4:	fa5f f18a 	uxtb.w	r1, sl
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   d57d8:	5c5d      	ldrb	r5, [r3, r1]
   d57da:	6941      	ldr	r1, [r0, #20]
   d57dc:	4069      	eors	r1, r5
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
   d57de:	0e3d      	lsrs	r5, r7, #24
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   d57e0:	5d5d      	ldrb	r5, [r3, r5]
   d57e2:	ea81 6105 	eor.w	r1, r1, r5, lsl #24
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
   d57e6:	f3c6 2507 	ubfx	r5, r6, #8, #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   d57ea:	5d5d      	ldrb	r5, [r3, r5]
   d57ec:	ea81 2105 	eor.w	r1, r1, r5, lsl #8
   d57f0:	f3c4 4507 	ubfx	r5, r4, #16, #8
   d57f4:	5d5d      	ldrb	r5, [r3, r5]
   d57f6:	ea81 4505 	eor.w	r5, r1, r5, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
   d57fa:	b2f1      	uxtb	r1, r6

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
   d57fc:	0e36      	lsrs	r6, r6, #24
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   d57fe:	f813 c001 	ldrb.w	ip, [r3, r1]
   d5802:	6981      	ldr	r1, [r0, #24]
   d5804:	ea8c 0101 	eor.w	r1, ip, r1
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
   d5808:	ea4f 6c1a 	mov.w	ip, sl, lsr #24

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   d580c:	f3ca 4a07 	ubfx	sl, sl, #16, #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   d5810:	f813 c00c 	ldrb.w	ip, [r3, ip]
   d5814:	ea81 610c 	eor.w	r1, r1, ip, lsl #24
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
   d5818:	f3c4 2c07 	ubfx	ip, r4, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
   d581c:	b2e4      	uxtb	r4, r4
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   d581e:	f813 c00c 	ldrb.w	ip, [r3, ip]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   d5822:	5d1c      	ldrb	r4, [r3, r4]
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   d5824:	ea81 210c 	eor.w	r1, r1, ip, lsl #8
   d5828:	f3c7 4c07 	ubfx	ip, r7, #16, #8
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
   d582c:	f3c7 2707 	ubfx	r7, r7, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   d5830:	f813 c00c 	ldrb.w	ip, [r3, ip]
   d5834:	ea81 4c0c 	eor.w	ip, r1, ip, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   d5838:	69c1      	ldr	r1, [r0, #28]
   d583a:	ea84 0001 	eor.w	r0, r4, r1
   d583e:	5d99      	ldrb	r1, [r3, r6]
   d5840:	ea80 6001 	eor.w	r0, r0, r1, lsl #24
   d5844:	5dd9      	ldrb	r1, [r3, r7]
   d5846:	f813 300a 	ldrb.w	r3, [r3, sl]
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   d584a:	f882 e000 	strb.w	lr, [r2]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   d584e:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   d5852:	ea4f 211e 	mov.w	r1, lr, lsr #8
   d5856:	7051      	strb	r1, [r2, #1]
   d5858:	ea4f 411e 	mov.w	r1, lr, lsr #16
   d585c:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
   d585e:	0a29      	lsrs	r1, r5, #8
   d5860:	7151      	strb	r1, [r2, #5]
   d5862:	0c29      	lsrs	r1, r5, #16
   d5864:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
   d5866:	ea4f 211c 	mov.w	r1, ip, lsr #8
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   d586a:	ea80 4303 	eor.w	r3, r0, r3, lsl #16
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
   d586e:	7251      	strb	r1, [r2, #9]
   d5870:	ea4f 411c 	mov.w	r1, ip, lsr #16
   d5874:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
   d5876:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   d5878:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
   d587c:	7115      	strb	r5, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
   d587e:	f882 c008 	strb.w	ip, [r2, #8]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
   d5882:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X2, output,  8 );
   d5884:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
    PUT_UINT32_LE( X3, output, 12 );
   d5888:	7313      	strb	r3, [r2, #12]
   d588a:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
   d588c:	2000      	movs	r0, #0
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
   d588e:	0c19      	lsrs	r1, r3, #16
   d5890:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   d5892:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
   d5896:	71d5      	strb	r5, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
   d5898:	f882 c00b 	strb.w	ip, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
   d589c:	7391      	strb	r1, [r2, #14]
   d589e:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
   d58a0:	b003      	add	sp, #12
   d58a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d58a6:	bf00      	nop
   d58a8:	2003c574 	.word	0x2003c574
   d58ac:	2003c974 	.word	0x2003c974
   d58b0:	2003d274 	.word	0x2003d274
   d58b4:	2003c174 	.word	0x2003c174
   d58b8:	2003cd74 	.word	0x2003cd74

000d58bc <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
   d58bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
   d58c0:	6845      	ldr	r5, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   d58c2:	680c      	ldr	r4, [r1, #0]
   d58c4:	682b      	ldr	r3, [r5, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   d58c6:	684e      	ldr	r6, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   d58c8:	6800      	ldr	r0, [r0, #0]
   d58ca:	f8df c374 	ldr.w	ip, [pc, #884]	; d5c40 <mbedtls_internal_aes_decrypt+0x384>
   d58ce:	f8df e374 	ldr.w	lr, [pc, #884]	; d5c44 <mbedtls_internal_aes_decrypt+0x388>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d58d2:	4fd8      	ldr	r7, [pc, #864]	; (d5c34 <mbedtls_internal_aes_decrypt+0x378>)
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   d58d4:	405c      	eors	r4, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   d58d6:	686b      	ldr	r3, [r5, #4]
   d58d8:	ea86 0b03 	eor.w	fp, r6, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   d58dc:	688e      	ldr	r6, [r1, #8]
   d58de:	68ab      	ldr	r3, [r5, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   d58e0:	1040      	asrs	r0, r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   d58e2:	4073      	eors	r3, r6
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   d58e4:	68ce      	ldr	r6, [r1, #12]
   d58e6:	68e9      	ldr	r1, [r5, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   d58e8:	3801      	subs	r0, #1
   d58ea:	9001      	str	r0, [sp, #4]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   d58ec:	4071      	eors	r1, r6
   d58ee:	f105 0010 	add.w	r0, r5, #16

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   d58f2:	9e01      	ldr	r6, [sp, #4]
   d58f4:	f8df 9348 	ldr.w	r9, [pc, #840]	; d5c40 <mbedtls_internal_aes_decrypt+0x384>
   d58f8:	f8df 8348 	ldr.w	r8, [pc, #840]	; d5c44 <mbedtls_internal_aes_decrypt+0x388>
   d58fc:	2e00      	cmp	r6, #0
   d58fe:	4605      	mov	r5, r0
   d5900:	b2e6      	uxtb	r6, r4
   d5902:	f100 0020 	add.w	r0, r0, #32
   d5906:	ea4f 6a1b 	mov.w	sl, fp, lsr #24
   d590a:	f340 80c0 	ble.w	d5a8e <mbedtls_internal_aes_decrypt+0x1d2>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d590e:	f85e 502a 	ldr.w	r5, [lr, sl, lsl #2]
   d5912:	f85c 8026 	ldr.w	r8, [ip, r6, lsl #2]
   d5916:	4ec8      	ldr	r6, [pc, #800]	; (d5c38 <mbedtls_internal_aes_decrypt+0x37c>)
   d5918:	ea88 0805 	eor.w	r8, r8, r5
   d591c:	f850 5c20 	ldr.w	r5, [r0, #-32]
   d5920:	ea88 0805 	eor.w	r8, r8, r5
   d5924:	f3c1 2507 	ubfx	r5, r1, #8, #8
   d5928:	fa5f f98b 	uxtb.w	r9, fp
   d592c:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   d5930:	f85c 9029 	ldr.w	r9, [ip, r9, lsl #2]
   d5934:	ea88 0505 	eor.w	r5, r8, r5
   d5938:	f3c3 4807 	ubfx	r8, r3, #16, #8
   d593c:	fa5f fa83 	uxtb.w	sl, r3
   d5940:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
   d5944:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
   d5948:	ea85 0808 	eor.w	r8, r5, r8
   d594c:	0e1d      	lsrs	r5, r3, #24
   d594e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   d5952:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
   d5956:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   d595a:	ea89 0905 	eor.w	r9, r9, r5
   d595e:	f850 5c1c 	ldr.w	r5, [r0, #-28]
   d5962:	ea89 0505 	eor.w	r5, r9, r5
   d5966:	f3c4 2907 	ubfx	r9, r4, #8, #8
   d596a:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
   d596e:	ea85 0509 	eor.w	r5, r5, r9
   d5972:	f3c1 4907 	ubfx	r9, r1, #16, #8
   d5976:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
   d597a:	ea85 0909 	eor.w	r9, r5, r9
   d597e:	0e0d      	lsrs	r5, r1, #24
   d5980:	b2c9      	uxtb	r1, r1
   d5982:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
   d5986:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
   d598a:	ea8a 0a05 	eor.w	sl, sl, r5
   d598e:	f850 5c18 	ldr.w	r5, [r0, #-24]
   d5992:	ea8a 0505 	eor.w	r5, sl, r5
   d5996:	f3cb 2a07 	ubfx	sl, fp, #8, #8
   d599a:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
   d599e:	ea85 050a 	eor.w	r5, r5, sl
   d59a2:	f3c4 4a07 	ubfx	sl, r4, #16, #8
   d59a6:	0e24      	lsrs	r4, r4, #24
   d59a8:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
   d59ac:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
   d59b0:	404c      	eors	r4, r1
   d59b2:	f850 1c14 	ldr.w	r1, [r0, #-20]
   d59b6:	4061      	eors	r1, r4
   d59b8:	4059      	eors	r1, r3
   d59ba:	f3cb 4307 	ubfx	r3, fp, #16, #8
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   d59be:	fa5f f488 	uxtb.w	r4, r8
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d59c2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   d59c6:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d59ca:	4059      	eors	r1, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   d59cc:	ea4f 6319 	mov.w	r3, r9, lsr #24
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d59d0:	ea85 050a 	eor.w	r5, r5, sl
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   d59d4:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   d59d8:	405c      	eors	r4, r3
   d59da:	f850 3c10 	ldr.w	r3, [r0, #-16]
   d59de:	4063      	eors	r3, r4
   d59e0:	f3c1 2407 	ubfx	r4, r1, #8, #8
   d59e4:	fa5f fa89 	uxtb.w	sl, r9
   d59e8:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   d59ec:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
   d59f0:	4063      	eors	r3, r4
   d59f2:	f3c5 4407 	ubfx	r4, r5, #16, #8
   d59f6:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
   d59fa:	405c      	eors	r4, r3
   d59fc:	0e2b      	lsrs	r3, r5, #24
   d59fe:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   d5a02:	ea8a 0a03 	eor.w	sl, sl, r3
   d5a06:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   d5a0a:	ea8a 0303 	eor.w	r3, sl, r3
   d5a0e:	f3c8 2a07 	ubfx	sl, r8, #8, #8
   d5a12:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
   d5a16:	ea83 030a 	eor.w	r3, r3, sl
   d5a1a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
   d5a1e:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
   d5a22:	ea83 0b0a 	eor.w	fp, r3, sl
   d5a26:	fa5f fa85 	uxtb.w	sl, r5
   d5a2a:	0e0b      	lsrs	r3, r1, #24
   d5a2c:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
   d5a30:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   d5a34:	ea8a 0a03 	eor.w	sl, sl, r3
   d5a38:	f850 3c08 	ldr.w	r3, [r0, #-8]
   d5a3c:	ea8a 0303 	eor.w	r3, sl, r3
   d5a40:	f3c9 2a07 	ubfx	sl, r9, #8, #8
   d5a44:	b2c9      	uxtb	r1, r1
   d5a46:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
   d5a4a:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
   d5a4e:	ea83 030a 	eor.w	r3, r3, sl
   d5a52:	f3c8 4a07 	ubfx	sl, r8, #16, #8
   d5a56:	ea4f 6818 	mov.w	r8, r8, lsr #24
   d5a5a:	f3c5 2507 	ubfx	r5, r5, #8, #8
   d5a5e:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
   d5a62:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   d5a66:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
   d5a6a:	ea81 0808 	eor.w	r8, r1, r8
   d5a6e:	f850 1c04 	ldr.w	r1, [r0, #-4]
   d5a72:	f3c9 4907 	ubfx	r9, r9, #16, #8
   d5a76:	ea88 0101 	eor.w	r1, r8, r1
   d5a7a:	4069      	eors	r1, r5
   d5a7c:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
   d5a80:	4069      	eors	r1, r5
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   d5a82:	9d01      	ldr	r5, [sp, #4]
   d5a84:	3d01      	subs	r5, #1
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   d5a86:	ea83 030a 	eor.w	r3, r3, sl
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   d5a8a:	9501      	str	r5, [sp, #4]
   d5a8c:	e731      	b.n	d58f2 <mbedtls_internal_aes_decrypt+0x36>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d5a8e:	f858 002a 	ldr.w	r0, [r8, sl, lsl #2]
   d5a92:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
   d5a96:	f8df c19c 	ldr.w	ip, [pc, #412]	; d5c34 <mbedtls_internal_aes_decrypt+0x378>
   d5a9a:	f8df e19c 	ldr.w	lr, [pc, #412]	; d5c38 <mbedtls_internal_aes_decrypt+0x37c>
   d5a9e:	f3c1 2607 	ubfx	r6, r1, #8, #8
   d5aa2:	4047      	eors	r7, r0
   d5aa4:	6828      	ldr	r0, [r5, #0]
   d5aa6:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
   d5aaa:	4078      	eors	r0, r7
   d5aac:	4070      	eors	r0, r6
   d5aae:	f3c3 4607 	ubfx	r6, r3, #16, #8
   d5ab2:	f85e 7026 	ldr.w	r7, [lr, r6, lsl #2]
   d5ab6:	fa5f f68b 	uxtb.w	r6, fp
   d5aba:	4047      	eors	r7, r0
   d5abc:	0e18      	lsrs	r0, r3, #24
   d5abe:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   d5ac2:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
   d5ac6:	ea86 0a00 	eor.w	sl, r6, r0
   d5aca:	f3c4 2607 	ubfx	r6, r4, #8, #8
   d5ace:	6868      	ldr	r0, [r5, #4]
   d5ad0:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
   d5ad4:	ea8a 0000 	eor.w	r0, sl, r0
   d5ad8:	4070      	eors	r0, r6
   d5ada:	f3c1 4607 	ubfx	r6, r1, #16, #8
   d5ade:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
   d5ae2:	ea80 0a06 	eor.w	sl, r0, r6
   d5ae6:	b2de      	uxtb	r6, r3
   d5ae8:	0e08      	lsrs	r0, r1, #24
   d5aea:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   d5aee:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
   d5af2:	4070      	eors	r0, r6
   d5af4:	68ae      	ldr	r6, [r5, #8]
   d5af6:	4046      	eors	r6, r0
   d5af8:	f3cb 2007 	ubfx	r0, fp, #8, #8
   d5afc:	b2c9      	uxtb	r1, r1
   d5afe:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
   d5b02:	4046      	eors	r6, r0
   d5b04:	f3c4 4007 	ubfx	r0, r4, #16, #8
   d5b08:	0e24      	lsrs	r4, r4, #24
   d5b0a:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
   d5b0e:	4046      	eors	r6, r0
   d5b10:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
   d5b14:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
   d5b18:	f3c3 2307 	ubfx	r3, r3, #8, #8
   d5b1c:	4048      	eors	r0, r1
   d5b1e:	68e9      	ldr	r1, [r5, #12]
   d5b20:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
   d5b24:	4041      	eors	r1, r0
   d5b26:	4059      	eors	r1, r3
   d5b28:	f3cb 4307 	ubfx	r3, fp, #16, #8

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
   d5b2c:	b2f8      	uxtb	r0, r7
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d5b2e:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   d5b32:	4059      	eors	r1, r3

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
   d5b34:	4b41      	ldr	r3, [pc, #260]	; (d5c3c <mbedtls_internal_aes_decrypt+0x380>)
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
   d5b36:	ea4f 641a 	mov.w	r4, sl, lsr #24
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
   d5b3a:	f813 e000 	ldrb.w	lr, [r3, r0]
   d5b3e:	6928      	ldr	r0, [r5, #16]
   d5b40:	ea8e 0000 	eor.w	r0, lr, r0
   d5b44:	f813 e004 	ldrb.w	lr, [r3, r4]

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
   d5b48:	f3c1 2407 	ubfx	r4, r1, #8, #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
   d5b4c:	ea80 600e 	eor.w	r0, r0, lr, lsl #24
   d5b50:	f813 e004 	ldrb.w	lr, [r3, r4]
   d5b54:	f3c6 4407 	ubfx	r4, r6, #16, #8
   d5b58:	ea80 200e 	eor.w	r0, r0, lr, lsl #8
   d5b5c:	f813 e004 	ldrb.w	lr, [r3, r4]
   d5b60:	ea80 4e0e 	eor.w	lr, r0, lr, lsl #16
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
   d5b64:	fa5f f08a 	uxtb.w	r0, sl
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   d5b68:	5c1c      	ldrb	r4, [r3, r0]
   d5b6a:	6968      	ldr	r0, [r5, #20]
   d5b6c:	4060      	eors	r0, r4
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
   d5b6e:	0e34      	lsrs	r4, r6, #24
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   d5b70:	5d1c      	ldrb	r4, [r3, r4]
   d5b72:	ea80 6004 	eor.w	r0, r0, r4, lsl #24
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
   d5b76:	f3c7 2407 	ubfx	r4, r7, #8, #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   d5b7a:	5d1c      	ldrb	r4, [r3, r4]
   d5b7c:	ea80 2004 	eor.w	r0, r0, r4, lsl #8
   d5b80:	f3c1 4407 	ubfx	r4, r1, #16, #8
   d5b84:	5d1c      	ldrb	r4, [r3, r4]
   d5b86:	ea80 4404 	eor.w	r4, r0, r4, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
   d5b8a:	b2f0      	uxtb	r0, r6
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
   d5b8c:	f3c6 2607 	ubfx	r6, r6, #8, #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   d5b90:	f813 c000 	ldrb.w	ip, [r3, r0]
   d5b94:	69a8      	ldr	r0, [r5, #24]
   d5b96:	ea8c 0000 	eor.w	r0, ip, r0
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
   d5b9a:	ea4f 6c11 	mov.w	ip, r1, lsr #24

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
   d5b9e:	b2c9      	uxtb	r1, r1
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   d5ba0:	f813 c00c 	ldrb.w	ip, [r3, ip]
   d5ba4:	ea80 600c 	eor.w	r0, r0, ip, lsl #24
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
   d5ba8:	f3ca 2c07 	ubfx	ip, sl, #8, #8
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   d5bac:	f3ca 4a07 	ubfx	sl, sl, #16, #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   d5bb0:	f813 c00c 	ldrb.w	ip, [r3, ip]
   d5bb4:	ea80 200c 	eor.w	r0, r0, ip, lsl #8
   d5bb8:	f3c7 4c07 	ubfx	ip, r7, #16, #8

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
   d5bbc:	0e3f      	lsrs	r7, r7, #24
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   d5bbe:	f813 c00c 	ldrb.w	ip, [r3, ip]
   d5bc2:	ea80 4c0c 	eor.w	ip, r0, ip, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   d5bc6:	5c58      	ldrb	r0, [r3, r1]
   d5bc8:	69e9      	ldr	r1, [r5, #28]
   d5bca:	4041      	eors	r1, r0
   d5bcc:	5dd8      	ldrb	r0, [r3, r7]
   d5bce:	ea81 6100 	eor.w	r1, r1, r0, lsl #24
   d5bd2:	5d98      	ldrb	r0, [r3, r6]
   d5bd4:	f813 300a 	ldrb.w	r3, [r3, sl]
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   d5bd8:	f882 e000 	strb.w	lr, [r2]
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   d5bdc:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
   d5be0:	ea81 4303 	eor.w	r3, r1, r3, lsl #16
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   d5be4:	ea4f 211e 	mov.w	r1, lr, lsr #8
   d5be8:	7051      	strb	r1, [r2, #1]
   d5bea:	ea4f 411e 	mov.w	r1, lr, lsr #16
   d5bee:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
   d5bf0:	0a21      	lsrs	r1, r4, #8
   d5bf2:	7151      	strb	r1, [r2, #5]
   d5bf4:	0c21      	lsrs	r1, r4, #16
   d5bf6:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
   d5bf8:	ea4f 211c 	mov.w	r1, ip, lsr #8
   d5bfc:	7251      	strb	r1, [r2, #9]
   d5bfe:	ea4f 411c 	mov.w	r1, ip, lsr #16
   d5c02:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
   d5c04:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   d5c06:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
   d5c0a:	7114      	strb	r4, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
   d5c0c:	f882 c008 	strb.w	ip, [r2, #8]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
   d5c10:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X2, output,  8 );
   d5c12:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
    PUT_UINT32_LE( X3, output, 12 );
   d5c16:	7313      	strb	r3, [r2, #12]
   d5c18:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
   d5c1a:	2000      	movs	r0, #0
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
   d5c1c:	0c19      	lsrs	r1, r3, #16
   d5c1e:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   d5c20:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
   d5c24:	71d4      	strb	r4, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
   d5c26:	f882 c00b 	strb.w	ip, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
   d5c2a:	7391      	strb	r1, [r2, #14]
   d5c2c:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
   d5c2e:	b003      	add	sp, #12
   d5c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5c34:	2003db74 	.word	0x2003db74
   d5c38:	2003df74 	.word	0x2003df74
   d5c3c:	2003d174 	.word	0x2003d174
   d5c40:	2003d774 	.word	0x2003d774
   d5c44:	2003d374 	.word	0x2003d374

000d5c48 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
   d5c48:	b410      	push	{r4}
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
   d5c4a:	2901      	cmp	r1, #1
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
   d5c4c:	4614      	mov	r4, r2
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
   d5c4e:	4621      	mov	r1, r4
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
   d5c50:	461a      	mov	r2, r3
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
   d5c52:	d103      	bne.n	d5c5c <mbedtls_aes_crypt_ecb+0x14>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
   d5c54:	f85d 4b04 	ldr.w	r4, [sp], #4
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
   d5c58:	f7ff bc6a 	b.w	d5530 <mbedtls_internal_aes_encrypt>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
   d5c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
   d5c60:	f7ff be2c 	b.w	d58bc <mbedtls_internal_aes_decrypt>

000d5c64 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
   d5c64:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
   d5c66:	6803      	ldr	r3, [r0, #0]
   d5c68:	1acd      	subs	r5, r1, r3
   d5c6a:	2d00      	cmp	r5, #0
   d5c6c:	dc02      	bgt.n	d5c74 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d5c6e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   d5c72:	bd30      	pop	{r4, r5, pc}

    if( ( **p & 0x80 ) == 0 )
   d5c74:	781c      	ldrb	r4, [r3, #0]
   d5c76:	f014 0f80 	tst.w	r4, #128	; 0x80
   d5c7a:	d104      	bne.n	d5c86 <mbedtls_asn1_get_len+0x22>
        *len = *(*p)++;
   d5c7c:	1c5c      	adds	r4, r3, #1
   d5c7e:	6004      	str	r4, [r0, #0]
   d5c80:	781b      	ldrb	r3, [r3, #0]
   d5c82:	6013      	str	r3, [r2, #0]
   d5c84:	e036      	b.n	d5cf4 <mbedtls_asn1_get_len+0x90>
    else
    {
        switch( **p & 0x7F )
   d5c86:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5c8a:	3c01      	subs	r4, #1
   d5c8c:	2c03      	cmp	r4, #3
   d5c8e:	d838      	bhi.n	d5d02 <mbedtls_asn1_get_len+0x9e>
   d5c90:	e8df f004 	tbb	[pc, r4]
   d5c94:	20130902 	.word	0x20130902
        {
        case 1:
            if( ( end - *p ) < 2 )
   d5c98:	2d01      	cmp	r5, #1
   d5c9a:	d0e8      	beq.n	d5c6e <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = (*p)[1];
   d5c9c:	785b      	ldrb	r3, [r3, #1]
   d5c9e:	6013      	str	r3, [r2, #0]
            (*p) += 2;
   d5ca0:	6803      	ldr	r3, [r0, #0]
   d5ca2:	3302      	adds	r3, #2
   d5ca4:	e025      	b.n	d5cf2 <mbedtls_asn1_get_len+0x8e>
            break;

        case 2:
            if( ( end - *p ) < 3 )
   d5ca6:	2d02      	cmp	r5, #2
   d5ca8:	dde1      	ble.n	d5c6e <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
   d5caa:	785c      	ldrb	r4, [r3, #1]
   d5cac:	789b      	ldrb	r3, [r3, #2]
   d5cae:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   d5cb2:	6013      	str	r3, [r2, #0]
            (*p) += 3;
   d5cb4:	6803      	ldr	r3, [r0, #0]
   d5cb6:	3303      	adds	r3, #3
   d5cb8:	e01b      	b.n	d5cf2 <mbedtls_asn1_get_len+0x8e>
            break;

        case 3:
            if( ( end - *p ) < 4 )
   d5cba:	2d03      	cmp	r5, #3
   d5cbc:	ddd7      	ble.n	d5c6e <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 16 ) |
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
   d5cbe:	789c      	ldrb	r4, [r3, #2]
   d5cc0:	785d      	ldrb	r5, [r3, #1]
   d5cc2:	78db      	ldrb	r3, [r3, #3]
   d5cc4:	0224      	lsls	r4, r4, #8
   d5cc6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   d5cca:	431c      	orrs	r4, r3
   d5ccc:	6014      	str	r4, [r2, #0]
            (*p) += 4;
   d5cce:	6803      	ldr	r3, [r0, #0]
   d5cd0:	3304      	adds	r3, #4
   d5cd2:	e00e      	b.n	d5cf2 <mbedtls_asn1_get_len+0x8e>
            break;

        case 4:
            if( ( end - *p ) < 5 )
   d5cd4:	2d04      	cmp	r5, #4
   d5cd6:	ddca      	ble.n	d5c6e <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
   d5cd8:	789c      	ldrb	r4, [r3, #2]
   d5cda:	785d      	ldrb	r5, [r3, #1]
   d5cdc:	0424      	lsls	r4, r4, #16
   d5cde:	ea44 6505 	orr.w	r5, r4, r5, lsl #24
   d5ce2:	791c      	ldrb	r4, [r3, #4]
   d5ce4:	78db      	ldrb	r3, [r3, #3]
   d5ce6:	432c      	orrs	r4, r5
   d5ce8:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5cec:	6013      	str	r3, [r2, #0]
            (*p) += 5;
   d5cee:	6803      	ldr	r3, [r0, #0]
   d5cf0:	3305      	adds	r3, #5
   d5cf2:	6003      	str	r3, [r0, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
   d5cf4:	6803      	ldr	r3, [r0, #0]
   d5cf6:	1ac9      	subs	r1, r1, r3
   d5cf8:	6813      	ldr	r3, [r2, #0]
   d5cfa:	428b      	cmp	r3, r1
   d5cfc:	d8b7      	bhi.n	d5c6e <mbedtls_asn1_get_len+0xa>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
   d5cfe:	2000      	movs	r0, #0
   d5d00:	bd30      	pop	{r4, r5, pc}
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
            (*p) += 5;
            break;

        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d5d02:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
   d5d06:	bd30      	pop	{r4, r5, pc}

000d5d08 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
   d5d08:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
   d5d0a:	6804      	ldr	r4, [r0, #0]
   d5d0c:	1b0e      	subs	r6, r1, r4
   d5d0e:	2e00      	cmp	r6, #0
   d5d10:	dd07      	ble.n	d5d22 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
   d5d12:	7826      	ldrb	r6, [r4, #0]
   d5d14:	429e      	cmp	r6, r3
   d5d16:	d107      	bne.n	d5d28 <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
   d5d18:	3401      	adds	r4, #1
   d5d1a:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
   d5d1c:	bc70      	pop	{r4, r5, r6}
    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
   d5d1e:	f7ff bfa1 	b.w	d5c64 <mbedtls_asn1_get_len>
int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d5d22:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   d5d26:	e001      	b.n	d5d2c <mbedtls_asn1_get_tag+0x24>

    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d5d28:	f06f 0061 	mvn.w	r0, #97	; 0x61

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
}
   d5d2c:	bc70      	pop	{r4, r5, r6}
   d5d2e:	4770      	bx	lr

000d5d30 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
   d5d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
   d5d32:	2301      	movs	r3, #1
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
   d5d34:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
   d5d36:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
   d5d38:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
   d5d3a:	f7ff ffe5 	bl	d5d08 <mbedtls_asn1_get_tag>
   d5d3e:	b970      	cbnz	r0, d5d5e <mbedtls_asn1_get_bool+0x2e>
        return( ret );

    if( len != 1 )
   d5d40:	9b01      	ldr	r3, [sp, #4]
   d5d42:	2b01      	cmp	r3, #1
   d5d44:	d109      	bne.n	d5d5a <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
   d5d46:	6823      	ldr	r3, [r4, #0]
   d5d48:	781b      	ldrb	r3, [r3, #0]
   d5d4a:	3300      	adds	r3, #0
   d5d4c:	bf18      	it	ne
   d5d4e:	2301      	movne	r3, #1
   d5d50:	602b      	str	r3, [r5, #0]
    (*p)++;
   d5d52:	6823      	ldr	r3, [r4, #0]
   d5d54:	3301      	adds	r3, #1
   d5d56:	6023      	str	r3, [r4, #0]

    return( 0 );
   d5d58:	e001      	b.n	d5d5e <mbedtls_asn1_get_bool+0x2e>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
        return( ret );

    if( len != 1 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d5d5a:	f06f 0063 	mvn.w	r0, #99	; 0x63

    *val = ( **p != 0 ) ? 1 : 0;
    (*p)++;

    return( 0 );
}
   d5d5e:	b003      	add	sp, #12
   d5d60:	bd30      	pop	{r4, r5, pc}

000d5d62 <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
   d5d62:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d5d64:	2302      	movs	r3, #2
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
   d5d66:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d5d68:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
   d5d6a:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d5d6c:	f7ff ffcc 	bl	d5d08 <mbedtls_asn1_get_tag>
   d5d70:	b9c8      	cbnz	r0, d5da6 <mbedtls_asn1_get_int+0x44>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
   d5d72:	9b01      	ldr	r3, [sp, #4]
   d5d74:	3b01      	subs	r3, #1
   d5d76:	2b03      	cmp	r3, #3
   d5d78:	d813      	bhi.n	d5da2 <mbedtls_asn1_get_int+0x40>
   d5d7a:	6823      	ldr	r3, [r4, #0]
   d5d7c:	f993 3000 	ldrsb.w	r3, [r3]
   d5d80:	2b00      	cmp	r3, #0
   d5d82:	db0e      	blt.n	d5da2 <mbedtls_asn1_get_int+0x40>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
   d5d84:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
   d5d86:	9b01      	ldr	r3, [sp, #4]
   d5d88:	1e5a      	subs	r2, r3, #1
   d5d8a:	9201      	str	r2, [sp, #4]
   d5d8c:	b15b      	cbz	r3, d5da6 <mbedtls_asn1_get_int+0x44>
    {
        *val = ( *val << 8 ) | **p;
   d5d8e:	6823      	ldr	r3, [r4, #0]
   d5d90:	682a      	ldr	r2, [r5, #0]
   d5d92:	781b      	ldrb	r3, [r3, #0]
   d5d94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d5d98:	602b      	str	r3, [r5, #0]
        (*p)++;
   d5d9a:	6823      	ldr	r3, [r4, #0]
   d5d9c:	3301      	adds	r3, #1
   d5d9e:	6023      	str	r3, [r4, #0]
    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;

    while( len-- > 0 )
   d5da0:	e7f1      	b.n	d5d86 <mbedtls_asn1_get_int+0x24>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d5da2:	f06f 0063 	mvn.w	r0, #99	; 0x63
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
   d5da6:	b003      	add	sp, #12
   d5da8:	bd30      	pop	{r4, r5, pc}

000d5daa <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
   d5daa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d5dac:	2302      	movs	r3, #2

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
   d5dae:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d5db0:	aa01      	add	r2, sp, #4

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
   d5db2:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d5db4:	f7ff ffa8 	bl	d5d08 <mbedtls_asn1_get_tag>
   d5db8:	b940      	cbnz	r0, d5dcc <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
   d5dba:	9a01      	ldr	r2, [sp, #4]
   d5dbc:	6821      	ldr	r1, [r4, #0]
   d5dbe:	4628      	mov	r0, r5
   d5dc0:	f000 fc90 	bl	d66e4 <mbedtls_mpi_read_binary>

    *p += len;
   d5dc4:	6822      	ldr	r2, [r4, #0]
   d5dc6:	9b01      	ldr	r3, [sp, #4]
   d5dc8:	4413      	add	r3, r2
   d5dca:	6023      	str	r3, [r4, #0]

    return( ret );
}
   d5dcc:	b003      	add	sp, #12
   d5dce:	bd30      	pop	{r4, r5, pc}

000d5dd0 <mbedtls_asn1_get_bitstring>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
   d5dd0:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d5dd2:	2303      	movs	r3, #3
}
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
   d5dd4:	4604      	mov	r4, r0
   d5dd6:	460e      	mov	r6, r1
   d5dd8:	4615      	mov	r5, r2
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d5dda:	f7ff ff95 	bl	d5d08 <mbedtls_asn1_get_tag>
   d5dde:	b9d8      	cbnz	r0, d5e18 <mbedtls_asn1_get_bitstring+0x48>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
   d5de0:	6813      	ldr	r3, [r2, #0]
   d5de2:	b1a3      	cbz	r3, d5e0e <mbedtls_asn1_get_bitstring+0x3e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
   d5de4:	3b01      	subs	r3, #1
   d5de6:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
   d5de8:	6823      	ldr	r3, [r4, #0]
   d5dea:	781b      	ldrb	r3, [r3, #0]
   d5dec:	7113      	strb	r3, [r2, #4]
    if( bs->unused_bits > 7 )
   d5dee:	2b07      	cmp	r3, #7
   d5df0:	d810      	bhi.n	d5e14 <mbedtls_asn1_get_bitstring+0x44>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
   d5df2:	6823      	ldr	r3, [r4, #0]
   d5df4:	3301      	adds	r3, #1
   d5df6:	6023      	str	r3, [r4, #0]

    /* Get actual bitstring */
    bs->p = *p;
   d5df8:	6093      	str	r3, [r2, #8]
    *p += bs->len;
   d5dfa:	6822      	ldr	r2, [r4, #0]
   d5dfc:	682b      	ldr	r3, [r5, #0]
   d5dfe:	4413      	add	r3, r2

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d5e00:	429e      	cmp	r6, r3
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;

    /* Get actual bitstring */
    bs->p = *p;
    *p += bs->len;
   d5e02:	6023      	str	r3, [r4, #0]

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d5e04:	bf0c      	ite	eq
   d5e06:	2000      	moveq	r0, #0
   d5e08:	f06f 0065 	mvnne.w	r0, #101	; 0x65
   d5e0c:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d5e0e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   d5e12:	bd70      	pop	{r4, r5, r6, pc}
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
    if( bs->unused_bits > 7 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d5e14:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   d5e18:	bd70      	pop	{r4, r5, r6, pc}

000d5e1a <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
   d5e1a:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d5e1c:	2303      	movs	r3, #3
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
   d5e1e:	4604      	mov	r4, r0
   d5e20:	4615      	mov	r5, r2
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d5e22:	f7ff ff71 	bl	d5d08 <mbedtls_asn1_get_tag>
   d5e26:	b958      	cbnz	r0, d5e40 <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
   d5e28:	6813      	ldr	r3, [r2, #0]
   d5e2a:	1e5a      	subs	r2, r3, #1
   d5e2c:	2b01      	cmp	r3, #1
   d5e2e:	602a      	str	r2, [r5, #0]
   d5e30:	d904      	bls.n	d5e3c <mbedtls_asn1_get_bitstring_null+0x22>
   d5e32:	6823      	ldr	r3, [r4, #0]
   d5e34:	1c5a      	adds	r2, r3, #1
   d5e36:	6022      	str	r2, [r4, #0]
   d5e38:	781b      	ldrb	r3, [r3, #0]
   d5e3a:	b10b      	cbz	r3, d5e40 <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
   d5e3c:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
   d5e40:	bd38      	pop	{r3, r4, r5, pc}

000d5e42 <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
   d5e42:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5e46:	4615      	mov	r5, r2
   d5e48:	4698      	mov	r8, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d5e4a:	aa01      	add	r2, sp, #4
   d5e4c:	2330      	movs	r3, #48	; 0x30
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
   d5e4e:	4604      	mov	r4, r0
   d5e50:	460f      	mov	r7, r1
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d5e52:	f7ff ff59 	bl	d5d08 <mbedtls_asn1_get_tag>
   d5e56:	4606      	mov	r6, r0
   d5e58:	bb78      	cbnz	r0, d5eba <mbedtls_asn1_get_sequence_of+0x78>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
   d5e5a:	6822      	ldr	r2, [r4, #0]
   d5e5c:	9b01      	ldr	r3, [sp, #4]
   d5e5e:	4413      	add	r3, r2
   d5e60:	429f      	cmp	r7, r3
   d5e62:	d01d      	beq.n	d5ea0 <mbedtls_asn1_get_sequence_of+0x5e>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d5e64:	f06f 0665 	mvn.w	r6, #101	; 0x65
   d5e68:	e027      	b.n	d5eba <mbedtls_asn1_get_sequence_of+0x78>

    while( *p < end )
   d5e6a:	6823      	ldr	r3, [r4, #0]
   d5e6c:	429f      	cmp	r7, r3
   d5e6e:	d91a      	bls.n	d5ea6 <mbedtls_asn1_get_sequence_of+0x64>
    {
        buf = &(cur->buf);
        buf->tag = **p;
   d5e70:	781b      	ldrb	r3, [r3, #0]
   d5e72:	602b      	str	r3, [r5, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
   d5e74:	464a      	mov	r2, r9
   d5e76:	4643      	mov	r3, r8
   d5e78:	4639      	mov	r1, r7
   d5e7a:	4620      	mov	r0, r4
   d5e7c:	f7ff ff44 	bl	d5d08 <mbedtls_asn1_get_tag>
   d5e80:	b9b8      	cbnz	r0, d5eb2 <mbedtls_asn1_get_sequence_of+0x70>
            return( ret );

        buf->p = *p;
   d5e82:	6823      	ldr	r3, [r4, #0]
   d5e84:	60ab      	str	r3, [r5, #8]
        *p += buf->len;
   d5e86:	6822      	ldr	r2, [r4, #0]
   d5e88:	686b      	ldr	r3, [r5, #4]
   d5e8a:	4413      	add	r3, r2

        /* Allocate and assign next pointer */
        if( *p < end )
   d5e8c:	429f      	cmp	r7, r3

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
            return( ret );

        buf->p = *p;
        *p += buf->len;
   d5e8e:	6023      	str	r3, [r4, #0]

        /* Allocate and assign next pointer */
        if( *p < end )
   d5e90:	d9eb      	bls.n	d5e6a <mbedtls_asn1_get_sequence_of+0x28>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
   d5e92:	2110      	movs	r1, #16
   d5e94:	2001      	movs	r0, #1
   d5e96:	f011 ffc1 	bl	e7e1c <calloc>
                                            sizeof( mbedtls_asn1_sequence ) );
   d5e9a:	60e8      	str	r0, [r5, #12]

            if( cur->next == NULL )
   d5e9c:	b158      	cbz	r0, d5eb6 <mbedtls_asn1_get_sequence_of+0x74>
   d5e9e:	4605      	mov	r5, r0
    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
   d5ea0:	f105 0904 	add.w	r9, r5, #4
   d5ea4:	e7e1      	b.n	d5e6a <mbedtls_asn1_get_sequence_of+0x28>
            cur = cur->next;
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
   d5ea6:	2300      	movs	r3, #0
   d5ea8:	60eb      	str	r3, [r5, #12]

    if( *p != end )
   d5eaa:	6823      	ldr	r3, [r4, #0]
   d5eac:	429f      	cmp	r7, r3
   d5eae:	d004      	beq.n	d5eba <mbedtls_asn1_get_sequence_of+0x78>
   d5eb0:	e7d8      	b.n	d5e64 <mbedtls_asn1_get_sequence_of+0x22>
    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
   d5eb2:	4606      	mov	r6, r0
   d5eb4:	e001      	b.n	d5eba <mbedtls_asn1_get_sequence_of+0x78>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
                                            sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
   d5eb6:	f06f 0669 	mvn.w	r6, #105	; 0x69

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   d5eba:	4630      	mov	r0, r6
   d5ebc:	b003      	add	sp, #12
   d5ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5ec2 <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
   d5ec2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5ec6:	4690      	mov	r8, r2
   d5ec8:	461f      	mov	r7, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d5eca:	aa01      	add	r2, sp, #4
   d5ecc:	2330      	movs	r3, #48	; 0x30
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
   d5ece:	4604      	mov	r4, r0
   d5ed0:	460e      	mov	r6, r1
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d5ed2:	f7ff ff19 	bl	d5d08 <mbedtls_asn1_get_tag>
   d5ed6:	4605      	mov	r5, r0
   d5ed8:	2800      	cmp	r0, #0
   d5eda:	d13b      	bne.n	d5f54 <mbedtls_asn1_get_alg+0x92>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
   d5edc:	6823      	ldr	r3, [r4, #0]
   d5ede:	1af6      	subs	r6, r6, r3
   d5ee0:	2e00      	cmp	r6, #0
   d5ee2:	dd35      	ble.n	d5f50 <mbedtls_asn1_get_alg+0x8e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
   d5ee4:	4642      	mov	r2, r8
   d5ee6:	781b      	ldrb	r3, [r3, #0]
   d5ee8:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
   d5eec:	9b01      	ldr	r3, [sp, #4]
   d5eee:	6826      	ldr	r6, [r4, #0]
   d5ef0:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
   d5ef2:	4631      	mov	r1, r6
   d5ef4:	2306      	movs	r3, #6
   d5ef6:	4620      	mov	r0, r4
   d5ef8:	f7ff ff06 	bl	d5d08 <mbedtls_asn1_get_tag>
   d5efc:	4605      	mov	r5, r0
   d5efe:	bb48      	cbnz	r0, d5f54 <mbedtls_asn1_get_alg+0x92>
        return( ret );

    alg->p = *p;
   d5f00:	6823      	ldr	r3, [r4, #0]
   d5f02:	f8c8 3008 	str.w	r3, [r8, #8]
    *p += alg->len;
   d5f06:	6822      	ldr	r2, [r4, #0]
   d5f08:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d5f0c:	18d1      	adds	r1, r2, r3

    if( *p == end )
   d5f0e:	428e      	cmp	r6, r1

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( ret );

    alg->p = *p;
    *p += alg->len;
   d5f10:	6021      	str	r1, [r4, #0]

    if( *p == end )
   d5f12:	d104      	bne.n	d5f1e <mbedtls_asn1_get_alg+0x5c>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
   d5f14:	210c      	movs	r1, #12
   d5f16:	4638      	mov	r0, r7
   d5f18:	f006 fb6a 	bl	dc5f0 <mbedtls_platform_zeroize>
        return( 0 );
   d5f1c:	e01a      	b.n	d5f54 <mbedtls_asn1_get_alg+0x92>
    }

    params->tag = **p;
   d5f1e:	5cd3      	ldrb	r3, [r2, r3]
   d5f20:	463a      	mov	r2, r7
    (*p)++;

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
   d5f22:	4631      	mov	r1, r6
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
   d5f24:	f842 3b04 	str.w	r3, [r2], #4
    (*p)++;
   d5f28:	6823      	ldr	r3, [r4, #0]
   d5f2a:	3301      	adds	r3, #1
   d5f2c:	6023      	str	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
   d5f2e:	4620      	mov	r0, r4
   d5f30:	f7ff fe98 	bl	d5c64 <mbedtls_asn1_get_len>
   d5f34:	4605      	mov	r5, r0
   d5f36:	b968      	cbnz	r0, d5f54 <mbedtls_asn1_get_alg+0x92>
        return( ret );

    params->p = *p;
   d5f38:	6823      	ldr	r3, [r4, #0]
   d5f3a:	60bb      	str	r3, [r7, #8]
    *p += params->len;
   d5f3c:	6822      	ldr	r2, [r4, #0]
   d5f3e:	687b      	ldr	r3, [r7, #4]
   d5f40:	4413      	add	r3, r2

    if( *p != end )
   d5f42:	429e      	cmp	r6, r3

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
        return( ret );

    params->p = *p;
    *p += params->len;
   d5f44:	6023      	str	r3, [r4, #0]

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d5f46:	bf0c      	ite	eq
   d5f48:	4605      	moveq	r5, r0
   d5f4a:	f06f 0565 	mvnne.w	r5, #101	; 0x65
   d5f4e:	e001      	b.n	d5f54 <mbedtls_asn1_get_alg+0x92>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d5f50:	f06f 055f 	mvn.w	r5, #95	; 0x5f

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   d5f54:	4628      	mov	r0, r5
   d5f56:	b002      	add	sp, #8
   d5f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5f5c <mbedtls_asn1_get_alg_null>:

int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg )
{
   d5f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int ret;
    mbedtls_asn1_buf params;

    memset( &params, 0, sizeof(mbedtls_asn1_buf) );
   d5f5e:	2300      	movs	r3, #0
   d5f60:	9301      	str	r3, [sp, #4]
   d5f62:	9302      	str	r3, [sp, #8]
   d5f64:	9303      	str	r3, [sp, #12]

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
   d5f66:	ab01      	add	r3, sp, #4
   d5f68:	f7ff ffab 	bl	d5ec2 <mbedtls_asn1_get_alg>
   d5f6c:	b960      	cbnz	r0, d5f88 <mbedtls_asn1_get_alg_null+0x2c>
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
   d5f6e:	9b01      	ldr	r3, [sp, #4]
   d5f70:	2b05      	cmp	r3, #5
   d5f72:	d000      	beq.n	d5f76 <mbedtls_asn1_get_alg_null+0x1a>
   d5f74:	b933      	cbnz	r3, d5f84 <mbedtls_asn1_get_alg_null+0x28>
   d5f76:	9b02      	ldr	r3, [sp, #8]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
   d5f78:	2b00      	cmp	r3, #0
   d5f7a:	bf0c      	ite	eq
   d5f7c:	2000      	moveq	r0, #0
   d5f7e:	f06f 0067 	mvnne.w	r0, #103	; 0x67
   d5f82:	e001      	b.n	d5f88 <mbedtls_asn1_get_alg_null+0x2c>
   d5f84:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
   d5f88:	b005      	add	sp, #20
   d5f8a:	f85d fb04 	ldr.w	pc, [sp], #4

000d5f8e <mbedtls_asn1_write_len>:
#define mbedtls_calloc    calloc
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
   d5f8e:	6803      	ldr	r3, [r0, #0]
    if( len < 0x80 )
   d5f90:	2a7f      	cmp	r2, #127	; 0x7f
    {
        if( *p - start < 1 )
   d5f92:	eba3 0101 	sub.w	r1, r3, r1
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
    if( len < 0x80 )
   d5f96:	d807      	bhi.n	d5fa8 <mbedtls_asn1_write_len+0x1a>
    {
        if( *p - start < 1 )
   d5f98:	2900      	cmp	r1, #0
   d5f9a:	dd69      	ble.n	d6070 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
   d5f9c:	1e59      	subs	r1, r3, #1
   d5f9e:	6001      	str	r1, [r0, #0]
   d5fa0:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 1 );
   d5fa4:	2001      	movs	r0, #1
   d5fa6:	4770      	bx	lr
    }

    if( len <= 0xFF )
   d5fa8:	2aff      	cmp	r2, #255	; 0xff
   d5faa:	d80d      	bhi.n	d5fc8 <mbedtls_asn1_write_len+0x3a>
    {
        if( *p - start < 2 )
   d5fac:	2901      	cmp	r1, #1
   d5fae:	dd5f      	ble.n	d6070 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
   d5fb0:	1e59      	subs	r1, r3, #1
   d5fb2:	6001      	str	r1, [r0, #0]
   d5fb4:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x81;
   d5fb8:	6803      	ldr	r3, [r0, #0]
   d5fba:	1e5a      	subs	r2, r3, #1
   d5fbc:	6002      	str	r2, [r0, #0]
   d5fbe:	2281      	movs	r2, #129	; 0x81
   d5fc0:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 2 );
   d5fc4:	2002      	movs	r0, #2
   d5fc6:	4770      	bx	lr
    }

    if( len <= 0xFFFF )
   d5fc8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   d5fcc:	d213      	bcs.n	d5ff6 <mbedtls_asn1_write_len+0x68>
    {
        if( *p - start < 3 )
   d5fce:	2902      	cmp	r1, #2
   d5fd0:	dd4e      	ble.n	d6070 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
   d5fd2:	1e59      	subs	r1, r3, #1
   d5fd4:	6001      	str	r1, [r0, #0]
   d5fd6:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
   d5fda:	6803      	ldr	r3, [r0, #0]
   d5fdc:	0a12      	lsrs	r2, r2, #8
   d5fde:	1e59      	subs	r1, r3, #1
   d5fe0:	6001      	str	r1, [r0, #0]
   d5fe2:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x82;
   d5fe6:	6803      	ldr	r3, [r0, #0]
   d5fe8:	1e5a      	subs	r2, r3, #1
   d5fea:	6002      	str	r2, [r0, #0]
   d5fec:	2282      	movs	r2, #130	; 0x82
   d5fee:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 3 );
   d5ff2:	2003      	movs	r0, #3
   d5ff4:	4770      	bx	lr
    }

    if( len <= 0xFFFFFF )
   d5ff6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   d5ffa:	d219      	bcs.n	d6030 <mbedtls_asn1_write_len+0xa2>
    {
        if( *p - start < 4 )
   d5ffc:	2903      	cmp	r1, #3
   d5ffe:	dd37      	ble.n	d6070 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
   d6000:	1e59      	subs	r1, r3, #1
   d6002:	6001      	str	r1, [r0, #0]
   d6004:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
   d6008:	6803      	ldr	r3, [r0, #0]
   d600a:	1e59      	subs	r1, r3, #1
   d600c:	6001      	str	r1, [r0, #0]
   d600e:	0a11      	lsrs	r1, r2, #8
   d6010:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
   d6014:	6803      	ldr	r3, [r0, #0]
   d6016:	0c12      	lsrs	r2, r2, #16
   d6018:	1e59      	subs	r1, r3, #1
   d601a:	6001      	str	r1, [r0, #0]
   d601c:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x83;
   d6020:	6803      	ldr	r3, [r0, #0]
   d6022:	1e5a      	subs	r2, r3, #1
   d6024:	6002      	str	r2, [r0, #0]
   d6026:	2283      	movs	r2, #131	; 0x83
   d6028:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 4 );
   d602c:	2004      	movs	r0, #4
   d602e:	4770      	bx	lr

#if SIZE_MAX > 0xFFFFFFFF
    if( len <= 0xFFFFFFFF )
#endif
    {
        if( *p - start < 5 )
   d6030:	2904      	cmp	r1, #4
   d6032:	dd1d      	ble.n	d6070 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
   d6034:	1e59      	subs	r1, r3, #1
   d6036:	6001      	str	r1, [r0, #0]
   d6038:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
   d603c:	6803      	ldr	r3, [r0, #0]
   d603e:	1e59      	subs	r1, r3, #1
   d6040:	6001      	str	r1, [r0, #0]
   d6042:	0a11      	lsrs	r1, r2, #8
   d6044:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
   d6048:	6803      	ldr	r3, [r0, #0]
   d604a:	1e59      	subs	r1, r3, #1
   d604c:	6001      	str	r1, [r0, #0]
   d604e:	0c11      	lsrs	r1, r2, #16
   d6050:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 24 ) & 0xFF;
   d6054:	6803      	ldr	r3, [r0, #0]
   d6056:	0e12      	lsrs	r2, r2, #24
   d6058:	1e59      	subs	r1, r3, #1
   d605a:	6001      	str	r1, [r0, #0]
   d605c:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x84;
   d6060:	6803      	ldr	r3, [r0, #0]
   d6062:	1e5a      	subs	r2, r3, #1
   d6064:	6002      	str	r2, [r0, #0]
   d6066:	2284      	movs	r2, #132	; 0x84
   d6068:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 5 );
   d606c:	2005      	movs	r0, #5
   d606e:	4770      	bx	lr
int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
    if( len < 0x80 )
    {
        if( *p - start < 1 )
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   d6070:	f06f 006b 	mvn.w	r0, #107	; 0x6b
    }

#if SIZE_MAX > 0xFFFFFFFF
    return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
#endif
}
   d6074:	4770      	bx	lr

000d6076 <mbedtls_asn1_write_tag>:

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
   d6076:	6803      	ldr	r3, [r0, #0]
   d6078:	1a59      	subs	r1, r3, r1
   d607a:	2900      	cmp	r1, #0
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *--(*p) = tag;
   d607c:	bfc1      	itttt	gt
   d607e:	f103 31ff 	addgt.w	r1, r3, #4294967295	; 0xffffffff
   d6082:	6001      	strgt	r1, [r0, #0]

    return( 1 );
   d6084:	2001      	movgt	r0, #1
int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *--(*p) = tag;
   d6086:	f803 2c01 	strbgt.w	r2, [r3, #-1]
}

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   d608a:	bfd8      	it	le
   d608c:	f06f 006b 	mvnle.w	r0, #107	; 0x6b

    *--(*p) = tag;

    return( 1 );
}
   d6090:	4770      	bx	lr

000d6092 <mbedtls_asn1_write_mpi>:
    return( (int) len );
}

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
   d6092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6094:	4605      	mov	r5, r0
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
   d6096:	4610      	mov	r0, r2
    return( (int) len );
}

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
   d6098:	460e      	mov	r6, r1
   d609a:	4617      	mov	r7, r2
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
   d609c:	f000 fb1c 	bl	d66d8 <mbedtls_mpi_size>

    if( *p < start || (size_t)( *p - start ) < len )
   d60a0:	6829      	ldr	r1, [r5, #0]
   d60a2:	42b1      	cmp	r1, r6
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
   d60a4:	4604      	mov	r4, r0

    if( *p < start || (size_t)( *p - start ) < len )
   d60a6:	d202      	bcs.n	d60ae <mbedtls_asn1_write_mpi+0x1c>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   d60a8:	f06f 006b 	mvn.w	r0, #107	; 0x6b
   d60ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );

    if( *p < start || (size_t)( *p - start ) < len )
   d60ae:	1b8b      	subs	r3, r1, r6
   d60b0:	4298      	cmp	r0, r3
   d60b2:	d8f9      	bhi.n	d60a8 <mbedtls_asn1_write_mpi+0x16>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    (*p) -= len;
   d60b4:	1a09      	subs	r1, r1, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
   d60b6:	4602      	mov	r2, r0
    len = mbedtls_mpi_size( X );

    if( *p < start || (size_t)( *p - start ) < len )
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    (*p) -= len;
   d60b8:	6029      	str	r1, [r5, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
   d60ba:	4638      	mov	r0, r7
   d60bc:	f000 fb49 	bl	d6752 <mbedtls_mpi_write_binary>
   d60c0:	b9f8      	cbnz	r0, d6102 <mbedtls_asn1_write_mpi+0x70>

    // DER format assumes 2s complement for numbers, so the leftmost bit
    // should be 0 for positive numbers and 1 for negative numbers.
    //
    if( X->s ==1 && **p & 0x80 )
   d60c2:	683b      	ldr	r3, [r7, #0]
   d60c4:	2b01      	cmp	r3, #1
   d60c6:	d10c      	bne.n	d60e2 <mbedtls_asn1_write_mpi+0x50>
   d60c8:	682b      	ldr	r3, [r5, #0]
   d60ca:	f993 2000 	ldrsb.w	r2, [r3]
   d60ce:	2a00      	cmp	r2, #0
   d60d0:	da07      	bge.n	d60e2 <mbedtls_asn1_write_mpi+0x50>
    {
        if( *p - start < 1 )
   d60d2:	1b9a      	subs	r2, r3, r6
   d60d4:	2a00      	cmp	r2, #0
   d60d6:	dde7      	ble.n	d60a8 <mbedtls_asn1_write_mpi+0x16>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = 0x00;
   d60d8:	1e5a      	subs	r2, r3, #1
   d60da:	602a      	str	r2, [r5, #0]
        len += 1;
   d60dc:	3401      	adds	r4, #1
    if( X->s ==1 && **p & 0x80 )
    {
        if( *p - start < 1 )
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = 0x00;
   d60de:	f803 0c01 	strb.w	r0, [r3, #-1]
        len += 1;
    }

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   d60e2:	4622      	mov	r2, r4
   d60e4:	4631      	mov	r1, r6
   d60e6:	4628      	mov	r0, r5
   d60e8:	f7ff ff51 	bl	d5f8e <mbedtls_asn1_write_len>
   d60ec:	2800      	cmp	r0, #0
   d60ee:	db08      	blt.n	d6102 <mbedtls_asn1_write_mpi+0x70>
   d60f0:	4404      	add	r4, r0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
   d60f2:	2202      	movs	r2, #2
   d60f4:	4631      	mov	r1, r6
   d60f6:	4628      	mov	r0, r5
   d60f8:	f7ff ffbd 	bl	d6076 <mbedtls_asn1_write_tag>
   d60fc:	2800      	cmp	r0, #0

    ret = (int) len;
   d60fe:	bfa8      	it	ge
   d6100:	1900      	addge	r0, r0, r4

cleanup:
    return( ret );
}
   d6102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6104 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
   d6104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6108:	f8dd e01c 	ldr.w	lr, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
   d610c:	f8df 811c 	ldr.w	r8, [pc, #284]	; d622c <mbedtls_base64_decode+0x128>
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
   d6110:	2700      	movs	r7, #0
   d6112:	463c      	mov	r4, r7
   d6114:	463d      	mov	r5, r7
   d6116:	4575      	cmp	r5, lr
   d6118:	d22d      	bcs.n	d6176 <mbedtls_base64_decode+0x72>
   d611a:	f04f 0c00 	mov.w	ip, #0
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
   d611e:	5d5e      	ldrb	r6, [r3, r5]
   d6120:	2e20      	cmp	r6, #32
   d6122:	d104      	bne.n	d612e <mbedtls_base64_decode+0x2a>
        {
            ++i;
   d6124:	3501      	adds	r5, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
   d6126:	45ae      	cmp	lr, r5
        {
            ++i;
            ++x;
   d6128:	f10c 0c01 	add.w	ip, ip, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
   d612c:	d8f7      	bhi.n	d611e <mbedtls_base64_decode+0x1a>
            ++i;
            ++x;
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
   d612e:	45ae      	cmp	lr, r5
   d6130:	d021      	beq.n	d6176 <mbedtls_base64_decode+0x72>
            break;

        if( ( slen - i ) >= 2 &&
   d6132:	ebc5 060e 	rsb	r6, r5, lr
   d6136:	2e01      	cmp	r6, #1
   d6138:	d906      	bls.n	d6148 <mbedtls_base64_decode+0x44>
   d613a:	5d5e      	ldrb	r6, [r3, r5]
   d613c:	2e0d      	cmp	r6, #13
   d613e:	d103      	bne.n	d6148 <mbedtls_base64_decode+0x44>
            src[i] == '\r' && src[i + 1] == '\n' )
   d6140:	195e      	adds	r6, r3, r5
   d6142:	7876      	ldrb	r6, [r6, #1]
   d6144:	2e0a      	cmp	r6, #10
   d6146:	d014      	beq.n	d6172 <mbedtls_base64_decode+0x6e>
            continue;

        if( src[i] == '\n' )
   d6148:	5d5e      	ldrb	r6, [r3, r5]
   d614a:	2e0a      	cmp	r6, #10
   d614c:	d011      	beq.n	d6172 <mbedtls_base64_decode+0x6e>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
   d614e:	f1bc 0f00 	cmp.w	ip, #0
   d6152:	d166      	bne.n	d6222 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
   d6154:	2e3d      	cmp	r6, #61	; 0x3d
   d6156:	d102      	bne.n	d615e <mbedtls_base64_decode+0x5a>
   d6158:	3701      	adds	r7, #1
   d615a:	2f02      	cmp	r7, #2
   d615c:	d861      	bhi.n	d6222 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
   d615e:	f016 0f80 	tst.w	r6, #128	; 0x80
   d6162:	d15e      	bne.n	d6222 <mbedtls_base64_decode+0x11e>
   d6164:	f818 6006 	ldrb.w	r6, [r8, r6]
   d6168:	2e7f      	cmp	r6, #127	; 0x7f
   d616a:	d05a      	beq.n	d6222 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
   d616c:	2e3f      	cmp	r6, #63	; 0x3f
   d616e:	d956      	bls.n	d621e <mbedtls_base64_decode+0x11a>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
   d6170:	3401      	adds	r4, #1
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
   d6172:	3501      	adds	r5, #1
   d6174:	e7cf      	b.n	d6116 <mbedtls_base64_decode+0x12>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
    }

    if( n == 0 )
   d6176:	b91c      	cbnz	r4, d6180 <mbedtls_base64_decode+0x7c>
    {
        *olen = 0;
   d6178:	6014      	str	r4, [r2, #0]
        return( 0 );
   d617a:	4620      	mov	r0, r4
   d617c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;
   d6180:	f004 0e07 	and.w	lr, r4, #7
   d6184:	2606      	movs	r6, #6
   d6186:	08e4      	lsrs	r4, r4, #3
   d6188:	fb06 fe0e 	mul.w	lr, r6, lr
   d618c:	4366      	muls	r6, r4
   d618e:	f10e 0e07 	add.w	lr, lr, #7
   d6192:	1bf6      	subs	r6, r6, r7
   d6194:	eb06 04de 	add.w	r4, r6, lr, lsr #3

    if( dst == NULL || dlen < n )
   d6198:	b160      	cbz	r0, d61b4 <mbedtls_base64_decode+0xb0>
   d619a:	428c      	cmp	r4, r1
   d619c:	d80a      	bhi.n	d61b4 <mbedtls_base64_decode+0xb0>
   d619e:	2600      	movs	r6, #0
   d61a0:	eb03 0e05 	add.w	lr, r3, r5
   d61a4:	4601      	mov	r1, r0
   d61a6:	2503      	movs	r5, #3
   d61a8:	4634      	mov	r4, r6
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
   d61aa:	f8df c080 	ldr.w	ip, [pc, #128]	; d622c <mbedtls_base64_decode+0x128>
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
   d61ae:	f8df 8080 	ldr.w	r8, [pc, #128]	; d6230 <mbedtls_base64_decode+0x12c>
   d61b2:	e00f      	b.n	d61d4 <mbedtls_base64_decode+0xd0>
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;

    if( dst == NULL || dlen < n )
    {
        *olen = n;
   d61b4:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
   d61b6:	f06f 0029 	mvn.w	r0, #41	; 0x29
   d61ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
   d61be:	f813 9b01 	ldrb.w	r9, [r3], #1
   d61c2:	f1a9 070a 	sub.w	r7, r9, #10
   d61c6:	b2ff      	uxtb	r7, r7
   d61c8:	2f16      	cmp	r7, #22
   d61ca:	d806      	bhi.n	d61da <mbedtls_base64_decode+0xd6>
   d61cc:	fa28 f707 	lsr.w	r7, r8, r7
   d61d0:	07ff      	lsls	r7, r7, #31
   d61d2:	d502      	bpl.n	d61da <mbedtls_base64_decode+0xd6>
    {
        *olen = n;
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   d61d4:	4573      	cmp	r3, lr
   d61d6:	d1f2      	bne.n	d61be <mbedtls_base64_decode+0xba>
   d61d8:	e01c      	b.n	d6214 <mbedtls_base64_decode+0x110>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
   d61da:	f81c 7009 	ldrb.w	r7, [ip, r9]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
   d61de:	3401      	adds	r4, #1
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
   d61e0:	2f40      	cmp	r7, #64	; 0x40
   d61e2:	bf08      	it	eq
   d61e4:	3d01      	subeq	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
   d61e6:	f007 073f 	and.w	r7, r7, #63	; 0x3f

        if( ++n == 4 )
   d61ea:	2c04      	cmp	r4, #4
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
   d61ec:	ea47 1686 	orr.w	r6, r7, r6, lsl #6

        if( ++n == 4 )
   d61f0:	d1f0      	bne.n	d61d4 <mbedtls_base64_decode+0xd0>
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
   d61f2:	b16d      	cbz	r5, d6210 <mbedtls_base64_decode+0x10c>
   d61f4:	0c34      	lsrs	r4, r6, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   d61f6:	2d01      	cmp	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
   d61f8:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   d61fa:	d101      	bne.n	d6200 <mbedtls_base64_decode+0xfc>
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
   d61fc:	3101      	adds	r1, #1
   d61fe:	e007      	b.n	d6210 <mbedtls_base64_decode+0x10c>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
   d6200:	2d02      	cmp	r5, #2

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   d6202:	ea4f 2416 	mov.w	r4, r6, lsr #8
   d6206:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
   d6208:	bf16      	itet	ne
   d620a:	708e      	strbne	r6, [r1, #2]

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   d620c:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
   d620e:	3103      	addne	r1, #3
        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
   d6210:	2400      	movs	r4, #0
   d6212:	e7df      	b.n	d61d4 <mbedtls_base64_decode+0xd0>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
        }
    }

    *olen = p - dst;
   d6214:	1a08      	subs	r0, r1, r0
   d6216:	6010      	str	r0, [r2, #0]

    return( 0 );
   d6218:	2000      	movs	r0, #0
   d621a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
   d621e:	2f00      	cmp	r7, #0
   d6220:	d0a6      	beq.n	d6170 <mbedtls_base64_decode+0x6c>
        if( src[i] == '\n' )
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
   d6222:	f06f 002b 	mvn.w	r0, #43	; 0x2b
   d6226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d622a:	bf00      	nop
   d622c:	000e825d 	.word	0x000e825d
   d6230:	00400009 	.word	0x00400009

000d6234 <_ZL11mpi_sub_hlpjPmS_>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
   d6234:	2300      	movs	r3, #0

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
   d6236:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6238:	4616      	mov	r6, r2
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
   d623a:	461c      	mov	r4, r3
   d623c:	4284      	cmp	r4, r0
   d623e:	d016      	beq.n	d626e <_ZL11mpi_sub_hlpjPmS_+0x3a>
    {
        z = ( *d <  c );     *d -=  c;
   d6240:	f8d6 e000 	ldr.w	lr, [r6]
   d6244:	ebc3 050e 	rsb	r5, r3, lr
   d6248:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
   d624a:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   d624e:	42bd      	cmp	r5, r7
   d6250:	bf2c      	ite	cs
   d6252:	f04f 0c00 	movcs.w	ip, #0
   d6256:	f04f 0c01 	movcc.w	ip, #1
   d625a:	1bed      	subs	r5, r5, r7
   d625c:	4573      	cmp	r3, lr
   d625e:	bf94      	ite	ls
   d6260:	4663      	movls	r3, ip
   d6262:	f10c 0301 	addhi.w	r3, ip, #1
   d6266:	f846 5b04 	str.w	r5, [r6], #4
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
   d626a:	3401      	adds	r4, #1
   d626c:	e7e6      	b.n	d623c <_ZL11mpi_sub_hlpjPmS_+0x8>
   d626e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
   d6272:	b143      	cbz	r3, d6286 <_ZL11mpi_sub_hlpjPmS_+0x52>
    {
        z = ( *d < c ); *d -= c;
   d6274:	6811      	ldr	r1, [r2, #0]
   d6276:	1ac8      	subs	r0, r1, r3
        c = z; d++;
   d6278:	428b      	cmp	r3, r1
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
    {
        z = ( *d < c ); *d -= c;
   d627a:	f842 0b04 	str.w	r0, [r2], #4
        c = z; d++;
   d627e:	bf94      	ite	ls
   d6280:	2300      	movls	r3, #0
   d6282:	2301      	movhi	r3, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
   d6284:	e7f5      	b.n	d6272 <_ZL11mpi_sub_hlpjPmS_+0x3e>
   d6286:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6288 <_ZL11mpi_mul_hlpjPmS_m>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
   d6288:	b5f0      	push	{r4, r5, r6, r7, lr}
   d628a:	4605      	mov	r5, r0
   d628c:	4607      	mov	r7, r0
    mbedtls_mpi_uint c = 0, t = 0;
   d628e:	2400      	movs	r4, #0
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
   d6290:	2f0f      	cmp	r7, #15
   d6292:	d973      	bls.n	d637c <_ZL11mpi_mul_hlpjPmS_m+0xf4>

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
   d6294:	460e      	mov	r6, r1
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
   d6296:	3f10      	subs	r7, #16

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
   d6298:	f856 0b04 	ldr.w	r0, [r6], #4
   d629c:	6811      	ldr	r1, [r2, #0]
   d629e:	fbe3 1460 	umaal	r1, r4, r3, r0
   d62a2:	f842 1b04 	str.w	r1, [r2], #4
   d62a6:	f856 0b04 	ldr.w	r0, [r6], #4
   d62aa:	6811      	ldr	r1, [r2, #0]
   d62ac:	fbe3 1460 	umaal	r1, r4, r3, r0
   d62b0:	f842 1b04 	str.w	r1, [r2], #4
   d62b4:	f856 0b04 	ldr.w	r0, [r6], #4
   d62b8:	6811      	ldr	r1, [r2, #0]
   d62ba:	fbe3 1460 	umaal	r1, r4, r3, r0
   d62be:	f842 1b04 	str.w	r1, [r2], #4
   d62c2:	f856 0b04 	ldr.w	r0, [r6], #4
   d62c6:	6811      	ldr	r1, [r2, #0]
   d62c8:	fbe3 1460 	umaal	r1, r4, r3, r0
   d62cc:	f842 1b04 	str.w	r1, [r2], #4
   d62d0:	f856 0b04 	ldr.w	r0, [r6], #4
   d62d4:	6811      	ldr	r1, [r2, #0]
   d62d6:	fbe3 1460 	umaal	r1, r4, r3, r0
   d62da:	f842 1b04 	str.w	r1, [r2], #4
   d62de:	f856 0b04 	ldr.w	r0, [r6], #4
   d62e2:	6811      	ldr	r1, [r2, #0]
   d62e4:	fbe3 1460 	umaal	r1, r4, r3, r0
   d62e8:	f842 1b04 	str.w	r1, [r2], #4
   d62ec:	f856 0b04 	ldr.w	r0, [r6], #4
   d62f0:	6811      	ldr	r1, [r2, #0]
   d62f2:	fbe3 1460 	umaal	r1, r4, r3, r0
   d62f6:	f842 1b04 	str.w	r1, [r2], #4
   d62fa:	f856 0b04 	ldr.w	r0, [r6], #4
   d62fe:	6811      	ldr	r1, [r2, #0]
   d6300:	fbe3 1460 	umaal	r1, r4, r3, r0
   d6304:	f842 1b04 	str.w	r1, [r2], #4
   d6308:	f856 0b04 	ldr.w	r0, [r6], #4
   d630c:	6811      	ldr	r1, [r2, #0]
   d630e:	fbe3 1460 	umaal	r1, r4, r3, r0
   d6312:	f842 1b04 	str.w	r1, [r2], #4
   d6316:	f856 0b04 	ldr.w	r0, [r6], #4
   d631a:	6811      	ldr	r1, [r2, #0]
   d631c:	fbe3 1460 	umaal	r1, r4, r3, r0
   d6320:	f842 1b04 	str.w	r1, [r2], #4
   d6324:	f856 0b04 	ldr.w	r0, [r6], #4
   d6328:	6811      	ldr	r1, [r2, #0]
   d632a:	fbe3 1460 	umaal	r1, r4, r3, r0
   d632e:	f842 1b04 	str.w	r1, [r2], #4
   d6332:	f856 0b04 	ldr.w	r0, [r6], #4
   d6336:	6811      	ldr	r1, [r2, #0]
   d6338:	fbe3 1460 	umaal	r1, r4, r3, r0
   d633c:	f842 1b04 	str.w	r1, [r2], #4
   d6340:	f856 0b04 	ldr.w	r0, [r6], #4
   d6344:	6811      	ldr	r1, [r2, #0]
   d6346:	fbe3 1460 	umaal	r1, r4, r3, r0
   d634a:	f842 1b04 	str.w	r1, [r2], #4
   d634e:	f856 0b04 	ldr.w	r0, [r6], #4
   d6352:	6811      	ldr	r1, [r2, #0]
   d6354:	fbe3 1460 	umaal	r1, r4, r3, r0
   d6358:	f842 1b04 	str.w	r1, [r2], #4
   d635c:	f856 0b04 	ldr.w	r0, [r6], #4
   d6360:	6811      	ldr	r1, [r2, #0]
   d6362:	fbe3 1460 	umaal	r1, r4, r3, r0
   d6366:	f842 1b04 	str.w	r1, [r2], #4
   d636a:	f856 0b04 	ldr.w	r0, [r6], #4
   d636e:	6811      	ldr	r1, [r2, #0]
   d6370:	fbe3 1460 	umaal	r1, r4, r3, r0
   d6374:	f842 1b04 	str.w	r1, [r2], #4
   d6378:	4631      	mov	r1, r6
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
   d637a:	e789      	b.n	d6290 <_ZL11mpi_mul_hlpjPmS_m+0x8>
   d637c:	f005 050f 	and.w	r5, r5, #15
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
   d6380:	2d07      	cmp	r5, #7
   d6382:	d939      	bls.n	d63f8 <_ZL11mpi_mul_hlpjPmS_m+0x170>
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
   d6384:	460e      	mov	r6, r1
   d6386:	f856 0b04 	ldr.w	r0, [r6], #4
   d638a:	6811      	ldr	r1, [r2, #0]
   d638c:	fbe3 1460 	umaal	r1, r4, r3, r0
   d6390:	f842 1b04 	str.w	r1, [r2], #4
   d6394:	f856 0b04 	ldr.w	r0, [r6], #4
   d6398:	6811      	ldr	r1, [r2, #0]
   d639a:	fbe3 1460 	umaal	r1, r4, r3, r0
   d639e:	f842 1b04 	str.w	r1, [r2], #4
   d63a2:	f856 0b04 	ldr.w	r0, [r6], #4
   d63a6:	6811      	ldr	r1, [r2, #0]
   d63a8:	fbe3 1460 	umaal	r1, r4, r3, r0
   d63ac:	f842 1b04 	str.w	r1, [r2], #4
   d63b0:	f856 0b04 	ldr.w	r0, [r6], #4
   d63b4:	6811      	ldr	r1, [r2, #0]
   d63b6:	fbe3 1460 	umaal	r1, r4, r3, r0
   d63ba:	f842 1b04 	str.w	r1, [r2], #4
   d63be:	f856 0b04 	ldr.w	r0, [r6], #4
   d63c2:	6811      	ldr	r1, [r2, #0]
   d63c4:	fbe3 1460 	umaal	r1, r4, r3, r0
   d63c8:	f842 1b04 	str.w	r1, [r2], #4
   d63cc:	f856 0b04 	ldr.w	r0, [r6], #4
   d63d0:	6811      	ldr	r1, [r2, #0]
   d63d2:	fbe3 1460 	umaal	r1, r4, r3, r0
   d63d6:	f842 1b04 	str.w	r1, [r2], #4
   d63da:	f856 0b04 	ldr.w	r0, [r6], #4
   d63de:	6811      	ldr	r1, [r2, #0]
   d63e0:	fbe3 1460 	umaal	r1, r4, r3, r0
   d63e4:	f842 1b04 	str.w	r1, [r2], #4
   d63e8:	f856 0b04 	ldr.w	r0, [r6], #4
   d63ec:	6811      	ldr	r1, [r2, #0]
   d63ee:	fbe3 1460 	umaal	r1, r4, r3, r0
   d63f2:	f842 1b04 	str.w	r1, [r2], #4
   d63f6:	4631      	mov	r1, r6
   d63f8:	f005 0507 	and.w	r5, r5, #7
    }

    for( ; i > 0; i-- )
   d63fc:	b155      	cbz	r5, d6414 <_ZL11mpi_mul_hlpjPmS_m+0x18c>
    {
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
   d63fe:	460e      	mov	r6, r1
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
   d6400:	3d01      	subs	r5, #1
    {
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
   d6402:	f856 0b04 	ldr.w	r0, [r6], #4
   d6406:	6811      	ldr	r1, [r2, #0]
   d6408:	fbe3 1460 	umaal	r1, r4, r3, r0
   d640c:	f842 1b04 	str.w	r1, [r2], #4
   d6410:	4631      	mov	r1, r6
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
   d6412:	e7f3      	b.n	d63fc <_ZL11mpi_mul_hlpjPmS_m+0x174>
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
   d6414:	6813      	ldr	r3, [r2, #0]
   d6416:	4423      	add	r3, r4
   d6418:	429c      	cmp	r4, r3
   d641a:	f842 3b04 	str.w	r3, [r2], #4
   d641e:	bf8c      	ite	hi
   d6420:	2401      	movhi	r4, #1
   d6422:	2400      	movls	r4, #0
    }
    while( c != 0 );
   d6424:	d8f6      	bhi.n	d6414 <_ZL11mpi_mul_hlpjPmS_m+0x18c>
}
   d6426:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6428 <_ZL21mpi_bigendian_to_hostPmj.part.1>:
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
   d6428:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   d642c:	3901      	subs	r1, #1
   d642e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
         cur_limb_left <= cur_limb_right;
   d6432:	4288      	cmp	r0, r1
   d6434:	d808      	bhi.n	d6448 <_ZL21mpi_bigendian_to_hostPmj.part.1+0x20>
#if defined(have_bswap)
    /* The compiler is hopefully able to statically evaluate this! */
    switch( sizeof(mbedtls_mpi_uint) )
    {
        case 4:
            return( __builtin_bswap32(x) );
   d6436:	6803      	ldr	r3, [r0, #0]
   d6438:	680a      	ldr	r2, [r1, #0]
   d643a:	ba1b      	rev	r3, r3
   d643c:	ba12      	rev	r2, r2
    {
        mbedtls_mpi_uint tmp;
        /* Note that if cur_limb_left == cur_limb_right,
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
   d643e:	f840 2b04 	str.w	r2, [r0], #4
        *cur_limb_right = tmp;
   d6442:	f841 3904 	str.w	r3, [r1], #-4
   d6446:	e7f4      	b.n	d6432 <_ZL21mpi_bigendian_to_hostPmj.part.1+0xa>
   d6448:	4770      	bx	lr

000d644a <mbedtls_mpi_init>:
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d644a:	2301      	movs	r3, #1
   d644c:	6003      	str	r3, [r0, #0]
    X->n = 0;
   d644e:	2300      	movs	r3, #0
   d6450:	6043      	str	r3, [r0, #4]
    X->p = NULL;
   d6452:	6083      	str	r3, [r0, #8]
   d6454:	4770      	bx	lr

000d6456 <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
   d6456:	b510      	push	{r4, lr}
    if( X == NULL )
   d6458:	4604      	mov	r4, r0
   d645a:	b168      	cbz	r0, d6478 <mbedtls_mpi_free+0x22>
        return;

    if( X->p != NULL )
   d645c:	6880      	ldr	r0, [r0, #8]
   d645e:	b130      	cbz	r0, d646e <mbedtls_mpi_free+0x18>
#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
{
    mbedtls_platform_zeroize( v, ciL * n );
   d6460:	6861      	ldr	r1, [r4, #4]
   d6462:	0089      	lsls	r1, r1, #2
   d6464:	f006 f8c4 	bl	dc5f0 <mbedtls_platform_zeroize>
        return;

    if( X->p != NULL )
    {
        mbedtls_mpi_zeroize( X->p, X->n );
        mbedtls_free( X->p );
   d6468:	68a0      	ldr	r0, [r4, #8]
   d646a:	f00f fb69 	bl	e5b40 <free>
    }

    X->s = 1;
   d646e:	2301      	movs	r3, #1
   d6470:	6023      	str	r3, [r4, #0]
    X->n = 0;
   d6472:	2300      	movs	r3, #0
   d6474:	6063      	str	r3, [r4, #4]
    X->p = NULL;
   d6476:	60a3      	str	r3, [r4, #8]
   d6478:	bd10      	pop	{r4, pc}

000d647a <mbedtls_mpi_grow>:
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
    mbedtls_mpi_uint *p;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   d647a:	f242 7310 	movw	r3, #10000	; 0x2710
   d647e:	4299      	cmp	r1, r3

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
   d6480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6484:	4604      	mov	r4, r0
   d6486:	460e      	mov	r6, r1
    mbedtls_mpi_uint *p;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   d6488:	d903      	bls.n	d6492 <mbedtls_mpi_grow+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   d648a:	f06f 000f 	mvn.w	r0, #15
   d648e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    if( X->n < nblimbs )
   d6492:	6845      	ldr	r5, [r0, #4]
   d6494:	42a9      	cmp	r1, r5
   d6496:	d917      	bls.n	d64c8 <mbedtls_mpi_grow+0x4e>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
   d6498:	2104      	movs	r1, #4
   d649a:	4630      	mov	r0, r6
   d649c:	f011 fcbe 	bl	e7e1c <calloc>
   d64a0:	4680      	mov	r8, r0
   d64a2:	2800      	cmp	r0, #0
   d64a4:	d0f1      	beq.n	d648a <mbedtls_mpi_grow+0x10>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

        if( X->p != NULL )
   d64a6:	68a7      	ldr	r7, [r4, #8]
   d64a8:	b15f      	cbz	r7, d64c2 <mbedtls_mpi_grow+0x48>
        {
            memcpy( p, X->p, X->n * ciL );
   d64aa:	00ad      	lsls	r5, r5, #2
   d64ac:	462a      	mov	r2, r5
   d64ae:	4639      	mov	r1, r7
   d64b0:	f011 fcd9 	bl	e7e66 <memcpy>
#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
{
    mbedtls_platform_zeroize( v, ciL * n );
   d64b4:	4638      	mov	r0, r7
   d64b6:	4629      	mov	r1, r5
   d64b8:	f006 f89a 	bl	dc5f0 <mbedtls_platform_zeroize>

        if( X->p != NULL )
        {
            memcpy( p, X->p, X->n * ciL );
            mbedtls_mpi_zeroize( X->p, X->n );
            mbedtls_free( X->p );
   d64bc:	68a0      	ldr	r0, [r4, #8]
   d64be:	f00f fb3f 	bl	e5b40 <free>
        }

        X->n = nblimbs;
   d64c2:	6066      	str	r6, [r4, #4]
        X->p = p;
   d64c4:	f8c4 8008 	str.w	r8, [r4, #8]
    }

    return( 0 );
   d64c8:	2000      	movs	r0, #0
}
   d64ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d64ce <mbedtls_mpi_shrink>:
{
    mbedtls_mpi_uint *p;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   d64ce:	f242 7310 	movw	r3, #10000	; 0x2710
   d64d2:	4299      	cmp	r1, r3
/*
 * Resize down as much as possible,
 * while keeping at least the specified number of limbs
 */
int mbedtls_mpi_shrink( mbedtls_mpi *X, size_t nblimbs )
{
   d64d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d64d8:	4606      	mov	r6, r0
   d64da:	460c      	mov	r4, r1
    mbedtls_mpi_uint *p;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   d64dc:	d903      	bls.n	d64e6 <mbedtls_mpi_shrink+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   d64de:	f06f 000f 	mvn.w	r0, #15
   d64e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    /* Actually resize up in this case */
    if( X->n <= nblimbs )
   d64e6:	6843      	ldr	r3, [r0, #4]
   d64e8:	4299      	cmp	r1, r3
   d64ea:	d303      	bcc.n	d64f4 <mbedtls_mpi_shrink+0x26>

    X->n = i;
    X->p = p;

    return( 0 );
}
   d64ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    /* Actually resize up in this case */
    if( X->n <= nblimbs )
        return( mbedtls_mpi_grow( X, nblimbs ) );
   d64f0:	f7ff bfc3 	b.w	d647a <mbedtls_mpi_grow>

    for( i = X->n - 1; i > 0; i-- )
   d64f4:	1e59      	subs	r1, r3, #1
   d64f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   d64fa:	3b01      	subs	r3, #1
   d64fc:	009d      	lsls	r5, r3, #2
   d64fe:	462b      	mov	r3, r5
   d6500:	b129      	cbz	r1, d650e <mbedtls_mpi_shrink+0x40>
        if( X->p[i] != 0 )
   d6502:	68b2      	ldr	r2, [r6, #8]
   d6504:	58d2      	ldr	r2, [r2, r3]
   d6506:	3b04      	subs	r3, #4
   d6508:	b90a      	cbnz	r2, d650e <mbedtls_mpi_shrink+0x40>

    /* Actually resize up in this case */
    if( X->n <= nblimbs )
        return( mbedtls_mpi_grow( X, nblimbs ) );

    for( i = X->n - 1; i > 0; i-- )
   d650a:	3901      	subs	r1, #1
   d650c:	e7f8      	b.n	d6500 <mbedtls_mpi_shrink+0x32>
        if( X->p[i] != 0 )
            break;
    i++;
   d650e:	3101      	adds	r1, #1
   d6510:	428c      	cmp	r4, r1
   d6512:	bf38      	it	cc
   d6514:	460c      	movcc	r4, r1

    if( i < nblimbs )
        i = nblimbs;

    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
   d6516:	4620      	mov	r0, r4
   d6518:	2104      	movs	r1, #4
   d651a:	f011 fc7f 	bl	e7e1c <calloc>
   d651e:	4680      	mov	r8, r0
   d6520:	2800      	cmp	r0, #0
   d6522:	d0dc      	beq.n	d64de <mbedtls_mpi_shrink+0x10>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    if( X->p != NULL )
   d6524:	68b7      	ldr	r7, [r6, #8]
   d6526:	b157      	cbz	r7, d653e <mbedtls_mpi_shrink+0x70>
    {
        memcpy( p, X->p, i * ciL );
   d6528:	00a2      	lsls	r2, r4, #2
   d652a:	4639      	mov	r1, r7
   d652c:	f011 fc9b 	bl	e7e66 <memcpy>
#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
{
    mbedtls_platform_zeroize( v, ciL * n );
   d6530:	4638      	mov	r0, r7
   d6532:	1d29      	adds	r1, r5, #4
   d6534:	f006 f85c 	bl	dc5f0 <mbedtls_platform_zeroize>

    if( X->p != NULL )
    {
        memcpy( p, X->p, i * ciL );
        mbedtls_mpi_zeroize( X->p, X->n );
        mbedtls_free( X->p );
   d6538:	68b0      	ldr	r0, [r6, #8]
   d653a:	f00f fb01 	bl	e5b40 <free>
    }

    X->n = i;
   d653e:	6074      	str	r4, [r6, #4]
    X->p = p;
   d6540:	f8c6 8008 	str.w	r8, [r6, #8]

    return( 0 );
   d6544:	2000      	movs	r0, #0
}
   d6546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d654a <mbedtls_mpi_copy>:
    int ret = 0;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
   d654a:	4288      	cmp	r0, r1

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
   d654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d654e:	4606      	mov	r6, r0
   d6550:	460f      	mov	r7, r1
    int ret = 0;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
   d6552:	d024      	beq.n	d659e <mbedtls_mpi_copy+0x54>
        return( 0 );

    if( Y->p == NULL )
   d6554:	688d      	ldr	r5, [r1, #8]
   d6556:	b915      	cbnz	r5, d655e <mbedtls_mpi_copy+0x14>
    {
        mbedtls_mpi_free( X );
   d6558:	f7ff ff7d 	bl	d6456 <mbedtls_mpi_free>
   d655c:	e01f      	b.n	d659e <mbedtls_mpi_copy+0x54>
        return( 0 );
    }

    for( i = Y->n - 1; i > 0; i-- )
   d655e:	684c      	ldr	r4, [r1, #4]
   d6560:	3c01      	subs	r4, #1
   d6562:	b11c      	cbz	r4, d656c <mbedtls_mpi_copy+0x22>
        if( Y->p[i] != 0 )
   d6564:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   d6568:	2b00      	cmp	r3, #0
   d656a:	d0f9      	beq.n	d6560 <mbedtls_mpi_copy+0x16>
            break;
    i++;

    X->s = Y->s;

    if( X->n < i )
   d656c:	6872      	ldr	r2, [r6, #4]
    for( i = Y->n - 1; i > 0; i-- )
        if( Y->p[i] != 0 )
            break;
    i++;

    X->s = Y->s;
   d656e:	683b      	ldr	r3, [r7, #0]
   d6570:	6033      	str	r3, [r6, #0]
    }

    for( i = Y->n - 1; i > 0; i-- )
        if( Y->p[i] != 0 )
            break;
    i++;
   d6572:	3401      	adds	r4, #1

    X->s = Y->s;

    if( X->n < i )
   d6574:	4294      	cmp	r4, r2
   d6576:	d905      	bls.n	d6584 <mbedtls_mpi_copy+0x3a>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
   d6578:	4621      	mov	r1, r4
   d657a:	4630      	mov	r0, r6
   d657c:	f7ff ff7d 	bl	d647a <mbedtls_mpi_grow>
   d6580:	b140      	cbz	r0, d6594 <mbedtls_mpi_copy+0x4a>
   d6582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
        memset( X->p + i, 0, ( X->n - i ) * ciL );
   d6584:	68b0      	ldr	r0, [r6, #8]
   d6586:	1b12      	subs	r2, r2, r4
   d6588:	0092      	lsls	r2, r2, #2
   d658a:	2100      	movs	r1, #0
   d658c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   d6590:	f011 fc8f 	bl	e7eb2 <memset>
    }

    memcpy( X->p, Y->p, i * ciL );
   d6594:	00a2      	lsls	r2, r4, #2
   d6596:	68b9      	ldr	r1, [r7, #8]
   d6598:	68b0      	ldr	r0, [r6, #8]
   d659a:	f011 fc64 	bl	e7e66 <memcpy>
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
        return( 0 );
   d659e:	2000      	movs	r0, #0
    memcpy( X->p, Y->p, i * ciL );

cleanup:

    return( ret );
}
   d65a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d65a2 <mbedtls_mpi_safe_cond_assign>:
 * Conditionally assign X = Y, without leaking information
 * about whether the assignment was made or not.
 * (Leaking information about the respective sizes of X and Y is ok however.)
 */
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign )
{
   d65a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d65a4:	460d      	mov	r5, r1
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
   d65a6:	6849      	ldr	r1, [r1, #4]
 * Conditionally assign X = Y, without leaking information
 * about whether the assignment was made or not.
 * (Leaking information about the respective sizes of X and Y is ok however.)
 */
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign )
{
   d65a8:	4604      	mov	r4, r0
   d65aa:	4616      	mov	r6, r2
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
   d65ac:	f7ff ff65 	bl	d647a <mbedtls_mpi_grow>
   d65b0:	bb58      	cbnz	r0, d660a <mbedtls_mpi_safe_cond_assign+0x68>
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;
   d65b2:	4273      	negs	r3, r6
   d65b4:	ea46 0203 	orr.w	r2, r6, r3

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );

    X->s = X->s * ( 1 - assign ) + Y->s * assign;
   d65b8:	6829      	ldr	r1, [r5, #0]
   d65ba:	6823      	ldr	r3, [r4, #0]
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;
   d65bc:	f3c2 12c0 	ubfx	r2, r2, #7, #1

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );

    X->s = X->s * ( 1 - assign ) + Y->s * assign;
   d65c0:	f1c2 0601 	rsb	r6, r2, #1
   d65c4:	4351      	muls	r1, r2
   d65c6:	fb03 1306 	mla	r3, r3, r6, r1
   d65ca:	6023      	str	r3, [r4, #0]

    for( i = 0; i < Y->n; i++ )
   d65cc:	4603      	mov	r3, r0
   d65ce:	6869      	ldr	r1, [r5, #4]
   d65d0:	428b      	cmp	r3, r1
   d65d2:	ea4f 0183 	mov.w	r1, r3, lsl #2
   d65d6:	d20d      	bcs.n	d65f4 <mbedtls_mpi_safe_cond_assign+0x52>
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
   d65d8:	68a9      	ldr	r1, [r5, #8]
   d65da:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d65de:	f851 7023 	ldr.w	r7, [r1, r3, lsl #2]
   d65e2:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
   d65e6:	4371      	muls	r1, r6
   d65e8:	fb07 1102 	mla	r1, r7, r2, r1
   d65ec:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );

    X->s = X->s * ( 1 - assign ) + Y->s * assign;

    for( i = 0; i < Y->n; i++ )
   d65f0:	3301      	adds	r3, #1
   d65f2:	e7ec      	b.n	d65ce <mbedtls_mpi_safe_cond_assign+0x2c>
   d65f4:	460a      	mov	r2, r1
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;

    for( ; i < X->n; i++ )
   d65f6:	6861      	ldr	r1, [r4, #4]
   d65f8:	428b      	cmp	r3, r1
   d65fa:	d206      	bcs.n	d660a <mbedtls_mpi_safe_cond_assign+0x68>
        X->p[i] *= ( 1 - assign );
   d65fc:	68a5      	ldr	r5, [r4, #8]
   d65fe:	58a9      	ldr	r1, [r5, r2]
   d6600:	4371      	muls	r1, r6
   d6602:	50a9      	str	r1, [r5, r2]
    X->s = X->s * ( 1 - assign ) + Y->s * assign;

    for( i = 0; i < Y->n; i++ )
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;

    for( ; i < X->n; i++ )
   d6604:	3301      	adds	r3, #1
   d6606:	3204      	adds	r2, #4
   d6608:	e7f5      	b.n	d65f6 <mbedtls_mpi_safe_cond_assign+0x54>
        X->p[i] *= ( 1 - assign );

cleanup:
    return( ret );
}
   d660a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d660c <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
   d660c:	b570      	push	{r4, r5, r6, lr}
   d660e:	460e      	mov	r6, r1
    int ret;
    MPI_VALIDATE_RET( X != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
   d6610:	2101      	movs	r1, #1

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
   d6612:	4604      	mov	r4, r0
    int ret;
    MPI_VALIDATE_RET( X != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
   d6614:	f7ff ff31 	bl	d647a <mbedtls_mpi_grow>
   d6618:	4605      	mov	r5, r0
   d661a:	b988      	cbnz	r0, d6640 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
   d661c:	6862      	ldr	r2, [r4, #4]
   d661e:	4601      	mov	r1, r0
   d6620:	0092      	lsls	r2, r2, #2
   d6622:	68a0      	ldr	r0, [r4, #8]
   d6624:	f011 fc45 	bl	e7eb2 <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
   d6628:	68a3      	ldr	r3, [r4, #8]
   d662a:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
   d662e:	2e00      	cmp	r6, #0
    MPI_VALIDATE_RET( X != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    memset( X->p, 0, X->n * ciL );

    X->p[0] = ( z < 0 ) ? -z : z;
   d6630:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
   d6634:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
   d6636:	bfb4      	ite	lt
   d6638:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   d663c:	2301      	movge	r3, #1
   d663e:	6023      	str	r3, [r4, #0]

cleanup:

    return( ret );
}
   d6640:	4628      	mov	r0, r5
   d6642:	bd70      	pop	{r4, r5, r6, pc}

000d6644 <mbedtls_mpi_get_bit>:
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    MPI_VALIDATE_RET( X != NULL );

    if( X->n * biL <= pos )
   d6644:	6843      	ldr	r3, [r0, #4]
   d6646:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
        return( 0 );

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
   d664a:	bf3f      	itttt	cc
   d664c:	6883      	ldrcc	r3, [r0, #8]
   d664e:	094a      	lsrcc	r2, r1, #5
   d6650:	f001 001f 	andcc.w	r0, r1, #31
   d6654:	f853 3022 	ldrcc.w	r3, [r3, r2, lsl #2]
   d6658:	bf3a      	itte	cc
   d665a:	fa23 f000 	lsrcc.w	r0, r3, r0
   d665e:	f000 0001 	andcc.w	r0, r0, #1
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    MPI_VALIDATE_RET( X != NULL );

    if( X->n * biL <= pos )
        return( 0 );
   d6662:	2000      	movcs	r0, #0

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
}
   d6664:	4770      	bx	lr

000d6666 <mbedtls_mpi_lsb>:

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
   d6666:	b570      	push	{r4, r5, r6, lr}
    size_t i, j, count = 0;
   d6668:	2300      	movs	r3, #0
    MBEDTLS_INTERNAL_VALIDATE_RET( X != NULL, 0 );

    for( i = 0; i < X->n; i++ )
   d666a:	6844      	ldr	r4, [r0, #4]
   d666c:	461a      	mov	r2, r3
   d666e:	42a2      	cmp	r2, r4
   d6670:	d00e      	beq.n	d6690 <mbedtls_mpi_lsb+0x2a>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
   d6672:	6881      	ldr	r1, [r0, #8]
   d6674:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   d6678:	2100      	movs	r1, #0
   d667a:	fa25 f601 	lsr.w	r6, r5, r1
   d667e:	07f6      	lsls	r6, r6, #31
   d6680:	d408      	bmi.n	d6694 <mbedtls_mpi_lsb+0x2e>
{
    size_t i, j, count = 0;
    MBEDTLS_INTERNAL_VALIDATE_RET( X != NULL, 0 );

    for( i = 0; i < X->n; i++ )
        for( j = 0; j < biL; j++, count++ )
   d6682:	3101      	adds	r1, #1
   d6684:	2920      	cmp	r1, #32
   d6686:	f103 0301 	add.w	r3, r3, #1
   d668a:	d1f6      	bne.n	d667a <mbedtls_mpi_lsb+0x14>
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;
    MBEDTLS_INTERNAL_VALIDATE_RET( X != NULL, 0 );

    for( i = 0; i < X->n; i++ )
   d668c:	3201      	adds	r2, #1
   d668e:	e7ee      	b.n	d666e <mbedtls_mpi_lsb+0x8>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
                return( count );

    return( 0 );
   d6690:	2000      	movs	r0, #0
   d6692:	bd70      	pop	{r4, r5, r6, pc}
   d6694:	4618      	mov	r0, r3
}
   d6696:	bd70      	pop	{r4, r5, r6, pc}

000d6698 <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
   d6698:	b510      	push	{r4, lr}
    size_t i, j;

    if( X->n == 0 )
   d669a:	6843      	ldr	r3, [r0, #4]
   d669c:	b1d3      	cbz	r3, d66d4 <mbedtls_mpi_bitlen+0x3c>
   d669e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   d66a2:	3a01      	subs	r2, #1
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
   d66a4:	1e59      	subs	r1, r3, #1
   d66a6:	0092      	lsls	r2, r2, #2
   d66a8:	6883      	ldr	r3, [r0, #8]
   d66aa:	b121      	cbz	r1, d66b6 <mbedtls_mpi_bitlen+0x1e>
        if( X->p[i] != 0 )
   d66ac:	589c      	ldr	r4, [r3, r2]
   d66ae:	3a04      	subs	r2, #4
   d66b0:	b90c      	cbnz	r4, d66b6 <mbedtls_mpi_bitlen+0x1e>
    size_t i, j;

    if( X->n == 0 )
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
   d66b2:	3901      	subs	r1, #1
   d66b4:	e7f8      	b.n	d66a8 <mbedtls_mpi_bitlen+0x10>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );
   d66b6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
   d66ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000

    for( j = 0; j < biL; j++ )
   d66be:	2300      	movs	r3, #0
    {
        if( x & mask ) break;
   d66c0:	4210      	tst	r0, r2
   d66c2:	d104      	bne.n	d66ce <mbedtls_mpi_bitlen+0x36>
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
   d66c4:	3301      	adds	r3, #1
   d66c6:	2b20      	cmp	r3, #32
    {
        if( x & mask ) break;

        mask >>= 1;
   d66c8:	ea4f 0252 	mov.w	r2, r2, lsr #1
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
   d66cc:	d1f8      	bne.n	d66c0 <mbedtls_mpi_bitlen+0x28>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );

    return( ( i * biL ) + j );
   d66ce:	ebc3 1341 	rsb	r3, r3, r1, lsl #5
   d66d2:	3320      	adds	r3, #32
}
   d66d4:	4618      	mov	r0, r3
   d66d6:	bd10      	pop	{r4, pc}

000d66d8 <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
   d66d8:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
   d66da:	f7ff ffdd 	bl	d6698 <mbedtls_mpi_bitlen>
   d66de:	3007      	adds	r0, #7
}
   d66e0:	08c0      	lsrs	r0, r0, #3
   d66e2:	bd08      	pop	{r3, pc}

000d66e4 <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
   d66e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret;
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
   d66e8:	f012 0403 	ands.w	r4, r2, #3
   d66ec:	bf18      	it	ne
   d66ee:	2401      	movne	r4, #1

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   d66f0:	6843      	ldr	r3, [r0, #4]
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
    int ret;
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
   d66f2:	eb04 0492 	add.w	r4, r4, r2, lsr #2

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   d66f6:	429c      	cmp	r4, r3

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
   d66f8:	4607      	mov	r7, r0
   d66fa:	4688      	mov	r8, r1
   d66fc:	4615      	mov	r5, r2

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   d66fe:	d106      	bne.n	d670e <mbedtls_mpi_read_binary+0x2a>
    {
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   d6700:	2100      	movs	r1, #0
   d6702:	4638      	mov	r0, r7
   d6704:	f7ff ff82 	bl	d660c <mbedtls_mpi_lset>
   d6708:	4606      	mov	r6, r0
   d670a:	b178      	cbz	r0, d672c <mbedtls_mpi_read_binary+0x48>
   d670c:	e01e      	b.n	d674c <mbedtls_mpi_read_binary+0x68>
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
   d670e:	f7ff fea2 	bl	d6456 <mbedtls_mpi_free>
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d6712:	2301      	movs	r3, #1
   d6714:	603b      	str	r3, [r7, #0]
    X->n = 0;
   d6716:	2300      	movs	r3, #0
   d6718:	607b      	str	r3, [r7, #4]
    X->p = NULL;
   d671a:	60bb      	str	r3, [r7, #8]
    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
   d671c:	4621      	mov	r1, r4
   d671e:	4638      	mov	r0, r7
   d6720:	f7ff feab 	bl	d647a <mbedtls_mpi_grow>
   d6724:	4606      	mov	r6, r0
   d6726:	2800      	cmp	r0, #0
   d6728:	d0ea      	beq.n	d6700 <mbedtls_mpi_read_binary+0x1c>
   d672a:	e00f      	b.n	d674c <mbedtls_mpi_read_binary+0x68>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    /* Avoid calling `memcpy` with NULL source argument,
     * even if buflen is 0. */
    if( buf != NULL )
   d672c:	f1b8 0f00 	cmp.w	r8, #0
   d6730:	d00c      	beq.n	d674c <mbedtls_mpi_read_binary+0x68>
    {
        Xp = (unsigned char*) X->p;
        memcpy( Xp + overhead, buf, buflen );
   d6732:	68bb      	ldr	r3, [r7, #8]
   d6734:	ebc5 0084 	rsb	r0, r5, r4, lsl #2
   d6738:	462a      	mov	r2, r5
   d673a:	4641      	mov	r1, r8
   d673c:	4418      	add	r0, r3
   d673e:	f011 fb92 	bl	e7e66 <memcpy>

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
   d6742:	b11c      	cbz	r4, d674c <mbedtls_mpi_read_binary+0x68>
   d6744:	4621      	mov	r1, r4
   d6746:	68b8      	ldr	r0, [r7, #8]
   d6748:	f7ff fe6e 	bl	d6428 <_ZL21mpi_bigendian_to_hostPmj.part.1>
    }

cleanup:

    return( ret );
}
   d674c:	4630      	mov	r0, r6
   d674e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6752 <mbedtls_mpi_write_binary>:
/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X,
                              unsigned char *buf, size_t buflen )
{
   d6752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6754:	4605      	mov	r5, r0
   d6756:	4608      	mov	r0, r1
    size_t i;

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    stored_bytes = X->n * ciL;
   d6758:	686c      	ldr	r4, [r5, #4]
   d675a:	00a4      	lsls	r4, r4, #2

    if( stored_bytes < buflen )
   d675c:	4294      	cmp	r4, r2
   d675e:	d301      	bcc.n	d6764 <mbedtls_mpi_write_binary+0x12>
   d6760:	4613      	mov	r3, r2
   d6762:	e014      	b.n	d678e <mbedtls_mpi_write_binary+0x3c>
         * null bytes and record the position at which to start
         * writing the significant bytes. In this case, the execution
         * trace of this function does not depend on the value of the
         * number. */
        bytes_to_copy = stored_bytes;
        p = buf + buflen - stored_bytes;
   d6764:	1b12      	subs	r2, r2, r4
   d6766:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
   d6768:	2100      	movs	r1, #0
   d676a:	f011 fba2 	bl	e7eb2 <memset>
         * null bytes and record the position at which to start
         * writing the significant bytes. In this case, the execution
         * trace of this function does not depend on the value of the
         * number. */
        bytes_to_copy = stored_bytes;
        p = buf + buflen - stored_bytes;
   d676e:	4630      	mov	r0, r6
   d6770:	4622      	mov	r2, r4
   d6772:	e00e      	b.n	d6792 <mbedtls_mpi_write_binary+0x40>
         * However X may fit if its leading bytes are zero. */
        bytes_to_copy = buflen;
        p = buf;
        for( i = bytes_to_copy; i < stored_bytes; i++ )
        {
            if( GET_BYTE( X, i ) != 0 )
   d6774:	ea4f 0e93 	mov.w	lr, r3, lsr #2
   d6778:	68af      	ldr	r7, [r5, #8]
   d677a:	f003 0103 	and.w	r1, r3, #3
   d677e:	00ce      	lsls	r6, r1, #3
   d6780:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
   d6784:	40f1      	lsrs	r1, r6
   d6786:	f011 0fff 	tst.w	r1, #255	; 0xff
   d678a:	d112      	bne.n	d67b2 <mbedtls_mpi_write_binary+0x60>
    {
        /* The output buffer is smaller than the allocated size of X.
         * However X may fit if its leading bytes are zero. */
        bytes_to_copy = buflen;
        p = buf;
        for( i = bytes_to_copy; i < stored_bytes; i++ )
   d678c:	3301      	adds	r3, #1
   d678e:	429c      	cmp	r4, r3
   d6790:	d1f0      	bne.n	d6774 <mbedtls_mpi_write_binary+0x22>
   d6792:	4410      	add	r0, r2
            if( GET_BYTE( X, i ) != 0 )
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
        }
    }

    for( i = 0; i < bytes_to_copy; i++ )
   d6794:	2300      	movs	r3, #0
   d6796:	429a      	cmp	r2, r3
   d6798:	d00e      	beq.n	d67b8 <mbedtls_mpi_write_binary+0x66>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
   d679a:	089f      	lsrs	r7, r3, #2
   d679c:	68ae      	ldr	r6, [r5, #8]
   d679e:	f003 0103 	and.w	r1, r3, #3
   d67a2:	00cc      	lsls	r4, r1, #3
   d67a4:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
   d67a8:	40e1      	lsrs	r1, r4
   d67aa:	f800 1d01 	strb.w	r1, [r0, #-1]!
            if( GET_BYTE( X, i ) != 0 )
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
        }
    }

    for( i = 0; i < bytes_to_copy; i++ )
   d67ae:	3301      	adds	r3, #1
   d67b0:	e7f1      	b.n	d6796 <mbedtls_mpi_write_binary+0x44>
        bytes_to_copy = buflen;
        p = buf;
        for( i = bytes_to_copy; i < stored_bytes; i++ )
        {
            if( GET_BYTE( X, i ) != 0 )
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
   d67b2:	f06f 0007 	mvn.w	r0, #7
   d67b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    for( i = 0; i < bytes_to_copy; i++ )
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );

    return( 0 );
   d67b8:	2000      	movs	r0, #0
}
   d67ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d67bc <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
   d67bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67be:	4604      	mov	r4, r0
   d67c0:	460d      	mov	r5, r1
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;
    MPI_VALIDATE_RET( X != NULL );

    v0 = count / (biL    );
   d67c2:	094e      	lsrs	r6, r1, #5
    t1 = count & (biL - 1);
   d67c4:	f001 071f 	and.w	r7, r1, #31

    i = mbedtls_mpi_bitlen( X ) + count;
   d67c8:	f7ff ff66 	bl	d6698 <mbedtls_mpi_bitlen>

    if( X->n * biL < i )
   d67cc:	6863      	ldr	r3, [r4, #4]
    MPI_VALIDATE_RET( X != NULL );

    v0 = count / (biL    );
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;
   d67ce:	4428      	add	r0, r5

    if( X->n * biL < i )
   d67d0:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
   d67d4:	d809      	bhi.n	d67ea <mbedtls_mpi_shift_l+0x2e>
    ret = 0;

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
   d67d6:	b346      	cbz	r6, d682a <mbedtls_mpi_shift_l+0x6e>
    {
        for( i = X->n; i > v0; i-- )
   d67d8:	6863      	ldr	r3, [r4, #4]
   d67da:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   d67de:	3a01      	subs	r2, #1
   d67e0:	f06f 0103 	mvn.w	r1, #3
   d67e4:	0092      	lsls	r2, r2, #2
   d67e6:	4371      	muls	r1, r6
   d67e8:	e00b      	b.n	d6802 <mbedtls_mpi_shift_l+0x46>
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
   d67ea:	f010 011f 	ands.w	r1, r0, #31
   d67ee:	bf18      	it	ne
   d67f0:	2101      	movne	r1, #1
   d67f2:	eb01 1150 	add.w	r1, r1, r0, lsr #5
   d67f6:	4620      	mov	r0, r4
   d67f8:	f7ff fe3f 	bl	d647a <mbedtls_mpi_grow>
   d67fc:	2800      	cmp	r0, #0
   d67fe:	d0ea      	beq.n	d67d6 <mbedtls_mpi_shift_l+0x1a>
   d6800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
   d6802:	429e      	cmp	r6, r3
   d6804:	d206      	bcs.n	d6814 <mbedtls_mpi_shift_l+0x58>
            X->p[i - 1] = X->p[i - v0 - 1];
   d6806:	68a0      	ldr	r0, [r4, #8]
   d6808:	1885      	adds	r5, r0, r2
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
   d680a:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
   d680c:	586d      	ldr	r5, [r5, r1]
   d680e:	5085      	str	r5, [r0, r2]
   d6810:	3a04      	subs	r2, #4
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
   d6812:	e7f6      	b.n	d6802 <mbedtls_mpi_shift_l+0x46>
   d6814:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   d6818:	3a01      	subs	r2, #1
   d681a:	0092      	lsls	r2, r2, #2
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
            X->p[i - 1] = 0;
   d681c:	2000      	movs	r0, #0
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
   d681e:	b123      	cbz	r3, d682a <mbedtls_mpi_shift_l+0x6e>
            X->p[i - 1] = 0;
   d6820:	68a1      	ldr	r1, [r4, #8]
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
   d6822:	3b01      	subs	r3, #1
            X->p[i - 1] = 0;
   d6824:	5088      	str	r0, [r1, r2]
   d6826:	3a04      	subs	r2, #4
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
   d6828:	e7f9      	b.n	d681e <mbedtls_mpi_shift_l+0x62>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
   d682a:	b90f      	cbnz	r7, d6830 <mbedtls_mpi_shift_l+0x74>
    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );

    ret = 0;
   d682c:	2000      	movs	r0, #0
   d682e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6830:	00b3      	lsls	r3, r6, #2
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
   d6832:	2200      	movs	r2, #0
    {
        for( i = v0; i < X->n; i++ )
        {
            r1 = X->p[i] >> (biL - t1);
   d6834:	f1c7 0e20 	rsb	lr, r7, #32
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
   d6838:	6861      	ldr	r1, [r4, #4]
   d683a:	428e      	cmp	r6, r1
   d683c:	d2f6      	bcs.n	d682c <mbedtls_mpi_shift_l+0x70>
        {
            r1 = X->p[i] >> (biL - t1);
   d683e:	68a0      	ldr	r0, [r4, #8]
   d6840:	58c1      	ldr	r1, [r0, r3]
            X->p[i] <<= t1;
   d6842:	fa01 f507 	lsl.w	r5, r1, r7
   d6846:	50c5      	str	r5, [r0, r3]
            X->p[i] |= r0;
   d6848:	68a0      	ldr	r0, [r4, #8]
   d684a:	58c5      	ldr	r5, [r0, r3]
   d684c:	432a      	orrs	r2, r5
   d684e:	50c2      	str	r2, [r0, r3]
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
   d6850:	3601      	adds	r6, #1
   d6852:	3304      	adds	r3, #4
        {
            r1 = X->p[i] >> (biL - t1);
            X->p[i] <<= t1;
            X->p[i] |= r0;
            r0 = r1;
   d6854:	fa21 f20e 	lsr.w	r2, r1, lr
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
   d6858:	e7ee      	b.n	d6838 <mbedtls_mpi_shift_l+0x7c>

000d685a <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
   d685a:	b5f0      	push	{r4, r5, r6, r7, lr}
    MPI_VALIDATE_RET( X != NULL );

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
   d685c:	6843      	ldr	r3, [r0, #4]
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
    MPI_VALIDATE_RET( X != NULL );

    v0 = count /  biL;
   d685e:	094a      	lsrs	r2, r1, #5
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
   d6860:	429a      	cmp	r2, r3
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
    MPI_VALIDATE_RET( X != NULL );

    v0 = count /  biL;
    v1 = count & (biL - 1);
   d6862:	f001 011f 	and.w	r1, r1, #31

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
   d6866:	d801      	bhi.n	d686c <mbedtls_mpi_shift_r+0x12>
   d6868:	d105      	bne.n	d6876 <mbedtls_mpi_shift_r+0x1c>
   d686a:	b159      	cbz	r1, d6884 <mbedtls_mpi_shift_r+0x2a>
        return mbedtls_mpi_lset( X, 0 );
   d686c:	2100      	movs	r1, #0
            r0 = r1;
        }
    }

    return( 0 );
}
   d686e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
        return mbedtls_mpi_lset( X, 0 );
   d6872:	f7ff becb 	b.w	d660c <mbedtls_mpi_lset>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
   d6876:	b1d2      	cbz	r2, d68ae <mbedtls_mpi_shift_r+0x54>
   d6878:	2300      	movs	r3, #0
    {
        for( i = 0; i < X->n - v0; i++ )
   d687a:	6844      	ldr	r4, [r0, #4]
   d687c:	1aa4      	subs	r4, r4, r2
   d687e:	42a3      	cmp	r3, r4
   d6880:	d305      	bcc.n	d688e <mbedtls_mpi_shift_r+0x34>
   d6882:	e001      	b.n	d6888 <mbedtls_mpi_shift_r+0x2e>
        return mbedtls_mpi_lset( X, 0 );

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
   d6884:	b35a      	cbz	r2, d68de <mbedtls_mpi_shift_r+0x84>
   d6886:	460b      	mov	r3, r1
   d6888:	009a      	lsls	r2, r3, #2
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
            X->p[i] = 0;
   d688a:	2500      	movs	r5, #0
   d688c:	e007      	b.n	d689e <mbedtls_mpi_shift_r+0x44>
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];
   d688e:	6884      	ldr	r4, [r0, #8]
   d6890:	189d      	adds	r5, r3, r2
   d6892:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   d6896:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
   d689a:	3301      	adds	r3, #1
   d689c:	e7ed      	b.n	d687a <mbedtls_mpi_shift_r+0x20>
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
   d689e:	6844      	ldr	r4, [r0, #4]
   d68a0:	42a3      	cmp	r3, r4
   d68a2:	d204      	bcs.n	d68ae <mbedtls_mpi_shift_r+0x54>
            X->p[i] = 0;
   d68a4:	6884      	ldr	r4, [r0, #8]
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
   d68a6:	3301      	adds	r3, #1
            X->p[i] = 0;
   d68a8:	50a5      	str	r5, [r4, r2]
   d68aa:	3204      	adds	r2, #4
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
   d68ac:	e7f7      	b.n	d689e <mbedtls_mpi_shift_r+0x44>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
   d68ae:	b1b1      	cbz	r1, d68de <mbedtls_mpi_shift_r+0x84>
    {
        for( i = X->n; i > 0; i-- )
   d68b0:	6844      	ldr	r4, [r0, #4]
   d68b2:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   d68b6:	3b01      	subs	r3, #1
   d68b8:	009b      	lsls	r3, r3, #2
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
   d68ba:	2200      	movs	r2, #0
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
        {
            r1 = X->p[i - 1] << (biL - v1);
   d68bc:	f1c1 0e20 	rsb	lr, r1, #32
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
   d68c0:	b16c      	cbz	r4, d68de <mbedtls_mpi_shift_r+0x84>
        {
            r1 = X->p[i - 1] << (biL - v1);
   d68c2:	6886      	ldr	r6, [r0, #8]
   d68c4:	58f5      	ldr	r5, [r6, r3]
            X->p[i - 1] >>= v1;
   d68c6:	fa25 f701 	lsr.w	r7, r5, r1
   d68ca:	50f7      	str	r7, [r6, r3]
            X->p[i - 1] |= r0;
   d68cc:	6886      	ldr	r6, [r0, #8]
   d68ce:	58f7      	ldr	r7, [r6, r3]
   d68d0:	433a      	orrs	r2, r7
   d68d2:	50f2      	str	r2, [r6, r3]
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
   d68d4:	3c01      	subs	r4, #1
   d68d6:	3b04      	subs	r3, #4
        {
            r1 = X->p[i - 1] << (biL - v1);
            X->p[i - 1] >>= v1;
            X->p[i - 1] |= r0;
            r0 = r1;
   d68d8:	fa05 f20e 	lsl.w	r2, r5, lr
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
   d68dc:	e7f0      	b.n	d68c0 <mbedtls_mpi_shift_r+0x66>
            r0 = r1;
        }
    }

    return( 0 );
}
   d68de:	2000      	movs	r0, #0
   d68e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d68e2 <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
   d68e2:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
   d68e4:	6843      	ldr	r3, [r0, #4]
   d68e6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   d68ea:	3a01      	subs	r2, #1
   d68ec:	0092      	lsls	r2, r2, #2
   d68ee:	b12b      	cbz	r3, d68fc <mbedtls_mpi_cmp_abs+0x1a>
        if( X->p[i - 1] != 0 )
   d68f0:	6884      	ldr	r4, [r0, #8]
   d68f2:	58a4      	ldr	r4, [r4, r2]
   d68f4:	3a04      	subs	r2, #4
   d68f6:	b90c      	cbnz	r4, d68fc <mbedtls_mpi_cmp_abs+0x1a>
{
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
   d68f8:	3b01      	subs	r3, #1
   d68fa:	e7f8      	b.n	d68ee <mbedtls_mpi_cmp_abs+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
   d68fc:	684c      	ldr	r4, [r1, #4]
   d68fe:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   d6902:	3a01      	subs	r2, #1
   d6904:	0092      	lsls	r2, r2, #2
   d6906:	b1c4      	cbz	r4, d693a <mbedtls_mpi_cmp_abs+0x58>
        if( Y->p[j - 1] != 0 )
   d6908:	688d      	ldr	r5, [r1, #8]
   d690a:	58ae      	ldr	r6, [r5, r2]
   d690c:	3a04      	subs	r2, #4
   d690e:	b90e      	cbnz	r6, d6914 <mbedtls_mpi_cmp_abs+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
   d6910:	3c01      	subs	r4, #1
   d6912:	e7f8      	b.n	d6906 <mbedtls_mpi_cmp_abs+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
   d6914:	429c      	cmp	r4, r3
   d6916:	d30b      	bcc.n	d6930 <mbedtls_mpi_cmp_abs+0x4e>
    if( j > i ) return( -1 );
   d6918:	d913      	bls.n	d6942 <mbedtls_mpi_cmp_abs+0x60>
   d691a:	e00b      	b.n	d6934 <mbedtls_mpi_cmp_abs+0x52>
   d691c:	f1a2 0204 	sub.w	r2, r2, #4

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
   d6920:	d308      	bcc.n	d6934 <mbedtls_mpi_cmp_abs+0x52>
        return( 0 );

    if( i > j ) return(  1 );
    if( j > i ) return( -1 );

    for( ; i > 0; i-- )
   d6922:	3b01      	subs	r3, #1
   d6924:	b193      	cbz	r3, d694c <mbedtls_mpi_cmp_abs+0x6a>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
   d6926:	6881      	ldr	r1, [r0, #8]
   d6928:	588c      	ldr	r4, [r1, r2]
   d692a:	58a9      	ldr	r1, [r5, r2]
   d692c:	428c      	cmp	r4, r1
   d692e:	d9f5      	bls.n	d691c <mbedtls_mpi_cmp_abs+0x3a>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
   d6930:	2001      	movs	r0, #1
   d6932:	bd70      	pop	{r4, r5, r6, pc}
    if( j > i ) return( -1 );
   d6934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6938:	bd70      	pop	{r4, r5, r6, pc}
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    }

    return( 0 );
   d693a:	1c18      	adds	r0, r3, #0
   d693c:	bf18      	it	ne
   d693e:	2001      	movne	r0, #1
   d6940:	bd70      	pop	{r4, r5, r6, pc}
   d6942:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   d6946:	3a01      	subs	r2, #1
   d6948:	0092      	lsls	r2, r2, #2
   d694a:	e7eb      	b.n	d6924 <mbedtls_mpi_cmp_abs+0x42>
   d694c:	4618      	mov	r0, r3
   d694e:	bd70      	pop	{r4, r5, r6, pc}

000d6950 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
   d6950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6954:	b085      	sub	sp, #20
   d6956:	4616      	mov	r6, r2
   d6958:	9303      	str	r3, [sp, #12]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
   d695a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d695c:	685a      	ldr	r2, [r3, #4]
   d695e:	6873      	ldr	r3, [r6, #4]
   d6960:	3301      	adds	r3, #1
   d6962:	429a      	cmp	r2, r3
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
   d6964:	4681      	mov	r9, r0
   d6966:	468b      	mov	fp, r1
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
   d6968:	d351      	bcc.n	d6a0e <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
   d696a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d696c:	6898      	ldr	r0, [r3, #8]
   d696e:	2800      	cmp	r0, #0
   d6970:	d04d      	beq.n	d6a0e <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
   d6972:	0092      	lsls	r2, r2, #2
   d6974:	2100      	movs	r1, #0
   d6976:	f011 fa9c 	bl	e7eb2 <memset>

    d = T->p;
   d697a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    n = N->n;
   d697c:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
   d6980:	689b      	ldr	r3, [r3, #8]
   d6982:	9300      	str	r3, [sp, #0]
    n = N->n;
    m = ( B->n < n ) ? B->n : n;
   d6984:	f8db 3004 	ldr.w	r3, [fp, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
   d6988:	9d00      	ldr	r5, [sp, #0]
   d698a:	4553      	cmp	r3, sl
   d698c:	bf28      	it	cs
   d698e:	4653      	movcs	r3, sl
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
   d6990:	f10a 0701 	add.w	r7, sl, #1
   d6994:	9302      	str	r3, [sp, #8]
   d6996:	00bf      	lsls	r7, r7, #2

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
   d6998:	2400      	movs	r4, #0
   d699a:	4554      	cmp	r4, sl
   d699c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d69a0:	d01b      	beq.n	d69da <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x8a>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
   d69a2:	f8db 1008 	ldr.w	r1, [fp, #8]
    for( i = 0; i < n; i++ )
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
   d69a6:	f850 8024 	ldr.w	r8, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
   d69aa:	682a      	ldr	r2, [r5, #0]
   d69ac:	680b      	ldr	r3, [r1, #0]

        mpi_mul_hlp( m, B->p, d, u0 );
   d69ae:	9802      	ldr	r0, [sp, #8]
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
   d69b0:	fb03 2308 	mla	r3, r3, r8, r2
   d69b4:	9a03      	ldr	r2, [sp, #12]
   d69b6:	4353      	muls	r3, r2
   d69b8:	9301      	str	r3, [sp, #4]

        mpi_mul_hlp( m, B->p, d, u0 );
   d69ba:	462a      	mov	r2, r5
   d69bc:	4643      	mov	r3, r8
   d69be:	f7ff fc63 	bl	d6288 <_ZL11mpi_mul_hlpjPmS_m>
        mpi_mul_hlp( n, N->p, d, u1 );
   d69c2:	9b01      	ldr	r3, [sp, #4]
   d69c4:	68b1      	ldr	r1, [r6, #8]
   d69c6:	462a      	mov	r2, r5
   d69c8:	4650      	mov	r0, sl
   d69ca:	f7ff fc5d 	bl	d6288 <_ZL11mpi_mul_hlpjPmS_m>

        *d++ = u0; d[n + 1] = 0;
   d69ce:	f845 8b04 	str.w	r8, [r5], #4
   d69d2:	2300      	movs	r3, #0
   d69d4:	51eb      	str	r3, [r5, r7]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
   d69d6:	3401      	adds	r4, #1
   d69d8:	e7df      	b.n	d699a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x4a>
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
   d69da:	9b00      	ldr	r3, [sp, #0]
   d69dc:	1f39      	subs	r1, r7, #4
   d69de:	440b      	add	r3, r1
   d69e0:	463a      	mov	r2, r7
   d69e2:	4619      	mov	r1, r3
   d69e4:	f011 fa3f 	bl	e7e66 <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
   d69e8:	4631      	mov	r1, r6
   d69ea:	4648      	mov	r0, r9
   d69ec:	f7ff ff79 	bl	d68e2 <mbedtls_mpi_cmp_abs>
   d69f0:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
   d69f2:	bfb3      	iteet	lt
   d69f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
        mpi_sub_hlp( n, N->p, A->p );
   d69f6:	f8d9 2008 	ldrge.w	r2, [r9, #8]
   d69fa:	68b1      	ldrge	r1, [r6, #8]
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
   d69fc:	689a      	ldrlt	r2, [r3, #8]
   d69fe:	bfb8      	it	lt
   d6a00:	f8d9 1008 	ldrlt.w	r1, [r9, #8]
   d6a04:	4620      	mov	r0, r4
   d6a06:	f7ff fc15 	bl	d6234 <_ZL11mpi_sub_hlpjPmS_>

    return( 0 );
   d6a0a:	2000      	movs	r0, #0
   d6a0c:	e001      	b.n	d6a12 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xc2>
{
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   d6a0e:	f06f 0003 	mvn.w	r0, #3
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );

    return( 0 );
}
   d6a12:	b005      	add	sp, #20
   d6a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6a18 <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
   d6a18:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
   d6a1a:	6843      	ldr	r3, [r0, #4]
   d6a1c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   d6a20:	3a01      	subs	r2, #1
   d6a22:	0092      	lsls	r2, r2, #2
   d6a24:	b12b      	cbz	r3, d6a32 <mbedtls_mpi_cmp_mpi+0x1a>
        if( X->p[i - 1] != 0 )
   d6a26:	6884      	ldr	r4, [r0, #8]
   d6a28:	58a4      	ldr	r4, [r4, r2]
   d6a2a:	3a04      	subs	r2, #4
   d6a2c:	b90c      	cbnz	r4, d6a32 <mbedtls_mpi_cmp_mpi+0x1a>
{
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
   d6a2e:	3b01      	subs	r3, #1
   d6a30:	e7f8      	b.n	d6a24 <mbedtls_mpi_cmp_mpi+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
   d6a32:	684c      	ldr	r4, [r1, #4]
   d6a34:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   d6a38:	3a01      	subs	r2, #1
   d6a3a:	0092      	lsls	r2, r2, #2
   d6a3c:	b364      	cbz	r4, d6a98 <mbedtls_mpi_cmp_mpi+0x80>
        if( Y->p[j - 1] != 0 )
   d6a3e:	688d      	ldr	r5, [r1, #8]
   d6a40:	58ae      	ldr	r6, [r5, r2]
   d6a42:	3a04      	subs	r2, #4
   d6a44:	b90e      	cbnz	r6, d6a4a <mbedtls_mpi_cmp_mpi+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
   d6a46:	3c01      	subs	r4, #1
   d6a48:	e7f8      	b.n	d6a3c <mbedtls_mpi_cmp_mpi+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  X->s );
   d6a4a:	429c      	cmp	r4, r3
   d6a4c:	d201      	bcs.n	d6a52 <mbedtls_mpi_cmp_mpi+0x3a>
   d6a4e:	6802      	ldr	r2, [r0, #0]
   d6a50:	e025      	b.n	d6a9e <mbedtls_mpi_cmp_mpi+0x86>
   d6a52:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
   d6a54:	d901      	bls.n	d6a5a <mbedtls_mpi_cmp_mpi+0x42>
   d6a56:	424a      	negs	r2, r1
   d6a58:	e021      	b.n	d6a9e <mbedtls_mpi_cmp_mpi+0x86>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
   d6a5a:	6802      	ldr	r2, [r0, #0]
   d6a5c:	2a00      	cmp	r2, #0
   d6a5e:	dd01      	ble.n	d6a64 <mbedtls_mpi_cmp_mpi+0x4c>
   d6a60:	2900      	cmp	r1, #0
   d6a62:	db14      	blt.n	d6a8e <mbedtls_mpi_cmp_mpi+0x76>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
   d6a64:	2900      	cmp	r1, #0
   d6a66:	dd01      	ble.n	d6a6c <mbedtls_mpi_cmp_mpi+0x54>
   d6a68:	2a00      	cmp	r2, #0
   d6a6a:	db12      	blt.n	d6a92 <mbedtls_mpi_cmp_mpi+0x7a>
   d6a6c:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
   d6a70:	3901      	subs	r1, #1
   d6a72:	0089      	lsls	r1, r1, #2

    for( ; i > 0; i-- )
   d6a74:	b193      	cbz	r3, d6a9c <mbedtls_mpi_cmp_mpi+0x84>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
   d6a76:	6884      	ldr	r4, [r0, #8]
   d6a78:	5866      	ldr	r6, [r4, r1]
   d6a7a:	586c      	ldr	r4, [r5, r1]
   d6a7c:	42a6      	cmp	r6, r4
   d6a7e:	d80e      	bhi.n	d6a9e <mbedtls_mpi_cmp_mpi+0x86>
   d6a80:	f1a1 0104 	sub.w	r1, r1, #4
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
   d6a84:	d201      	bcs.n	d6a8a <mbedtls_mpi_cmp_mpi+0x72>
   d6a86:	4252      	negs	r2, r2
   d6a88:	e009      	b.n	d6a9e <mbedtls_mpi_cmp_mpi+0x86>
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
    if( Y->s > 0 && X->s < 0 ) return( -1 );

    for( ; i > 0; i-- )
   d6a8a:	3b01      	subs	r3, #1
   d6a8c:	e7f2      	b.n	d6a74 <mbedtls_mpi_cmp_mpi+0x5c>
        return( 0 );

    if( i > j ) return(  X->s );
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
   d6a8e:	2201      	movs	r2, #1
   d6a90:	e005      	b.n	d6a9e <mbedtls_mpi_cmp_mpi+0x86>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
   d6a92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6a96:	e002      	b.n	d6a9e <mbedtls_mpi_cmp_mpi+0x86>

    for( j = Y->n; j > 0; j-- )
        if( Y->p[j - 1] != 0 )
            break;

    if( i == 0 && j == 0 )
   d6a98:	2b00      	cmp	r3, #0
   d6a9a:	d1d8      	bne.n	d6a4e <mbedtls_mpi_cmp_mpi+0x36>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    }

    return( 0 );
   d6a9c:	461a      	mov	r2, r3
}
   d6a9e:	4610      	mov	r0, r2
   d6aa0:	bd70      	pop	{r4, r5, r6, pc}

000d6aa2 <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
   d6aa2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );

    *p  = ( z < 0 ) ? -z : z;
   d6aa4:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
   d6aa8:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
   d6aac:	2900      	cmp	r1, #0
{
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );

    *p  = ( z < 0 ) ? -z : z;
   d6aae:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
   d6ab0:	bfb4      	ite	lt
   d6ab2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   d6ab6:	2301      	movge	r3, #1
   d6ab8:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    Y.p = p;

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
   d6aba:	a901      	add	r1, sp, #4
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );

    *p  = ( z < 0 ) ? -z : z;
    Y.s = ( z < 0 ) ? -1 : 1;
    Y.n = 1;
   d6abc:	2301      	movs	r3, #1
   d6abe:	9302      	str	r3, [sp, #8]
    Y.p = p;
   d6ac0:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
   d6ac4:	f7ff ffa8 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
}
   d6ac8:	b005      	add	sp, #20
   d6aca:	f85d fb04 	ldr.w	pc, [sp], #4

000d6ace <mbedtls_mpi_add_abs>:
    mbedtls_mpi_uint *o, *p, c, tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( X == B )
   d6ace:	4290      	cmp	r0, r2

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d6ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6ad4:	4606      	mov	r6, r0
   d6ad6:	4615      	mov	r5, r2
    mbedtls_mpi_uint *o, *p, c, tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( X == B )
   d6ad8:	d006      	beq.n	d6ae8 <mbedtls_mpi_add_abs+0x1a>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
    }

    if( X != A )
   d6ada:	4288      	cmp	r0, r1
   d6adc:	d005      	beq.n	d6aea <mbedtls_mpi_add_abs+0x1c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
   d6ade:	f7ff fd34 	bl	d654a <mbedtls_mpi_copy>
   d6ae2:	4607      	mov	r7, r0
   d6ae4:	b108      	cbz	r0, d6aea <mbedtls_mpi_add_abs+0x1c>
   d6ae6:	e049      	b.n	d6b7c <mbedtls_mpi_add_abs+0xae>
   d6ae8:	460d      	mov	r5, r1

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
   d6aea:	2301      	movs	r3, #1
   d6aec:	6033      	str	r3, [r6, #0]

    for( j = B->n; j > 0; j-- )
   d6aee:	686c      	ldr	r4, [r5, #4]
   d6af0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   d6af4:	3b01      	subs	r3, #1
   d6af6:	009b      	lsls	r3, r3, #2
   d6af8:	b12c      	cbz	r4, d6b06 <mbedtls_mpi_add_abs+0x38>
        if( B->p[j - 1] != 0 )
   d6afa:	68aa      	ldr	r2, [r5, #8]
   d6afc:	58d2      	ldr	r2, [r2, r3]
   d6afe:	3b04      	subs	r3, #4
   d6b00:	b90a      	cbnz	r2, d6b06 <mbedtls_mpi_add_abs+0x38>
    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;

    for( j = B->n; j > 0; j-- )
   d6b02:	3c01      	subs	r4, #1
   d6b04:	e7f8      	b.n	d6af8 <mbedtls_mpi_add_abs+0x2a>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
   d6b06:	4621      	mov	r1, r4
   d6b08:	4630      	mov	r0, r6
   d6b0a:	f7ff fcb6 	bl	d647a <mbedtls_mpi_grow>
   d6b0e:	4607      	mov	r7, r0
   d6b10:	2800      	cmp	r0, #0
   d6b12:	d133      	bne.n	d6b7c <mbedtls_mpi_add_abs+0xae>

    o = B->p; p = X->p; c = 0;
   d6b14:	68b3      	ldr	r3, [r6, #8]
   d6b16:	f8d5 c008 	ldr.w	ip, [r5, #8]
   d6b1a:	4618      	mov	r0, r3
   d6b1c:	463d      	mov	r5, r7

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
   d6b1e:	4639      	mov	r1, r7
   d6b20:	42a1      	cmp	r1, r4
   d6b22:	d00f      	beq.n	d6b44 <mbedtls_mpi_add_abs+0x76>
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
   d6b24:	6802      	ldr	r2, [r0, #0]
    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
   d6b26:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
        *p +=  c; c  = ( *p <  c );
   d6b2a:	18ad      	adds	r5, r5, r2
        *p += tmp; c += ( *p < tmp );
   d6b2c:	4475      	add	r5, lr
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
   d6b2e:	bf2c      	ite	cs
   d6b30:	2201      	movcs	r2, #1
   d6b32:	2200      	movcc	r2, #0
        *p += tmp; c += ( *p < tmp );
   d6b34:	f840 5b04 	str.w	r5, [r0], #4
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
   d6b38:	3101      	adds	r1, #1
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
   d6b3a:	45ae      	cmp	lr, r5
   d6b3c:	bf94      	ite	ls
   d6b3e:	4615      	movls	r5, r2
   d6b40:	1c55      	addhi	r5, r2, #1
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
   d6b42:	e7ed      	b.n	d6b20 <mbedtls_mpi_add_abs+0x52>
   d6b44:	ea4f 0884 	mov.w	r8, r4, lsl #2
   d6b48:	4443      	add	r3, r8
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
   d6b4a:	b1bd      	cbz	r5, d6b7c <mbedtls_mpi_add_abs+0xae>
    {
        if( i >= X->n )
   d6b4c:	6872      	ldr	r2, [r6, #4]
   d6b4e:	4294      	cmp	r4, r2
   d6b50:	f104 0401 	add.w	r4, r4, #1
   d6b54:	d306      	bcc.n	d6b64 <mbedtls_mpi_add_abs+0x96>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
   d6b56:	4621      	mov	r1, r4
   d6b58:	4630      	mov	r0, r6
   d6b5a:	f7ff fc8e 	bl	d647a <mbedtls_mpi_grow>
   d6b5e:	b960      	cbnz	r0, d6b7a <mbedtls_mpi_add_abs+0xac>
            p = X->p + i;
   d6b60:	68b3      	ldr	r3, [r6, #8]
   d6b62:	4443      	add	r3, r8
        }

        *p += c; c = ( *p < c ); i++; p++;
   d6b64:	681a      	ldr	r2, [r3, #0]
   d6b66:	442a      	add	r2, r5
   d6b68:	4295      	cmp	r5, r2
   d6b6a:	f843 2b04 	str.w	r2, [r3], #4
   d6b6e:	bf94      	ite	ls
   d6b70:	2500      	movls	r5, #0
   d6b72:	2501      	movhi	r5, #1
   d6b74:	f108 0804 	add.w	r8, r8, #4
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
   d6b78:	e7e7      	b.n	d6b4a <mbedtls_mpi_add_abs+0x7c>
    {
        if( i >= X->n )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
   d6b7a:	4607      	mov	r7, r0
    }

cleanup:

    return( ret );
}
   d6b7c:	4638      	mov	r0, r7
   d6b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6b82 <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d6b82:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6b84:	460f      	mov	r7, r1
   d6b86:	b085      	sub	sp, #20
   d6b88:	4606      	mov	r6, r0
    size_t n;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   d6b8a:	4611      	mov	r1, r2
   d6b8c:	4638      	mov	r0, r7

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d6b8e:	4615      	mov	r5, r2
    size_t n;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   d6b90:	f7ff fea7 	bl	d68e2 <mbedtls_mpi_cmp_abs>
   d6b94:	2800      	cmp	r0, #0
   d6b96:	db30      	blt.n	d6bfa <mbedtls_mpi_sub_abs+0x78>
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d6b98:	2301      	movs	r3, #1
   d6b9a:	9301      	str	r3, [sp, #4]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
   d6b9c:	42b5      	cmp	r5, r6
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   d6b9e:	f04f 0300 	mov.w	r3, #0
   d6ba2:	9302      	str	r3, [sp, #8]
    X->p = NULL;
   d6ba4:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
   d6ba6:	d106      	bne.n	d6bb6 <mbedtls_mpi_sub_abs+0x34>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
   d6ba8:	4629      	mov	r1, r5
   d6baa:	a801      	add	r0, sp, #4
   d6bac:	f7ff fccd 	bl	d654a <mbedtls_mpi_copy>
   d6bb0:	4604      	mov	r4, r0
   d6bb2:	b9e8      	cbnz	r0, d6bf0 <mbedtls_mpi_sub_abs+0x6e>
        B = &TB;
   d6bb4:	ad01      	add	r5, sp, #4
    }

    if( X != A )
   d6bb6:	42b7      	cmp	r7, r6
   d6bb8:	d107      	bne.n	d6bca <mbedtls_mpi_sub_abs+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
   d6bba:	2301      	movs	r3, #1
   d6bbc:	6033      	str	r3, [r6, #0]

    ret = 0;

    for( n = B->n; n > 0; n-- )
   d6bbe:	6868      	ldr	r0, [r5, #4]
   d6bc0:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   d6bc4:	3b01      	subs	r3, #1
   d6bc6:	009b      	lsls	r3, r3, #2
   d6bc8:	e00b      	b.n	d6be2 <mbedtls_mpi_sub_abs+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
        B = &TB;
    }

    if( X != A )
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
   d6bca:	4639      	mov	r1, r7
   d6bcc:	4630      	mov	r0, r6
   d6bce:	f7ff fcbc 	bl	d654a <mbedtls_mpi_copy>
   d6bd2:	4604      	mov	r4, r0
   d6bd4:	b960      	cbnz	r0, d6bf0 <mbedtls_mpi_sub_abs+0x6e>
   d6bd6:	e7f0      	b.n	d6bba <mbedtls_mpi_sub_abs+0x38>
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
        if( B->p[n - 1] != 0 )
   d6bd8:	68aa      	ldr	r2, [r5, #8]
   d6bda:	58d2      	ldr	r2, [r2, r3]
   d6bdc:	3b04      	subs	r3, #4
   d6bde:	b912      	cbnz	r2, d6be6 <mbedtls_mpi_sub_abs+0x64>
     */
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
   d6be0:	3801      	subs	r0, #1
   d6be2:	2800      	cmp	r0, #0
   d6be4:	d1f8      	bne.n	d6bd8 <mbedtls_mpi_sub_abs+0x56>
        if( B->p[n - 1] != 0 )
            break;

    mpi_sub_hlp( n, B->p, X->p );
   d6be6:	68b2      	ldr	r2, [r6, #8]
   d6be8:	68a9      	ldr	r1, [r5, #8]
   d6bea:	f7ff fb23 	bl	d6234 <_ZL11mpi_sub_hlpjPmS_>
    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;

    ret = 0;
   d6bee:	2400      	movs	r4, #0

    mpi_sub_hlp( n, B->p, X->p );

cleanup:

    mbedtls_mpi_free( &TB );
   d6bf0:	a801      	add	r0, sp, #4
   d6bf2:	f7ff fc30 	bl	d6456 <mbedtls_mpi_free>

    return( ret );
   d6bf6:	4620      	mov	r0, r4
   d6bf8:	e001      	b.n	d6bfe <mbedtls_mpi_sub_abs+0x7c>
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
   d6bfa:	f06f 0009 	mvn.w	r0, #9
cleanup:

    mbedtls_mpi_free( &TB );

    return( ret );
}
   d6bfe:	b005      	add	sp, #20
   d6c00:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6c02 <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d6c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
   d6c04:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s < 0 )
   d6c06:	6813      	ldr	r3, [r2, #0]
   d6c08:	4363      	muls	r3, r4

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d6c0a:	4605      	mov	r5, r0
   d6c0c:	460f      	mov	r7, r1
   d6c0e:	4616      	mov	r6, r2
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
    if( A->s * B->s < 0 )
   d6c10:	d513      	bpl.n	d6c3a <mbedtls_mpi_add_mpi+0x38>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
   d6c12:	4611      	mov	r1, r2
   d6c14:	4638      	mov	r0, r7
   d6c16:	f7ff fe64 	bl	d68e2 <mbedtls_mpi_cmp_abs>
   d6c1a:	2800      	cmp	r0, #0
   d6c1c:	db05      	blt.n	d6c2a <mbedtls_mpi_add_mpi+0x28>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
   d6c1e:	4632      	mov	r2, r6
   d6c20:	4639      	mov	r1, r7
   d6c22:	4628      	mov	r0, r5
   d6c24:	f7ff ffad 	bl	d6b82 <mbedtls_mpi_sub_abs>
   d6c28:	e009      	b.n	d6c3e <mbedtls_mpi_add_mpi+0x3c>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
   d6c2a:	463a      	mov	r2, r7
   d6c2c:	4631      	mov	r1, r6
   d6c2e:	4628      	mov	r0, r5
   d6c30:	f7ff ffa7 	bl	d6b82 <mbedtls_mpi_sub_abs>
   d6c34:	b928      	cbnz	r0, d6c42 <mbedtls_mpi_add_mpi+0x40>
            X->s = -s;
   d6c36:	4264      	negs	r4, r4
   d6c38:	e002      	b.n	d6c40 <mbedtls_mpi_add_mpi+0x3e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
   d6c3a:	f7ff ff48 	bl	d6ace <mbedtls_mpi_add_abs>
   d6c3e:	b900      	cbnz	r0, d6c42 <mbedtls_mpi_add_mpi+0x40>
        X->s = s;
   d6c40:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
   d6c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c44 <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d6c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
   d6c46:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s > 0 )
   d6c48:	6813      	ldr	r3, [r2, #0]
   d6c4a:	4363      	muls	r3, r4
   d6c4c:	2b00      	cmp	r3, #0

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d6c4e:	4605      	mov	r5, r0
   d6c50:	460f      	mov	r7, r1
   d6c52:	4616      	mov	r6, r2
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
    if( A->s * B->s > 0 )
   d6c54:	dd13      	ble.n	d6c7e <mbedtls_mpi_sub_mpi+0x3a>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
   d6c56:	4611      	mov	r1, r2
   d6c58:	4638      	mov	r0, r7
   d6c5a:	f7ff fe42 	bl	d68e2 <mbedtls_mpi_cmp_abs>
   d6c5e:	2800      	cmp	r0, #0
   d6c60:	db05      	blt.n	d6c6e <mbedtls_mpi_sub_mpi+0x2a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
   d6c62:	4632      	mov	r2, r6
   d6c64:	4639      	mov	r1, r7
   d6c66:	4628      	mov	r0, r5
   d6c68:	f7ff ff8b 	bl	d6b82 <mbedtls_mpi_sub_abs>
   d6c6c:	e009      	b.n	d6c82 <mbedtls_mpi_sub_mpi+0x3e>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
   d6c6e:	463a      	mov	r2, r7
   d6c70:	4631      	mov	r1, r6
   d6c72:	4628      	mov	r0, r5
   d6c74:	f7ff ff85 	bl	d6b82 <mbedtls_mpi_sub_abs>
   d6c78:	b928      	cbnz	r0, d6c86 <mbedtls_mpi_sub_mpi+0x42>
            X->s = -s;
   d6c7a:	4264      	negs	r4, r4
   d6c7c:	e002      	b.n	d6c84 <mbedtls_mpi_sub_mpi+0x40>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
   d6c7e:	f7ff ff26 	bl	d6ace <mbedtls_mpi_add_abs>
   d6c82:	b900      	cbnz	r0, d6c86 <mbedtls_mpi_sub_mpi+0x42>
        X->s = s;
   d6c84:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
   d6c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c88 <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
   d6c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
   d6c8a:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
   d6c8e:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
   d6c92:	2a00      	cmp	r2, #0
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
   d6c94:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
   d6c96:	bfb4      	ite	lt
   d6c98:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   d6c9c:	2301      	movge	r3, #1
   d6c9e:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
   d6ca0:	aa01      	add	r2, sp, #4
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
   d6ca2:	2301      	movs	r3, #1
   d6ca4:	9302      	str	r3, [sp, #8]
    _B.p = p;
   d6ca6:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
   d6caa:	f7ff ffaa 	bl	d6c02 <mbedtls_mpi_add_mpi>
}
   d6cae:	b005      	add	sp, #20
   d6cb0:	f85d fb04 	ldr.w	pc, [sp], #4

000d6cb4 <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
   d6cb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
   d6cb6:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
   d6cba:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
   d6cbe:	2a00      	cmp	r2, #0
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
   d6cc0:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
   d6cc2:	bfb4      	ite	lt
   d6cc4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   d6cc8:	2301      	movge	r3, #1
   d6cca:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
   d6ccc:	aa01      	add	r2, sp, #4
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
   d6cce:	2301      	movs	r3, #1
   d6cd0:	9302      	str	r3, [sp, #8]
    _B.p = p;
   d6cd2:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
   d6cd6:	f7ff ffb5 	bl	d6c44 <mbedtls_mpi_sub_mpi>
}
   d6cda:	b005      	add	sp, #20
   d6cdc:	f85d fb04 	ldr.w	pc, [sp], #4

000d6ce0 <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d6ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6ce4:	b086      	sub	sp, #24
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   d6ce6:	2300      	movs	r3, #0

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d6ce8:	4615      	mov	r5, r2
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
   d6cea:	4288      	cmp	r0, r1
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   d6cec:	f04f 0201 	mov.w	r2, #1

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d6cf0:	4681      	mov	r9, r0
   d6cf2:	460e      	mov	r6, r1
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   d6cf4:	e88d 000c 	stmia.w	sp, {r2, r3}
    X->p = NULL;
   d6cf8:	9302      	str	r3, [sp, #8]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d6cfa:	9203      	str	r2, [sp, #12]
    X->n = 0;
   d6cfc:	9304      	str	r3, [sp, #16]
    X->p = NULL;
   d6cfe:	9305      	str	r3, [sp, #20]
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
   d6d00:	d106      	bne.n	d6d10 <mbedtls_mpi_mul_mpi+0x30>
   d6d02:	4668      	mov	r0, sp
   d6d04:	f7ff fc21 	bl	d654a <mbedtls_mpi_copy>
   d6d08:	4604      	mov	r4, r0
   d6d0a:	2800      	cmp	r0, #0
   d6d0c:	d14d      	bne.n	d6daa <mbedtls_mpi_mul_mpi+0xca>
   d6d0e:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
   d6d10:	45a9      	cmp	r9, r5
   d6d12:	d107      	bne.n	d6d24 <mbedtls_mpi_mul_mpi+0x44>
   d6d14:	4649      	mov	r1, r9
   d6d16:	a803      	add	r0, sp, #12
   d6d18:	f7ff fc17 	bl	d654a <mbedtls_mpi_copy>
   d6d1c:	4604      	mov	r4, r0
   d6d1e:	2800      	cmp	r0, #0
   d6d20:	d143      	bne.n	d6daa <mbedtls_mpi_mul_mpi+0xca>
   d6d22:	ad03      	add	r5, sp, #12

    for( i = A->n; i > 0; i-- )
   d6d24:	f8d6 a004 	ldr.w	sl, [r6, #4]
   d6d28:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
   d6d2c:	3b01      	subs	r3, #1
   d6d2e:	009b      	lsls	r3, r3, #2
   d6d30:	f1ba 0f00 	cmp.w	sl, #0
   d6d34:	d006      	beq.n	d6d44 <mbedtls_mpi_mul_mpi+0x64>
        if( A->p[i - 1] != 0 )
   d6d36:	68b2      	ldr	r2, [r6, #8]
   d6d38:	58d2      	ldr	r2, [r2, r3]
   d6d3a:	3b04      	subs	r3, #4
   d6d3c:	b912      	cbnz	r2, d6d44 <mbedtls_mpi_mul_mpi+0x64>
    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }

    for( i = A->n; i > 0; i-- )
   d6d3e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   d6d42:	e7f5      	b.n	d6d30 <mbedtls_mpi_mul_mpi+0x50>
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
   d6d44:	686f      	ldr	r7, [r5, #4]
   d6d46:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
   d6d4a:	3b01      	subs	r3, #1
   d6d4c:	009b      	lsls	r3, r3, #2
   d6d4e:	b12f      	cbz	r7, d6d5c <mbedtls_mpi_mul_mpi+0x7c>
        if( B->p[j - 1] != 0 )
   d6d50:	68aa      	ldr	r2, [r5, #8]
   d6d52:	58d2      	ldr	r2, [r2, r3]
   d6d54:	3b04      	subs	r3, #4
   d6d56:	b90a      	cbnz	r2, d6d5c <mbedtls_mpi_mul_mpi+0x7c>

    for( i = A->n; i > 0; i-- )
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
   d6d58:	3f01      	subs	r7, #1
   d6d5a:	e7f8      	b.n	d6d4e <mbedtls_mpi_mul_mpi+0x6e>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
   d6d5c:	eb0a 0107 	add.w	r1, sl, r7
   d6d60:	4648      	mov	r0, r9
   d6d62:	f7ff fb8a 	bl	d647a <mbedtls_mpi_grow>
   d6d66:	4604      	mov	r4, r0
   d6d68:	b9f8      	cbnz	r0, d6daa <mbedtls_mpi_mul_mpi+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   d6d6a:	4601      	mov	r1, r0
   d6d6c:	4648      	mov	r0, r9
   d6d6e:	f7ff fc4d 	bl	d660c <mbedtls_mpi_lset>
   d6d72:	4604      	mov	r4, r0
   d6d74:	b9c8      	cbnz	r0, d6daa <mbedtls_mpi_mul_mpi+0xca>
   d6d76:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
   d6d7a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d6d7e:	ea4f 0888 	mov.w	r8, r8, lsl #2

    for( ; j > 0; j-- )
   d6d82:	b16f      	cbz	r7, d6da0 <mbedtls_mpi_mul_mpi+0xc0>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
   d6d84:	68ab      	ldr	r3, [r5, #8]
   d6d86:	f8d9 2008 	ldr.w	r2, [r9, #8]
   d6d8a:	f853 3008 	ldr.w	r3, [r3, r8]
   d6d8e:	68b1      	ldr	r1, [r6, #8]
   d6d90:	4442      	add	r2, r8
   d6d92:	4650      	mov	r0, sl
   d6d94:	f7ff fa78 	bl	d6288 <_ZL11mpi_mul_hlpjPmS_m>
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( ; j > 0; j-- )
   d6d98:	3f01      	subs	r7, #1
   d6d9a:	f1a8 0804 	sub.w	r8, r8, #4
   d6d9e:	e7f0      	b.n	d6d82 <mbedtls_mpi_mul_mpi+0xa2>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );

    X->s = A->s * B->s;
   d6da0:	6832      	ldr	r2, [r6, #0]
   d6da2:	682b      	ldr	r3, [r5, #0]
   d6da4:	4353      	muls	r3, r2
   d6da6:	f8c9 3000 	str.w	r3, [r9]

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
   d6daa:	a803      	add	r0, sp, #12
   d6dac:	f7ff fb53 	bl	d6456 <mbedtls_mpi_free>
   d6db0:	4668      	mov	r0, sp
   d6db2:	f7ff fb50 	bl	d6456 <mbedtls_mpi_free>

    return( ret );
}
   d6db6:	4620      	mov	r0, r4
   d6db8:	b006      	add	sp, #24
   d6dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d6dbe <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
   d6dbe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    _B.s = 1;
   d6dc0:	2301      	movs	r3, #1
    _B.n = 1;
    _B.p = p;
    p[0] = b;
   d6dc2:	9200      	str	r2, [sp, #0]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
   d6dc4:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    _B.s = 1;
   d6dc6:	9301      	str	r3, [sp, #4]
    _B.n = 1;
   d6dc8:	9302      	str	r3, [sp, #8]
    _B.p = p;
   d6dca:	f8cd d00c 	str.w	sp, [sp, #12]
    p[0] = b;

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
   d6dce:	f7ff ff87 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
}
   d6dd2:	b005      	add	sp, #20
   d6dd4:	f85d fb04 	ldr.w	pc, [sp], #4

000d6dd8 <mbedtls_mpi_div_mpi>:
/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A,
                         const mbedtls_mpi *B )
{
   d6dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6ddc:	b09b      	sub	sp, #108	; 0x6c
   d6dde:	460f      	mov	r7, r1
   d6de0:	9001      	str	r0, [sp, #4]
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
   d6de2:	2100      	movs	r1, #0
   d6de4:	4618      	mov	r0, r3
/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A,
                         const mbedtls_mpi *B )
{
   d6de6:	4690      	mov	r8, r2
   d6de8:	9304      	str	r3, [sp, #16]
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
   d6dea:	f7ff fe5a 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d6dee:	2800      	cmp	r0, #0
   d6df0:	f000 81ad 	beq.w	d714e <mbedtls_mpi_div_mpi+0x376>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   d6df4:	2400      	movs	r4, #0
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d6df6:	2501      	movs	r5, #1
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   d6df8:	9904      	ldr	r1, [sp, #16]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d6dfa:	950b      	str	r5, [sp, #44]	; 0x2c
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   d6dfc:	4640      	mov	r0, r8
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   d6dfe:	940c      	str	r4, [sp, #48]	; 0x30
    X->p = NULL;
   d6e00:	940d      	str	r4, [sp, #52]	; 0x34
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d6e02:	950e      	str	r5, [sp, #56]	; 0x38
    X->n = 0;
   d6e04:	940f      	str	r4, [sp, #60]	; 0x3c
    X->p = NULL;
   d6e06:	9410      	str	r4, [sp, #64]	; 0x40
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d6e08:	9511      	str	r5, [sp, #68]	; 0x44
    X->n = 0;
   d6e0a:	9412      	str	r4, [sp, #72]	; 0x48
    X->p = NULL;
   d6e0c:	9413      	str	r4, [sp, #76]	; 0x4c
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d6e0e:	9514      	str	r5, [sp, #80]	; 0x50
    X->n = 0;
   d6e10:	9415      	str	r4, [sp, #84]	; 0x54
    X->p = NULL;
   d6e12:	9416      	str	r4, [sp, #88]	; 0x58
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d6e14:	9517      	str	r5, [sp, #92]	; 0x5c
    X->n = 0;
   d6e16:	9418      	str	r4, [sp, #96]	; 0x60
    X->p = NULL;
   d6e18:	9419      	str	r4, [sp, #100]	; 0x64
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   d6e1a:	f7ff fd62 	bl	d68e2 <mbedtls_mpi_cmp_abs>
   d6e1e:	42a0      	cmp	r0, r4
   d6e20:	da16      	bge.n	d6e50 <mbedtls_mpi_div_mpi+0x78>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
   d6e22:	9b01      	ldr	r3, [sp, #4]
   d6e24:	b90b      	cbnz	r3, d6e2a <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
   d6e26:	b94f      	cbnz	r7, d6e3c <mbedtls_mpi_div_mpi+0x64>
   d6e28:	e010      	b.n	d6e4c <mbedtls_mpi_div_mpi+0x74>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
   d6e2a:	4621      	mov	r1, r4
   d6e2c:	9801      	ldr	r0, [sp, #4]
   d6e2e:	f7ff fbed 	bl	d660c <mbedtls_mpi_lset>
   d6e32:	4604      	mov	r4, r0
   d6e34:	2800      	cmp	r0, #0
   d6e36:	f040 8179 	bne.w	d712c <mbedtls_mpi_div_mpi+0x354>
   d6e3a:	e7f4      	b.n	d6e26 <mbedtls_mpi_div_mpi+0x4e>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
   d6e3c:	4641      	mov	r1, r8
   d6e3e:	4638      	mov	r0, r7
   d6e40:	f7ff fb83 	bl	d654a <mbedtls_mpi_copy>
   d6e44:	4604      	mov	r4, r0
   d6e46:	2800      	cmp	r0, #0
   d6e48:	f040 8170 	bne.w	d712c <mbedtls_mpi_div_mpi+0x354>
        return( 0 );
   d6e4c:	2000      	movs	r0, #0
   d6e4e:	e180      	b.n	d7152 <mbedtls_mpi_div_mpi+0x37a>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
   d6e50:	4641      	mov	r1, r8
   d6e52:	a80b      	add	r0, sp, #44	; 0x2c
   d6e54:	f7ff fb79 	bl	d654a <mbedtls_mpi_copy>
   d6e58:	4604      	mov	r4, r0
   d6e5a:	2800      	cmp	r0, #0
   d6e5c:	f040 8166 	bne.w	d712c <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
   d6e60:	ae0e      	add	r6, sp, #56	; 0x38
   d6e62:	9904      	ldr	r1, [sp, #16]
   d6e64:	4630      	mov	r0, r6
   d6e66:	f7ff fb70 	bl	d654a <mbedtls_mpi_copy>
   d6e6a:	4604      	mov	r4, r0
   d6e6c:	2800      	cmp	r0, #0
   d6e6e:	f040 815d 	bne.w	d712c <mbedtls_mpi_div_mpi+0x354>
    X.s = Y.s = 1;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
   d6e72:	f8d8 1004 	ldr.w	r1, [r8, #4]
        return( 0 );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    X.s = Y.s = 1;
   d6e76:	950e      	str	r5, [sp, #56]	; 0x38

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
   d6e78:	3102      	adds	r1, #2
   d6e7a:	a811      	add	r0, sp, #68	; 0x44
        return( 0 );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    X.s = Y.s = 1;
   d6e7c:	950b      	str	r5, [sp, #44]	; 0x2c

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
   d6e7e:	f7ff fafc 	bl	d647a <mbedtls_mpi_grow>
   d6e82:	4604      	mov	r4, r0
   d6e84:	2800      	cmp	r0, #0
   d6e86:	f040 8151 	bne.w	d712c <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
   d6e8a:	4601      	mov	r1, r0
   d6e8c:	a811      	add	r0, sp, #68	; 0x44
   d6e8e:	f7ff fbbd 	bl	d660c <mbedtls_mpi_lset>
   d6e92:	4604      	mov	r4, r0
   d6e94:	2800      	cmp	r0, #0
   d6e96:	f040 8149 	bne.w	d712c <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
   d6e9a:	2102      	movs	r1, #2
   d6e9c:	a814      	add	r0, sp, #80	; 0x50
   d6e9e:	f7ff faec 	bl	d647a <mbedtls_mpi_grow>
   d6ea2:	4604      	mov	r4, r0
   d6ea4:	2800      	cmp	r0, #0
   d6ea6:	f040 8141 	bne.w	d712c <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
   d6eaa:	2103      	movs	r1, #3
   d6eac:	a817      	add	r0, sp, #92	; 0x5c
   d6eae:	f7ff fae4 	bl	d647a <mbedtls_mpi_grow>
   d6eb2:	4604      	mov	r4, r0
   d6eb4:	2800      	cmp	r0, #0
   d6eb6:	f040 8139 	bne.w	d712c <mbedtls_mpi_div_mpi+0x354>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
   d6eba:	4630      	mov	r0, r6
   d6ebc:	f7ff fbec 	bl	d6698 <mbedtls_mpi_bitlen>
   d6ec0:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
   d6ec4:	281f      	cmp	r0, #31
   d6ec6:	d013      	beq.n	d6ef0 <mbedtls_mpi_div_mpi+0x118>
    {
        k = biL - 1 - k;
   d6ec8:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
   d6ecc:	4619      	mov	r1, r3
   d6ece:	a80b      	add	r0, sp, #44	; 0x2c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );

    k = mbedtls_mpi_bitlen( &Y ) % biL;
    if( k < biL - 1 )
    {
        k = biL - 1 - k;
   d6ed0:	9302      	str	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
   d6ed2:	f7ff fc73 	bl	d67bc <mbedtls_mpi_shift_l>
   d6ed6:	4604      	mov	r4, r0
   d6ed8:	2800      	cmp	r0, #0
   d6eda:	f040 8127 	bne.w	d712c <mbedtls_mpi_div_mpi+0x354>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
   d6ede:	9902      	ldr	r1, [sp, #8]
   d6ee0:	4630      	mov	r0, r6
   d6ee2:	f7ff fc6b 	bl	d67bc <mbedtls_mpi_shift_l>
   d6ee6:	4604      	mov	r4, r0
   d6ee8:	2800      	cmp	r0, #0
   d6eea:	f040 811f 	bne.w	d712c <mbedtls_mpi_div_mpi+0x354>
   d6eee:	e000      	b.n	d6ef2 <mbedtls_mpi_div_mpi+0x11a>
    }
    else k = 0;
   d6ef0:	9402      	str	r4, [sp, #8]

    n = X.n - 1;
   d6ef2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    t = Y.n - 1;
   d6ef4:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
   d6ef8:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
    t = Y.n - 1;
   d6efc:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
   d6f00:	ebc3 0b09 	rsb	fp, r3, r9
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
    t = Y.n - 1;
   d6f04:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
   d6f06:	ea4f 134b 	mov.w	r3, fp, lsl #5
   d6f0a:	4619      	mov	r1, r3
   d6f0c:	4630      	mov	r0, r6
   d6f0e:	9303      	str	r3, [sp, #12]
   d6f10:	f7ff fc54 	bl	d67bc <mbedtls_mpi_shift_l>
   d6f14:	4604      	mov	r4, r0
   d6f16:	2800      	cmp	r0, #0
   d6f18:	f040 8108 	bne.w	d712c <mbedtls_mpi_div_mpi+0x354>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    {
        Z.p[n - t]++;
   d6f1c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2

    n = X.n - 1;
    t = Y.n - 1;
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
   d6f20:	4631      	mov	r1, r6
   d6f22:	a80b      	add	r0, sp, #44	; 0x2c
   d6f24:	f7ff fd78 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d6f28:	2800      	cmp	r0, #0
   d6f2a:	db0e      	blt.n	d6f4a <mbedtls_mpi_div_mpi+0x172>
    {
        Z.p[n - t]++;
   d6f2c:	9913      	ldr	r1, [sp, #76]	; 0x4c
   d6f2e:	f851 200b 	ldr.w	r2, [r1, fp]
   d6f32:	3201      	adds	r2, #1
   d6f34:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
   d6f38:	a90b      	add	r1, sp, #44	; 0x2c
   d6f3a:	4632      	mov	r2, r6
   d6f3c:	4608      	mov	r0, r1
   d6f3e:	f7ff fe81 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d6f42:	4604      	mov	r4, r0
   d6f44:	2800      	cmp	r0, #0
   d6f46:	d0eb      	beq.n	d6f20 <mbedtls_mpi_div_mpi+0x148>
   d6f48:	e0f0      	b.n	d712c <mbedtls_mpi_div_mpi+0x354>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
   d6f4a:	9903      	ldr	r1, [sp, #12]
   d6f4c:	4630      	mov	r0, r6
   d6f4e:	f7ff fc84 	bl	d685a <mbedtls_mpi_shift_r>
   d6f52:	4604      	mov	r4, r0
   d6f54:	2800      	cmp	r0, #0
   d6f56:	f040 80e9 	bne.w	d712c <mbedtls_mpi_div_mpi+0x354>

    for( i = n; i > t ; i-- )
    {
        if( X.p[i] >= Y.p[t] )
   d6f5a:	9b00      	ldr	r3, [sp, #0]
   d6f5c:	009b      	lsls	r3, r3, #2
   d6f5e:	9305      	str	r3, [sp, #20]
        do
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
   d6f60:	3b04      	subs	r3, #4
   d6f62:	f105 4680 	add.w	r6, r5, #1073741824	; 0x40000000
   d6f66:	9308      	str	r3, [sp, #32]
   d6f68:	f105 6300 	add.w	r3, r5, #134217728	; 0x8000000
   d6f6c:	3b01      	subs	r3, #1
   d6f6e:	3e01      	subs	r6, #1
   d6f70:	ebca 0606 	rsb	r6, sl, r6
   d6f74:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   d6f78:	ebca 0a03 	rsb	sl, sl, r3
   d6f7c:	ea4f 134a 	mov.w	r3, sl, lsl #5
   d6f80:	3d02      	subs	r5, #2
   d6f82:	00b6      	lsls	r6, r6, #2
   d6f84:	9303      	str	r3, [sp, #12]
   d6f86:	00ad      	lsls	r5, r5, #2
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
   d6f88:	9b00      	ldr	r3, [sp, #0]
   d6f8a:	4599      	cmp	r9, r3
   d6f8c:	f240 80a8 	bls.w	d70e0 <mbedtls_mpi_div_mpi+0x308>
   d6f90:	1d2b      	adds	r3, r5, #4
    {
        if( X.p[i] >= Y.p[t] )
   d6f92:	9805      	ldr	r0, [sp, #20]
   d6f94:	990d      	ldr	r1, [sp, #52]	; 0x34
   d6f96:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d6f98:	9309      	str	r3, [sp, #36]	; 0x24
   d6f9a:	5812      	ldr	r2, [r2, r0]
   d6f9c:	58cb      	ldr	r3, [r1, r3]
   d6f9e:	9813      	ldr	r0, [sp, #76]	; 0x4c
   d6fa0:	4293      	cmp	r3, r2
   d6fa2:	d303      	bcc.n	d6fac <mbedtls_mpi_div_mpi+0x1d4>
            Z.p[i - t - 1] = ~0;
   d6fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6fa8:	5183      	str	r3, [r0, r6]
   d6faa:	e01b      	b.n	d6fe4 <mbedtls_mpi_div_mpi+0x20c>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
   d6fac:	eb00 0a06 	add.w	sl, r0, r6
   d6fb0:	5948      	ldr	r0, [r1, r5]
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
   d6fb2:	b19a      	cbz	r2, d6fdc <mbedtls_mpi_div_mpi+0x204>

        return ( ~0 );
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
   d6fb4:	9307      	str	r3, [sp, #28]
   d6fb6:	2300      	movs	r3, #0
   d6fb8:	9306      	str	r3, [sp, #24]
    dividend |= (mbedtls_t_udbl) u0;
    quotient = dividend / d;
   d6fba:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   d6fbe:	ea4b 0b00 	orr.w	fp, fp, r0
   d6fc2:	4658      	mov	r0, fp
   d6fc4:	4661      	mov	r1, ip
   d6fc6:	f010 fd79 	bl	e7abc <__aeabi_uldivmod>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;

    if( r != NULL )
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );

    return (mbedtls_mpi_uint) quotient;
   d6fca:	2300      	movs	r3, #0
   d6fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6fd0:	428b      	cmp	r3, r1
   d6fd2:	bf08      	it	eq
   d6fd4:	4282      	cmpeq	r2, r0
   d6fd6:	d203      	bcs.n	d6fe0 <mbedtls_mpi_div_mpi+0x208>
   d6fd8:	4610      	mov	r0, r2
   d6fda:	e001      	b.n	d6fe0 <mbedtls_mpi_div_mpi+0x208>
     */
    if( 0 == d || u1 >= d )
    {
        if (r != NULL) *r = ~0;

        return ( ~0 );
   d6fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        if( X.p[i] >= Y.p[t] )
            Z.p[i - t - 1] = ~0;
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
   d6fe0:	f8ca 0000 	str.w	r0, [sl]
        }

        Z.p[i - t - 1]++;
   d6fe4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d6fe6:	5993      	ldr	r3, [r2, r6]
   d6fe8:	3301      	adds	r3, #1
   d6fea:	5193      	str	r3, [r2, r6]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
   d6fec:	f1a5 0a04 	sub.w	sl, r5, #4
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
   d6ff0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d6ff2:	5993      	ldr	r3, [r2, r6]
   d6ff4:	3b01      	subs	r3, #1
   d6ff6:	5193      	str	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
   d6ff8:	2100      	movs	r1, #0
   d6ffa:	a814      	add	r0, sp, #80	; 0x50
   d6ffc:	f7ff fb06 	bl	d660c <mbedtls_mpi_lset>
   d7000:	2800      	cmp	r0, #0
   d7002:	f040 8090 	bne.w	d7126 <mbedtls_mpi_div_mpi+0x34e>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
   d7006:	9b00      	ldr	r3, [sp, #0]
   d7008:	9a16      	ldr	r2, [sp, #88]	; 0x58
   d700a:	b11b      	cbz	r3, d7014 <mbedtls_mpi_div_mpi+0x23c>
   d700c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d700e:	9908      	ldr	r1, [sp, #32]
   d7010:	585b      	ldr	r3, [r3, r1]
   d7012:	e000      	b.n	d7016 <mbedtls_mpi_div_mpi+0x23e>
   d7014:	9b00      	ldr	r3, [sp, #0]
   d7016:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
   d7018:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d701a:	9a05      	ldr	r2, [sp, #20]
   d701c:	589a      	ldr	r2, [r3, r2]
   d701e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d7020:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
   d7022:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7024:	a914      	add	r1, sp, #80	; 0x50
   d7026:	4608      	mov	r0, r1
   d7028:	599a      	ldr	r2, [r3, r6]
   d702a:	f7ff fec8 	bl	d6dbe <mbedtls_mpi_mul_int>
   d702e:	4601      	mov	r1, r0
   d7030:	2800      	cmp	r0, #0
   d7032:	d17a      	bne.n	d712a <mbedtls_mpi_div_mpi+0x352>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
   d7034:	a817      	add	r0, sp, #92	; 0x5c
   d7036:	f7ff fae9 	bl	d660c <mbedtls_mpi_lset>
   d703a:	2800      	cmp	r0, #0
   d703c:	d173      	bne.n	d7126 <mbedtls_mpi_div_mpi+0x34e>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
   d703e:	f1b9 0f01 	cmp.w	r9, #1
   d7042:	bf18      	it	ne
   d7044:	9a0d      	ldrne	r2, [sp, #52]	; 0x34
   d7046:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d7048:	bf18      	it	ne
   d704a:	f852 000a 	ldrne.w	r0, [r2, sl]
   d704e:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
   d7050:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d7052:	595a      	ldr	r2, [r3, r5]
   d7054:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d7056:	605a      	str	r2, [r3, #4]
            T2.p[2] = X.p[i];
   d7058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d705a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d705c:	589a      	ldr	r2, [r3, r2]
   d705e:	9b19      	ldr	r3, [sp, #100]	; 0x64
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
   d7060:	a917      	add	r1, sp, #92	; 0x5c
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
   d7062:	609a      	str	r2, [r3, #8]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
   d7064:	a814      	add	r0, sp, #80	; 0x50
   d7066:	f7ff fcd7 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
        do
   d706a:	2800      	cmp	r0, #0
   d706c:	dcc0      	bgt.n	d6ff0 <mbedtls_mpi_div_mpi+0x218>
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
   d706e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7070:	a90e      	add	r1, sp, #56	; 0x38
   d7072:	599a      	ldr	r2, [r3, r6]
   d7074:	a814      	add	r0, sp, #80	; 0x50
   d7076:	f7ff fea2 	bl	d6dbe <mbedtls_mpi_mul_int>
   d707a:	2800      	cmp	r0, #0
   d707c:	d153      	bne.n	d7126 <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
   d707e:	9903      	ldr	r1, [sp, #12]
   d7080:	a814      	add	r0, sp, #80	; 0x50
   d7082:	f7ff fb9b 	bl	d67bc <mbedtls_mpi_shift_l>
   d7086:	2800      	cmp	r0, #0
   d7088:	d14d      	bne.n	d7126 <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
   d708a:	a90b      	add	r1, sp, #44	; 0x2c
   d708c:	4608      	mov	r0, r1
   d708e:	aa14      	add	r2, sp, #80	; 0x50
   d7090:	f7ff fdd8 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d7094:	4601      	mov	r1, r0
   d7096:	2800      	cmp	r0, #0
   d7098:	d147      	bne.n	d712a <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
   d709a:	a80b      	add	r0, sp, #44	; 0x2c
   d709c:	f7ff fd01 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d70a0:	2800      	cmp	r0, #0
   d70a2:	da15      	bge.n	d70d0 <mbedtls_mpi_div_mpi+0x2f8>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
   d70a4:	a90e      	add	r1, sp, #56	; 0x38
   d70a6:	a814      	add	r0, sp, #80	; 0x50
   d70a8:	f7ff fa4f 	bl	d654a <mbedtls_mpi_copy>
   d70ac:	2800      	cmp	r0, #0
   d70ae:	d13a      	bne.n	d7126 <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
   d70b0:	9903      	ldr	r1, [sp, #12]
   d70b2:	a814      	add	r0, sp, #80	; 0x50
   d70b4:	f7ff fb82 	bl	d67bc <mbedtls_mpi_shift_l>
   d70b8:	2800      	cmp	r0, #0
   d70ba:	d134      	bne.n	d7126 <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
   d70bc:	a90b      	add	r1, sp, #44	; 0x2c
   d70be:	aa14      	add	r2, sp, #80	; 0x50
   d70c0:	4608      	mov	r0, r1
   d70c2:	f7ff fd9e 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d70c6:	bb70      	cbnz	r0, d7126 <mbedtls_mpi_div_mpi+0x34e>
            Z.p[i - t - 1]--;
   d70c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d70ca:	5993      	ldr	r3, [r2, r6]
   d70cc:	3b01      	subs	r3, #1
   d70ce:	5193      	str	r3, [r2, r6]
   d70d0:	9b03      	ldr	r3, [sp, #12]
   d70d2:	3b20      	subs	r3, #32
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
   d70d4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   d70d8:	3e04      	subs	r6, #4
   d70da:	9303      	str	r3, [sp, #12]
   d70dc:	3d04      	subs	r5, #4
   d70de:	e753      	b.n	d6f88 <mbedtls_mpi_div_mpi+0x1b0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
            Z.p[i - t - 1]--;
        }
    }

    if( Q != NULL )
   d70e0:	9b01      	ldr	r3, [sp, #4]
   d70e2:	b15b      	cbz	r3, d70fc <mbedtls_mpi_div_mpi+0x324>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
   d70e4:	a911      	add	r1, sp, #68	; 0x44
   d70e6:	4618      	mov	r0, r3
   d70e8:	f7ff fa2f 	bl	d654a <mbedtls_mpi_copy>
   d70ec:	b9d8      	cbnz	r0, d7126 <mbedtls_mpi_div_mpi+0x34e>
        Q->s = A->s * B->s;
   d70ee:	9b04      	ldr	r3, [sp, #16]
   d70f0:	f8d8 2000 	ldr.w	r2, [r8]
   d70f4:	681b      	ldr	r3, [r3, #0]
   d70f6:	4353      	muls	r3, r2
   d70f8:	9a01      	ldr	r2, [sp, #4]
   d70fa:	6013      	str	r3, [r2, #0]
    }

    if( R != NULL )
   d70fc:	b1b7      	cbz	r7, d712c <mbedtls_mpi_div_mpi+0x354>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
   d70fe:	9902      	ldr	r1, [sp, #8]
   d7100:	a80b      	add	r0, sp, #44	; 0x2c
   d7102:	f7ff fbaa 	bl	d685a <mbedtls_mpi_shift_r>
   d7106:	b970      	cbnz	r0, d7126 <mbedtls_mpi_div_mpi+0x34e>
        X.s = A->s;
   d7108:	f8d8 3000 	ldr.w	r3, [r8]
   d710c:	930b      	str	r3, [sp, #44]	; 0x2c
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
   d710e:	a90b      	add	r1, sp, #44	; 0x2c
   d7110:	4638      	mov	r0, r7
   d7112:	f7ff fa1a 	bl	d654a <mbedtls_mpi_copy>
   d7116:	4601      	mov	r1, r0
   d7118:	b938      	cbnz	r0, d712a <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
   d711a:	4638      	mov	r0, r7
   d711c:	f7ff fcc1 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d7120:	b920      	cbnz	r0, d712c <mbedtls_mpi_div_mpi+0x354>
            R->s = 1;
   d7122:	2301      	movs	r3, #1
   d7124:	603b      	str	r3, [r7, #0]
   d7126:	4604      	mov	r4, r0
   d7128:	e000      	b.n	d712c <mbedtls_mpi_div_mpi+0x354>
   d712a:	460c      	mov	r4, r1
    }

cleanup:

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
   d712c:	a80b      	add	r0, sp, #44	; 0x2c
   d712e:	f7ff f992 	bl	d6456 <mbedtls_mpi_free>
   d7132:	a80e      	add	r0, sp, #56	; 0x38
   d7134:	f7ff f98f 	bl	d6456 <mbedtls_mpi_free>
   d7138:	a811      	add	r0, sp, #68	; 0x44
   d713a:	f7ff f98c 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
   d713e:	a814      	add	r0, sp, #80	; 0x50
   d7140:	f7ff f989 	bl	d6456 <mbedtls_mpi_free>
   d7144:	a817      	add	r0, sp, #92	; 0x5c
   d7146:	f7ff f986 	bl	d6456 <mbedtls_mpi_free>

    return( ret );
   d714a:	4620      	mov	r0, r4
   d714c:	e001      	b.n	d7152 <mbedtls_mpi_div_mpi+0x37a>
    mbedtls_mpi X, Y, Z, T1, T2;
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
   d714e:	f06f 000b 	mvn.w	r0, #11

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );

    return( ret );
}
   d7152:	b01b      	add	sp, #108	; 0x6c
   d7154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7158 <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d7158:	b570      	push	{r4, r5, r6, lr}
   d715a:	4604      	mov	r4, r0
   d715c:	460e      	mov	r6, r1
    int ret;
    MPI_VALIDATE_RET( R != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
   d715e:	4610      	mov	r0, r2
   d7160:	2100      	movs	r1, #0

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d7162:	4615      	mov	r5, r2
    int ret;
    MPI_VALIDATE_RET( R != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
   d7164:	f7ff fc9d 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d7168:	2800      	cmp	r0, #0
   d716a:	db22      	blt.n	d71b2 <mbedtls_mpi_mod_mpi+0x5a>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
   d716c:	462b      	mov	r3, r5
   d716e:	4632      	mov	r2, r6
   d7170:	4621      	mov	r1, r4
   d7172:	2000      	movs	r0, #0
   d7174:	f7ff fe30 	bl	d6dd8 <mbedtls_mpi_div_mpi>
   d7178:	b9f8      	cbnz	r0, d71ba <mbedtls_mpi_mod_mpi+0x62>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
   d717a:	2100      	movs	r1, #0
   d717c:	4620      	mov	r0, r4
   d717e:	f7ff fc90 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d7182:	2800      	cmp	r0, #0
   d7184:	da07      	bge.n	d7196 <mbedtls_mpi_mod_mpi+0x3e>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
   d7186:	462a      	mov	r2, r5
   d7188:	4621      	mov	r1, r4
   d718a:	4620      	mov	r0, r4
   d718c:	f7ff fd39 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d7190:	2800      	cmp	r0, #0
   d7192:	d0f2      	beq.n	d717a <mbedtls_mpi_mod_mpi+0x22>
   d7194:	bd70      	pop	{r4, r5, r6, pc}

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
   d7196:	4629      	mov	r1, r5
   d7198:	4620      	mov	r0, r4
   d719a:	f7ff fc3d 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d719e:	2800      	cmp	r0, #0
   d71a0:	db0a      	blt.n	d71b8 <mbedtls_mpi_mod_mpi+0x60>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
   d71a2:	462a      	mov	r2, r5
   d71a4:	4621      	mov	r1, r4
   d71a6:	4620      	mov	r0, r4
   d71a8:	f7ff fd4c 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d71ac:	2800      	cmp	r0, #0
   d71ae:	d0f2      	beq.n	d7196 <mbedtls_mpi_mod_mpi+0x3e>
   d71b0:	bd70      	pop	{r4, r5, r6, pc}
    MPI_VALIDATE_RET( R != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
   d71b2:	f06f 0009 	mvn.w	r0, #9
   d71b6:	bd70      	pop	{r4, r5, r6, pc}
   d71b8:	2000      	movs	r0, #0
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );

cleanup:

    return( ret );
}
   d71ba:	bd70      	pop	{r4, r5, r6, pc}

000d71bc <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
   d71bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d71c0:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
   d71c4:	4606      	mov	r6, r0
   d71c6:	460f      	mov	r7, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
   d71c8:	4618      	mov	r0, r3
   d71ca:	2100      	movs	r1, #0
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
   d71cc:	9202      	str	r2, [sp, #8]
   d71ce:	461d      	mov	r5, r3
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
   d71d0:	f7ff fc67 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d71d4:	2800      	cmp	r0, #0
   d71d6:	dd05      	ble.n	d71e4 <mbedtls_mpi_exp_mod+0x28>
   d71d8:	68ab      	ldr	r3, [r5, #8]
   d71da:	f8d3 8000 	ldr.w	r8, [r3]
   d71de:	f018 0f01 	tst.w	r8, #1
   d71e2:	d102      	bne.n	d71ea <mbedtls_mpi_exp_mod+0x2e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   d71e4:	f06f 0003 	mvn.w	r0, #3
   d71e8:	e203      	b.n	d75f2 <mbedtls_mpi_exp_mod+0x436>

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
   d71ea:	2100      	movs	r1, #0
   d71ec:	9802      	ldr	r0, [sp, #8]
   d71ee:	f7ff fc58 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d71f2:	2800      	cmp	r0, #0
   d71f4:	dbf6      	blt.n	d71e4 <mbedtls_mpi_exp_mod+0x28>
{
    mbedtls_mpi_uint x, m0 = N->p[0];
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;
   d71f6:	f108 0402 	add.w	r4, r8, #2
   d71fa:	0064      	lsls	r4, r4, #1
   d71fc:	f004 0408 	and.w	r4, r4, #8
   d7200:	4444      	add	r4, r8
   d7202:	2103      	movs	r1, #3

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );
   d7204:	fb04 f308 	mul.w	r3, r4, r8
   d7208:	f1c3 0302 	rsb	r3, r3, #2
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
   d720c:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
   d720e:	fb03 f404 	mul.w	r4, r3, r4
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
   d7212:	d1f7      	bne.n	d7204 <mbedtls_mpi_exp_mod+0x48>
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d7214:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
   d7216:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   d721a:	a814      	add	r0, sp, #80	; 0x50
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d721c:	9308      	str	r3, [sp, #32]
    X->n = 0;
   d721e:	9109      	str	r1, [sp, #36]	; 0x24
    X->p = NULL;
   d7220:	910a      	str	r1, [sp, #40]	; 0x28
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d7222:	930b      	str	r3, [sp, #44]	; 0x2c
    X->n = 0;
   d7224:	910c      	str	r1, [sp, #48]	; 0x30
    X->p = NULL;
   d7226:	910d      	str	r1, [sp, #52]	; 0x34
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d7228:	930e      	str	r3, [sp, #56]	; 0x38
    X->n = 0;
   d722a:	910f      	str	r1, [sp, #60]	; 0x3c
    X->p = NULL;
   d722c:	9110      	str	r1, [sp, #64]	; 0x40
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
   d722e:	f010 fe40 	bl	e7eb2 <memset>

    i = mbedtls_mpi_bitlen( E );
   d7232:	9802      	ldr	r0, [sp, #8]
   d7234:	f7ff fa30 	bl	d6698 <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;
   d7238:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
   d723c:	d20a      	bcs.n	d7254 <mbedtls_mpi_exp_mod+0x98>
   d723e:	28ef      	cmp	r0, #239	; 0xef
   d7240:	d80b      	bhi.n	d725a <mbedtls_mpi_exp_mod+0x9e>
   d7242:	284f      	cmp	r0, #79	; 0x4f
   d7244:	d80c      	bhi.n	d7260 <mbedtls_mpi_exp_mod+0xa4>
   d7246:	2818      	cmp	r0, #24
   d7248:	bf34      	ite	cc
   d724a:	f04f 0b01 	movcc.w	fp, #1
   d724e:	f04f 0b03 	movcs.w	fp, #3
   d7252:	e007      	b.n	d7264 <mbedtls_mpi_exp_mod+0xa8>
   d7254:	f04f 0b06 	mov.w	fp, #6
   d7258:	e004      	b.n	d7264 <mbedtls_mpi_exp_mod+0xa8>
   d725a:	f04f 0b05 	mov.w	fp, #5
   d725e:	e001      	b.n	d7264 <mbedtls_mpi_exp_mod+0xa8>
   d7260:	f04f 0b04 	mov.w	fp, #4
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
   d7264:	686b      	ldr	r3, [r5, #4]
   d7266:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
   d726a:	4641      	mov	r1, r8
   d726c:	4630      	mov	r0, r6
   d726e:	f7ff f904 	bl	d647a <mbedtls_mpi_grow>
   d7272:	4603      	mov	r3, r0
   d7274:	2800      	cmp	r0, #0
   d7276:	f040 8194 	bne.w	d75a2 <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
   d727a:	4641      	mov	r1, r8
   d727c:	a817      	add	r0, sp, #92	; 0x5c
   d727e:	f7ff f8fc 	bl	d647a <mbedtls_mpi_grow>
   d7282:	4603      	mov	r3, r0
   d7284:	2800      	cmp	r0, #0
   d7286:	f040 818c 	bne.w	d75a2 <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
   d728a:	ea4f 0148 	mov.w	r1, r8, lsl #1
   d728e:	a80b      	add	r0, sp, #44	; 0x2c
   d7290:	f7ff f8f3 	bl	d647a <mbedtls_mpi_grow>
   d7294:	4603      	mov	r3, r0
   d7296:	2800      	cmp	r0, #0
   d7298:	f040 8183 	bne.w	d75a2 <mbedtls_mpi_exp_mod+0x3e6>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
   d729c:	683b      	ldr	r3, [r7, #0]
   d729e:	9304      	str	r3, [sp, #16]
    if( neg )
   d72a0:	3301      	adds	r3, #1
   d72a2:	d10a      	bne.n	d72ba <mbedtls_mpi_exp_mod+0xfe>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
   d72a4:	4639      	mov	r1, r7
   d72a6:	a80e      	add	r0, sp, #56	; 0x38
   d72a8:	f7ff f94f 	bl	d654a <mbedtls_mpi_copy>
   d72ac:	4603      	mov	r3, r0
   d72ae:	2800      	cmp	r0, #0
   d72b0:	f040 8177 	bne.w	d75a2 <mbedtls_mpi_exp_mod+0x3e6>
        Apos.s = 1;
   d72b4:	2301      	movs	r3, #1
   d72b6:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
   d72b8:	af0e      	add	r7, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
   d72ba:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
   d72be:	b10b      	cbz	r3, d72c4 <mbedtls_mpi_exp_mod+0x108>
   d72c0:	689b      	ldr	r3, [r3, #8]
   d72c2:	bb2b      	cbnz	r3, d7310 <mbedtls_mpi_exp_mod+0x154>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
   d72c4:	2101      	movs	r1, #1
   d72c6:	a808      	add	r0, sp, #32
   d72c8:	f7ff f9a0 	bl	d660c <mbedtls_mpi_lset>
   d72cc:	4603      	mov	r3, r0
   d72ce:	2800      	cmp	r0, #0
   d72d0:	f040 8167 	bne.w	d75a2 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
   d72d4:	6869      	ldr	r1, [r5, #4]
   d72d6:	a808      	add	r0, sp, #32
   d72d8:	0189      	lsls	r1, r1, #6
   d72da:	f7ff fa6f 	bl	d67bc <mbedtls_mpi_shift_l>
   d72de:	4603      	mov	r3, r0
   d72e0:	2800      	cmp	r0, #0
   d72e2:	f040 815e 	bne.w	d75a2 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
   d72e6:	a908      	add	r1, sp, #32
   d72e8:	462a      	mov	r2, r5
   d72ea:	4608      	mov	r0, r1
   d72ec:	f7ff ff34 	bl	d7158 <mbedtls_mpi_mod_mpi>
   d72f0:	4603      	mov	r3, r0
   d72f2:	2800      	cmp	r0, #0
   d72f4:	f040 8155 	bne.w	d75a2 <mbedtls_mpi_exp_mod+0x3e6>

        if( _RR != NULL )
   d72f8:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
   d72fc:	b183      	cbz	r3, d7320 <mbedtls_mpi_exp_mod+0x164>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
   d72fe:	ab08      	add	r3, sp, #32
   d7300:	cb03      	ldmia	r3!, {r0, r1}
   d7302:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
   d7306:	6010      	str	r0, [r2, #0]
   d7308:	6818      	ldr	r0, [r3, #0]
   d730a:	6051      	str	r1, [r2, #4]
   d730c:	6090      	str	r0, [r2, #8]
   d730e:	e007      	b.n	d7320 <mbedtls_mpi_exp_mod+0x164>
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
   d7310:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
   d7314:	6810      	ldr	r0, [r2, #0]
   d7316:	6851      	ldr	r1, [r2, #4]
   d7318:	ab08      	add	r3, sp, #32
   d731a:	c303      	stmia	r3!, {r0, r1}
   d731c:	6890      	ldr	r0, [r2, #8]
   d731e:	6018      	str	r0, [r3, #0]

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
   d7320:	4629      	mov	r1, r5
   d7322:	4638      	mov	r0, r7
   d7324:	f7ff fb78 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d7328:	2800      	cmp	r0, #0
   d732a:	db18      	blt.n	d735e <mbedtls_mpi_exp_mod+0x1a2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
   d732c:	462a      	mov	r2, r5
   d732e:	4639      	mov	r1, r7
   d7330:	a817      	add	r0, sp, #92	; 0x5c
   d7332:	f7ff ff11 	bl	d7158 <mbedtls_mpi_mod_mpi>
   d7336:	4603      	mov	r3, r0
   d7338:	2800      	cmp	r0, #0
   d733a:	f040 8132 	bne.w	d75a2 <mbedtls_mpi_exp_mod+0x3e6>
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );

    *mm = ~x + 1;
   d733e:	4264      	negs	r4, r4
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
   d7340:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   d7344:	4623      	mov	r3, r4
   d7346:	f8cd 9000 	str.w	r9, [sp]
   d734a:	462a      	mov	r2, r5
   d734c:	a908      	add	r1, sp, #32
   d734e:	a817      	add	r0, sp, #92	; 0x5c
   d7350:	f7ff fafe 	bl	d6950 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   d7354:	4603      	mov	r3, r0
   d7356:	2800      	cmp	r0, #0
   d7358:	f040 8123 	bne.w	d75a2 <mbedtls_mpi_exp_mod+0x3e6>
   d735c:	e004      	b.n	d7368 <mbedtls_mpi_exp_mod+0x1ac>
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
   d735e:	4639      	mov	r1, r7
   d7360:	a817      	add	r0, sp, #92	; 0x5c
   d7362:	f7ff f8f2 	bl	d654a <mbedtls_mpi_copy>
   d7366:	e7e6      	b.n	d7336 <mbedtls_mpi_exp_mod+0x17a>
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
   d7368:	a908      	add	r1, sp, #32
   d736a:	4630      	mov	r0, r6
   d736c:	f7ff f8ed 	bl	d654a <mbedtls_mpi_copy>
   d7370:	4603      	mov	r3, r0
   d7372:	2800      	cmp	r0, #0
   d7374:	f040 8115 	bne.w	d75a2 <mbedtls_mpi_exp_mod+0x3e6>
{
    mbedtls_mpi_uint z = 1;
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
   d7378:	ab07      	add	r3, sp, #28
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N,
                        mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
   d737a:	2701      	movs	r7, #1
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
   d737c:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
   d737e:	f8cd 9000 	str.w	r9, [sp]
   d7382:	4623      	mov	r3, r4
   d7384:	462a      	mov	r2, r5
   d7386:	a911      	add	r1, sp, #68	; 0x44
   d7388:	4630      	mov	r0, r6
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N,
                        mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
   d738a:	9707      	str	r7, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
   d738c:	9711      	str	r7, [sp, #68]	; 0x44
   d738e:	9712      	str	r7, [sp, #72]	; 0x48
    U.p = &z;

    return( mpi_montmul( A, &U, N, mm, T ) );
   d7390:	f7ff fade 	bl	d6950 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
   d7394:	4603      	mov	r3, r0
   d7396:	2800      	cmp	r0, #0
   d7398:	f040 8103 	bne.w	d75a2 <mbedtls_mpi_exp_mod+0x3e6>

    if( wsize > 1 )
   d739c:	45bb      	cmp	fp, r7
   d739e:	d05b      	beq.n	d7458 <mbedtls_mpi_exp_mod+0x29c>
    {
        /*
         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
         */
        j =  one << ( wsize - 1 );
   d73a0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   d73a4:	9303      	str	r3, [sp, #12]
   d73a6:	409f      	lsls	r7, r3

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
   d73a8:	6869      	ldr	r1, [r5, #4]
   d73aa:	ab14      	add	r3, sp, #80	; 0x50
   d73ac:	f04f 080c 	mov.w	r8, #12
   d73b0:	fb08 3807 	mla	r8, r8, r7, r3
   d73b4:	3101      	adds	r1, #1
   d73b6:	4640      	mov	r0, r8
   d73b8:	f7ff f85f 	bl	d647a <mbedtls_mpi_grow>
   d73bc:	4603      	mov	r3, r0
   d73be:	2800      	cmp	r0, #0
   d73c0:	f040 80ef 	bne.w	d75a2 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
   d73c4:	a917      	add	r1, sp, #92	; 0x5c
   d73c6:	4640      	mov	r0, r8
   d73c8:	f7ff f8bf 	bl	d654a <mbedtls_mpi_copy>
   d73cc:	4603      	mov	r3, r0
   d73ce:	2800      	cmp	r0, #0
   d73d0:	f040 80e7 	bne.w	d75a2 <mbedtls_mpi_exp_mod+0x3e6>
   d73d4:	4682      	mov	sl, r0

        for( i = 0; i < wsize - 1; i++ )
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
   d73d6:	4623      	mov	r3, r4
   d73d8:	f8cd 9000 	str.w	r9, [sp]
   d73dc:	462a      	mov	r2, r5
   d73de:	4641      	mov	r1, r8
   d73e0:	4640      	mov	r0, r8
   d73e2:	f7ff fab5 	bl	d6950 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   d73e6:	4603      	mov	r3, r0
   d73e8:	2800      	cmp	r0, #0
   d73ea:	f040 80da 	bne.w	d75a2 <mbedtls_mpi_exp_mod+0x3e6>
        j =  one << ( wsize - 1 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );

        for( i = 0; i < wsize - 1; i++ )
   d73ee:	9b03      	ldr	r3, [sp, #12]
   d73f0:	f10a 0a01 	add.w	sl, sl, #1
   d73f4:	4553      	cmp	r3, sl
   d73f6:	d8ee      	bhi.n	d73d6 <mbedtls_mpi_exp_mod+0x21a>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
   d73f8:	3701      	adds	r7, #1
   d73fa:	f04f 0901 	mov.w	r9, #1
   d73fe:	f04f 080c 	mov.w	r8, #12
   d7402:	ab14      	add	r3, sp, #80	; 0x50
   d7404:	fa09 f90b 	lsl.w	r9, r9, fp
   d7408:	fb08 3807 	mla	r8, r8, r7, r3
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
   d740c:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
   d7410:	454f      	cmp	r7, r9
   d7412:	d221      	bcs.n	d7458 <mbedtls_mpi_exp_mod+0x29c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
   d7414:	6869      	ldr	r1, [r5, #4]
   d7416:	4640      	mov	r0, r8
   d7418:	3101      	adds	r1, #1
   d741a:	f7ff f82e 	bl	d647a <mbedtls_mpi_grow>
   d741e:	4603      	mov	r3, r0
   d7420:	2800      	cmp	r0, #0
   d7422:	f040 80be 	bne.w	d75a2 <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
   d7426:	f1a8 010c 	sub.w	r1, r8, #12
   d742a:	4640      	mov	r0, r8
   d742c:	f7ff f88d 	bl	d654a <mbedtls_mpi_copy>
   d7430:	4603      	mov	r3, r0
   d7432:	2800      	cmp	r0, #0
   d7434:	f040 80b5 	bne.w	d75a2 <mbedtls_mpi_exp_mod+0x3e6>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
   d7438:	4623      	mov	r3, r4
   d743a:	4640      	mov	r0, r8
   d743c:	f8cd a000 	str.w	sl, [sp]
   d7440:	462a      	mov	r2, r5
   d7442:	a917      	add	r1, sp, #92	; 0x5c
   d7444:	f7ff fa84 	bl	d6950 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   d7448:	f108 080c 	add.w	r8, r8, #12
   d744c:	4603      	mov	r3, r0
   d744e:	2800      	cmp	r0, #0
   d7450:	f040 80a7 	bne.w	d75a2 <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
   d7454:	3701      	adds	r7, #1
   d7456:	e7db      	b.n	d7410 <mbedtls_mpi_exp_mod+0x254>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
   d7458:	9b02      	ldr	r3, [sp, #8]
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
   d745a:	2700      	movs	r7, #0

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
   d745c:	685b      	ldr	r3, [r3, #4]
   d745e:	9303      	str	r3, [sp, #12]
    bufsize = 0;
    nbits   = 0;
   d7460:	46b9      	mov	r9, r7
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
    bufsize = 0;
   d7462:	46ba      	mov	sl, r7
    nbits   = 0;
    wbits   = 0;
   d7464:	46b8      	mov	r8, r7
    state   = 0;

    while( 1 )
    {
        if( bufsize == 0 )
   d7466:	f1ba 0f00 	cmp.w	sl, #0
   d746a:	d10e      	bne.n	d748a <mbedtls_mpi_exp_mod+0x2ce>
        {
            if( nblimbs == 0 )
   d746c:	9b03      	ldr	r3, [sp, #12]
   d746e:	b93b      	cbnz	r3, d7480 <mbedtls_mpi_exp_mod+0x2c4>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
   d7470:	2301      	movs	r3, #1
   d7472:	fa03 f30b 	lsl.w	r3, r3, fp
   d7476:	9305      	str	r3, [sp, #20]
   d7478:	9f03      	ldr	r7, [sp, #12]
   d747a:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
   d747e:	e05e      	b.n	d753e <mbedtls_mpi_exp_mod+0x382>
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
   d7480:	9b03      	ldr	r3, [sp, #12]
   d7482:	3b01      	subs	r3, #1
   d7484:	9303      	str	r3, [sp, #12]

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
   d7486:	f04f 0a20 	mov.w	sl, #32
        }

        bufsize--;

        ei = (E->p[nblimbs] >> bufsize) & 1;
   d748a:	9b02      	ldr	r3, [sp, #8]
   d748c:	9a03      	ldr	r2, [sp, #12]
   d748e:	689b      	ldr	r3, [r3, #8]
   d7490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
            nblimbs--;

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;
   d7494:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff

        ei = (E->p[nblimbs] >> bufsize) & 1;
   d7498:	fa23 f30a 	lsr.w	r3, r3, sl

        /*
         * skip leading 0s
         */
        if( ei == 0 && state == 0 )
   d749c:	f013 0301 	ands.w	r3, r3, #1
   d74a0:	d10f      	bne.n	d74c2 <mbedtls_mpi_exp_mod+0x306>
   d74a2:	2f00      	cmp	r7, #0
   d74a4:	d0df      	beq.n	d7466 <mbedtls_mpi_exp_mod+0x2aa>
            continue;

        if( ei == 0 && state == 1 )
   d74a6:	2f01      	cmp	r7, #1
   d74a8:	d10b      	bne.n	d74c2 <mbedtls_mpi_exp_mod+0x306>
        {
            /*
             * out of window, square X
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   d74aa:	ab0b      	add	r3, sp, #44	; 0x2c
   d74ac:	9300      	str	r3, [sp, #0]
   d74ae:	462a      	mov	r2, r5
   d74b0:	4623      	mov	r3, r4
   d74b2:	4631      	mov	r1, r6
   d74b4:	4630      	mov	r0, r6
   d74b6:	f7ff fa4b 	bl	d6950 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   d74ba:	4603      	mov	r3, r0
   d74bc:	2800      	cmp	r0, #0
   d74be:	d0d2      	beq.n	d7466 <mbedtls_mpi_exp_mod+0x2aa>
   d74c0:	e06f      	b.n	d75a2 <mbedtls_mpi_exp_mod+0x3e6>
        /*
         * add ei to current window
         */
        state = 2;

        nbits++;
   d74c2:	f109 0901 	add.w	r9, r9, #1
        wbits |= ( ei << ( wsize - nbits ) );
   d74c6:	ebc9 020b 	rsb	r2, r9, fp
   d74ca:	4093      	lsls	r3, r2

        if( nbits == wsize )
   d74cc:	45cb      	cmp	fp, r9
         * add ei to current window
         */
        state = 2;

        nbits++;
        wbits |= ( ei << ( wsize - nbits ) );
   d74ce:	ea48 0803 	orr.w	r8, r8, r3

        if( nbits == wsize )
   d74d2:	d001      	beq.n	d74d8 <mbedtls_mpi_exp_mod+0x31c>
        }

        /*
         * add ei to current window
         */
        state = 2;
   d74d4:	2702      	movs	r7, #2
   d74d6:	e7c6      	b.n	d7466 <mbedtls_mpi_exp_mod+0x2aa>
   d74d8:	2700      	movs	r7, #0
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   d74da:	ab0b      	add	r3, sp, #44	; 0x2c
   d74dc:	9300      	str	r3, [sp, #0]
   d74de:	462a      	mov	r2, r5
   d74e0:	4623      	mov	r3, r4
   d74e2:	4631      	mov	r1, r6
   d74e4:	4630      	mov	r0, r6
   d74e6:	f7ff fa33 	bl	d6950 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   d74ea:	4603      	mov	r3, r0
   d74ec:	2800      	cmp	r0, #0
   d74ee:	d158      	bne.n	d75a2 <mbedtls_mpi_exp_mod+0x3e6>
        if( nbits == wsize )
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
   d74f0:	3701      	adds	r7, #1
   d74f2:	45bb      	cmp	fp, r7
   d74f4:	d1f1      	bne.n	d74da <mbedtls_mpi_exp_mod+0x31e>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

            /*
             * X = X * W[wbits] R^-1 mod N
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
   d74f6:	ab0b      	add	r3, sp, #44	; 0x2c
   d74f8:	a814      	add	r0, sp, #80	; 0x50
   d74fa:	210c      	movs	r1, #12
   d74fc:	9300      	str	r3, [sp, #0]
   d74fe:	fb01 0108 	mla	r1, r1, r8, r0
   d7502:	4623      	mov	r3, r4
   d7504:	462a      	mov	r2, r5
   d7506:	4630      	mov	r0, r6
   d7508:	f7ff fa22 	bl	d6950 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   d750c:	4603      	mov	r3, r0
   d750e:	2800      	cmp	r0, #0
   d7510:	d147      	bne.n	d75a2 <mbedtls_mpi_exp_mod+0x3e6>

            state--;
   d7512:	2701      	movs	r7, #1
            nbits = 0;
   d7514:	4680      	mov	r8, r0
            wbits = 0;
   d7516:	4681      	mov	r9, r0
   d7518:	e7a5      	b.n	d7466 <mbedtls_mpi_exp_mod+0x2aa>
    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   d751a:	4623      	mov	r3, r4
   d751c:	f8cd a000 	str.w	sl, [sp]
   d7520:	462a      	mov	r2, r5
   d7522:	4631      	mov	r1, r6
   d7524:	4630      	mov	r0, r6
   d7526:	f7ff fa13 	bl	d6950 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   d752a:	4603      	mov	r3, r0
   d752c:	2800      	cmp	r0, #0
   d752e:	d138      	bne.n	d75a2 <mbedtls_mpi_exp_mod+0x3e6>

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
   d7530:	9b05      	ldr	r3, [sp, #20]
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;
   d7532:	ea4f 0848 	mov.w	r8, r8, lsl #1

        if( ( wbits & ( one << wsize ) ) != 0 )
   d7536:	ea18 0f03 	tst.w	r8, r3
   d753a:	d103      	bne.n	d7544 <mbedtls_mpi_exp_mod+0x388>
    }

    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
   d753c:	3701      	adds	r7, #1
   d753e:	454f      	cmp	r7, r9
   d7540:	d1eb      	bne.n	d751a <mbedtls_mpi_exp_mod+0x35e>
   d7542:	e00b      	b.n	d755c <mbedtls_mpi_exp_mod+0x3a0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
   d7544:	4623      	mov	r3, r4
   d7546:	f8cd a000 	str.w	sl, [sp]
   d754a:	462a      	mov	r2, r5
   d754c:	a917      	add	r1, sp, #92	; 0x5c
   d754e:	4630      	mov	r0, r6
   d7550:	f7ff f9fe 	bl	d6950 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   d7554:	4603      	mov	r3, r0
   d7556:	2800      	cmp	r0, #0
   d7558:	d0f0      	beq.n	d753c <mbedtls_mpi_exp_mod+0x380>
   d755a:	e022      	b.n	d75a2 <mbedtls_mpi_exp_mod+0x3e6>
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N,
                        mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
   d755c:	2301      	movs	r3, #1
   d755e:	9307      	str	r3, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
   d7560:	9311      	str	r3, [sp, #68]	; 0x44
   d7562:	9312      	str	r3, [sp, #72]	; 0x48
    U.p = &z;
   d7564:	ab07      	add	r3, sp, #28
   d7566:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
   d7568:	f8cd a000 	str.w	sl, [sp]
   d756c:	4623      	mov	r3, r4
   d756e:	462a      	mov	r2, r5
   d7570:	a911      	add	r1, sp, #68	; 0x44
   d7572:	4630      	mov	r0, r6
   d7574:	f7ff f9ec 	bl	d6950 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
   d7578:	4603      	mov	r3, r0
   d757a:	b990      	cbnz	r0, d75a2 <mbedtls_mpi_exp_mod+0x3e6>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
   d757c:	9a04      	ldr	r2, [sp, #16]
   d757e:	3201      	adds	r2, #1
   d7580:	d10f      	bne.n	d75a2 <mbedtls_mpi_exp_mod+0x3e6>
   d7582:	9a02      	ldr	r2, [sp, #8]
   d7584:	6852      	ldr	r2, [r2, #4]
   d7586:	b162      	cbz	r2, d75a2 <mbedtls_mpi_exp_mod+0x3e6>
   d7588:	9a02      	ldr	r2, [sp, #8]
   d758a:	6892      	ldr	r2, [r2, #8]
   d758c:	6812      	ldr	r2, [r2, #0]
   d758e:	07d2      	lsls	r2, r2, #31
   d7590:	d507      	bpl.n	d75a2 <mbedtls_mpi_exp_mod+0x3e6>
    {
        X->s = -1;
   d7592:	9b04      	ldr	r3, [sp, #16]
   d7594:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
   d7596:	4632      	mov	r2, r6
   d7598:	4629      	mov	r1, r5
   d759a:	4630      	mov	r0, r6
   d759c:	f7ff fb31 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d75a0:	4603      	mov	r3, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
   d75a2:	2201      	movs	r2, #1
   d75a4:	f10b 34ff 	add.w	r4, fp, #4294967295	; 0xffffffff
   d75a8:	fa02 f404 	lsl.w	r4, r2, r4
   d75ac:	fa02 f50b 	lsl.w	r5, r2, fp
        mbedtls_mpi_free( &W[i] );
   d75b0:	260c      	movs	r6, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
   d75b2:	42ac      	cmp	r4, r5
   d75b4:	9302      	str	r3, [sp, #8]
   d75b6:	d207      	bcs.n	d75c8 <mbedtls_mpi_exp_mod+0x40c>
        mbedtls_mpi_free( &W[i] );
   d75b8:	ab14      	add	r3, sp, #80	; 0x50
   d75ba:	fb06 3004 	mla	r0, r6, r4, r3
   d75be:	f7fe ff4a 	bl	d6456 <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
   d75c2:	3401      	adds	r4, #1
   d75c4:	9b02      	ldr	r3, [sp, #8]
   d75c6:	e7f4      	b.n	d75b2 <mbedtls_mpi_exp_mod+0x3f6>
        mbedtls_mpi_free( &W[i] );

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
   d75c8:	a817      	add	r0, sp, #92	; 0x5c
   d75ca:	f7fe ff44 	bl	d6456 <mbedtls_mpi_free>
   d75ce:	a80b      	add	r0, sp, #44	; 0x2c
   d75d0:	f7fe ff41 	bl	d6456 <mbedtls_mpi_free>
   d75d4:	a80e      	add	r0, sp, #56	; 0x38
   d75d6:	f7fe ff3e 	bl	d6456 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
   d75da:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
   d75de:	9b02      	ldr	r3, [sp, #8]
   d75e0:	b10a      	cbz	r2, d75e6 <mbedtls_mpi_exp_mod+0x42a>
   d75e2:	6892      	ldr	r2, [r2, #8]
   d75e4:	b922      	cbnz	r2, d75f0 <mbedtls_mpi_exp_mod+0x434>
        mbedtls_mpi_free( &RR );
   d75e6:	a808      	add	r0, sp, #32
   d75e8:	9302      	str	r3, [sp, #8]
   d75ea:	f7fe ff34 	bl	d6456 <mbedtls_mpi_free>

    return( ret );
   d75ee:	9b02      	ldr	r3, [sp, #8]
   d75f0:	4618      	mov	r0, r3
}
   d75f2:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
   d75f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d75fa <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d75fa:	b5f0      	push	{r4, r5, r6, r7, lr}
   d75fc:	b08b      	sub	sp, #44	; 0x2c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   d75fe:	2300      	movs	r3, #0
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d7600:	2601      	movs	r6, #1

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d7602:	4607      	mov	r7, r0
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
   d7604:	a804      	add	r0, sp, #16

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d7606:	4615      	mov	r5, r2
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d7608:	9601      	str	r6, [sp, #4]
    X->n = 0;
   d760a:	9302      	str	r3, [sp, #8]
    X->p = NULL;
   d760c:	9303      	str	r3, [sp, #12]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d760e:	9604      	str	r6, [sp, #16]
    X->n = 0;
   d7610:	9305      	str	r3, [sp, #20]
    X->p = NULL;
   d7612:	9306      	str	r3, [sp, #24]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d7614:	9607      	str	r6, [sp, #28]
    X->n = 0;
   d7616:	9308      	str	r3, [sp, #32]
    X->p = NULL;
   d7618:	9309      	str	r3, [sp, #36]	; 0x24
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
   d761a:	f7fe ff96 	bl	d654a <mbedtls_mpi_copy>
   d761e:	4604      	mov	r4, r0
   d7620:	2800      	cmp	r0, #0
   d7622:	d163      	bne.n	d76ec <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
   d7624:	4629      	mov	r1, r5
   d7626:	a807      	add	r0, sp, #28
   d7628:	f7fe ff8f 	bl	d654a <mbedtls_mpi_copy>
   d762c:	4604      	mov	r4, r0
   d762e:	2800      	cmp	r0, #0
   d7630:	d15c      	bne.n	d76ec <mbedtls_mpi_gcd+0xf2>

    lz = mbedtls_mpi_lsb( &TA );
   d7632:	a804      	add	r0, sp, #16
   d7634:	f7ff f817 	bl	d6666 <mbedtls_mpi_lsb>
   d7638:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
   d763a:	a807      	add	r0, sp, #28
   d763c:	f7ff f813 	bl	d6666 <mbedtls_mpi_lsb>
   d7640:	4285      	cmp	r5, r0
   d7642:	bf28      	it	cs
   d7644:	4605      	movcs	r5, r0

    if( lzt < lz )
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
   d7646:	4629      	mov	r1, r5
   d7648:	a804      	add	r0, sp, #16
   d764a:	f7ff f906 	bl	d685a <mbedtls_mpi_shift_r>
   d764e:	4604      	mov	r4, r0
   d7650:	2800      	cmp	r0, #0
   d7652:	d14b      	bne.n	d76ec <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
   d7654:	4629      	mov	r1, r5
   d7656:	a807      	add	r0, sp, #28
   d7658:	f7ff f8ff 	bl	d685a <mbedtls_mpi_shift_r>
   d765c:	4604      	mov	r4, r0
   d765e:	2800      	cmp	r0, #0
   d7660:	d144      	bne.n	d76ec <mbedtls_mpi_gcd+0xf2>

    TA.s = TB.s = 1;
   d7662:	9607      	str	r6, [sp, #28]
   d7664:	9604      	str	r6, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
   d7666:	2100      	movs	r1, #0
   d7668:	a804      	add	r0, sp, #16
   d766a:	f7ff fa1a 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d766e:	2800      	cmp	r0, #0
   d7670:	d031      	beq.n	d76d6 <mbedtls_mpi_gcd+0xdc>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
   d7672:	a804      	add	r0, sp, #16
   d7674:	f7fe fff7 	bl	d6666 <mbedtls_mpi_lsb>
   d7678:	4601      	mov	r1, r0
   d767a:	a804      	add	r0, sp, #16
   d767c:	f7ff f8ed 	bl	d685a <mbedtls_mpi_shift_r>
   d7680:	4604      	mov	r4, r0
   d7682:	2800      	cmp	r0, #0
   d7684:	d132      	bne.n	d76ec <mbedtls_mpi_gcd+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
   d7686:	a807      	add	r0, sp, #28
   d7688:	f7fe ffed 	bl	d6666 <mbedtls_mpi_lsb>
   d768c:	4601      	mov	r1, r0
   d768e:	a807      	add	r0, sp, #28
   d7690:	f7ff f8e3 	bl	d685a <mbedtls_mpi_shift_r>
   d7694:	4604      	mov	r4, r0
   d7696:	bb48      	cbnz	r0, d76ec <mbedtls_mpi_gcd+0xf2>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
   d7698:	a907      	add	r1, sp, #28
   d769a:	a804      	add	r0, sp, #16
   d769c:	f7ff f9bc 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d76a0:	2800      	cmp	r0, #0
   d76a2:	db09      	blt.n	d76b8 <mbedtls_mpi_gcd+0xbe>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
   d76a4:	a904      	add	r1, sp, #16
   d76a6:	aa07      	add	r2, sp, #28
   d76a8:	4608      	mov	r0, r1
   d76aa:	f7ff fa6a 	bl	d6b82 <mbedtls_mpi_sub_abs>
   d76ae:	4604      	mov	r4, r0
   d76b0:	b9e0      	cbnz	r0, d76ec <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
   d76b2:	2101      	movs	r1, #1
   d76b4:	a804      	add	r0, sp, #16
   d76b6:	e008      	b.n	d76ca <mbedtls_mpi_gcd+0xd0>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
   d76b8:	a907      	add	r1, sp, #28
   d76ba:	aa04      	add	r2, sp, #16
   d76bc:	4608      	mov	r0, r1
   d76be:	f7ff fa60 	bl	d6b82 <mbedtls_mpi_sub_abs>
   d76c2:	4604      	mov	r4, r0
   d76c4:	b990      	cbnz	r0, d76ec <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
   d76c6:	2101      	movs	r1, #1
   d76c8:	a807      	add	r0, sp, #28
   d76ca:	f7ff f8c6 	bl	d685a <mbedtls_mpi_shift_r>
   d76ce:	4604      	mov	r4, r0
   d76d0:	2800      	cmp	r0, #0
   d76d2:	d0c8      	beq.n	d7666 <mbedtls_mpi_gcd+0x6c>
   d76d4:	e00a      	b.n	d76ec <mbedtls_mpi_gcd+0xf2>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
   d76d6:	4629      	mov	r1, r5
   d76d8:	a807      	add	r0, sp, #28
   d76da:	f7ff f86f 	bl	d67bc <mbedtls_mpi_shift_l>
   d76de:	4604      	mov	r4, r0
   d76e0:	b920      	cbnz	r0, d76ec <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
   d76e2:	a907      	add	r1, sp, #28
   d76e4:	4638      	mov	r0, r7
   d76e6:	f7fe ff30 	bl	d654a <mbedtls_mpi_copy>
   d76ea:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
   d76ec:	a801      	add	r0, sp, #4
   d76ee:	f7fe feb2 	bl	d6456 <mbedtls_mpi_free>
   d76f2:	a804      	add	r0, sp, #16
   d76f4:	f7fe feaf 	bl	d6456 <mbedtls_mpi_free>
   d76f8:	a807      	add	r0, sp, #28
   d76fa:	f7fe feac 	bl	d6456 <mbedtls_mpi_free>

    return( ret );
}
   d76fe:	4620      	mov	r0, r4
   d7700:	b00b      	add	sp, #44	; 0x2c
   d7702:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7704 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d7704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int ret;
    size_t const limbs = CHARS_TO_LIMBS( size );
   d7708:	f011 0403 	ands.w	r4, r1, #3
   d770c:	bf18      	it	ne
   d770e:	2401      	movne	r4, #1
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d7710:	4699      	mov	r9, r3

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   d7712:	6843      	ldr	r3, [r0, #4]
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
    int ret;
    size_t const limbs = CHARS_TO_LIMBS( size );
   d7714:	eb04 0491 	add.w	r4, r4, r1, lsr #2

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   d7718:	429c      	cmp	r4, r3
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d771a:	4606      	mov	r6, r0
   d771c:	460f      	mov	r7, r1
   d771e:	4690      	mov	r8, r2

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   d7720:	d106      	bne.n	d7730 <mbedtls_mpi_fill_random+0x2c>
    {
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   d7722:	2100      	movs	r1, #0
   d7724:	4630      	mov	r0, r6
   d7726:	f7fe ff71 	bl	d660c <mbedtls_mpi_lset>
   d772a:	4605      	mov	r5, r0
   d772c:	b9d8      	cbnz	r0, d7766 <mbedtls_mpi_fill_random+0x62>
   d772e:	e00e      	b.n	d774e <mbedtls_mpi_fill_random+0x4a>
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
   d7730:	f7fe fe91 	bl	d6456 <mbedtls_mpi_free>
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d7734:	2301      	movs	r3, #1
   d7736:	6033      	str	r3, [r6, #0]
    X->n = 0;
   d7738:	2300      	movs	r3, #0
   d773a:	6073      	str	r3, [r6, #4]
    X->p = NULL;
   d773c:	60b3      	str	r3, [r6, #8]
    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
   d773e:	4621      	mov	r1, r4
   d7740:	4630      	mov	r0, r6
   d7742:	f7fe fe9a 	bl	d647a <mbedtls_mpi_grow>
   d7746:	4605      	mov	r5, r0
   d7748:	2800      	cmp	r0, #0
   d774a:	d0ea      	beq.n	d7722 <mbedtls_mpi_fill_random+0x1e>
   d774c:	e00b      	b.n	d7766 <mbedtls_mpi_fill_random+0x62>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    Xp = (unsigned char*) X->p;
    f_rng( p_rng, Xp + overhead, size );
   d774e:	68b1      	ldr	r1, [r6, #8]
   d7750:	ebc7 0384 	rsb	r3, r7, r4, lsl #2
   d7754:	463a      	mov	r2, r7
   d7756:	4419      	add	r1, r3
   d7758:	4648      	mov	r0, r9
   d775a:	47c0      	blx	r8

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
   d775c:	b11c      	cbz	r4, d7766 <mbedtls_mpi_fill_random+0x62>
   d775e:	4621      	mov	r1, r4
   d7760:	68b0      	ldr	r0, [r6, #8]
   d7762:	f7fe fe61 	bl	d6428 <_ZL21mpi_bigendian_to_hostPmj.part.1>

    mpi_bigendian_to_host( X->p, limbs );

cleanup:
    return( ret );
}
   d7766:	4628      	mov	r0, r5
   d7768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d776c <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
   d776c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7770:	4680      	mov	r8, r0
   d7772:	b09c      	sub	sp, #112	; 0x70
   d7774:	460f      	mov	r7, r1
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
   d7776:	4610      	mov	r0, r2
   d7778:	2101      	movs	r1, #1

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
   d777a:	4616      	mov	r6, r2
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
   d777c:	f7ff f991 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d7780:	2800      	cmp	r0, #0
   d7782:	f340 814c 	ble.w	d7a1e <mbedtls_mpi_inv_mod+0x2b2>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   d7786:	2300      	movs	r3, #0
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d7788:	2501      	movs	r5, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
   d778a:	4632      	mov	r2, r6
   d778c:	4639      	mov	r1, r7
   d778e:	a801      	add	r0, sp, #4
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d7790:	9504      	str	r5, [sp, #16]
    X->n = 0;
   d7792:	9305      	str	r3, [sp, #20]
    X->p = NULL;
   d7794:	9306      	str	r3, [sp, #24]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d7796:	9507      	str	r5, [sp, #28]
    X->n = 0;
   d7798:	9308      	str	r3, [sp, #32]
    X->p = NULL;
   d779a:	9309      	str	r3, [sp, #36]	; 0x24
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d779c:	950a      	str	r5, [sp, #40]	; 0x28
    X->n = 0;
   d779e:	930b      	str	r3, [sp, #44]	; 0x2c
    X->p = NULL;
   d77a0:	930c      	str	r3, [sp, #48]	; 0x30
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d77a2:	950d      	str	r5, [sp, #52]	; 0x34
    X->n = 0;
   d77a4:	930e      	str	r3, [sp, #56]	; 0x38
    X->p = NULL;
   d77a6:	930f      	str	r3, [sp, #60]	; 0x3c
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d77a8:	9501      	str	r5, [sp, #4]
    X->n = 0;
   d77aa:	9302      	str	r3, [sp, #8]
    X->p = NULL;
   d77ac:	9303      	str	r3, [sp, #12]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d77ae:	9510      	str	r5, [sp, #64]	; 0x40
    X->n = 0;
   d77b0:	9311      	str	r3, [sp, #68]	; 0x44
    X->p = NULL;
   d77b2:	9312      	str	r3, [sp, #72]	; 0x48
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d77b4:	9513      	str	r5, [sp, #76]	; 0x4c
    X->n = 0;
   d77b6:	9314      	str	r3, [sp, #80]	; 0x50
    X->p = NULL;
   d77b8:	9315      	str	r3, [sp, #84]	; 0x54
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d77ba:	9516      	str	r5, [sp, #88]	; 0x58
    X->n = 0;
   d77bc:	9317      	str	r3, [sp, #92]	; 0x5c
    X->p = NULL;
   d77be:	9318      	str	r3, [sp, #96]	; 0x60
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   d77c0:	9519      	str	r5, [sp, #100]	; 0x64
    X->n = 0;
   d77c2:	931a      	str	r3, [sp, #104]	; 0x68
    X->p = NULL;
   d77c4:	931b      	str	r3, [sp, #108]	; 0x6c

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
   d77c6:	f7ff ff18 	bl	d75fa <mbedtls_mpi_gcd>
   d77ca:	4604      	mov	r4, r0
   d77cc:	2800      	cmp	r0, #0
   d77ce:	f040 8109 	bne.w	d79e4 <mbedtls_mpi_inv_mod+0x278>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
   d77d2:	4629      	mov	r1, r5
   d77d4:	a801      	add	r0, sp, #4
   d77d6:	f7ff f964 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d77da:	2800      	cmp	r0, #0
   d77dc:	f040 8100 	bne.w	d79e0 <mbedtls_mpi_inv_mod+0x274>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
   d77e0:	4632      	mov	r2, r6
   d77e2:	4639      	mov	r1, r7
   d77e4:	a804      	add	r0, sp, #16
   d77e6:	f7ff fcb7 	bl	d7158 <mbedtls_mpi_mod_mpi>
   d77ea:	4604      	mov	r4, r0
   d77ec:	2800      	cmp	r0, #0
   d77ee:	f040 80f9 	bne.w	d79e4 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
   d77f2:	a904      	add	r1, sp, #16
   d77f4:	a807      	add	r0, sp, #28
   d77f6:	f7fe fea8 	bl	d654a <mbedtls_mpi_copy>
   d77fa:	4604      	mov	r4, r0
   d77fc:	2800      	cmp	r0, #0
   d77fe:	f040 80f1 	bne.w	d79e4 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
   d7802:	4631      	mov	r1, r6
   d7804:	a810      	add	r0, sp, #64	; 0x40
   d7806:	f7fe fea0 	bl	d654a <mbedtls_mpi_copy>
   d780a:	4604      	mov	r4, r0
   d780c:	2800      	cmp	r0, #0
   d780e:	f040 80e9 	bne.w	d79e4 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
   d7812:	4631      	mov	r1, r6
   d7814:	a813      	add	r0, sp, #76	; 0x4c
   d7816:	f7fe fe98 	bl	d654a <mbedtls_mpi_copy>
   d781a:	4604      	mov	r4, r0
   d781c:	2800      	cmp	r0, #0
   d781e:	f040 80e1 	bne.w	d79e4 <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
   d7822:	4629      	mov	r1, r5
   d7824:	a80a      	add	r0, sp, #40	; 0x28
   d7826:	f7fe fef1 	bl	d660c <mbedtls_mpi_lset>
   d782a:	4604      	mov	r4, r0
   d782c:	2800      	cmp	r0, #0
   d782e:	f040 80d9 	bne.w	d79e4 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
   d7832:	4601      	mov	r1, r0
   d7834:	a80d      	add	r0, sp, #52	; 0x34
   d7836:	f7fe fee9 	bl	d660c <mbedtls_mpi_lset>
   d783a:	4604      	mov	r4, r0
   d783c:	2800      	cmp	r0, #0
   d783e:	f040 80d1 	bne.w	d79e4 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
   d7842:	4601      	mov	r1, r0
   d7844:	a816      	add	r0, sp, #88	; 0x58
   d7846:	f7fe fee1 	bl	d660c <mbedtls_mpi_lset>
   d784a:	4604      	mov	r4, r0
   d784c:	2800      	cmp	r0, #0
   d784e:	f040 80c9 	bne.w	d79e4 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
   d7852:	4629      	mov	r1, r5
   d7854:	a819      	add	r0, sp, #100	; 0x64
   d7856:	f7fe fed9 	bl	d660c <mbedtls_mpi_lset>
   d785a:	4604      	mov	r4, r0
   d785c:	2800      	cmp	r0, #0
   d785e:	f040 80c1 	bne.w	d79e4 <mbedtls_mpi_inv_mod+0x278>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
   d7862:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7864:	681b      	ldr	r3, [r3, #0]
   d7866:	07dd      	lsls	r5, r3, #31
   d7868:	d44c      	bmi.n	d7904 <mbedtls_mpi_inv_mod+0x198>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
   d786a:	2101      	movs	r1, #1
   d786c:	a807      	add	r0, sp, #28
   d786e:	f7fe fff4 	bl	d685a <mbedtls_mpi_shift_r>
   d7872:	4604      	mov	r4, r0
   d7874:	2800      	cmp	r0, #0
   d7876:	f040 80b5 	bne.w	d79e4 <mbedtls_mpi_inv_mod+0x278>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
   d787a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d787c:	681b      	ldr	r3, [r3, #0]
   d787e:	07dc      	lsls	r4, r3, #31
   d7880:	d410      	bmi.n	d78a4 <mbedtls_mpi_inv_mod+0x138>
   d7882:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7884:	681b      	ldr	r3, [r3, #0]
   d7886:	07d8      	lsls	r0, r3, #31
   d7888:	d40c      	bmi.n	d78a4 <mbedtls_mpi_inv_mod+0x138>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
   d788a:	2101      	movs	r1, #1
   d788c:	a80a      	add	r0, sp, #40	; 0x28
   d788e:	f7fe ffe4 	bl	d685a <mbedtls_mpi_shift_r>
   d7892:	4604      	mov	r4, r0
   d7894:	2800      	cmp	r0, #0
   d7896:	f040 80a5 	bne.w	d79e4 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
   d789a:	2101      	movs	r1, #1
   d789c:	a80d      	add	r0, sp, #52	; 0x34
   d789e:	f7fe ffdc 	bl	d685a <mbedtls_mpi_shift_r>
   d78a2:	e7da      	b.n	d785a <mbedtls_mpi_inv_mod+0xee>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
   d78a4:	a90a      	add	r1, sp, #40	; 0x28
   d78a6:	aa10      	add	r2, sp, #64	; 0x40
   d78a8:	4608      	mov	r0, r1
   d78aa:	f7ff f9aa 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d78ae:	4604      	mov	r4, r0
   d78b0:	2800      	cmp	r0, #0
   d78b2:	f040 8097 	bne.w	d79e4 <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
   d78b6:	a90d      	add	r1, sp, #52	; 0x34
   d78b8:	aa04      	add	r2, sp, #16
   d78ba:	4608      	mov	r0, r1
   d78bc:	f7ff f9c2 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d78c0:	4604      	mov	r4, r0
   d78c2:	2800      	cmp	r0, #0
   d78c4:	d0e1      	beq.n	d788a <mbedtls_mpi_inv_mod+0x11e>
   d78c6:	e08d      	b.n	d79e4 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
   d78c8:	2101      	movs	r1, #1
   d78ca:	a813      	add	r0, sp, #76	; 0x4c
   d78cc:	f7fe ffc5 	bl	d685a <mbedtls_mpi_shift_r>
   d78d0:	4604      	mov	r4, r0
   d78d2:	2800      	cmp	r0, #0
   d78d4:	f040 8086 	bne.w	d79e4 <mbedtls_mpi_inv_mod+0x278>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
   d78d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d78da:	681b      	ldr	r3, [r3, #0]
   d78dc:	07da      	lsls	r2, r3, #31
   d78de:	d416      	bmi.n	d790e <mbedtls_mpi_inv_mod+0x1a2>
   d78e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d78e2:	681b      	ldr	r3, [r3, #0]
   d78e4:	07db      	lsls	r3, r3, #31
   d78e6:	d412      	bmi.n	d790e <mbedtls_mpi_inv_mod+0x1a2>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
   d78e8:	2101      	movs	r1, #1
   d78ea:	a816      	add	r0, sp, #88	; 0x58
   d78ec:	f7fe ffb5 	bl	d685a <mbedtls_mpi_shift_r>
   d78f0:	4604      	mov	r4, r0
   d78f2:	2800      	cmp	r0, #0
   d78f4:	d176      	bne.n	d79e4 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
   d78f6:	2101      	movs	r1, #1
   d78f8:	a819      	add	r0, sp, #100	; 0x64
   d78fa:	f7fe ffae 	bl	d685a <mbedtls_mpi_shift_r>
   d78fe:	4604      	mov	r4, r0
   d7900:	2800      	cmp	r0, #0
   d7902:	d16f      	bne.n	d79e4 <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
   d7904:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d7906:	681b      	ldr	r3, [r3, #0]
   d7908:	07d9      	lsls	r1, r3, #31
   d790a:	d411      	bmi.n	d7930 <mbedtls_mpi_inv_mod+0x1c4>
   d790c:	e7dc      	b.n	d78c8 <mbedtls_mpi_inv_mod+0x15c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
   d790e:	a916      	add	r1, sp, #88	; 0x58
   d7910:	aa10      	add	r2, sp, #64	; 0x40
   d7912:	4608      	mov	r0, r1
   d7914:	f7ff f975 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d7918:	4604      	mov	r4, r0
   d791a:	2800      	cmp	r0, #0
   d791c:	d162      	bne.n	d79e4 <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
   d791e:	a919      	add	r1, sp, #100	; 0x64
   d7920:	aa04      	add	r2, sp, #16
   d7922:	4608      	mov	r0, r1
   d7924:	f7ff f98e 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d7928:	4604      	mov	r4, r0
   d792a:	2800      	cmp	r0, #0
   d792c:	d0dc      	beq.n	d78e8 <mbedtls_mpi_inv_mod+0x17c>
   d792e:	e059      	b.n	d79e4 <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
   d7930:	a913      	add	r1, sp, #76	; 0x4c
   d7932:	a807      	add	r0, sp, #28
   d7934:	f7ff f870 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d7938:	2800      	cmp	r0, #0
   d793a:	db1f      	blt.n	d797c <mbedtls_mpi_inv_mod+0x210>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
   d793c:	a907      	add	r1, sp, #28
   d793e:	aa13      	add	r2, sp, #76	; 0x4c
   d7940:	4608      	mov	r0, r1
   d7942:	f7ff f97f 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d7946:	4604      	mov	r4, r0
   d7948:	2800      	cmp	r0, #0
   d794a:	d14b      	bne.n	d79e4 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
   d794c:	a90a      	add	r1, sp, #40	; 0x28
   d794e:	aa16      	add	r2, sp, #88	; 0x58
   d7950:	4608      	mov	r0, r1
   d7952:	f7ff f977 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d7956:	4604      	mov	r4, r0
   d7958:	2800      	cmp	r0, #0
   d795a:	d143      	bne.n	d79e4 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
   d795c:	aa19      	add	r2, sp, #100	; 0x64
   d795e:	a90d      	add	r1, sp, #52	; 0x34
   d7960:	4608      	mov	r0, r1
   d7962:	f7ff f96f 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d7966:	4604      	mov	r4, r0
   d7968:	2800      	cmp	r0, #0
   d796a:	d13b      	bne.n	d79e4 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
   d796c:	2100      	movs	r1, #0
   d796e:	a807      	add	r0, sp, #28
   d7970:	f7ff f897 	bl	d6aa2 <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );

    do
   d7974:	2800      	cmp	r0, #0
   d7976:	f47f af74 	bne.w	d7862 <mbedtls_mpi_inv_mod+0xf6>
   d797a:	e017      	b.n	d79ac <mbedtls_mpi_inv_mod+0x240>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
   d797c:	a913      	add	r1, sp, #76	; 0x4c
   d797e:	aa07      	add	r2, sp, #28
   d7980:	4608      	mov	r0, r1
   d7982:	f7ff f95f 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d7986:	4604      	mov	r4, r0
   d7988:	bb60      	cbnz	r0, d79e4 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
   d798a:	a916      	add	r1, sp, #88	; 0x58
   d798c:	aa0a      	add	r2, sp, #40	; 0x28
   d798e:	4608      	mov	r0, r1
   d7990:	f7ff f958 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d7994:	4604      	mov	r4, r0
   d7996:	bb28      	cbnz	r0, d79e4 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
   d7998:	aa0d      	add	r2, sp, #52	; 0x34
   d799a:	a919      	add	r1, sp, #100	; 0x64
   d799c:	e7e0      	b.n	d7960 <mbedtls_mpi_inv_mod+0x1f4>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
   d799e:	a916      	add	r1, sp, #88	; 0x58
   d79a0:	4632      	mov	r2, r6
   d79a2:	4608      	mov	r0, r1
   d79a4:	f7ff f92d 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d79a8:	4604      	mov	r4, r0
   d79aa:	b9d8      	cbnz	r0, d79e4 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
   d79ac:	2100      	movs	r1, #0
   d79ae:	a816      	add	r0, sp, #88	; 0x58
   d79b0:	f7ff f877 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d79b4:	2800      	cmp	r0, #0
   d79b6:	dbf2      	blt.n	d799e <mbedtls_mpi_inv_mod+0x232>
   d79b8:	e006      	b.n	d79c8 <mbedtls_mpi_inv_mod+0x25c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
   d79ba:	a916      	add	r1, sp, #88	; 0x58
   d79bc:	4632      	mov	r2, r6
   d79be:	4608      	mov	r0, r1
   d79c0:	f7ff f940 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d79c4:	4604      	mov	r4, r0
   d79c6:	b968      	cbnz	r0, d79e4 <mbedtls_mpi_inv_mod+0x278>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
   d79c8:	4631      	mov	r1, r6
   d79ca:	a816      	add	r0, sp, #88	; 0x58
   d79cc:	f7ff f824 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d79d0:	2800      	cmp	r0, #0
   d79d2:	daf2      	bge.n	d79ba <mbedtls_mpi_inv_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
   d79d4:	a916      	add	r1, sp, #88	; 0x58
   d79d6:	4640      	mov	r0, r8
   d79d8:	f7fe fdb7 	bl	d654a <mbedtls_mpi_copy>
   d79dc:	4604      	mov	r4, r0
   d79de:	e001      	b.n	d79e4 <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
   d79e0:	f06f 040d 	mvn.w	r4, #13

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
   d79e4:	a804      	add	r0, sp, #16
   d79e6:	f7fe fd36 	bl	d6456 <mbedtls_mpi_free>
   d79ea:	a807      	add	r0, sp, #28
   d79ec:	f7fe fd33 	bl	d6456 <mbedtls_mpi_free>
   d79f0:	a80a      	add	r0, sp, #40	; 0x28
   d79f2:	f7fe fd30 	bl	d6456 <mbedtls_mpi_free>
   d79f6:	a80d      	add	r0, sp, #52	; 0x34
   d79f8:	f7fe fd2d 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
   d79fc:	a801      	add	r0, sp, #4
   d79fe:	f7fe fd2a 	bl	d6456 <mbedtls_mpi_free>
   d7a02:	a810      	add	r0, sp, #64	; 0x40
   d7a04:	f7fe fd27 	bl	d6456 <mbedtls_mpi_free>
   d7a08:	a813      	add	r0, sp, #76	; 0x4c
   d7a0a:	f7fe fd24 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
   d7a0e:	a816      	add	r0, sp, #88	; 0x58
   d7a10:	f7fe fd21 	bl	d6456 <mbedtls_mpi_free>
   d7a14:	a819      	add	r0, sp, #100	; 0x64
   d7a16:	f7fe fd1e 	bl	d6456 <mbedtls_mpi_free>

    return( ret );
   d7a1a:	4620      	mov	r0, r4
   d7a1c:	e001      	b.n	d7a22 <mbedtls_mpi_inv_mod+0x2b6>
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   d7a1e:	f06f 0003 	mvn.w	r0, #3
    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );

    return( ret );
}
   d7a22:	b01c      	add	sp, #112	; 0x70
   d7a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7a28 <mbedtls_cipher_info_from_type>:

    return( mbedtls_cipher_supported );
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )
{
   d7a28:	4b05      	ldr	r3, [pc, #20]	; (d7a40 <mbedtls_cipher_info_from_type+0x18>)
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d7a2a:	f853 2c04 	ldr.w	r2, [r3, #-4]
   d7a2e:	b122      	cbz	r2, d7a3a <mbedtls_cipher_info_from_type+0x12>
   d7a30:	3308      	adds	r3, #8
        if( def->type == cipher_type )
   d7a32:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d7a36:	4281      	cmp	r1, r0
   d7a38:	d1f7      	bne.n	d7a2a <mbedtls_cipher_info_from_type+0x2>
            return( def->info );

    return( NULL );
}
   d7a3a:	4610      	mov	r0, r2
   d7a3c:	4770      	bx	lr
   d7a3e:	bf00      	nop
   d7a40:	000e8338 	.word	0x000e8338

000d7a44 <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
   d7a44:	b530      	push	{r4, r5, lr}
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d7a46:	4c08      	ldr	r4, [pc, #32]	; (d7a68 <mbedtls_cipher_info_from_values+0x24>)
   d7a48:	6863      	ldr	r3, [r4, #4]
   d7a4a:	b15b      	cbz	r3, d7a64 <mbedtls_cipher_info_from_values+0x20>
        if( def->info->base->cipher == cipher_id &&
   d7a4c:	699d      	ldr	r5, [r3, #24]
   d7a4e:	782d      	ldrb	r5, [r5, #0]
   d7a50:	4285      	cmp	r5, r0
   d7a52:	d105      	bne.n	d7a60 <mbedtls_cipher_info_from_values+0x1c>
   d7a54:	685d      	ldr	r5, [r3, #4]
   d7a56:	428d      	cmp	r5, r1
   d7a58:	d102      	bne.n	d7a60 <mbedtls_cipher_info_from_values+0x1c>
            def->info->key_bitlen == (unsigned) key_bitlen &&
   d7a5a:	785d      	ldrb	r5, [r3, #1]
   d7a5c:	4295      	cmp	r5, r2
   d7a5e:	d001      	beq.n	d7a64 <mbedtls_cipher_info_from_values+0x20>
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d7a60:	3408      	adds	r4, #8
   d7a62:	e7f1      	b.n	d7a48 <mbedtls_cipher_info_from_values+0x4>
            def->info->key_bitlen == (unsigned) key_bitlen &&
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
   d7a64:	4618      	mov	r0, r3
   d7a66:	bd30      	pop	{r4, r5, pc}
   d7a68:	000e8330 	.word	0x000e8330

000d7a6c <mbedtls_cipher_init>:

void mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
   d7a6c:	2238      	movs	r2, #56	; 0x38
   d7a6e:	2100      	movs	r1, #0
   d7a70:	f010 ba1f 	b.w	e7eb2 <memset>

000d7a74 <mbedtls_cipher_free>:
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
   d7a74:	b510      	push	{r4, lr}
    if( ctx == NULL )
   d7a76:	4604      	mov	r4, r0
   d7a78:	b158      	cbz	r0, d7a92 <mbedtls_cipher_free+0x1e>
                                 sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
   d7a7a:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d7a7c:	b118      	cbz	r0, d7a86 <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
   d7a7e:	6823      	ldr	r3, [r4, #0]
   d7a80:	699b      	ldr	r3, [r3, #24]
   d7a82:	695b      	ldr	r3, [r3, #20]
   d7a84:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
   d7a86:	4620      	mov	r0, r4
   d7a88:	2138      	movs	r1, #56	; 0x38
}
   d7a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif

    if( ctx->cipher_ctx )
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
   d7a8e:	f004 bdaf 	b.w	dc5f0 <mbedtls_platform_zeroize>
   d7a92:	bd10      	pop	{r4, pc}

000d7a94 <mbedtls_cipher_setup>:
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
   d7a94:	b538      	push	{r3, r4, r5, lr}
   d7a96:	4605      	mov	r5, r0
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
   d7a98:	460c      	mov	r4, r1
   d7a9a:	b159      	cbz	r1, d7ab4 <mbedtls_cipher_setup+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
   d7a9c:	2238      	movs	r2, #56	; 0x38
   d7a9e:	2100      	movs	r1, #0
   d7aa0:	f010 fa07 	bl	e7eb2 <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
   d7aa4:	69a3      	ldr	r3, [r4, #24]
   d7aa6:	691b      	ldr	r3, [r3, #16]
   d7aa8:	4798      	blx	r3
   d7aaa:	6368      	str	r0, [r5, #52]	; 0x34
   d7aac:	b120      	cbz	r0, d7ab8 <mbedtls_cipher_setup+0x24>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
   d7aae:	602c      	str	r4, [r5, #0]
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
   d7ab0:	2000      	movs	r0, #0
   d7ab2:	bd38      	pop	{r3, r4, r5, pc}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d7ab4:	4801      	ldr	r0, [pc, #4]	; (d7abc <mbedtls_cipher_setup+0x28>)
   d7ab6:	bd38      	pop	{r3, r4, r5, pc}

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
   d7ab8:	4801      	ldr	r0, [pc, #4]	; (d7ac0 <mbedtls_cipher_setup+0x2c>)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
}
   d7aba:	bd38      	pop	{r3, r4, r5, pc}
   d7abc:	ffff9f00 	.word	0xffff9f00
   d7ac0:	ffff9e80 	.word	0xffff9e80

000d7ac4 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx,
                           const unsigned char *key,
                           int key_bitlen,
                           const mbedtls_operation_t operation )
{
   d7ac4:	b430      	push	{r4, r5}
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( key != NULL );
    CIPHER_VALIDATE_RET( operation == MBEDTLS_ENCRYPT ||
                         operation == MBEDTLS_DECRYPT );
    if( ctx->cipher_info == NULL )
   d7ac6:	6804      	ldr	r4, [r0, #0]
   d7ac8:	b1b4      	cbz	r4, d7af8 <mbedtls_cipher_setkey+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
   d7aca:	6925      	ldr	r5, [r4, #16]
   d7acc:	07ad      	lsls	r5, r5, #30
   d7ace:	d402      	bmi.n	d7ad6 <mbedtls_cipher_setkey+0x12>
   d7ad0:	6865      	ldr	r5, [r4, #4]
   d7ad2:	4295      	cmp	r5, r2
   d7ad4:	d110      	bne.n	d7af8 <mbedtls_cipher_setkey+0x34>
    ctx->operation = operation;

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
   d7ad6:	2b01      	cmp	r3, #1
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    ctx->key_bitlen = key_bitlen;
   d7ad8:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
   d7ada:	7203      	strb	r3, [r0, #8]

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
   d7adc:	d003      	beq.n	d7ae6 <mbedtls_cipher_setkey+0x22>
   d7ade:	7865      	ldrb	r5, [r4, #1]
   d7ae0:	3d03      	subs	r5, #3
   d7ae2:	2d02      	cmp	r5, #2
   d7ae4:	d802      	bhi.n	d7aec <mbedtls_cipher_setkey+0x28>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
   d7ae6:	69a3      	ldr	r3, [r4, #24]
                                                         ctx->key_bitlen ) );
   d7ae8:	689b      	ldr	r3, [r3, #8]
   d7aea:	e002      	b.n	d7af2 <mbedtls_cipher_setkey+0x2e>
    }

    if( MBEDTLS_DECRYPT == operation )
   d7aec:	b923      	cbnz	r3, d7af8 <mbedtls_cipher_setkey+0x34>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
   d7aee:	69a3      	ldr	r3, [r4, #24]
                                                         ctx->key_bitlen ) );
   d7af0:	68db      	ldr	r3, [r3, #12]
   d7af2:	6b40      	ldr	r0, [r0, #52]	; 0x34

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
   d7af4:	bc30      	pop	{r4, r5}
                                                         ctx->key_bitlen ) );
    }

    if( MBEDTLS_DECRYPT == operation )
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
                                                         ctx->key_bitlen ) );
   d7af6:	4718      	bx	r3

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
   d7af8:	4801      	ldr	r0, [pc, #4]	; (d7b00 <mbedtls_cipher_setkey+0x3c>)
   d7afa:	bc30      	pop	{r4, r5}
   d7afc:	4770      	bx	lr
   d7afe:	bf00      	nop
   d7b00:	ffff9f00 	.word	0xffff9f00

000d7b04 <mbedtls_cipher_set_iv>:

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                           const unsigned char *iv,
                           size_t iv_len )
{
   d7b04:	b538      	push	{r3, r4, r5, lr}
    size_t actual_iv_size;

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    if( ctx->cipher_info == NULL )
   d7b06:	6803      	ldr	r3, [r0, #0]
}

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                           const unsigned char *iv,
                           size_t iv_len )
{
   d7b08:	4605      	mov	r5, r0
    size_t actual_iv_size;

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    if( ctx->cipher_info == NULL )
   d7b0a:	b1a3      	cbz	r3, d7b36 <mbedtls_cipher_set_iv+0x32>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
   d7b0c:	2a10      	cmp	r2, #16
   d7b0e:	d810      	bhi.n	d7b32 <mbedtls_cipher_set_iv+0x2e>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
   d7b10:	6918      	ldr	r0, [r3, #16]
   d7b12:	07c0      	lsls	r0, r0, #31
   d7b14:	d403      	bmi.n	d7b1e <mbedtls_cipher_set_iv+0x1a>
        actual_iv_size = iv_len;
    else
    {
        actual_iv_size = ctx->cipher_info->iv_size;
   d7b16:	68dc      	ldr	r4, [r3, #12]

        /* avoid reading past the end of input buffer */
        if( actual_iv_size > iv_len )
   d7b18:	42a2      	cmp	r2, r4
   d7b1a:	d201      	bcs.n	d7b20 <mbedtls_cipher_set_iv+0x1c>
   d7b1c:	e00b      	b.n	d7b36 <mbedtls_cipher_set_iv+0x32>
   d7b1e:	4614      	mov	r4, r2
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
        }
    }
#endif

    if ( actual_iv_size != 0 )
   d7b20:	b12c      	cbz	r4, d7b2e <mbedtls_cipher_set_iv+0x2a>
    {
        memcpy( ctx->iv, iv, actual_iv_size );
   d7b22:	4622      	mov	r2, r4
   d7b24:	f105 0020 	add.w	r0, r5, #32
   d7b28:	f010 f99d 	bl	e7e66 <memcpy>
        ctx->iv_size = actual_iv_size;
   d7b2c:	632c      	str	r4, [r5, #48]	; 0x30
    }

    return( 0 );
   d7b2e:	2000      	movs	r0, #0
   d7b30:	bd38      	pop	{r3, r4, r5, pc}
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d7b32:	4802      	ldr	r0, [pc, #8]	; (d7b3c <mbedtls_cipher_set_iv+0x38>)
   d7b34:	bd38      	pop	{r3, r4, r5, pc}
    size_t actual_iv_size;

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d7b36:	4802      	ldr	r0, [pc, #8]	; (d7b40 <mbedtls_cipher_set_iv+0x3c>)
   d7b38:	bd38      	pop	{r3, r4, r5, pc}
   d7b3a:	bf00      	nop
   d7b3c:	ffff9f80 	.word	0xffff9f80
   d7b40:	ffff9f00 	.word	0xffff9f00

000d7b44 <mbedtls_cipher_reset>:
}

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( ctx->cipher_info == NULL )
   d7b44:	6803      	ldr	r3, [r0, #0]
   d7b46:	b11b      	cbz	r3, d7b50 <mbedtls_cipher_reset+0xc>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    ctx->unprocessed_len = 0;
   d7b48:	2300      	movs	r3, #0
   d7b4a:	61c3      	str	r3, [r0, #28]

    return( 0 );
   d7b4c:	4618      	mov	r0, r3
   d7b4e:	4770      	bx	lr

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d7b50:	4800      	ldr	r0, [pc, #0]	; (d7b54 <mbedtls_cipher_reset+0x10>)

    ctx->unprocessed_len = 0;

    return( 0 );
}
   d7b52:	4770      	bx	lr
   d7b54:	ffff9f00 	.word	0xffff9f00

000d7b58 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
   d7b58:	b470      	push	{r4, r5, r6}
   d7b5a:	4614      	mov	r4, r2

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
   d7b5c:	6802      	ldr	r2, [r0, #0]
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
   d7b5e:	9e03      	ldr	r6, [sp, #12]

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
   d7b60:	b90a      	cbnz	r2, d7b66 <mbedtls_cipher_update+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d7b62:	481b      	ldr	r0, [pc, #108]	; (d7bd0 <mbedtls_cipher_update+0x78>)
   d7b64:	e031      	b.n	d7bca <mbedtls_cipher_update+0x72>

    *olen = 0;
   d7b66:	2200      	movs	r2, #0
   d7b68:	6032      	str	r2, [r6, #0]
   d7b6a:	6805      	ldr	r5, [r0, #0]
 */
static inline unsigned int mbedtls_cipher_get_block_size(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
   d7b6c:	b10d      	cbz	r5, d7b72 <mbedtls_cipher_update+0x1a>
        return 0;

    return ctx->cipher_info->block_size;
   d7b6e:	696a      	ldr	r2, [r5, #20]
   d7b70:	e000      	b.n	d7b74 <mbedtls_cipher_update+0x1c>
static inline unsigned int mbedtls_cipher_get_block_size(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
        return 0;
   d7b72:	462a      	mov	r2, r5
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
   d7b74:	786d      	ldrb	r5, [r5, #1]
   d7b76:	2d01      	cmp	r5, #1
   d7b78:	d10c      	bne.n	d7b94 <mbedtls_cipher_update+0x3c>
    {
        if( ilen != block_size )
   d7b7a:	4294      	cmp	r4, r2
   d7b7c:	d120      	bne.n	d7bc0 <mbedtls_cipher_update+0x68>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;
   d7b7e:	6034      	str	r4, [r6, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
   d7b80:	6802      	ldr	r2, [r0, #0]
   d7b82:	6992      	ldr	r2, [r2, #24]
   d7b84:	6854      	ldr	r4, [r2, #4]
   d7b86:	460a      	mov	r2, r1
   d7b88:	46a4      	mov	ip, r4
   d7b8a:	f990 1008 	ldrsb.w	r1, [r0, #8]
   d7b8e:	6b40      	ldr	r0, [r0, #52]	; 0x34
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d7b90:	bc70      	pop	{r4, r5, r6}
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
   d7b92:	4760      	bx	ip

        return( 0 );
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
   d7b94:	2d06      	cmp	r5, #6
   d7b96:	d106      	bne.n	d7ba6 <mbedtls_cipher_update+0x4e>
    {
        *olen = ilen;
   d7b98:	6034      	str	r4, [r6, #0]
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                                    output ) );
   d7b9a:	460a      	mov	r2, r1
   d7b9c:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d7b9e:	4621      	mov	r1, r4
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d7ba0:	bc70      	pop	{r4, r5, r6}
#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
    {
        *olen = ilen;
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                                    output ) );
   d7ba2:	f002 bdaa 	b.w	da6fa <mbedtls_gcm_update>
        return( mbedtls_chachapoly_update( (mbedtls_chachapoly_context*) ctx->cipher_ctx,
                                           ilen, input, output ) );
    }
#endif

    if ( 0 == block_size )
   d7ba6:	b16a      	cbz	r2, d7bc4 <mbedtls_cipher_update+0x6c>
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
    }

    if( input == output &&
   d7ba8:	4299      	cmp	r1, r3
   d7baa:	d10d      	bne.n	d7bc8 <mbedtls_cipher_update+0x70>
   d7bac:	69c3      	ldr	r3, [r0, #28]
   d7bae:	2b00      	cmp	r3, #0
   d7bb0:	d1d7      	bne.n	d7b62 <mbedtls_cipher_update+0xa>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
   d7bb2:	fbb4 f1f2 	udiv	r1, r4, r2
   d7bb6:	fb02 4411 	mls	r4, r2, r1, r4
   d7bba:	2c00      	cmp	r4, #0
   d7bbc:	d1d1      	bne.n	d7b62 <mbedtls_cipher_update+0xa>
   d7bbe:	e003      	b.n	d7bc8 <mbedtls_cipher_update+0x70>
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
   d7bc0:	4804      	ldr	r0, [pc, #16]	; (d7bd4 <mbedtls_cipher_update+0x7c>)
   d7bc2:	e002      	b.n	d7bca <mbedtls_cipher_update+0x72>
    }
#endif

    if ( 0 == block_size )
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
   d7bc4:	4804      	ldr	r0, [pc, #16]	; (d7bd8 <mbedtls_cipher_update+0x80>)
   d7bc6:	e000      	b.n	d7bca <mbedtls_cipher_update+0x72>

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d7bc8:	4804      	ldr	r0, [pc, #16]	; (d7bdc <mbedtls_cipher_update+0x84>)
}
   d7bca:	bc70      	pop	{r4, r5, r6}
   d7bcc:	4770      	bx	lr
   d7bce:	bf00      	nop
   d7bd0:	ffff9f00 	.word	0xffff9f00
   d7bd4:	ffff9d80 	.word	0xffff9d80
   d7bd8:	ffff9c80 	.word	0xffff9c80
   d7bdc:	ffff9f80 	.word	0xffff9f80

000d7be0 <mbedtls_cipher_finish>:
}
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
   d7be0:	b510      	push	{r4, lr}
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
   d7be2:	6801      	ldr	r1, [r0, #0]
}
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
   d7be4:	4603      	mov	r3, r0
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
   d7be6:	b1a9      	cbz	r1, d7c14 <mbedtls_cipher_finish+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
   d7be8:	2000      	movs	r0, #0
   d7bea:	6010      	str	r0, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
   d7bec:	6819      	ldr	r1, [r3, #0]
   d7bee:	784a      	ldrb	r2, [r1, #1]
   d7bf0:	1ed4      	subs	r4, r2, #3
   d7bf2:	2c04      	cmp	r4, #4
   d7bf4:	d911      	bls.n	d7c1a <mbedtls_cipher_finish+0x3a>
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode ||
        MBEDTLS_MODE_GCM == ctx->cipher_info->mode ||
   d7bf6:	2a09      	cmp	r2, #9
   d7bf8:	d00f      	beq.n	d7c1a <mbedtls_cipher_finish+0x3a>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if ( ( MBEDTLS_CIPHER_CHACHA20          == ctx->cipher_info->type ) ||
   d7bfa:	7809      	ldrb	r1, [r1, #0]
   d7bfc:	3948      	subs	r1, #72	; 0x48
   d7bfe:	2901      	cmp	r1, #1
   d7c00:	d90b      	bls.n	d7c1a <mbedtls_cipher_finish+0x3a>
         ( MBEDTLS_CIPHER_CHACHA20_POLY1305 == ctx->cipher_info->type ) )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
   d7c02:	2a01      	cmp	r2, #1
   d7c04:	d108      	bne.n	d7c18 <mbedtls_cipher_finish+0x38>
    {
        if( ctx->unprocessed_len != 0 )
   d7c06:	69db      	ldr	r3, [r3, #28]
   d7c08:	4283      	cmp	r3, r0
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
   d7c0a:	f5a0 40c5 	sub.w	r0, r0, #25216	; 0x6280
   d7c0e:	bf08      	it	eq
   d7c10:	2000      	moveq	r0, #0
   d7c12:	bd10      	pop	{r4, pc}
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d7c14:	4801      	ldr	r0, [pc, #4]	; (d7c1c <mbedtls_cipher_finish+0x3c>)
   d7c16:	bd10      	pop	{r4, pc}
    }
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d7c18:	4801      	ldr	r0, [pc, #4]	; (d7c20 <mbedtls_cipher_finish+0x40>)
}
   d7c1a:	bd10      	pop	{r4, pc}
   d7c1c:	ffff9f00 	.word	0xffff9f00
   d7c20:	ffff9f80 	.word	0xffff9f80

000d7c24 <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
   d7c24:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7c26:	b085      	sub	sp, #20
   d7c28:	4605      	mov	r5, r0
   d7c2a:	461f      	mov	r7, r3
   d7c2c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d7c2e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
   d7c30:	f7ff ff68 	bl	d7b04 <mbedtls_cipher_set_iv>
   d7c34:	b9b8      	cbnz	r0, d7c66 <mbedtls_cipher_crypt+0x42>
}

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( ctx->cipher_info == NULL )
   d7c36:	682b      	ldr	r3, [r5, #0]
   d7c38:	b1a3      	cbz	r3, d7c64 <mbedtls_cipher_crypt+0x40>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    ctx->unprocessed_len = 0;
   d7c3a:	61e8      	str	r0, [r5, #28]
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
   d7c3c:	9400      	str	r4, [sp, #0]
   d7c3e:	4633      	mov	r3, r6
   d7c40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d7c42:	4639      	mov	r1, r7
   d7c44:	4628      	mov	r0, r5
   d7c46:	f7ff ff87 	bl	d7b58 <mbedtls_cipher_update>
   d7c4a:	b960      	cbnz	r0, d7c66 <mbedtls_cipher_crypt+0x42>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
   d7c4c:	6821      	ldr	r1, [r4, #0]
   d7c4e:	aa03      	add	r2, sp, #12
   d7c50:	4431      	add	r1, r6
   d7c52:	4628      	mov	r0, r5
   d7c54:	f7ff ffc4 	bl	d7be0 <mbedtls_cipher_finish>
   d7c58:	b928      	cbnz	r0, d7c66 <mbedtls_cipher_crypt+0x42>
        return( ret );

    *olen += finish_olen;
   d7c5a:	6822      	ldr	r2, [r4, #0]
   d7c5c:	9b03      	ldr	r3, [sp, #12]
   d7c5e:	4413      	add	r3, r2
   d7c60:	6023      	str	r3, [r4, #0]

    return( 0 );
   d7c62:	e000      	b.n	d7c66 <mbedtls_cipher_crypt+0x42>

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d7c64:	4801      	ldr	r0, [pc, #4]	; (d7c6c <mbedtls_cipher_crypt+0x48>)
        return( ret );

    *olen += finish_olen;

    return( 0 );
}
   d7c66:	b005      	add	sp, #20
   d7c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7c6a:	bf00      	nop
   d7c6c:	ffff9f00 	.word	0xffff9f00

000d7c70 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
   d7c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d7c74:	6807      	ldr	r7, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
   d7c76:	9d07      	ldr	r5, [sp, #28]
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d7c78:	787f      	ldrb	r7, [r7, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
   d7c7a:	9e08      	ldr	r6, [sp, #32]
   d7c7c:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
   d7c80:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   d7c84:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d7c88:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d7c8c:	2f06      	cmp	r7, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
   d7c8e:	4614      	mov	r4, r2
   d7c90:	9a09      	ldr	r2, [sp, #36]	; 0x24
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d7c92:	d112      	bne.n	d7cba <mbedtls_cipher_auth_encrypt+0x4a>
    {
        *olen = ilen;
   d7c94:	f8c9 2000 	str.w	r2, [r9]
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
   d7c98:	9308      	str	r3, [sp, #32]
   d7c9a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   d7c9e:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   d7ca2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   d7ca6:	960a      	str	r6, [sp, #40]	; 0x28
   d7ca8:	9509      	str	r5, [sp, #36]	; 0x24
   d7caa:	9407      	str	r4, [sp, #28]
   d7cac:	460b      	mov	r3, r1
   d7cae:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d7cb0:	2101      	movs	r1, #1
                                ilen, iv, ad, ad_len, input, output, tag ) );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d7cb2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
    {
        *olen = ilen;
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
   d7cb6:	f002 be0c 	b.w	da8d2 <mbedtls_gcm_crypt_and_tag>
                                ilen, iv, ad, ad_len, input, output, tag ) );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d7cba:	4801      	ldr	r0, [pc, #4]	; (d7cc0 <mbedtls_cipher_auth_encrypt+0x50>)
   d7cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7cc0:	ffff9f80 	.word	0xffff9f80

000d7cc4 <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
   d7cc4:	b530      	push	{r4, r5, lr}
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d7cc6:	6805      	ldr	r5, [r0, #0]
   d7cc8:	786d      	ldrb	r5, [r5, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
   d7cca:	b087      	sub	sp, #28
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d7ccc:	2d06      	cmp	r5, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
   d7cce:	460c      	mov	r4, r1
   d7cd0:	990c      	ldr	r1, [sp, #48]	; 0x30
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d7cd2:	d117      	bne.n	d7d04 <mbedtls_cipher_auth_decrypt+0x40>
    {
        int ret;

        *olen = ilen;
   d7cd4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   d7cd6:	6029      	str	r1, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( (mbedtls_gcm_context *)ctx->cipher_ctx, ilen,
   d7cd8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   d7cda:	9505      	str	r5, [sp, #20]
   d7cdc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   d7cde:	9504      	str	r5, [sp, #16]
   d7ce0:	9d10      	ldr	r5, [sp, #64]	; 0x40
   d7ce2:	9503      	str	r5, [sp, #12]
   d7ce4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   d7ce6:	9502      	str	r5, [sp, #8]
   d7ce8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7cea:	e88d 0028 	stmia.w	sp, {r3, r5}
   d7cee:	4613      	mov	r3, r2
   d7cf0:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d7cf2:	4622      	mov	r2, r4
   d7cf4:	f002 fe12 	bl	da91c <mbedtls_gcm_auth_decrypt>
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
   d7cf8:	4b04      	ldr	r3, [pc, #16]	; (d7d0c <mbedtls_cipher_auth_decrypt+0x48>)
   d7cfa:	f110 0f12 	cmn.w	r0, #18
   d7cfe:	bf08      	it	eq
   d7d00:	4618      	moveq	r0, r3
   d7d02:	e000      	b.n	d7d06 <mbedtls_cipher_auth_decrypt+0x42>

        return( ret );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d7d04:	4802      	ldr	r0, [pc, #8]	; (d7d10 <mbedtls_cipher_auth_decrypt+0x4c>)
}
   d7d06:	b007      	add	sp, #28
   d7d08:	bd30      	pop	{r4, r5, pc}
   d7d0a:	bf00      	nop
   d7d0c:	ffff9d00 	.word	0xffff9d00
   d7d10:	ffff9f80 	.word	0xffff9f80

000d7d14 <_ZL12gcm_ctx_freePv>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
   d7d14:	b510      	push	{r4, lr}
   d7d16:	4604      	mov	r4, r0
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
   d7d18:	f002 fe2c 	bl	da974 <mbedtls_gcm_free>
    mbedtls_free( ctx );
   d7d1c:	4620      	mov	r0, r4
}
   d7d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void gcm_ctx_free( void *ctx )
{
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
    mbedtls_free( ctx );
   d7d22:	f00d bf0d 	b.w	e5b40 <free>

000d7d26 <_ZL13gcm_ctx_allocv>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
   d7d26:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
   d7d28:	f44f 71c0 	mov.w	r1, #384	; 0x180
   d7d2c:	2001      	movs	r0, #1
   d7d2e:	f010 f875 	bl	e7e1c <calloc>

    if( ctx != NULL )
   d7d32:	4604      	mov	r4, r0
   d7d34:	b108      	cbz	r0, d7d3a <_ZL13gcm_ctx_allocv+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
   d7d36:	f002 fb87 	bl	da448 <mbedtls_gcm_init>

    return( ctx );
}
   d7d3a:	4620      	mov	r0, r4
   d7d3c:	bd10      	pop	{r4, pc}

000d7d3e <_ZL19gcm_aes_setkey_wrapPvPKhj>:
#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
                     key, key_bitlen );
   d7d3e:	4613      	mov	r3, r2
   d7d40:	460a      	mov	r2, r1
   d7d42:	2102      	movs	r1, #2
   d7d44:	f002 bb85 	b.w	da452 <mbedtls_gcm_setkey>

000d7d48 <_ZL12aes_ctx_freePv>:

    return( aes );
}

static void aes_ctx_free( void *ctx )
{
   d7d48:	b510      	push	{r4, lr}
   d7d4a:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
   d7d4c:	f7fd fa7d 	bl	d524a <mbedtls_aes_free>
    mbedtls_free( ctx );
   d7d50:	4620      	mov	r0, r4
}
   d7d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void aes_ctx_free( void *ctx )
{
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
    mbedtls_free( ctx );
   d7d56:	f00d bef3 	b.w	e5b40 <free>

000d7d5a <_ZL13aes_ctx_allocv>:
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
}

static void * aes_ctx_alloc( void )
{
   d7d5a:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = (mbedtls_aes_context *)mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
   d7d5c:	f44f 718c 	mov.w	r1, #280	; 0x118
   d7d60:	2001      	movs	r0, #1
   d7d62:	f010 f85b 	bl	e7e1c <calloc>

    if( aes == NULL )
   d7d66:	4604      	mov	r4, r0
   d7d68:	b108      	cbz	r0, d7d6e <_ZL13aes_ctx_allocv+0x14>
        return( NULL );

    mbedtls_aes_init( aes );
   d7d6a:	f7fd fa69 	bl	d5240 <mbedtls_aes_init>

    return( aes );
}
   d7d6e:	4620      	mov	r0, r4
   d7d70:	bd10      	pop	{r4, pc}

000d7d72 <_ZL19aes_setkey_dec_wrapPvPKhj>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
   d7d72:	f7fd bb6b 	b.w	d544c <mbedtls_aes_setkey_dec>

000d7d76 <_ZL19aes_setkey_enc_wrapPvPKhj>:
}

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
   d7d76:	f7fd ba6f 	b.w	d5258 <mbedtls_aes_setkey_enc>

000d7d7a <_ZL18aes_crypt_ecb_wrapPv19mbedtls_operation_tPKhPh>:
#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
   d7d7a:	f7fd bf65 	b.w	d5c48 <mbedtls_aes_crypt_ecb>

000d7d7e <mbedtls_ecdh_gen_public>:
 * Generate public key
 */
int mbedtls_ecdh_gen_public( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d7d7e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d7d82:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   d7d84:	461d      	mov	r5, r3
   d7d86:	4617      	mov	r7, r2

    /* If multiplication is in progress, we already generated a privkey */
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx == NULL || rs_ctx->rsm == NULL )
#endif
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
   d7d88:	4633      	mov	r3, r6
   d7d8a:	462a      	mov	r2, r5
 * Generate public key
 */
int mbedtls_ecdh_gen_public( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d7d8c:	4604      	mov	r4, r0
   d7d8e:	4688      	mov	r8, r1

    /* If multiplication is in progress, we already generated a privkey */
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx == NULL || rs_ctx->rsm == NULL )
#endif
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
   d7d90:	f001 ff44 	bl	d9c1c <mbedtls_ecp_gen_privkey>
   d7d94:	b948      	cbnz	r0, d7daa <mbedtls_ecdh_gen_public+0x2c>

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, Q, d, &grp->G,
   d7d96:	9002      	str	r0, [sp, #8]
   d7d98:	e88d 0060 	stmia.w	sp, {r5, r6}
   d7d9c:	f104 0328 	add.w	r3, r4, #40	; 0x28
   d7da0:	4642      	mov	r2, r8
   d7da2:	4639      	mov	r1, r7
   d7da4:	4620      	mov	r0, r4
   d7da6:	f001 fd8b 	bl	d98c0 <mbedtls_ecp_mul_restartable>
    ECDH_VALIDATE_RET( grp != NULL );
    ECDH_VALIDATE_RET( d != NULL );
    ECDH_VALIDATE_RET( Q != NULL );
    ECDH_VALIDATE_RET( f_rng != NULL );
    return( ecdh_gen_public_restartable( grp, d, Q, f_rng, p_rng, NULL ) );
}
   d7daa:	b004      	add	sp, #16
   d7dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7db0 <mbedtls_ecdh_compute_shared>:
 */
int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
   d7db0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7db2:	b08f      	sub	sp, #60	; 0x3c
   d7db4:	4604      	mov	r4, r0
                         mbedtls_ecp_restart_ctx *rs_ctx )
{
    int ret;
    mbedtls_ecp_point P;

    mbedtls_ecp_point_init( &P );
   d7db6:	a805      	add	r0, sp, #20
 */
int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
   d7db8:	4617      	mov	r7, r2
   d7dba:	461e      	mov	r6, r3
   d7dbc:	460d      	mov	r5, r1
                         mbedtls_ecp_restart_ctx *rs_ctx )
{
    int ret;
    mbedtls_ecp_point P;

    mbedtls_ecp_point_init( &P );
   d7dbe:	f000 ffb9 	bl	d8d34 <mbedtls_ecp_point_init>

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &P, d, Q,
   d7dc2:	2300      	movs	r3, #0
   d7dc4:	9302      	str	r3, [sp, #8]
   d7dc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d7dc8:	9301      	str	r3, [sp, #4]
   d7dca:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d7dcc:	9300      	str	r3, [sp, #0]
   d7dce:	4620      	mov	r0, r4
   d7dd0:	463b      	mov	r3, r7
   d7dd2:	4632      	mov	r2, r6
   d7dd4:	a905      	add	r1, sp, #20
   d7dd6:	f001 fd73 	bl	d98c0 <mbedtls_ecp_mul_restartable>
   d7dda:	4604      	mov	r4, r0
   d7ddc:	b950      	cbnz	r0, d7df4 <mbedtls_ecdh_compute_shared+0x44>
                                                  f_rng, p_rng, rs_ctx ) );

    if( mbedtls_ecp_is_zero( &P ) )
   d7dde:	a805      	add	r0, sp, #20
   d7de0:	f001 fbb2 	bl	d9548 <mbedtls_ecp_is_zero>
   d7de4:	b928      	cbnz	r0, d7df2 <mbedtls_ecdh_compute_shared+0x42>
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( z, &P.X ) );
   d7de6:	a905      	add	r1, sp, #20
   d7de8:	4628      	mov	r0, r5
   d7dea:	f7fe fbae 	bl	d654a <mbedtls_mpi_copy>
   d7dee:	4604      	mov	r4, r0
   d7df0:	e000      	b.n	d7df4 <mbedtls_ecdh_compute_shared+0x44>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &P, d, Q,
                                                  f_rng, p_rng, rs_ctx ) );

    if( mbedtls_ecp_is_zero( &P ) )
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d7df2:	4c03      	ldr	r4, [pc, #12]	; (d7e00 <mbedtls_ecdh_compute_shared+0x50>)
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( z, &P.X ) );

cleanup:
    mbedtls_ecp_point_free( &P );
   d7df4:	a805      	add	r0, sp, #20
   d7df6:	f000 ffda 	bl	d8dae <mbedtls_ecp_point_free>
    ECDH_VALIDATE_RET( Q != NULL );
    ECDH_VALIDATE_RET( d != NULL );
    ECDH_VALIDATE_RET( z != NULL );
    return( ecdh_compute_shared_restartable( grp, z, Q, d,
                                             f_rng, p_rng, NULL ) );
}
   d7dfa:	4620      	mov	r0, r4
   d7dfc:	b00f      	add	sp, #60	; 0x3c
   d7dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7e00:	ffffb080 	.word	0xffffb080

000d7e04 <mbedtls_ecdh_init>:

/*
 * Initialize context
 */
void mbedtls_ecdh_init( mbedtls_ecdh_context *ctx )
{
   d7e04:	b510      	push	{r4, lr}
   d7e06:	4604      	mov	r4, r0
}
#endif /* !MBEDTLS_ECDH_COMPUTE_SHARED_ALT */

static void ecdh_init_internal( mbedtls_ecdh_context_mbed *ctx )
{
    mbedtls_ecp_group_init( &ctx->grp );
   d7e08:	f000 ffa2 	bl	d8d50 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &ctx->d  );
   d7e0c:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   d7e10:	f7fe fb1b 	bl	d644a <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &ctx->Q   );
   d7e14:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d7e18:	f000 ff8c 	bl	d8d34 <mbedtls_ecp_point_init>
    mbedtls_ecp_point_init( &ctx->Qp  );
   d7e1c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   d7e20:	f000 ff88 	bl	d8d34 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &ctx->z  );
   d7e24:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   d7e28:	f7fe fb0f 	bl	d644a <mbedtls_mpi_init>
{
    ECDH_VALIDATE( ctx != NULL );

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    ecdh_init_internal( ctx );
    mbedtls_ecp_point_init( &ctx->Vi  );
   d7e2c:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   d7e30:	f000 ff80 	bl	d8d34 <mbedtls_ecp_point_init>
    mbedtls_ecp_point_init( &ctx->Vf  );
   d7e34:	f504 7082 	add.w	r0, r4, #260	; 0x104
   d7e38:	f000 ff7c 	bl	d8d34 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &ctx->_d );
   d7e3c:	f504 7094 	add.w	r0, r4, #296	; 0x128
   d7e40:	f7fe fb03 	bl	d644a <mbedtls_mpi_init>
#else
    memset( ctx, 0, sizeof( mbedtls_ecdh_context ) );

    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
#endif
    ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
   d7e44:	2300      	movs	r3, #0
   d7e46:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   d7e4a:	bd10      	pop	{r4, pc}

000d7e4c <mbedtls_ecdh_free>:

/*
 * Free context
 */
void mbedtls_ecdh_free( mbedtls_ecdh_context *ctx )
{
   d7e4c:	b510      	push	{r4, lr}
    if( ctx == NULL )
   d7e4e:	4604      	mov	r4, r0
   d7e50:	b1f8      	cbz	r0, d7e92 <mbedtls_ecdh_free+0x46>
        return;

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    mbedtls_ecp_point_free( &ctx->Vi );
   d7e52:	30e0      	adds	r0, #224	; 0xe0
   d7e54:	f000 ffab 	bl	d8dae <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Vf );
   d7e58:	f504 7082 	add.w	r0, r4, #260	; 0x104
   d7e5c:	f000 ffa7 	bl	d8dae <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &ctx->_d );
   d7e60:	f504 7094 	add.w	r0, r4, #296	; 0x128
   d7e64:	f7fe faf7 	bl	d6456 <mbedtls_mpi_free>
#endif
}

static void ecdh_free_internal( mbedtls_ecdh_context_mbed *ctx )
{
    mbedtls_ecp_group_free( &ctx->grp );
   d7e68:	4620      	mov	r0, r4
   d7e6a:	f000 ffb0 	bl	d8dce <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &ctx->d  );
   d7e6e:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   d7e72:	f7fe faf0 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &ctx->Q   );
   d7e76:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d7e7a:	f000 ff98 	bl	d8dae <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Qp  );
   d7e7e:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   d7e82:	f000 ff94 	bl	d8dae <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &ctx->z  );
   d7e86:	f104 00d0 	add.w	r0, r4, #208	; 0xd0

    ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
    ctx->grp_id = MBEDTLS_ECP_DP_NONE;
#endif
}
   d7e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    mbedtls_ecp_group_free( &ctx->grp );
    mbedtls_mpi_free( &ctx->d  );
    mbedtls_ecp_point_free( &ctx->Q   );
    mbedtls_ecp_point_free( &ctx->Qp  );
    mbedtls_mpi_free( &ctx->z  );
   d7e8e:	f7fe bae2 	b.w	d6456 <mbedtls_mpi_free>
   d7e92:	bd10      	pop	{r4, pc}

000d7e94 <mbedtls_ecdh_read_params>:
 *      } ServerECDHParams;
 */
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                              const unsigned char **buf,
                              const unsigned char *end )
{
   d7e94:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7e96:	4616      	mov	r6, r2
    ECDH_VALIDATE_RET( ctx != NULL );
    ECDH_VALIDATE_RET( buf != NULL );
    ECDH_VALIDATE_RET( *buf != NULL );
    ECDH_VALIDATE_RET( end != NULL );

    if( ( ret = mbedtls_ecp_tls_read_group_id( &grp_id, buf, end - *buf ) )
   d7e98:	680a      	ldr	r2, [r1, #0]
 *      } ServerECDHParams;
 */
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                              const unsigned char **buf,
                              const unsigned char *end )
{
   d7e9a:	4604      	mov	r4, r0
    ECDH_VALIDATE_RET( ctx != NULL );
    ECDH_VALIDATE_RET( buf != NULL );
    ECDH_VALIDATE_RET( *buf != NULL );
    ECDH_VALIDATE_RET( end != NULL );

    if( ( ret = mbedtls_ecp_tls_read_group_id( &grp_id, buf, end - *buf ) )
   d7e9c:	1ab2      	subs	r2, r6, r2
   d7e9e:	f10d 0007 	add.w	r0, sp, #7
 *      } ServerECDHParams;
 */
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                              const unsigned char **buf,
                              const unsigned char *end )
{
   d7ea2:	460d      	mov	r5, r1
    ECDH_VALIDATE_RET( ctx != NULL );
    ECDH_VALIDATE_RET( buf != NULL );
    ECDH_VALIDATE_RET( *buf != NULL );
    ECDH_VALIDATE_RET( end != NULL );

    if( ( ret = mbedtls_ecp_tls_read_group_id( &grp_id, buf, end - *buf ) )
   d7ea4:	f001 fc10 	bl	d96c8 <mbedtls_ecp_tls_read_group_id>
   d7ea8:	b978      	cbnz	r0, d7eca <mbedtls_ecdh_read_params+0x36>
static int ecdh_setup_internal( mbedtls_ecdh_context_mbed *ctx,
                                mbedtls_ecp_group_id grp_id )
{
    int ret;

    ret = mbedtls_ecp_group_load( &ctx->grp, grp_id );
   d7eaa:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d7eae:	4620      	mov	r0, r4
   d7eb0:	f002 f9cc 	bl	da24c <mbedtls_ecp_group_load>
    if( ret != 0 )
   d7eb4:	b108      	cbz	r0, d7eba <mbedtls_ecdh_read_params+0x26>
    {
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   d7eb6:	4806      	ldr	r0, [pc, #24]	; (d7ed0 <mbedtls_ecdh_read_params+0x3c>)
   d7eb8:	e007      	b.n	d7eca <mbedtls_ecdh_read_params+0x36>
static int ecdh_read_params_internal( mbedtls_ecdh_context_mbed *ctx,
                                      const unsigned char **buf,
                                      const unsigned char *end )
{
    return( mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, buf,
                                        end - *buf ) );
   d7eba:	682b      	ldr	r3, [r5, #0]
   d7ebc:	462a      	mov	r2, r5
   d7ebe:	1af3      	subs	r3, r6, r3
   d7ec0:	f104 01ac 	add.w	r1, r4, #172	; 0xac
   d7ec4:	4620      	mov	r0, r4
   d7ec6:	f001 fbcf 	bl	d9668 <mbedtls_ecp_tls_read_point>
                                               buf, end ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    }
#endif
}
   d7eca:	b002      	add	sp, #8
   d7ecc:	bd70      	pop	{r4, r5, r6, pc}
   d7ece:	bf00      	nop
   d7ed0:	ffffb180 	.word	0xffffb180

000d7ed4 <mbedtls_ecdh_make_public>:
 */
int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
   d7ed4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d7ed8:	460f      	mov	r7, r1
    int ret;
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx->grp.pbits == 0 )
   d7eda:	6d81      	ldr	r1, [r0, #88]	; 0x58
#if defined(MBEDTLS_ECP_RESTARTABLE)
    restart_enabled = ctx->restart_enabled;
#endif

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    return( ecdh_make_public_internal( ctx, olen, ctx->point_format, buf, blen,
   d7edc:	f8d0 60dc 	ldr.w	r6, [r0, #220]	; 0xdc
 */
int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
   d7ee0:	4690      	mov	r8, r2
   d7ee2:	4699      	mov	r9, r3
   d7ee4:	4604      	mov	r4, r0
   d7ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7ee8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    int ret;
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx->grp.pbits == 0 )
   d7eea:	b1a9      	cbz	r1, d7f18 <mbedtls_ecdh_make_public+0x44>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( ( ret = ecdh_gen_public_restartable( &ctx->grp, &ctx->d, &ctx->Q,
                                             f_rng, p_rng, rs_ctx ) ) != 0 )
        return( ret );
#else
    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q,
   d7eec:	f100 0588 	add.w	r5, r0, #136	; 0x88
   d7ef0:	9200      	str	r2, [sp, #0]
   d7ef2:	f100 017c 	add.w	r1, r0, #124	; 0x7c
   d7ef6:	462a      	mov	r2, r5
   d7ef8:	f7ff ff41 	bl	d7d7e <mbedtls_ecdh_gen_public>
   d7efc:	b968      	cbnz	r0, d7f1a <mbedtls_ecdh_make_public+0x46>
                                         f_rng, p_rng ) ) != 0 )
        return( ret );
#endif /* MBEDTLS_ECP_RESTARTABLE */

    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, point_format, olen,
                                        buf, blen );
   d7efe:	463b      	mov	r3, r7
   d7f00:	4632      	mov	r2, r6
   d7f02:	4629      	mov	r1, r5
   d7f04:	4620      	mov	r0, r4
   d7f06:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   d7f0a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
                                               restart_enabled ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    }
#endif
}
   d7f0e:	b003      	add	sp, #12
   d7f10:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                                         f_rng, p_rng ) ) != 0 )
        return( ret );
#endif /* MBEDTLS_ECP_RESTARTABLE */

    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, point_format, olen,
                                        buf, blen );
   d7f14:	f001 bbc0 	b.w	d9698 <mbedtls_ecp_tls_write_point>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx->grp.pbits == 0 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d7f18:	4801      	ldr	r0, [pc, #4]	; (d7f20 <mbedtls_ecdh_make_public+0x4c>)
                                               restart_enabled ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    }
#endif
}
   d7f1a:	b003      	add	sp, #12
   d7f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7f20:	ffffb080 	.word	0xffffb080

000d7f24 <mbedtls_ecdh_calc_secret>:
 */
int mbedtls_ecdh_calc_secret( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
   d7f24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7f28:	4616      	mov	r6, r2
   d7f2a:	4698      	mov	r8, r3
   d7f2c:	460f      	mov	r7, r1
   d7f2e:	9b08      	ldr	r3, [sp, #32]
   d7f30:	9a09      	ldr	r2, [sp, #36]	; 0x24
    int ret;
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx == NULL || ctx->grp.pbits == 0 )
   d7f32:	4604      	mov	r4, r0
   d7f34:	b908      	cbnz	r0, d7f3a <mbedtls_ecdh_calc_secret+0x16>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d7f36:	4814      	ldr	r0, [pc, #80]	; (d7f88 <mbedtls_ecdh_calc_secret+0x64>)
   d7f38:	e022      	b.n	d7f80 <mbedtls_ecdh_calc_secret+0x5c>
    int ret;
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx == NULL || ctx->grp.pbits == 0 )
   d7f3a:	6d81      	ldr	r1, [r0, #88]	; 0x58
   d7f3c:	2900      	cmp	r1, #0
   d7f3e:	d0fa      	beq.n	d7f36 <mbedtls_ecdh_calc_secret+0x12>
                                                 rs_ctx ) ) != 0 )
    {
        return( ret );
    }
#else
    if( ( ret = mbedtls_ecdh_compute_shared( &ctx->grp, &ctx->z, &ctx->Qp,
   d7f40:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
   d7f44:	9201      	str	r2, [sp, #4]
   d7f46:	9300      	str	r3, [sp, #0]
   d7f48:	f100 02ac 	add.w	r2, r0, #172	; 0xac
   d7f4c:	f100 037c 	add.w	r3, r0, #124	; 0x7c
   d7f50:	4629      	mov	r1, r5
   d7f52:	f7ff ff2d 	bl	d7db0 <mbedtls_ecdh_compute_shared>
   d7f56:	b998      	cbnz	r0, d7f80 <mbedtls_ecdh_calc_secret+0x5c>
    {
        return( ret );
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    if( mbedtls_mpi_size( &ctx->z ) > blen )
   d7f58:	4628      	mov	r0, r5
   d7f5a:	f7fe fbbd 	bl	d66d8 <mbedtls_mpi_size>
   d7f5e:	4580      	cmp	r8, r0
   d7f60:	d3e9      	bcc.n	d7f36 <mbedtls_ecdh_calc_secret+0x12>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
   d7f62:	6da2      	ldr	r2, [r4, #88]	; 0x58
   d7f64:	f012 0307 	ands.w	r3, r2, #7
   d7f68:	bf18      	it	ne
   d7f6a:	2301      	movne	r3, #1
   d7f6c:	eb03 02d2 	add.w	r2, r3, r2, lsr #3
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
   d7f70:	4631      	mov	r1, r6
   d7f72:	4628      	mov	r0, r5
#endif /* MBEDTLS_ECP_RESTARTABLE */

    if( mbedtls_mpi_size( &ctx->z ) > blen )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
   d7f74:	603a      	str	r2, [r7, #0]
                                               restart_enabled ) );
        default:
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }
#endif
}
   d7f76:	b002      	add	sp, #8
   d7f78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

    if( mbedtls_mpi_size( &ctx->z ) > blen )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
   d7f7c:	f7fe bbe9 	b.w	d6752 <mbedtls_mpi_write_binary>
                                               restart_enabled ) );
        default:
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }
#endif
}
   d7f80:	b002      	add	sp, #8
   d7f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7f86:	bf00      	nop
   d7f88:	ffffb080 	.word	0xffffb080

000d7f8c <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj>:
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
   d7f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
   d7f8e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
   d7f90:	3407      	adds	r4, #7
   d7f92:	08e4      	lsrs	r4, r4, #3
   d7f94:	429c      	cmp	r4, r3
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
   d7f96:	460e      	mov	r6, r1
   d7f98:	bf28      	it	cs
   d7f9a:	461c      	movcs	r4, r3
   d7f9c:	4611      	mov	r1, r2
   d7f9e:	4605      	mov	r5, r0
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
    size_t use_size = blen > n_size ? n_size : blen;

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
   d7fa0:	4622      	mov	r2, r4
   d7fa2:	4630      	mov	r0, r6
   d7fa4:	f7fe fb9e 	bl	d66e4 <mbedtls_mpi_read_binary>
   d7fa8:	4607      	mov	r7, r0
   d7faa:	b9c0      	cbnz	r0, d7fde <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x52>
    if( use_size * 8 > grp->nbits )
   d7fac:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   d7fae:	00e4      	lsls	r4, r4, #3
   d7fb0:	428c      	cmp	r4, r1
   d7fb2:	d80d      	bhi.n	d7fd0 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x44>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
   d7fb4:	354c      	adds	r5, #76	; 0x4c
   d7fb6:	4629      	mov	r1, r5
   d7fb8:	4630      	mov	r0, r6
   d7fba:	f7fe fd2d 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d7fbe:	2800      	cmp	r0, #0
   d7fc0:	db0d      	blt.n	d7fde <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x52>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
   d7fc2:	462a      	mov	r2, r5
   d7fc4:	4631      	mov	r1, r6
   d7fc6:	4630      	mov	r0, r6

cleanup:
    return( ret );
}
   d7fc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if( use_size * 8 > grp->nbits )
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
   d7fcc:	f7fe be3a 	b.w	d6c44 <mbedtls_mpi_sub_mpi>
    size_t n_size = ( grp->nbits + 7 ) / 8;
    size_t use_size = blen > n_size ? n_size : blen;

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
    if( use_size * 8 > grp->nbits )
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
   d7fd0:	1a61      	subs	r1, r4, r1
   d7fd2:	4630      	mov	r0, r6
   d7fd4:	f7fe fc41 	bl	d685a <mbedtls_mpi_shift_r>
   d7fd8:	2800      	cmp	r0, #0
   d7fda:	d0eb      	beq.n	d7fb4 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x28>
   d7fdc:	4607      	mov	r7, r0
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );

cleanup:
    return( ret );
}
   d7fde:	4638      	mov	r0, r7
   d7fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d7fe4 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0>:
#if !defined(MBEDTLS_ECDSA_SIGN_ALT)
/*
 * Compute ECDSA signature of a hashed message (SEC1 4.1.3)
 * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)
 */
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
   d7fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7fe8:	469b      	mov	fp, r3
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
   d7fea:	6d43      	ldr	r3, [r0, #84]	; 0x54
#if !defined(MBEDTLS_ECDSA_SIGN_ALT)
/*
 * Compute ECDSA signature of a hashed message (SEC1 4.1.3)
 * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)
 */
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
   d7fec:	b09b      	sub	sp, #108	; 0x6c
   d7fee:	4606      	mov	r6, r0
   d7ff0:	468a      	mov	sl, r1
   d7ff2:	4615      	mov	r5, r2
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
   d7ff4:	b173      	cbz	r3, d8014 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x30>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
   d7ff6:	2101      	movs	r1, #1
   d7ff8:	4658      	mov	r0, fp
   d7ffa:	f7fe fd52 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d7ffe:	2800      	cmp	r0, #0
   d8000:	db0a      	blt.n	d8018 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x34>
   d8002:	f106 074c 	add.w	r7, r6, #76	; 0x4c
   d8006:	4639      	mov	r1, r7
   d8008:	4658      	mov	r0, fp
   d800a:	f7fe fd05 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d800e:	2800      	cmp	r0, #0
   d8010:	da02      	bge.n	d8018 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x34>
   d8012:	e003      	b.n	d801c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x38>
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d8014:	4854      	ldr	r0, [pc, #336]	; (d8168 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x184>)
   d8016:	e0a4      	b.n	d8162 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x17e>

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
   d8018:	4854      	ldr	r0, [pc, #336]	; (d816c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x188>)
   d801a:	e0a2      	b.n	d8162 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x17e>

    mbedtls_ecp_point_init( &R );
   d801c:	a811      	add	r0, sp, #68	; 0x44
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
   d801e:	ac08      	add	r4, sp, #32

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
        return( MBEDTLS_ERR_ECP_INVALID_KEY );

    mbedtls_ecp_point_init( &R );
   d8020:	f000 fe88 	bl	d8d34 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
   d8024:	4620      	mov	r0, r4
   d8026:	f7fe fa10 	bl	d644a <mbedtls_mpi_init>
   d802a:	a80b      	add	r0, sp, #44	; 0x2c
   d802c:	f7fe fa0d 	bl	d644a <mbedtls_mpi_init>
   d8030:	a80e      	add	r0, sp, #56	; 0x38
   d8032:	f7fe fa0a 	bl	d644a <mbedtls_mpi_init>
   d8036:	f10d 0918 	add.w	r9, sp, #24
        if( rs_ctx->sig->state == ecdsa_sig_modn )
            goto modn;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    *p_sign_tries = 0;
   d803a:	2300      	movs	r3, #0
   d803c:	9307      	str	r3, [sp, #28]
                int (*f_rng_blind)(void *, unsigned char *, size_t),
                void *p_rng_blind,
                mbedtls_ecdsa_restart_ctx *rs_ctx )
{
    int ret, key_tries, sign_tries;
    int *p_sign_tries = &sign_tries, *p_key_tries = &key_tries;
   d803e:	46c8      	mov	r8, r9

        /*
         * Steps 1-3: generate a suitable ephemeral keypair
         * and set r = xR mod n
         */
        *p_key_tries = 0;
   d8040:	9305      	str	r3, [sp, #20]
#endif /* MBEDTLS_ECP_RESTARTABLE */

    *p_sign_tries = 0;
    do
    {
        if( *p_sign_tries++ > 10 )
   d8042:	f859 3f04 	ldr.w	r3, [r9, #4]!
   d8046:	2b0a      	cmp	r3, #10
   d8048:	dd01      	ble.n	d804e <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x6a>
        {
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
   d804a:	4b49      	ldr	r3, [pc, #292]	; (d8170 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x18c>)
   d804c:	e07a      	b.n	d8144 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>

        /*
         * Steps 1-3: generate a suitable ephemeral keypair
         * and set r = xR mod n
         */
        *p_key_tries = 0;
   d804e:	9b05      	ldr	r3, [sp, #20]
   d8050:	f8c8 3000 	str.w	r3, [r8]
            if( rs_ctx != NULL && rs_ctx->sig != NULL )
                rs_ctx->sig->state = ecdsa_sig_mul;

mul:
#endif
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
   d8054:	f106 0328 	add.w	r3, r6, #40	; 0x28
   d8058:	9304      	str	r3, [sp, #16]
         * and set r = xR mod n
         */
        *p_key_tries = 0;
        do
        {
            if( *p_key_tries++ > 10 )
   d805a:	f858 3b04 	ldr.w	r3, [r8], #4
   d805e:	2b0a      	cmp	r3, #10
   d8060:	dcf3      	bgt.n	d804a <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x66>
            {
                ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
                goto cleanup;
            }

            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, pk, f_rng, p_rng ) );
   d8062:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   d8064:	9a26      	ldr	r2, [sp, #152]	; 0x98
   d8066:	4621      	mov	r1, r4
   d8068:	4630      	mov	r0, r6
   d806a:	f001 fdd7 	bl	d9c1c <mbedtls_ecp_gen_privkey>
   d806e:	4603      	mov	r3, r0
   d8070:	2800      	cmp	r0, #0
   d8072:	d167      	bne.n	d8144 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
            if( rs_ctx != NULL && rs_ctx->sig != NULL )
                rs_ctx->sig->state = ecdsa_sig_mul;

mul:
#endif
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
   d8074:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   d8076:	9301      	str	r3, [sp, #4]
   d8078:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   d807a:	9002      	str	r0, [sp, #8]
   d807c:	9300      	str	r3, [sp, #0]
   d807e:	4622      	mov	r2, r4
   d8080:	9b04      	ldr	r3, [sp, #16]
   d8082:	a911      	add	r1, sp, #68	; 0x44
   d8084:	4630      	mov	r0, r6
   d8086:	f001 fc1b 	bl	d98c0 <mbedtls_ecp_mul_restartable>
   d808a:	4603      	mov	r3, r0
   d808c:	2800      	cmp	r0, #0
   d808e:	d159      	bne.n	d8144 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
                                                          f_rng_blind,
                                                          p_rng_blind,
                                                          ECDSA_RS_ECP ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pr, &R.X, &grp->N ) );
   d8090:	463a      	mov	r2, r7
   d8092:	a911      	add	r1, sp, #68	; 0x44
   d8094:	4650      	mov	r0, sl
   d8096:	f7ff f85f 	bl	d7158 <mbedtls_mpi_mod_mpi>
   d809a:	4603      	mov	r3, r0
   d809c:	2800      	cmp	r0, #0
   d809e:	d151      	bne.n	d8144 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        }
        while( mbedtls_mpi_cmp_int( pr, 0 ) == 0 );
   d80a0:	4601      	mov	r1, r0
   d80a2:	4650      	mov	r0, sl
   d80a4:	f7fe fcfd 	bl	d6aa2 <mbedtls_mpi_cmp_int>
        /*
         * Steps 1-3: generate a suitable ephemeral keypair
         * and set r = xR mod n
         */
        *p_key_tries = 0;
        do
   d80a8:	2800      	cmp	r0, #0
   d80aa:	d0d6      	beq.n	d805a <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x76>
        ECDSA_BUDGET( MBEDTLS_ECP_OPS_INV + 4 );

        /*
         * Step 5: derive MPI from hashed message
         */
        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
   d80ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
   d80ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
   d80b0:	a90b      	add	r1, sp, #44	; 0x2c
   d80b2:	4630      	mov	r0, r6
   d80b4:	f7ff ff6a 	bl	d7f8c <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj>
   d80b8:	4603      	mov	r3, r0
   d80ba:	2800      	cmp	r0, #0
   d80bc:	d142      	bne.n	d8144 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>

        /*
         * Generate a random value to blind inv_mod in next step,
         * avoiding a potential timing leak.
         */
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, &t, f_rng_blind,
   d80be:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   d80c0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   d80c2:	a90e      	add	r1, sp, #56	; 0x38
   d80c4:	4630      	mov	r0, r6
   d80c6:	f001 fda9 	bl	d9c1c <mbedtls_ecp_gen_privkey>
   d80ca:	4603      	mov	r3, r0
   d80cc:	2800      	cmp	r0, #0
   d80ce:	d139      	bne.n	d8144 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
                                                  p_rng_blind ) );

        /*
         * Step 6: compute s = (e + r * d) / k = t (e + rd) / (kt) mod n
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, pr, d ) );
   d80d0:	465a      	mov	r2, fp
   d80d2:	4651      	mov	r1, sl
   d80d4:	4628      	mov	r0, r5
   d80d6:	f7fe fe03 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d80da:	4603      	mov	r3, r0
   d80dc:	bb90      	cbnz	r0, d8144 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
   d80de:	a90b      	add	r1, sp, #44	; 0x2c
   d80e0:	462a      	mov	r2, r5
   d80e2:	4608      	mov	r0, r1
   d80e4:	f7fe fd8d 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d80e8:	4603      	mov	r3, r0
   d80ea:	bb58      	cbnz	r0, d8144 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
   d80ec:	a90b      	add	r1, sp, #44	; 0x2c
   d80ee:	aa0e      	add	r2, sp, #56	; 0x38
   d80f0:	4608      	mov	r0, r1
   d80f2:	f7fe fdf5 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d80f6:	4603      	mov	r3, r0
   d80f8:	bb20      	cbnz	r0, d8144 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pk, pk, &t ) );
   d80fa:	aa0e      	add	r2, sp, #56	; 0x38
   d80fc:	4621      	mov	r1, r4
   d80fe:	4620      	mov	r0, r4
   d8100:	f7fe fdee 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8104:	4603      	mov	r3, r0
   d8106:	b9e8      	cbnz	r0, d8144 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, pk, &grp->N ) );
   d8108:	463a      	mov	r2, r7
   d810a:	4621      	mov	r1, r4
   d810c:	4628      	mov	r0, r5
   d810e:	f7ff fb2d 	bl	d776c <mbedtls_mpi_inv_mod>
   d8112:	4603      	mov	r3, r0
   d8114:	b9b0      	cbnz	r0, d8144 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
   d8116:	aa0b      	add	r2, sp, #44	; 0x2c
   d8118:	4629      	mov	r1, r5
   d811a:	4628      	mov	r0, r5
   d811c:	f7fe fde0 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8120:	4603      	mov	r3, r0
   d8122:	b978      	cbnz	r0, d8144 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
   d8124:	463a      	mov	r2, r7
   d8126:	4629      	mov	r1, r5
   d8128:	4628      	mov	r0, r5
   d812a:	f7ff f815 	bl	d7158 <mbedtls_mpi_mod_mpi>
   d812e:	4603      	mov	r3, r0
   d8130:	b940      	cbnz	r0, d8144 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
    }
    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );
   d8132:	4601      	mov	r1, r0
   d8134:	9004      	str	r0, [sp, #16]
   d8136:	4628      	mov	r0, r5
   d8138:	f7fe fcb3 	bl	d6aa2 <mbedtls_mpi_cmp_int>
            goto modn;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    *p_sign_tries = 0;
    do
   d813c:	9b04      	ldr	r3, [sp, #16]
   d813e:	2800      	cmp	r0, #0
   d8140:	f43f af7f 	beq.w	d8042 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x5e>
    if( rs_ctx != NULL && rs_ctx->sig != NULL )
        mbedtls_mpi_copy( r, pr );
#endif

cleanup:
    mbedtls_ecp_point_free( &R );
   d8144:	a811      	add	r0, sp, #68	; 0x44
   d8146:	9304      	str	r3, [sp, #16]
   d8148:	f000 fe31 	bl	d8dae <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
   d814c:	a808      	add	r0, sp, #32
   d814e:	f7fe f982 	bl	d6456 <mbedtls_mpi_free>
   d8152:	a80b      	add	r0, sp, #44	; 0x2c
   d8154:	f7fe f97f 	bl	d6456 <mbedtls_mpi_free>
   d8158:	a80e      	add	r0, sp, #56	; 0x38
   d815a:	f7fe f97c 	bl	d6456 <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( sig );

    return( ret );
   d815e:	9b04      	ldr	r3, [sp, #16]
   d8160:	4618      	mov	r0, r3
}
   d8162:	b01b      	add	sp, #108	; 0x6c
   d8164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8168:	ffffb080 	.word	0xffffb080
   d816c:	ffffb380 	.word	0xffffb380
   d8170:	ffffb300 	.word	0xffffb300

000d8174 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1>:
#if !defined(MBEDTLS_ECDSA_VERIFY_ALT)
/*
 * Verify ECDSA signature of hashed message (SEC1 4.1.4)
 * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)
 */
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
   d8174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8178:	b09a      	sub	sp, #104	; 0x68
   d817a:	4606      	mov	r6, r0
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;
    mbedtls_mpi *pu1 = &u1, *pu2 = &u2;

    mbedtls_ecp_point_init( &R );
   d817c:	a811      	add	r0, sp, #68	; 0x44
#if !defined(MBEDTLS_ECDSA_VERIFY_ALT)
/*
 * Verify ECDSA signature of hashed message (SEC1 4.1.4)
 * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)
 */
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
   d817e:	4698      	mov	r8, r3
   d8180:	460c      	mov	r4, r1
   d8182:	4617      	mov	r7, r2
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;
    mbedtls_mpi *pu1 = &u1, *pu2 = &u2;

    mbedtls_ecp_point_init( &R );
   d8184:	f000 fdd6 	bl	d8d34 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv );
   d8188:	a805      	add	r0, sp, #20
   d818a:	f7fe f95e 	bl	d644a <mbedtls_mpi_init>
   d818e:	a808      	add	r0, sp, #32
   d8190:	f7fe f95b 	bl	d644a <mbedtls_mpi_init>
    mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
   d8194:	a80b      	add	r0, sp, #44	; 0x2c
   d8196:	f7fe f958 	bl	d644a <mbedtls_mpi_init>
   d819a:	a80e      	add	r0, sp, #56	; 0x38
   d819c:	f7fe f955 	bl	d644a <mbedtls_mpi_init>

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
   d81a0:	6d73      	ldr	r3, [r6, #84]	; 0x54
   d81a2:	2b00      	cmp	r3, #0
   d81a4:	d068      	beq.n	d8278 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x104>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
   d81a6:	2101      	movs	r1, #1
   d81a8:	9820      	ldr	r0, [sp, #128]	; 0x80
   d81aa:	f7fe fc7a 	bl	d6aa2 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
   d81ae:	2800      	cmp	r0, #0
   d81b0:	db50      	blt.n	d8254 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe0>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
   d81b2:	f106 054c 	add.w	r5, r6, #76	; 0x4c
   d81b6:	4629      	mov	r1, r5
   d81b8:	9820      	ldr	r0, [sp, #128]	; 0x80
   d81ba:	f7fe fc2d 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d81be:	2800      	cmp	r0, #0
   d81c0:	da48      	bge.n	d8254 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe0>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
   d81c2:	2101      	movs	r1, #1
   d81c4:	9821      	ldr	r0, [sp, #132]	; 0x84
   d81c6:	f7fe fc6c 	bl	d6aa2 <mbedtls_mpi_cmp_int>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
   d81ca:	2800      	cmp	r0, #0
   d81cc:	db42      	blt.n	d8254 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe0>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
   d81ce:	4629      	mov	r1, r5
   d81d0:	9821      	ldr	r0, [sp, #132]	; 0x84
   d81d2:	f7fe fc21 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d81d6:	2800      	cmp	r0, #0
   d81d8:	da3c      	bge.n	d8254 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe0>
    }

    /*
     * Step 3: derive MPI from hashed message
     */
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
   d81da:	4622      	mov	r2, r4
   d81dc:	463b      	mov	r3, r7
   d81de:	a905      	add	r1, sp, #20
   d81e0:	4630      	mov	r0, r6
   d81e2:	f7ff fed3 	bl	d7f8c <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj>
   d81e6:	4604      	mov	r4, r0
   d81e8:	2800      	cmp	r0, #0
   d81ea:	d134      	bne.n	d8256 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
    /*
     * Step 4: u1 = e / s mod n, u2 = r / s mod n
     */
    ECDSA_BUDGET( MBEDTLS_ECP_OPS_CHK + MBEDTLS_ECP_OPS_INV + 2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
   d81ec:	462a      	mov	r2, r5
   d81ee:	9921      	ldr	r1, [sp, #132]	; 0x84
   d81f0:	a808      	add	r0, sp, #32
   d81f2:	f7ff fabb 	bl	d776c <mbedtls_mpi_inv_mod>
   d81f6:	4604      	mov	r4, r0
   d81f8:	bb68      	cbnz	r0, d8256 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu1, &e, &s_inv ) );
   d81fa:	aa08      	add	r2, sp, #32
   d81fc:	a905      	add	r1, sp, #20
   d81fe:	a80b      	add	r0, sp, #44	; 0x2c
   d8200:	f7fe fd6e 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8204:	4604      	mov	r4, r0
   d8206:	bb30      	cbnz	r0, d8256 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu1, pu1, &grp->N ) );
   d8208:	a90b      	add	r1, sp, #44	; 0x2c
   d820a:	462a      	mov	r2, r5
   d820c:	4608      	mov	r0, r1
   d820e:	f7fe ffa3 	bl	d7158 <mbedtls_mpi_mod_mpi>
   d8212:	4604      	mov	r4, r0
   d8214:	b9f8      	cbnz	r0, d8256 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu2, r, &s_inv ) );
   d8216:	aa08      	add	r2, sp, #32
   d8218:	9920      	ldr	r1, [sp, #128]	; 0x80
   d821a:	a80e      	add	r0, sp, #56	; 0x38
   d821c:	f7fe fd60 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8220:	4604      	mov	r4, r0
   d8222:	b9c0      	cbnz	r0, d8256 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu2, pu2, &grp->N ) );
   d8224:	af0e      	add	r7, sp, #56	; 0x38
   d8226:	462a      	mov	r2, r5
   d8228:	4639      	mov	r1, r7
   d822a:	4638      	mov	r0, r7
   d822c:	f7fe ff94 	bl	d7158 <mbedtls_mpi_mod_mpi>
   d8230:	4604      	mov	r4, r0
   d8232:	b980      	cbnz	r0, d8256 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
muladd:
#endif
    /*
     * Step 5: R = u1 G + u2 Q
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd_restartable( grp,
   d8234:	9002      	str	r0, [sp, #8]
   d8236:	e88d 0180 	stmia.w	sp, {r7, r8}
   d823a:	f106 0328 	add.w	r3, r6, #40	; 0x28
   d823e:	aa0b      	add	r2, sp, #44	; 0x2c
   d8240:	a911      	add	r1, sp, #68	; 0x44
   d8242:	4630      	mov	r0, r6
   d8244:	f001 fcb0 	bl	d9ba8 <mbedtls_ecp_muladd_restartable>
   d8248:	4604      	mov	r4, r0
   d824a:	b920      	cbnz	r0, d8256 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
                     &R, pu1, &grp->G, pu2, Q, ECDSA_RS_ECP ) );

    if( mbedtls_ecp_is_zero( &R ) )
   d824c:	a811      	add	r0, sp, #68	; 0x44
   d824e:	f001 f97b 	bl	d9548 <mbedtls_ecp_is_zero>
   d8252:	b198      	cbz	r0, d827c <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x108>
    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
   d8254:	4c12      	ldr	r4, [pc, #72]	; (d82a0 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x12c>)
        goto cleanup;
    }

cleanup:
    mbedtls_ecp_point_free( &R );
   d8256:	a811      	add	r0, sp, #68	; 0x44
   d8258:	f000 fda9 	bl	d8dae <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv );
   d825c:	a805      	add	r0, sp, #20
   d825e:	f7fe f8fa 	bl	d6456 <mbedtls_mpi_free>
   d8262:	a808      	add	r0, sp, #32
   d8264:	f7fe f8f7 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
   d8268:	a80b      	add	r0, sp, #44	; 0x2c
   d826a:	f7fe f8f4 	bl	d6456 <mbedtls_mpi_free>
   d826e:	a80e      	add	r0, sp, #56	; 0x38
   d8270:	f7fe f8f1 	bl	d6456 <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( ver );

    return( ret );
   d8274:	4620      	mov	r0, r4
   d8276:	e010      	b.n	d829a <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x126>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv );
    mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d8278:	480a      	ldr	r0, [pc, #40]	; (d82a4 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x130>)
   d827a:	e00e      	b.n	d829a <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x126>

    /*
     * Step 6: convert xR to an integer (no-op)
     * Step 7: reduce xR mod n (gives v)
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
   d827c:	a911      	add	r1, sp, #68	; 0x44
   d827e:	462a      	mov	r2, r5
   d8280:	4608      	mov	r0, r1
   d8282:	f7fe ff69 	bl	d7158 <mbedtls_mpi_mod_mpi>
   d8286:	4604      	mov	r4, r0
   d8288:	2800      	cmp	r0, #0
   d828a:	d1e4      	bne.n	d8256 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>

    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
   d828c:	9920      	ldr	r1, [sp, #128]	; 0x80
   d828e:	a811      	add	r0, sp, #68	; 0x44
   d8290:	f7fe fbc2 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d8294:	2800      	cmp	r0, #0
   d8296:	d0de      	beq.n	d8256 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
   d8298:	e7dc      	b.n	d8254 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe0>
    mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );

    ECDSA_RS_LEAVE( ver );

    return( ret );
}
   d829a:	b01a      	add	sp, #104	; 0x68
   d829c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d82a0:	ffffb200 	.word	0xffffb200
   d82a4:	ffffb080 	.word	0xffffb080

000d82a8 <mbedtls_ecdsa_write_signature_restartable>:
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng,
                           mbedtls_ecdsa_restart_ctx *rs_ctx )
{
   d82a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d82ac:	b0b2      	sub	sp, #200	; 0xc8
   d82ae:	4604      	mov	r4, r0
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );

    mbedtls_mpi_init( &r );
   d82b0:	a808      	add	r0, sp, #32
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng,
                           mbedtls_ecdsa_restart_ctx *rs_ctx )
{
   d82b2:	4617      	mov	r7, r2
   d82b4:	4698      	mov	r8, r3
   d82b6:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
   d82b8:	9e3b      	ldr	r6, [sp, #236]	; 0xec
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );

    mbedtls_mpi_init( &r );
   d82ba:	f7fe f8c6 	bl	d644a <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
   d82be:	a80b      	add	r0, sp, #44	; 0x2c
   d82c0:	f7fe f8c3 	bl	d644a <mbedtls_mpi_init>
#if defined(MBEDTLS_ECDSA_SIGN_ALT)
    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,
                         hash, hlen, f_rng, p_rng ) );
#else
    /* Use the same RNG for both blinding and ephemeral key generation */
    MBEDTLS_MPI_CHK( ecdsa_sign_restartable( &ctx->grp, &r, &s, &ctx->d,
   d82c4:	e88d 0180 	stmia.w	sp, {r7, r8}
   d82c8:	9605      	str	r6, [sp, #20]
   d82ca:	9504      	str	r5, [sp, #16]
   d82cc:	9603      	str	r6, [sp, #12]
   d82ce:	9502      	str	r5, [sp, #8]
   d82d0:	f104 037c 	add.w	r3, r4, #124	; 0x7c
   d82d4:	aa0b      	add	r2, sp, #44	; 0x2c
   d82d6:	a908      	add	r1, sp, #32
   d82d8:	4620      	mov	r0, r4
   d82da:	f7ff fe83 	bl	d7fe4 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0>
   d82de:	4607      	mov	r7, r0
   d82e0:	bb70      	cbnz	r0, d8340 <mbedtls_ecdsa_write_signature_restartable+0x98>
static int ecdsa_signature_to_asn1( const mbedtls_mpi *r, const mbedtls_mpi *s,
                                    unsigned char *sig, size_t *slen )
{
    int ret;
    unsigned char buf[MBEDTLS_ECDSA_MAX_LEN];
    unsigned char *p = buf + sizeof( buf );
   d82e2:	ae32      	add	r6, sp, #200	; 0xc8
   d82e4:	f10d 03c5 	add.w	r3, sp, #197	; 0xc5
   d82e8:	f846 3dac 	str.w	r3, [r6, #-172]!
    size_t len = 0;

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
   d82ec:	aa0b      	add	r2, sp, #44	; 0x2c
   d82ee:	a90e      	add	r1, sp, #56	; 0x38
   d82f0:	4630      	mov	r0, r6
   d82f2:	f7fd fece 	bl	d6092 <mbedtls_asn1_write_mpi>
   d82f6:	1e04      	subs	r4, r0, #0
   d82f8:	db21      	blt.n	d833e <mbedtls_ecdsa_write_signature_restartable+0x96>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
   d82fa:	aa08      	add	r2, sp, #32
   d82fc:	a90e      	add	r1, sp, #56	; 0x38
   d82fe:	4630      	mov	r0, r6
   d8300:	f7fd fec7 	bl	d6092 <mbedtls_asn1_write_mpi>
   d8304:	2800      	cmp	r0, #0
   d8306:	db19      	blt.n	d833c <mbedtls_ecdsa_write_signature_restartable+0x94>
   d8308:	1825      	adds	r5, r4, r0

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
   d830a:	462a      	mov	r2, r5
   d830c:	a90e      	add	r1, sp, #56	; 0x38
   d830e:	4630      	mov	r0, r6
   d8310:	f7fd fe3d 	bl	d5f8e <mbedtls_asn1_write_len>
   d8314:	1e04      	subs	r4, r0, #0
   d8316:	db12      	blt.n	d833e <mbedtls_ecdsa_write_signature_restartable+0x96>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
   d8318:	2230      	movs	r2, #48	; 0x30
   d831a:	a90e      	add	r1, sp, #56	; 0x38
   d831c:	4630      	mov	r0, r6
   d831e:	f7fd feaa 	bl	d6076 <mbedtls_asn1_write_tag>
   d8322:	2800      	cmp	r0, #0
   d8324:	db0a      	blt.n	d833c <mbedtls_ecdsa_write_signature_restartable+0x94>
   d8326:	442c      	add	r4, r5
   d8328:	4404      	add	r4, r0
                                       MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) );

    memcpy( sig, p, len );
   d832a:	4622      	mov	r2, r4
   d832c:	9907      	ldr	r1, [sp, #28]
   d832e:	9838      	ldr	r0, [sp, #224]	; 0xe0
   d8330:	f00f fd99 	bl	e7e66 <memcpy>
    *slen = len;
   d8334:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   d8336:	601c      	str	r4, [r3, #0]

    return( 0 );
   d8338:	463c      	mov	r4, r7
   d833a:	e000      	b.n	d833e <mbedtls_ecdsa_write_signature_restartable+0x96>

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
   d833c:	4604      	mov	r4, r0
                                             hash, hlen, f_rng, p_rng, f_rng,
                                             p_rng, rs_ctx ) );
#endif /* MBEDTLS_ECDSA_SIGN_ALT */
#endif /* MBEDTLS_ECDSA_DETERMINISTIC */

    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );
   d833e:	4627      	mov	r7, r4

cleanup:
    mbedtls_mpi_free( &r );
   d8340:	a808      	add	r0, sp, #32
   d8342:	f7fe f888 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
   d8346:	a80b      	add	r0, sp, #44	; 0x2c
   d8348:	f7fe f885 	bl	d6456 <mbedtls_mpi_free>

    return( ret );
}
   d834c:	4638      	mov	r0, r7
   d834e:	b032      	add	sp, #200	; 0xc8
   d8350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8354 <mbedtls_ecdsa_write_signature>:
                                 mbedtls_md_type_t md_alg,
                                 const unsigned char *hash, size_t hlen,
                                 unsigned char *sig, size_t *slen,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
   d8354:	b510      	push	{r4, lr}
   d8356:	b086      	sub	sp, #24
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );
    return( mbedtls_ecdsa_write_signature_restartable(
                ctx, md_alg, hash, hlen, sig, slen, f_rng, p_rng, NULL ) );
   d8358:	2400      	movs	r4, #0
   d835a:	9404      	str	r4, [sp, #16]
   d835c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   d835e:	9403      	str	r4, [sp, #12]
   d8360:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   d8362:	9402      	str	r4, [sp, #8]
   d8364:	9c09      	ldr	r4, [sp, #36]	; 0x24
   d8366:	9401      	str	r4, [sp, #4]
   d8368:	9c08      	ldr	r4, [sp, #32]
   d836a:	9400      	str	r4, [sp, #0]
   d836c:	f7ff ff9c 	bl	d82a8 <mbedtls_ecdsa_write_signature_restartable>
}
   d8370:	b006      	add	sp, #24
   d8372:	bd10      	pop	{r4, pc}

000d8374 <mbedtls_ecdsa_read_signature_restartable>:
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
   d8374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8378:	b08b      	sub	sp, #44	; 0x2c
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
   d837a:	ae04      	add	r6, sp, #16
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
    int ret;
    unsigned char *p = (unsigned char *) sig;
    const unsigned char *end = sig + slen;
   d837c:	9d12      	ldr	r5, [sp, #72]	; 0x48
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
    int ret;
    unsigned char *p = (unsigned char *) sig;
   d837e:	9302      	str	r3, [sp, #8]
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
   d8380:	4604      	mov	r4, r0
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
    mbedtls_mpi_init( &s );
   d8382:	af07      	add	r7, sp, #28
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
   d8384:	4630      	mov	r0, r6
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
    int ret;
    unsigned char *p = (unsigned char *) sig;
    const unsigned char *end = sig + slen;
   d8386:	441d      	add	r5, r3
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
   d8388:	4688      	mov	r8, r1
   d838a:	4691      	mov	r9, r2
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
   d838c:	f7fe f85d 	bl	d644a <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
   d8390:	4638      	mov	r0, r7
   d8392:	f7fe f85a 	bl	d644a <mbedtls_mpi_init>

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   d8396:	2330      	movs	r3, #48	; 0x30
   d8398:	aa03      	add	r2, sp, #12
   d839a:	4629      	mov	r1, r5
   d839c:	a802      	add	r0, sp, #8
   d839e:	f7fd fcb3 	bl	d5d08 <mbedtls_asn1_get_tag>
   d83a2:	b998      	cbnz	r0, d83cc <mbedtls_ecdsa_read_signature_restartable+0x58>
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
        goto cleanup;
    }

    if( p + len != end )
   d83a4:	9b03      	ldr	r3, [sp, #12]
   d83a6:	9a02      	ldr	r2, [sp, #8]
   d83a8:	4413      	add	r3, r2
   d83aa:	429d      	cmp	r5, r3
   d83ac:	d10c      	bne.n	d83c8 <mbedtls_ecdsa_read_signature_restartable+0x54>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
        goto cleanup;
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
   d83ae:	4632      	mov	r2, r6
   d83b0:	4629      	mov	r1, r5
   d83b2:	a802      	add	r0, sp, #8
   d83b4:	f7fd fcf9 	bl	d5daa <mbedtls_asn1_get_mpi>
   d83b8:	b940      	cbnz	r0, d83cc <mbedtls_ecdsa_read_signature_restartable+0x58>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
   d83ba:	463a      	mov	r2, r7
   d83bc:	4629      	mov	r1, r5
   d83be:	a802      	add	r0, sp, #8
   d83c0:	f7fd fcf3 	bl	d5daa <mbedtls_asn1_get_mpi>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
        goto cleanup;
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
   d83c4:	b910      	cbnz	r0, d83cc <mbedtls_ecdsa_read_signature_restartable+0x58>
   d83c6:	e004      	b.n	d83d2 <mbedtls_ecdsa_read_signature_restartable+0x5e>
    }

    if( p + len != end )
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
   d83c8:	4c0f      	ldr	r4, [pc, #60]	; (d8408 <mbedtls_ecdsa_read_signature_restartable+0x94>)
   d83ca:	e012      	b.n	d83f2 <mbedtls_ecdsa_read_signature_restartable+0x7e>
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d83cc:	f5a0 449f 	sub.w	r4, r0, #20352	; 0x4f80
        goto cleanup;
   d83d0:	e00f      	b.n	d83f2 <mbedtls_ecdsa_read_signature_restartable+0x7e>
#if defined(MBEDTLS_ECDSA_VERIFY_ALT)
    if( ( ret = mbedtls_ecdsa_verify( &ctx->grp, hash, hlen,
                                      &ctx->Q, &r, &s ) ) != 0 )
        goto cleanup;
#else
    if( ( ret = ecdsa_verify_restartable( &ctx->grp, hash, hlen,
   d83d2:	f104 0388 	add.w	r3, r4, #136	; 0x88
   d83d6:	4620      	mov	r0, r4
   d83d8:	e88d 00c0 	stmia.w	sp, {r6, r7}
   d83dc:	464a      	mov	r2, r9
   d83de:	4641      	mov	r1, r8
   d83e0:	f7ff fec8 	bl	d8174 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1>
   d83e4:	4604      	mov	r4, r0
   d83e6:	b920      	cbnz	r0, d83f2 <mbedtls_ecdsa_read_signature_restartable+0x7e>

    /* At this point we know that the buffer starts with a valid signature.
     * Return 0 if the buffer just contains the signature, and a specific
     * error code if the valid signature is followed by more data. */
    if( p != end )
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;
   d83e8:	4b08      	ldr	r3, [pc, #32]	; (d840c <mbedtls_ecdsa_read_signature_restartable+0x98>)
   d83ea:	9a02      	ldr	r2, [sp, #8]
   d83ec:	4295      	cmp	r5, r2
   d83ee:	bf18      	it	ne
   d83f0:	461c      	movne	r4, r3

cleanup:
    mbedtls_mpi_free( &r );
   d83f2:	4630      	mov	r0, r6
   d83f4:	f7fe f82f 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
   d83f8:	4638      	mov	r0, r7
   d83fa:	f7fe f82c 	bl	d6456 <mbedtls_mpi_free>

    return( ret );
}
   d83fe:	4620      	mov	r0, r4
   d8400:	b00b      	add	sp, #44	; 0x2c
   d8402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8406:	bf00      	nop
   d8408:	ffffb01a 	.word	0xffffb01a
   d840c:	ffffb400 	.word	0xffffb400

000d8410 <mbedtls_ecdsa_read_signature>:
 * Read and check signature
 */
int mbedtls_ecdsa_read_signature( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen )
{
   d8410:	b513      	push	{r0, r1, r4, lr}
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    return( mbedtls_ecdsa_read_signature_restartable(
                ctx, hash, hlen, sig, slen, NULL ) );
   d8412:	2400      	movs	r4, #0
   d8414:	9401      	str	r4, [sp, #4]
   d8416:	9c04      	ldr	r4, [sp, #16]
   d8418:	9400      	str	r4, [sp, #0]
   d841a:	f7ff ffab 	bl	d8374 <mbedtls_ecdsa_read_signature_restartable>
}
   d841e:	b002      	add	sp, #8
   d8420:	bd10      	pop	{r4, pc}

000d8422 <mbedtls_ecdsa_init>:
 */
void mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )
{
    ECDSA_VALIDATE( ctx != NULL );

    mbedtls_ecp_keypair_init( ctx );
   d8422:	f000 bcb6 	b.w	d8d92 <mbedtls_ecp_keypair_init>

000d8426 <mbedtls_ecdsa_free>:
/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
    if( ctx == NULL )
   d8426:	b108      	cbz	r0, d842c <mbedtls_ecdsa_free+0x6>
        return;

    mbedtls_ecp_keypair_free( ctx );
   d8428:	f000 bd01 	b.w	d8e2e <mbedtls_ecp_keypair_free>
   d842c:	4770      	bx	lr

000d842e <mbedtls_ecdsa_from_keypair>:

/*
 * Set context from an mbedtls_ecp_keypair
 */
int mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key )
{
   d842e:	b570      	push	{r4, r5, r6, lr}
   d8430:	4605      	mov	r5, r0
   d8432:	460e      	mov	r6, r1
    int ret;
    ECDSA_VALIDATE_RET( ctx != NULL );
    ECDSA_VALIDATE_RET( key != NULL );

    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
   d8434:	f000 fd21 	bl	d8e7a <mbedtls_ecp_group_copy>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
   d8438:	4604      	mov	r4, r0
   d843a:	b978      	cbnz	r0, d845c <mbedtls_ecdsa_from_keypair+0x2e>
   d843c:	f106 017c 	add.w	r1, r6, #124	; 0x7c
   d8440:	f105 007c 	add.w	r0, r5, #124	; 0x7c
   d8444:	f7fe f881 	bl	d654a <mbedtls_mpi_copy>
{
    int ret;
    ECDSA_VALIDATE_RET( ctx != NULL );
    ECDSA_VALIDATE_RET( key != NULL );

    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
   d8448:	4604      	mov	r4, r0
   d844a:	b938      	cbnz	r0, d845c <mbedtls_ecdsa_from_keypair+0x2e>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )
   d844c:	f106 0188 	add.w	r1, r6, #136	; 0x88
   d8450:	f105 0088 	add.w	r0, r5, #136	; 0x88
   d8454:	f000 fcfb 	bl	d8e4e <mbedtls_ecp_copy>
    int ret;
    ECDSA_VALIDATE_RET( ctx != NULL );
    ECDSA_VALIDATE_RET( key != NULL );

    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
   d8458:	4604      	mov	r4, r0
   d845a:	b110      	cbz	r0, d8462 <mbedtls_ecdsa_from_keypair+0x34>
        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )
    {
        mbedtls_ecdsa_free( ctx );
   d845c:	4628      	mov	r0, r5
   d845e:	f7ff ffe2 	bl	d8426 <mbedtls_ecdsa_free>
    }

    return( ret );
}
   d8462:	4620      	mov	r0, r4
   d8464:	bd70      	pop	{r4, r5, r6, pc}

000d8466 <_ZL12ecp_get_typePK17mbedtls_ecp_group>:
/*
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
    if( grp->G.X.p == NULL )
   d8466:	6b03      	ldr	r3, [r0, #48]	; 0x30
   d8468:	b12b      	cbz	r3, d8476 <_ZL12ecp_get_typePK17mbedtls_ecp_group+0x10>
        return( ECP_TYPE_NONE );

    if( grp->G.Y.p == NULL )
   d846a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   d846c:	2b00      	cmp	r3, #0
        return( ECP_TYPE_MONTGOMERY );
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
   d846e:	bf0c      	ite	eq
   d8470:	2002      	moveq	r0, #2
   d8472:	2001      	movne	r0, #1
   d8474:	4770      	bx	lr
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
    if( grp->G.X.p == NULL )
        return( ECP_TYPE_NONE );
   d8476:	4618      	mov	r0, r3

    if( grp->G.Y.p == NULL )
        return( ECP_TYPE_MONTGOMERY );
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
}
   d8478:	4770      	bx	lr
	...

000d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>:
 * See the documentation of struct mbedtls_ecp_group.
 *
 * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.
 */
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
   d847c:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( grp->modp == NULL )
   d847e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 * See the documentation of struct mbedtls_ecp_group.
 *
 * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.
 */
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
   d8480:	4604      	mov	r4, r0
   d8482:	460d      	mov	r5, r1
    int ret;

    if( grp->modp == NULL )
   d8484:	b92b      	cbnz	r3, d8492 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x16>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
   d8486:	1d0a      	adds	r2, r1, #4
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );

cleanup:
    return( ret );
}
   d8488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
    int ret;

    if( grp->modp == NULL )
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
   d848c:	4601      	mov	r1, r0
   d848e:	f7fe be63 	b.w	d7158 <mbedtls_mpi_mod_mpi>

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
   d8492:	6803      	ldr	r3, [r0, #0]
   d8494:	2b00      	cmp	r3, #0
   d8496:	db07      	blt.n	d84a8 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x2c>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
   d8498:	4620      	mov	r0, r4
   d849a:	f7fe f8fd 	bl	d6698 <mbedtls_mpi_bitlen>

    if( grp->modp == NULL )
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
   d849e:	6dab      	ldr	r3, [r5, #88]	; 0x58
   d84a0:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   d84a4:	d822      	bhi.n	d84ec <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x70>
   d84a6:	e004      	b.n	d84b2 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x36>
   d84a8:	2100      	movs	r1, #0
   d84aa:	f7fe fafa 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d84ae:	b9e8      	cbnz	r0, d84ec <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x70>
   d84b0:	e7f2      	b.n	d8498 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x1c>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }

    MBEDTLS_MPI_CHK( grp->modp( N ) );
   d84b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   d84b4:	4620      	mov	r0, r4
   d84b6:	4798      	blx	r3
   d84b8:	bb08      	cbnz	r0, d84fe <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x82>
   d84ba:	3504      	adds	r5, #4

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
   d84bc:	6823      	ldr	r3, [r4, #0]
   d84be:	2b00      	cmp	r3, #0
   d84c0:	da04      	bge.n	d84cc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x50>
   d84c2:	2100      	movs	r1, #0
   d84c4:	4620      	mov	r0, r4
   d84c6:	f7fe faec 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d84ca:	b988      	cbnz	r0, d84f0 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );

    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
   d84cc:	4629      	mov	r1, r5
   d84ce:	4620      	mov	r0, r4
   d84d0:	f7fe faa2 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d84d4:	2800      	cmp	r0, #0
   d84d6:	db07      	blt.n	d84e8 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x6c>
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
   d84d8:	462a      	mov	r2, r5
   d84da:	4621      	mov	r1, r4
   d84dc:	4620      	mov	r0, r4
   d84de:	f7fe fb50 	bl	d6b82 <mbedtls_mpi_sub_abs>
   d84e2:	2800      	cmp	r0, #0
   d84e4:	d0f2      	beq.n	d84cc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x50>
   d84e6:	bd38      	pop	{r3, r4, r5, pc}
   d84e8:	2000      	movs	r0, #0
   d84ea:	bd38      	pop	{r3, r4, r5, pc}

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d84ec:	4804      	ldr	r0, [pc, #16]	; (d8500 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x84>)
   d84ee:	bd38      	pop	{r3, r4, r5, pc}

    MBEDTLS_MPI_CHK( grp->modp( N ) );

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
   d84f0:	462a      	mov	r2, r5
   d84f2:	4621      	mov	r1, r4
   d84f4:	4620      	mov	r0, r4
   d84f6:	f7fe fb84 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d84fa:	2800      	cmp	r0, #0
   d84fc:	d0de      	beq.n	d84bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x40>
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );

cleanup:
    return( ret );
}
   d84fe:	bd38      	pop	{r3, r4, r5, pc}
   d8500:	ffffb080 	.word	0xffffb080

000d8504 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>:
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
   d8504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8508:	b08d      	sub	sp, #52	; 0x34
   d850a:	4606      	mov	r6, r0
#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_jac( grp, R, P ) );
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
   d850c:	ad03      	add	r5, sp, #12
   d850e:	4668      	mov	r0, sp
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
   d8510:	4689      	mov	r9, r1
   d8512:	4690      	mov	r8, r2
#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_jac( grp, R, P ) );
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
   d8514:	f7fd ff99 	bl	d644a <mbedtls_mpi_init>
   d8518:	4628      	mov	r0, r5
   d851a:	f7fd ff96 	bl	d644a <mbedtls_mpi_init>
   d851e:	a806      	add	r0, sp, #24
   d8520:	f7fd ff93 	bl	d644a <mbedtls_mpi_init>
   d8524:	a809      	add	r0, sp, #36	; 0x24
   d8526:	f7fd ff90 	bl	d644a <mbedtls_mpi_init>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
   d852a:	69b3      	ldr	r3, [r6, #24]
   d852c:	2b00      	cmp	r3, #0
   d852e:	d13f      	bne.n	d85b0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0xac>
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
   d8530:	f108 0218 	add.w	r2, r8, #24
   d8534:	4611      	mov	r1, r2
   d8536:	4628      	mov	r0, r5
   d8538:	f7fe fbd2 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d853c:	4604      	mov	r4, r0
   d853e:	2800      	cmp	r0, #0
   d8540:	f040 8205 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d8544:	4631      	mov	r1, r6
   d8546:	4628      	mov	r0, r5
   d8548:	f7ff ff98 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d854c:	4604      	mov	r4, r0
   d854e:	2800      	cmp	r0, #0
   d8550:	f040 81fd 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
   d8554:	462a      	mov	r2, r5
   d8556:	4641      	mov	r1, r8
   d8558:	a806      	add	r0, sp, #24
   d855a:	f7fe fb52 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d855e:	4604      	mov	r4, r0
   d8560:	2800      	cmp	r0, #0
   d8562:	f040 81f4 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d8566:	1d37      	adds	r7, r6, #4
   d8568:	4639      	mov	r1, r7
   d856a:	a806      	add	r0, sp, #24
   d856c:	f7fe fa54 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d8570:	2800      	cmp	r0, #0
   d8572:	db08      	blt.n	d8586 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x82>
   d8574:	a906      	add	r1, sp, #24
   d8576:	463a      	mov	r2, r7
   d8578:	4608      	mov	r0, r1
   d857a:	f7fe fb02 	bl	d6b82 <mbedtls_mpi_sub_abs>
   d857e:	4604      	mov	r4, r0
   d8580:	2800      	cmp	r0, #0
   d8582:	d0f1      	beq.n	d8568 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x64>
   d8584:	e1e3      	b.n	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
   d8586:	462a      	mov	r2, r5
   d8588:	4641      	mov	r1, r8
   d858a:	a809      	add	r0, sp, #36	; 0x24
   d858c:	f7fe fb5a 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d8590:	4604      	mov	r4, r0
   d8592:	2800      	cmp	r0, #0
   d8594:	f040 81db 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d8598:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d859a:	2b00      	cmp	r3, #0
   d859c:	f280 8120 	bge.w	d87e0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x2dc>
   d85a0:	2100      	movs	r1, #0
   d85a2:	a809      	add	r0, sp, #36	; 0x24
   d85a4:	f7fe fa7d 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d85a8:	2800      	cmp	r0, #0
   d85aa:	f040 8140 	bne.w	d882e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x32a>
   d85ae:	e117      	b.n	d87e0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x2dc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
    }
    else
    {
        /* M = 3.X^2 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
   d85b0:	4642      	mov	r2, r8
   d85b2:	4641      	mov	r1, r8
   d85b4:	4628      	mov	r0, r5
   d85b6:	f7fe fb93 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d85ba:	4604      	mov	r4, r0
   d85bc:	2800      	cmp	r0, #0
   d85be:	f040 81c6 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d85c2:	4631      	mov	r1, r6
   d85c4:	4628      	mov	r0, r5
   d85c6:	f7ff ff59 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d85ca:	4604      	mov	r4, r0
   d85cc:	2800      	cmp	r0, #0
   d85ce:	f040 81be 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
   d85d2:	2203      	movs	r2, #3
   d85d4:	4629      	mov	r1, r5
   d85d6:	4668      	mov	r0, sp
   d85d8:	f7fe fbf1 	bl	d6dbe <mbedtls_mpi_mul_int>
   d85dc:	4604      	mov	r4, r0
   d85de:	2800      	cmp	r0, #0
   d85e0:	f040 81b5 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d85e4:	1d37      	adds	r7, r6, #4
   d85e6:	4639      	mov	r1, r7
   d85e8:	4668      	mov	r0, sp
   d85ea:	f7fe fa15 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d85ee:	2800      	cmp	r0, #0
   d85f0:	db08      	blt.n	d8604 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x100>
   d85f2:	463a      	mov	r2, r7
   d85f4:	4669      	mov	r1, sp
   d85f6:	4668      	mov	r0, sp
   d85f8:	f7fe fac3 	bl	d6b82 <mbedtls_mpi_sub_abs>
   d85fc:	4604      	mov	r4, r0
   d85fe:	2800      	cmp	r0, #0
   d8600:	d0f1      	beq.n	d85e6 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0xe2>
   d8602:	e1a4      	b.n	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>

        /* Optimize away for "koblitz" curves with A = 0 */
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
   d8604:	f106 0a10 	add.w	sl, r6, #16
   d8608:	2100      	movs	r1, #0
   d860a:	4650      	mov	r0, sl
   d860c:	f7fe fa49 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d8610:	2800      	cmp	r0, #0
   d8612:	d048      	beq.n	d86a6 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1a2>
        {
            /* M += A.Z^4 */
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
   d8614:	f108 0218 	add.w	r2, r8, #24
   d8618:	4611      	mov	r1, r2
   d861a:	4628      	mov	r0, r5
   d861c:	f7fe fb60 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8620:	4604      	mov	r4, r0
   d8622:	2800      	cmp	r0, #0
   d8624:	f040 8193 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d8628:	4631      	mov	r1, r6
   d862a:	4628      	mov	r0, r5
   d862c:	f7ff ff26 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8630:	4604      	mov	r4, r0
   d8632:	2800      	cmp	r0, #0
   d8634:	f040 818b 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
   d8638:	462a      	mov	r2, r5
   d863a:	4629      	mov	r1, r5
   d863c:	a806      	add	r0, sp, #24
   d863e:	f7fe fb4f 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8642:	4604      	mov	r4, r0
   d8644:	2800      	cmp	r0, #0
   d8646:	f040 8182 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d864a:	4631      	mov	r1, r6
   d864c:	a806      	add	r0, sp, #24
   d864e:	f7ff ff15 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8652:	4604      	mov	r4, r0
   d8654:	2800      	cmp	r0, #0
   d8656:	f040 817a 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
   d865a:	4652      	mov	r2, sl
   d865c:	a906      	add	r1, sp, #24
   d865e:	4628      	mov	r0, r5
   d8660:	f7fe fb3e 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8664:	4604      	mov	r4, r0
   d8666:	2800      	cmp	r0, #0
   d8668:	f040 8171 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d866c:	4631      	mov	r1, r6
   d866e:	4628      	mov	r0, r5
   d8670:	f7ff ff04 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8674:	4604      	mov	r4, r0
   d8676:	2800      	cmp	r0, #0
   d8678:	f040 8169 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
   d867c:	462a      	mov	r2, r5
   d867e:	4669      	mov	r1, sp
   d8680:	4668      	mov	r0, sp
   d8682:	f7fe fabe 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d8686:	4604      	mov	r4, r0
   d8688:	2800      	cmp	r0, #0
   d868a:	f040 8160 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d868e:	4639      	mov	r1, r7
   d8690:	4668      	mov	r0, sp
   d8692:	f7fe f9c1 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d8696:	2800      	cmp	r0, #0
   d8698:	db05      	blt.n	d86a6 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1a2>
   d869a:	463a      	mov	r2, r7
   d869c:	4669      	mov	r1, sp
   d869e:	4668      	mov	r0, sp
   d86a0:	f7fe fa6f 	bl	d6b82 <mbedtls_mpi_sub_abs>
   d86a4:	e7ef      	b.n	d8686 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x182>
        }
    }

    /* S = 4.X.Y^2 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
   d86a6:	f108 0b0c 	add.w	fp, r8, #12
   d86aa:	465a      	mov	r2, fp
   d86ac:	4659      	mov	r1, fp
   d86ae:	a806      	add	r0, sp, #24
   d86b0:	f7fe fb16 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d86b4:	4604      	mov	r4, r0
   d86b6:	2800      	cmp	r0, #0
   d86b8:	f040 8149 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d86bc:	4631      	mov	r1, r6
   d86be:	a806      	add	r0, sp, #24
   d86c0:	f7ff fedc 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d86c4:	4604      	mov	r4, r0
   d86c6:	2800      	cmp	r0, #0
   d86c8:	f040 8141 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
   d86cc:	2101      	movs	r1, #1
   d86ce:	a806      	add	r0, sp, #24
   d86d0:	f7fe f874 	bl	d67bc <mbedtls_mpi_shift_l>
   d86d4:	4604      	mov	r4, r0
   d86d6:	2800      	cmp	r0, #0
   d86d8:	f040 8139 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d86dc:	1d37      	adds	r7, r6, #4
   d86de:	4639      	mov	r1, r7
   d86e0:	a806      	add	r0, sp, #24
   d86e2:	f7fe f999 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d86e6:	2800      	cmp	r0, #0
   d86e8:	db08      	blt.n	d86fc <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1f8>
   d86ea:	a906      	add	r1, sp, #24
   d86ec:	463a      	mov	r2, r7
   d86ee:	4608      	mov	r0, r1
   d86f0:	f7fe fa47 	bl	d6b82 <mbedtls_mpi_sub_abs>
   d86f4:	4604      	mov	r4, r0
   d86f6:	2800      	cmp	r0, #0
   d86f8:	d0f1      	beq.n	d86de <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1da>
   d86fa:	e128      	b.n	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
   d86fc:	aa06      	add	r2, sp, #24
   d86fe:	4641      	mov	r1, r8
   d8700:	4628      	mov	r0, r5
   d8702:	f7fe faed 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8706:	4604      	mov	r4, r0
   d8708:	2800      	cmp	r0, #0
   d870a:	f040 8120 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d870e:	4631      	mov	r1, r6
   d8710:	4628      	mov	r0, r5
   d8712:	f7ff feb3 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8716:	4604      	mov	r4, r0
   d8718:	2800      	cmp	r0, #0
   d871a:	f040 8118 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
   d871e:	2101      	movs	r1, #1
   d8720:	4628      	mov	r0, r5
   d8722:	f7fe f84b 	bl	d67bc <mbedtls_mpi_shift_l>
   d8726:	4604      	mov	r4, r0
   d8728:	2800      	cmp	r0, #0
   d872a:	f040 8110 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d872e:	4639      	mov	r1, r7
   d8730:	4628      	mov	r0, r5
   d8732:	f7fe f971 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d8736:	2800      	cmp	r0, #0
   d8738:	db05      	blt.n	d8746 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x242>
   d873a:	463a      	mov	r2, r7
   d873c:	4629      	mov	r1, r5
   d873e:	4628      	mov	r0, r5
   d8740:	f7fe fa1f 	bl	d6b82 <mbedtls_mpi_sub_abs>
   d8744:	e7ef      	b.n	d8726 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x222>

    /* U = 8.Y^4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
   d8746:	aa06      	add	r2, sp, #24
   d8748:	4611      	mov	r1, r2
   d874a:	a809      	add	r0, sp, #36	; 0x24
   d874c:	f7fe fac8 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8750:	4604      	mov	r4, r0
   d8752:	2800      	cmp	r0, #0
   d8754:	f040 80fb 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d8758:	4631      	mov	r1, r6
   d875a:	a809      	add	r0, sp, #36	; 0x24
   d875c:	f7ff fe8e 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8760:	4604      	mov	r4, r0
   d8762:	2800      	cmp	r0, #0
   d8764:	f040 80f3 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
   d8768:	2101      	movs	r1, #1
   d876a:	a809      	add	r0, sp, #36	; 0x24
   d876c:	f7fe f826 	bl	d67bc <mbedtls_mpi_shift_l>
   d8770:	4604      	mov	r4, r0
   d8772:	2800      	cmp	r0, #0
   d8774:	f040 80eb 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d8778:	4639      	mov	r1, r7
   d877a:	a809      	add	r0, sp, #36	; 0x24
   d877c:	f7fe f94c 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d8780:	2800      	cmp	r0, #0
   d8782:	db05      	blt.n	d8790 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x28c>
   d8784:	a909      	add	r1, sp, #36	; 0x24
   d8786:	463a      	mov	r2, r7
   d8788:	4608      	mov	r0, r1
   d878a:	f7fe f9fa 	bl	d6b82 <mbedtls_mpi_sub_abs>
   d878e:	e7ef      	b.n	d8770 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x26c>

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
   d8790:	466a      	mov	r2, sp
   d8792:	4669      	mov	r1, sp
   d8794:	a806      	add	r0, sp, #24
   d8796:	f7fe faa3 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d879a:	4604      	mov	r4, r0
   d879c:	2800      	cmp	r0, #0
   d879e:	f040 80d6 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d87a2:	4631      	mov	r1, r6
   d87a4:	a806      	add	r0, sp, #24
   d87a6:	f7ff fe69 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d87aa:	4604      	mov	r4, r0
   d87ac:	2800      	cmp	r0, #0
   d87ae:	f040 80ce 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   d87b2:	a906      	add	r1, sp, #24
   d87b4:	462a      	mov	r2, r5
   d87b6:	4608      	mov	r0, r1
   d87b8:	f7fe fa44 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d87bc:	4604      	mov	r4, r0
   d87be:	2800      	cmp	r0, #0
   d87c0:	f040 80c5 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d87c4:	9b06      	ldr	r3, [sp, #24]
   d87c6:	2b00      	cmp	r3, #0
   d87c8:	da37      	bge.n	d883a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x336>
   d87ca:	2100      	movs	r1, #0
   d87cc:	a806      	add	r0, sp, #24
   d87ce:	f7fe f968 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d87d2:	b390      	cbz	r0, d883a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x336>
   d87d4:	a906      	add	r1, sp, #24
   d87d6:	463a      	mov	r2, r7
   d87d8:	4608      	mov	r0, r1
   d87da:	f7fe fa12 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d87de:	e7ed      	b.n	d87bc <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x2b8>
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
   d87e0:	aa09      	add	r2, sp, #36	; 0x24
   d87e2:	a906      	add	r1, sp, #24
   d87e4:	4628      	mov	r0, r5
   d87e6:	f7fe fa7b 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d87ea:	4604      	mov	r4, r0
   d87ec:	2800      	cmp	r0, #0
   d87ee:	f040 80ae 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d87f2:	4631      	mov	r1, r6
   d87f4:	4628      	mov	r0, r5
   d87f6:	f7ff fe41 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d87fa:	4604      	mov	r4, r0
   d87fc:	2800      	cmp	r0, #0
   d87fe:	f040 80a6 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
   d8802:	2203      	movs	r2, #3
   d8804:	4629      	mov	r1, r5
   d8806:	4668      	mov	r0, sp
   d8808:	f7fe fad9 	bl	d6dbe <mbedtls_mpi_mul_int>
   d880c:	4604      	mov	r4, r0
   d880e:	2800      	cmp	r0, #0
   d8810:	f040 809d 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d8814:	4639      	mov	r1, r7
   d8816:	4668      	mov	r0, sp
   d8818:	f7fe f8fe 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d881c:	2800      	cmp	r0, #0
   d881e:	f6ff af42 	blt.w	d86a6 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1a2>
   d8822:	463a      	mov	r2, r7
   d8824:	4669      	mov	r1, sp
   d8826:	4668      	mov	r0, sp
   d8828:	f7fe f9ab 	bl	d6b82 <mbedtls_mpi_sub_abs>
   d882c:	e7ee      	b.n	d880c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x308>
    if( grp->A.p == NULL )
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
   d882e:	a909      	add	r1, sp, #36	; 0x24
   d8830:	463a      	mov	r2, r7
   d8832:	4608      	mov	r0, r1
   d8834:	f7fe f9e5 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d8838:	e6aa      	b.n	d8590 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x8c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   d883a:	a906      	add	r1, sp, #24
   d883c:	462a      	mov	r2, r5
   d883e:	4608      	mov	r0, r1
   d8840:	f7fe fa00 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d8844:	4604      	mov	r4, r0
   d8846:	2800      	cmp	r0, #0
   d8848:	f040 8081 	bne.w	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d884c:	9b06      	ldr	r3, [sp, #24]
   d884e:	2b00      	cmp	r3, #0
   d8850:	da04      	bge.n	d885c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x358>
   d8852:	2100      	movs	r1, #0
   d8854:	a806      	add	r0, sp, #24
   d8856:	f7fe f924 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d885a:	b928      	cbnz	r0, d8868 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x364>

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
   d885c:	aa06      	add	r2, sp, #24
   d885e:	4629      	mov	r1, r5
   d8860:	4628      	mov	r0, r5
   d8862:	f7fe f9ef 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d8866:	e012      	b.n	d888e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x38a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   d8868:	a906      	add	r1, sp, #24
   d886a:	463a      	mov	r2, r7
   d886c:	4608      	mov	r0, r1
   d886e:	f7fe f9c8 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d8872:	e7e7      	b.n	d8844 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x340>

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
   d8874:	9b03      	ldr	r3, [sp, #12]
   d8876:	2b00      	cmp	r3, #0
   d8878:	da0d      	bge.n	d8896 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x392>
   d887a:	2100      	movs	r1, #0
   d887c:	4628      	mov	r0, r5
   d887e:	f7fe f910 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d8882:	b140      	cbz	r0, d8896 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x392>
   d8884:	463a      	mov	r2, r7
   d8886:	4629      	mov	r1, r5
   d8888:	4628      	mov	r0, r5
   d888a:	f7fe f9ba 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d888e:	4604      	mov	r4, r0
   d8890:	2800      	cmp	r0, #0
   d8892:	d0ef      	beq.n	d8874 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x370>
   d8894:	e05b      	b.n	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
   d8896:	466a      	mov	r2, sp
   d8898:	4629      	mov	r1, r5
   d889a:	4628      	mov	r0, r5
   d889c:	f7fe fa20 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d88a0:	4604      	mov	r4, r0
   d88a2:	2800      	cmp	r0, #0
   d88a4:	d153      	bne.n	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d88a6:	4631      	mov	r1, r6
   d88a8:	4628      	mov	r0, r5
   d88aa:	f7ff fde7 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d88ae:	4604      	mov	r4, r0
   d88b0:	2800      	cmp	r0, #0
   d88b2:	d14c      	bne.n	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
   d88b4:	aa09      	add	r2, sp, #36	; 0x24
   d88b6:	4629      	mov	r1, r5
   d88b8:	4628      	mov	r0, r5
   d88ba:	f7fe f9c3 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d88be:	4604      	mov	r4, r0
   d88c0:	2800      	cmp	r0, #0
   d88c2:	d144      	bne.n	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d88c4:	46aa      	mov	sl, r5
   d88c6:	9b03      	ldr	r3, [sp, #12]
   d88c8:	2b00      	cmp	r3, #0
   d88ca:	da04      	bge.n	d88d6 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x3d2>
   d88cc:	2100      	movs	r1, #0
   d88ce:	4650      	mov	r0, sl
   d88d0:	f7fe f8e7 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d88d4:	bb98      	cbnz	r0, d893e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x43a>

    /* U = 2.Y.Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
   d88d6:	f108 0218 	add.w	r2, r8, #24
   d88da:	4659      	mov	r1, fp
   d88dc:	a809      	add	r0, sp, #36	; 0x24
   d88de:	f7fe f9ff 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d88e2:	4604      	mov	r4, r0
   d88e4:	bb98      	cbnz	r0, d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d88e6:	4631      	mov	r1, r6
   d88e8:	a809      	add	r0, sp, #36	; 0x24
   d88ea:	f7ff fdc7 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d88ee:	4604      	mov	r4, r0
   d88f0:	bb68      	cbnz	r0, d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
   d88f2:	2101      	movs	r1, #1
   d88f4:	a809      	add	r0, sp, #36	; 0x24
   d88f6:	f7fd ff61 	bl	d67bc <mbedtls_mpi_shift_l>
   d88fa:	4604      	mov	r4, r0
   d88fc:	bb38      	cbnz	r0, d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d88fe:	4639      	mov	r1, r7
   d8900:	a809      	add	r0, sp, #36	; 0x24
   d8902:	f7fe f889 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d8906:	2800      	cmp	r0, #0
   d8908:	db05      	blt.n	d8916 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x412>
   d890a:	a909      	add	r1, sp, #36	; 0x24
   d890c:	463a      	mov	r2, r7
   d890e:	4608      	mov	r0, r1
   d8910:	f7fe f937 	bl	d6b82 <mbedtls_mpi_sub_abs>
   d8914:	e7f1      	b.n	d88fa <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x3f6>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
   d8916:	a906      	add	r1, sp, #24
   d8918:	4648      	mov	r0, r9
   d891a:	f7fd fe16 	bl	d654a <mbedtls_mpi_copy>
   d891e:	4604      	mov	r4, r0
   d8920:	b9a8      	cbnz	r0, d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
   d8922:	a903      	add	r1, sp, #12
   d8924:	f109 000c 	add.w	r0, r9, #12
   d8928:	f7fd fe0f 	bl	d654a <mbedtls_mpi_copy>
   d892c:	4604      	mov	r4, r0
   d892e:	b970      	cbnz	r0, d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
   d8930:	a909      	add	r1, sp, #36	; 0x24
   d8932:	f109 0018 	add.w	r0, r9, #24
   d8936:	f7fd fe08 	bl	d654a <mbedtls_mpi_copy>
   d893a:	4604      	mov	r4, r0
   d893c:	e007      	b.n	d894e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
   d893e:	463a      	mov	r2, r7
   d8940:	4651      	mov	r1, sl
   d8942:	4650      	mov	r0, sl
   d8944:	f7fe f95d 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d8948:	4604      	mov	r4, r0
   d894a:	2800      	cmp	r0, #0
   d894c:	d0bb      	beq.n	d88c6 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x3c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );

cleanup:
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
   d894e:	4668      	mov	r0, sp
   d8950:	f7fd fd81 	bl	d6456 <mbedtls_mpi_free>
   d8954:	4628      	mov	r0, r5
   d8956:	f7fd fd7e 	bl	d6456 <mbedtls_mpi_free>
   d895a:	a806      	add	r0, sp, #24
   d895c:	f7fd fd7b 	bl	d6456 <mbedtls_mpi_free>
   d8960:	a809      	add	r0, sp, #36	; 0x24
   d8962:	f7fd fd78 	bl	d6456 <mbedtls_mpi_free>

    return( ret );
}
   d8966:	4620      	mov	r0, r4
   d8968:	b00d      	add	sp, #52	; 0x34
   d896a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d896e <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>:
/*
 * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)
 * Cost: 1N := 1I + 3M + 1S
 */
static int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )
{
   d896e:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    mbedtls_mpi Zi, ZZi;

    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
   d8970:	f101 0718 	add.w	r7, r1, #24
/*
 * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)
 * Cost: 1N := 1I + 3M + 1S
 */
static int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )
{
   d8974:	b087      	sub	sp, #28
   d8976:	4606      	mov	r6, r0
   d8978:	460d      	mov	r5, r1
    int ret;
    mbedtls_mpi Zi, ZZi;

    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
   d897a:	4638      	mov	r0, r7
   d897c:	2100      	movs	r1, #0
   d897e:	f7fe f890 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d8982:	2800      	cmp	r0, #0
   d8984:	d04d      	beq.n	d8a22 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xb4>
#if defined(MBEDTLS_ECP_NORMALIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac( grp, pt ) );
#endif /* MBEDTLS_ECP_NORMALIZE_JAC_ALT */

    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
   d8986:	4668      	mov	r0, sp
   d8988:	f7fd fd5f 	bl	d644a <mbedtls_mpi_init>
   d898c:	a803      	add	r0, sp, #12
   d898e:	f7fd fd5c 	bl	d644a <mbedtls_mpi_init>

    /*
     * X = X / Z^2  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
   d8992:	1d32      	adds	r2, r6, #4
   d8994:	4639      	mov	r1, r7
   d8996:	4668      	mov	r0, sp
   d8998:	f7fe fee8 	bl	d776c <mbedtls_mpi_inv_mod>
   d899c:	4604      	mov	r4, r0
   d899e:	bbc8      	cbnz	r0, d8a14 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
   d89a0:	466a      	mov	r2, sp
   d89a2:	4669      	mov	r1, sp
   d89a4:	a803      	add	r0, sp, #12
   d89a6:	f7fe f99b 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d89aa:	4604      	mov	r4, r0
   d89ac:	bb90      	cbnz	r0, d8a14 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
   d89ae:	4631      	mov	r1, r6
   d89b0:	a803      	add	r0, sp, #12
   d89b2:	f7ff fd63 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d89b6:	4604      	mov	r4, r0
   d89b8:	bb60      	cbnz	r0, d8a14 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
   d89ba:	aa03      	add	r2, sp, #12
   d89bc:	4629      	mov	r1, r5
   d89be:	4628      	mov	r0, r5
   d89c0:	f7fe f98e 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d89c4:	4604      	mov	r4, r0
   d89c6:	bb28      	cbnz	r0, d8a14 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
   d89c8:	4631      	mov	r1, r6
   d89ca:	4628      	mov	r0, r5
   d89cc:	f7ff fd56 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d89d0:	4604      	mov	r4, r0
   d89d2:	b9f8      	cbnz	r0, d8a14 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>

    /*
     * Y = Y / Z^3  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
   d89d4:	350c      	adds	r5, #12
   d89d6:	aa03      	add	r2, sp, #12
   d89d8:	4629      	mov	r1, r5
   d89da:	4628      	mov	r0, r5
   d89dc:	f7fe f980 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d89e0:	4604      	mov	r4, r0
   d89e2:	b9b8      	cbnz	r0, d8a14 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
   d89e4:	4631      	mov	r1, r6
   d89e6:	4628      	mov	r0, r5
   d89e8:	f7ff fd48 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d89ec:	4604      	mov	r4, r0
   d89ee:	b988      	cbnz	r0, d8a14 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
   d89f0:	466a      	mov	r2, sp
   d89f2:	4629      	mov	r1, r5
   d89f4:	4628      	mov	r0, r5
   d89f6:	f7fe f973 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d89fa:	4604      	mov	r4, r0
   d89fc:	b950      	cbnz	r0, d8a14 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
   d89fe:	4631      	mov	r1, r6
   d8a00:	4628      	mov	r0, r5
   d8a02:	f7ff fd3b 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8a06:	4604      	mov	r4, r0
   d8a08:	b920      	cbnz	r0, d8a14 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>

    /*
     * Z = 1
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
   d8a0a:	2101      	movs	r1, #1
   d8a0c:	4638      	mov	r0, r7
   d8a0e:	f7fd fdfd 	bl	d660c <mbedtls_mpi_lset>
   d8a12:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
   d8a14:	4668      	mov	r0, sp
   d8a16:	f7fd fd1e 	bl	d6456 <mbedtls_mpi_free>
   d8a1a:	a803      	add	r0, sp, #12
   d8a1c:	f7fd fd1b 	bl	d6456 <mbedtls_mpi_free>

    return( ret );
   d8a20:	4620      	mov	r0, r4
}
   d8a22:	b007      	add	sp, #28
   d8a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d8a28 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj>:
 *
 * Cost: 1N(t) := 1I + (6t - 3)M + 1S
 */
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
                                   mbedtls_ecp_point *T[], size_t T_size )
{
   d8a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;
    size_t i;
    mbedtls_mpi *c, u, Zi, ZZi;

    if( T_size < 2 )
   d8a2c:	2a01      	cmp	r2, #1
 *
 * Cost: 1N(t) := 1I + (6t - 3)M + 1S
 */
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
                                   mbedtls_ecp_point *T[], size_t T_size )
{
   d8a2e:	b08a      	sub	sp, #40	; 0x28
   d8a30:	4607      	mov	r7, r0
   d8a32:	460d      	mov	r5, r1
   d8a34:	4691      	mov	r9, r2
    int ret;
    size_t i;
    mbedtls_mpi *c, u, Zi, ZZi;

    if( T_size < 2 )
   d8a36:	d803      	bhi.n	d8a40 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x18>
        return( ecp_normalize_jac( grp, *T ) );
   d8a38:	6809      	ldr	r1, [r1, #0]
   d8a3a:	f7ff ff98 	bl	d896e <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>
   d8a3e:	e0f1      	b.n	d8c24 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1fc>
#if defined(MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac_many( grp, T, T_size ) );
#endif

    if( ( c = (mbedtls_mpi *)mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
   d8a40:	210c      	movs	r1, #12
   d8a42:	4610      	mov	r0, r2
   d8a44:	f00f f9ea 	bl	e7e1c <calloc>
   d8a48:	4680      	mov	r8, r0
   d8a4a:	2800      	cmp	r0, #0
   d8a4c:	f000 80e9 	beq.w	d8c22 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1fa>
   d8a50:	2400      	movs	r4, #0
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );

    for( i = 0; i < T_size; i++ )
        mbedtls_mpi_init( &c[i] );
   d8a52:	260c      	movs	r6, #12
   d8a54:	fb06 8004 	mla	r0, r6, r4, r8
#endif

    if( ( c = (mbedtls_mpi *)mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );

    for( i = 0; i < T_size; i++ )
   d8a58:	3401      	adds	r4, #1
        mbedtls_mpi_init( &c[i] );
   d8a5a:	f7fd fcf6 	bl	d644a <mbedtls_mpi_init>
#endif

    if( ( c = (mbedtls_mpi *)mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );

    for( i = 0; i < T_size; i++ )
   d8a5e:	45a1      	cmp	r9, r4
   d8a60:	d1f8      	bne.n	d8a54 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x2c>
        mbedtls_mpi_init( &c[i] );

    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
   d8a62:	a801      	add	r0, sp, #4
   d8a64:	f7fd fcf1 	bl	d644a <mbedtls_mpi_init>
   d8a68:	a804      	add	r0, sp, #16
   d8a6a:	f7fd fcee 	bl	d644a <mbedtls_mpi_init>
   d8a6e:	a807      	add	r0, sp, #28
   d8a70:	f7fd fceb 	bl	d644a <mbedtls_mpi_init>

    /*
     * c[i] = Z_0 * ... * Z_i
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
   d8a74:	6829      	ldr	r1, [r5, #0]
   d8a76:	4640      	mov	r0, r8
   d8a78:	3118      	adds	r1, #24
   d8a7a:	f7fd fd66 	bl	d654a <mbedtls_mpi_copy>
   d8a7e:	4604      	mov	r4, r0
   d8a80:	2800      	cmp	r0, #0
   d8a82:	f040 80b7 	bne.w	d8bf4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d8a86:	f108 060c 	add.w	r6, r8, #12
   d8a8a:	f04f 0a01 	mov.w	sl, #1
    for( i = 1; i < T_size; i++ )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
   d8a8e:	f855 202a 	ldr.w	r2, [r5, sl, lsl #2]
   d8a92:	f1a6 010c 	sub.w	r1, r6, #12
   d8a96:	3218      	adds	r2, #24
   d8a98:	4630      	mov	r0, r6
   d8a9a:	f7fe f921 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8a9e:	4604      	mov	r4, r0
   d8aa0:	2800      	cmp	r0, #0
   d8aa2:	f040 80a7 	bne.w	d8bf4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        MOD_MUL( c[i] );
   d8aa6:	4639      	mov	r1, r7
   d8aa8:	4630      	mov	r0, r6
   d8aaa:	f7ff fce7 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8aae:	4604      	mov	r4, r0
   d8ab0:	2800      	cmp	r0, #0
   d8ab2:	f040 809f 	bne.w	d8bf4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>

    /*
     * c[i] = Z_0 * ... * Z_i
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
    for( i = 1; i < T_size; i++ )
   d8ab6:	f10a 0a01 	add.w	sl, sl, #1
   d8aba:	45d1      	cmp	r9, sl
   d8abc:	f106 060c 	add.w	r6, r6, #12
   d8ac0:	d1e5      	bne.n	d8a8e <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x66>
    }

    /*
     * u = 1 / (Z_0 * ... * Z_n) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );
   d8ac2:	260c      	movs	r6, #12
   d8ac4:	fb06 f609 	mul.w	r6, r6, r9
   d8ac8:	f1a6 010c 	sub.w	r1, r6, #12
   d8acc:	1d3a      	adds	r2, r7, #4
   d8ace:	4441      	add	r1, r8
   d8ad0:	a801      	add	r0, sp, #4
   d8ad2:	f7fe fe4b 	bl	d776c <mbedtls_mpi_inv_mod>
   d8ad6:	4604      	mov	r4, r0
   d8ad8:	2800      	cmp	r0, #0
   d8ada:	f040 808b 	bne.w	d8bf4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d8ade:	3e18      	subs	r6, #24

    for( i = T_size - 1; ; i-- )
   d8ae0:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
   d8ae4:	eb05 0589 	add.w	r5, r5, r9, lsl #2
   d8ae8:	4446      	add	r6, r8
    {
        /*
         * Zi = 1 / Z_i mod p
         * u = 1 / (Z_0 * ... * Z_i) mod P
         */
        if( i == 0 ) {
   d8aea:	f1ba 0f00 	cmp.w	sl, #0
   d8aee:	d10e      	bne.n	d8b0e <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0xe6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
   d8af0:	a901      	add	r1, sp, #4
   d8af2:	a804      	add	r0, sp, #16
   d8af4:	f7fd fd29 	bl	d654a <mbedtls_mpi_copy>
   d8af8:	4604      	mov	r4, r0
   d8afa:	2800      	cmp	r0, #0
   d8afc:	d17a      	bne.n	d8bf4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        }

        /*
         * proceed as in normalize()
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
   d8afe:	aa04      	add	r2, sp, #16
   d8b00:	4611      	mov	r1, r2
   d8b02:	a807      	add	r0, sp, #28
   d8b04:	f7fe f8ec 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8b08:	4604      	mov	r4, r0
   d8b0a:	b1f0      	cbz	r0, d8b4a <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x122>
   d8b0c:	e072      	b.n	d8bf4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        if( i == 0 ) {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
   d8b0e:	4632      	mov	r2, r6
   d8b10:	a901      	add	r1, sp, #4
   d8b12:	a804      	add	r0, sp, #16
   d8b14:	f7fe f8e4 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8b18:	4604      	mov	r4, r0
   d8b1a:	2800      	cmp	r0, #0
   d8b1c:	d16a      	bne.n	d8bf4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d8b1e:	4639      	mov	r1, r7
   d8b20:	a804      	add	r0, sp, #16
   d8b22:	f7ff fcab 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8b26:	4604      	mov	r4, r0
   d8b28:	2800      	cmp	r0, #0
   d8b2a:	d163      	bne.n	d8bf4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
   d8b2c:	f855 2c04 	ldr.w	r2, [r5, #-4]
   d8b30:	a901      	add	r1, sp, #4
   d8b32:	3218      	adds	r2, #24
   d8b34:	4608      	mov	r0, r1
   d8b36:	f7fe f8d3 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8b3a:	4604      	mov	r4, r0
   d8b3c:	2800      	cmp	r0, #0
   d8b3e:	d159      	bne.n	d8bf4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d8b40:	4639      	mov	r1, r7
   d8b42:	a801      	add	r0, sp, #4
   d8b44:	f7ff fc9a 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8b48:	e7d6      	b.n	d8af8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0xd0>
        }

        /*
         * proceed as in normalize()
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
   d8b4a:	4639      	mov	r1, r7
   d8b4c:	a807      	add	r0, sp, #28
   d8b4e:	f7ff fc95 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8b52:	4604      	mov	r4, r0
   d8b54:	2800      	cmp	r0, #0
   d8b56:	d14d      	bne.n	d8bf4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
   d8b58:	f855 1c04 	ldr.w	r1, [r5, #-4]
   d8b5c:	aa07      	add	r2, sp, #28
   d8b5e:	4608      	mov	r0, r1
   d8b60:	f7fe f8be 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8b64:	4604      	mov	r4, r0
   d8b66:	2800      	cmp	r0, #0
   d8b68:	d144      	bne.n	d8bf4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d8b6a:	4639      	mov	r1, r7
   d8b6c:	f855 0c04 	ldr.w	r0, [r5, #-4]
   d8b70:	f7ff fc84 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8b74:	4604      	mov	r4, r0
   d8b76:	2800      	cmp	r0, #0
   d8b78:	d13c      	bne.n	d8bf4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
   d8b7a:	f855 1c04 	ldr.w	r1, [r5, #-4]
   d8b7e:	310c      	adds	r1, #12
   d8b80:	aa07      	add	r2, sp, #28
   d8b82:	4608      	mov	r0, r1
   d8b84:	f7fe f8ac 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8b88:	4604      	mov	r4, r0
   d8b8a:	bb98      	cbnz	r0, d8bf4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d8b8c:	f855 0c04 	ldr.w	r0, [r5, #-4]
   d8b90:	4639      	mov	r1, r7
   d8b92:	300c      	adds	r0, #12
   d8b94:	f7ff fc72 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8b98:	4604      	mov	r4, r0
   d8b9a:	bb58      	cbnz	r0, d8bf4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
   d8b9c:	f855 1c04 	ldr.w	r1, [r5, #-4]
   d8ba0:	310c      	adds	r1, #12
   d8ba2:	aa04      	add	r2, sp, #16
   d8ba4:	4608      	mov	r0, r1
   d8ba6:	f7fe f89b 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8baa:	4604      	mov	r4, r0
   d8bac:	bb10      	cbnz	r0, d8bf4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d8bae:	f855 0c04 	ldr.w	r0, [r5, #-4]
   d8bb2:	4639      	mov	r1, r7
   d8bb4:	300c      	adds	r0, #12
   d8bb6:	f7ff fc61 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8bba:	4604      	mov	r4, r0
   d8bbc:	b9d0      	cbnz	r0, d8bf4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
         * Post-precessing: reclaim some memory by shrinking coordinates
         * - not storing Z (always 1)
         * - shrinking other coordinates, but still keeping the same number of
         *   limbs as P, as otherwise it will too likely be regrown too fast.
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
   d8bbe:	68b9      	ldr	r1, [r7, #8]
   d8bc0:	f855 0c04 	ldr.w	r0, [r5, #-4]
   d8bc4:	f7fd fc83 	bl	d64ce <mbedtls_mpi_shrink>
   d8bc8:	4604      	mov	r4, r0
   d8bca:	b998      	cbnz	r0, d8bf4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
   d8bcc:	f855 0c04 	ldr.w	r0, [r5, #-4]
   d8bd0:	68b9      	ldr	r1, [r7, #8]
   d8bd2:	300c      	adds	r0, #12
   d8bd4:	f7fd fc7b 	bl	d64ce <mbedtls_mpi_shrink>
   d8bd8:	4604      	mov	r4, r0
   d8bda:	b958      	cbnz	r0, d8bf4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        mbedtls_mpi_free( &T[i]->Z );
   d8bdc:	f855 0d04 	ldr.w	r0, [r5, #-4]!
   d8be0:	3018      	adds	r0, #24
   d8be2:	f7fd fc38 	bl	d6456 <mbedtls_mpi_free>
   d8be6:	3e0c      	subs	r6, #12

        if( i == 0 )
   d8be8:	f1ba 0f00 	cmp.w	sl, #0
   d8bec:	d002      	beq.n	d8bf4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
    /*
     * u = 1 / (Z_0 * ... * Z_n) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );

    for( i = T_size - 1; ; i-- )
   d8bee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   d8bf2:	e77a      	b.n	d8aea <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0xc2>
            break;
    }

cleanup:

    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
   d8bf4:	a801      	add	r0, sp, #4
   d8bf6:	f7fd fc2e 	bl	d6456 <mbedtls_mpi_free>
   d8bfa:	a804      	add	r0, sp, #16
   d8bfc:	f7fd fc2b 	bl	d6456 <mbedtls_mpi_free>
   d8c00:	a807      	add	r0, sp, #28
   d8c02:	f7fd fc28 	bl	d6456 <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
   d8c06:	2500      	movs	r5, #0
        mbedtls_mpi_free( &c[i] );
   d8c08:	260c      	movs	r6, #12
   d8c0a:	fb06 8005 	mla	r0, r6, r5, r8
    }

cleanup:

    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
    for( i = 0; i < T_size; i++ )
   d8c0e:	3501      	adds	r5, #1
        mbedtls_mpi_free( &c[i] );
   d8c10:	f7fd fc21 	bl	d6456 <mbedtls_mpi_free>
    }

cleanup:

    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
    for( i = 0; i < T_size; i++ )
   d8c14:	45a9      	cmp	r9, r5
   d8c16:	d1f8      	bne.n	d8c0a <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1e2>
        mbedtls_mpi_free( &c[i] );
    mbedtls_free( c );
   d8c18:	4640      	mov	r0, r8
   d8c1a:	f00c ff91 	bl	e5b40 <free>

    return( ret );
   d8c1e:	4620      	mov	r0, r4
   d8c20:	e000      	b.n	d8c24 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1fc>
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac_many( grp, T, T_size ) );
#endif

    if( ( c = (mbedtls_mpi *)mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
   d8c22:	4802      	ldr	r0, [pc, #8]	; (d8c2c <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x204>)
    for( i = 0; i < T_size; i++ )
        mbedtls_mpi_free( &c[i] );
    mbedtls_free( c );

    return( ret );
}
   d8c24:	b00a      	add	sp, #40	; 0x28
   d8c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8c2a:	bf00      	nop
   d8c2c:	ffffb280 	.word	0xffffb280

000d8c30 <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh>:
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
   d8c30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d8c32:	460c      	mov	r4, r1
   d8c34:	4605      	mov	r5, r0
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
   d8c36:	340c      	adds	r4, #12
{
    int ret;
    unsigned char nonzero;
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );
   d8c38:	a801      	add	r0, sp, #4
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
   d8c3a:	4616      	mov	r6, r2
    int ret;
    unsigned char nonzero;
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );
   d8c3c:	f7fd fc05 	bl	d644a <mbedtls_mpi_init>

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
   d8c40:	1d29      	adds	r1, r5, #4
   d8c42:	4622      	mov	r2, r4
   d8c44:	a801      	add	r0, sp, #4
   d8c46:	f7fd fffd 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d8c4a:	4605      	mov	r5, r0
   d8c4c:	b968      	cbnz	r0, d8c6a <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh+0x3a>
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
   d8c4e:	4601      	mov	r1, r0
   d8c50:	4620      	mov	r0, r4
   d8c52:	f7fd ff26 	bl	d6aa2 <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
   d8c56:	a901      	add	r1, sp, #4
   d8c58:	2800      	cmp	r0, #0
   d8c5a:	bf0c      	ite	eq
   d8c5c:	2200      	moveq	r2, #0
   d8c5e:	f006 0201 	andne.w	r2, r6, #1
   d8c62:	4620      	mov	r0, r4
   d8c64:	f7fd fc9d 	bl	d65a2 <mbedtls_mpi_safe_cond_assign>
   d8c68:	4605      	mov	r5, r0

cleanup:
    mbedtls_mpi_free( &mQY );
   d8c6a:	a801      	add	r0, sp, #4
   d8c6c:	f7fd fbf3 	bl	d6456 <mbedtls_mpi_free>

    return( ret );
}
   d8c70:	4628      	mov	r0, r5
   d8c72:	b004      	add	sp, #16
   d8c74:	bd70      	pop	{r4, r5, r6, pc}

000d8c76 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh>:
 * See ecp_comb_recode_core() for background
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                            const mbedtls_ecp_point T[], unsigned char T_size,
                            unsigned char i )
{
   d8c76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8c7a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d8c7e:	4680      	mov	r8, r0
   d8c80:	460e      	mov	r6, r1
   d8c82:	469b      	mov	fp, r3
    int ret;
    unsigned char ii, j;

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;
   d8c84:	f3c7 0a45 	ubfx	sl, r7, #1, #6
   d8c88:	f102 040c 	add.w	r4, r2, #12
   d8c8c:	2500      	movs	r5, #0

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
   d8c8e:	f101 090c 	add.w	r9, r1, #12

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
   d8c92:	455d      	cmp	r5, fp
   d8c94:	d017      	beq.n	d8cc6 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x50>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
   d8c96:	b2eb      	uxtb	r3, r5
   d8c98:	ebca 0203 	rsb	r2, sl, r3
   d8c9c:	4253      	negs	r3, r2
   d8c9e:	4153      	adcs	r3, r2
   d8ca0:	461a      	mov	r2, r3
   d8ca2:	f1a4 010c 	sub.w	r1, r4, #12
   d8ca6:	4630      	mov	r0, r6
   d8ca8:	9301      	str	r3, [sp, #4]
   d8caa:	f7fd fc7a 	bl	d65a2 <mbedtls_mpi_safe_cond_assign>
   d8cae:	b990      	cbnz	r0, d8cd6 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
   d8cb0:	9b01      	ldr	r3, [sp, #4]
   d8cb2:	4621      	mov	r1, r4
   d8cb4:	461a      	mov	r2, r3
   d8cb6:	4648      	mov	r0, r9
   d8cb8:	f7fd fc73 	bl	d65a2 <mbedtls_mpi_safe_cond_assign>
   d8cbc:	3501      	adds	r5, #1
   d8cbe:	3424      	adds	r4, #36	; 0x24
   d8cc0:	2800      	cmp	r0, #0
   d8cc2:	d0e6      	beq.n	d8c92 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x1c>
   d8cc4:	e007      	b.n	d8cd6 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x60>
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
   d8cc6:	09fa      	lsrs	r2, r7, #7
   d8cc8:	4631      	mov	r1, r6
   d8cca:	4640      	mov	r0, r8

cleanup:
    return( ret );
}
   d8ccc:	b003      	add	sp, #12
   d8cce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
   d8cd2:	f7ff bfad 	b.w	d8c30 <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh>

cleanup:
    return( ret );
}
   d8cd6:	b003      	add	sp, #12
   d8cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8cdc <mbedtls_ecp_grp_id_list>:
 */
const mbedtls_ecp_group_id *mbedtls_ecp_grp_id_list( void )
{
    static int init_done = 0;

    if( ! init_done )
   d8cdc:	4b05      	ldr	r3, [pc, #20]	; (d8cf4 <mbedtls_ecp_grp_id_list+0x18>)
   d8cde:	6819      	ldr	r1, [r3, #0]
   d8ce0:	b929      	cbnz	r1, d8cee <mbedtls_ecp_grp_id_list+0x12>

        for( curve_info = mbedtls_ecp_curve_list();
             curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
             curve_info++ )
        {
            ecp_supported_grp_id[i++] = curve_info->grp_id;
   d8ce2:	4a05      	ldr	r2, [pc, #20]	; (d8cf8 <mbedtls_ecp_grp_id_list+0x1c>)
   d8ce4:	2003      	movs	r0, #3
   d8ce6:	7010      	strb	r0, [r2, #0]
        }
        ecp_supported_grp_id[i] = MBEDTLS_ECP_DP_NONE;
   d8ce8:	7051      	strb	r1, [r2, #1]

        init_done = 1;
   d8cea:	2201      	movs	r2, #1
   d8cec:	601a      	str	r2, [r3, #0]
    }

    return( ecp_supported_grp_id );
}
   d8cee:	4802      	ldr	r0, [pc, #8]	; (d8cf8 <mbedtls_ecp_grp_id_list+0x1c>)
   d8cf0:	4770      	bx	lr
   d8cf2:	bf00      	nop
   d8cf4:	2003e39c 	.word	0x2003e39c
   d8cf8:	2003e3a0 	.word	0x2003e3a0

000d8cfc <mbedtls_ecp_curve_info_from_grp_id>:
 */
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_grp_id( mbedtls_ecp_group_id grp_id )
{
    const mbedtls_ecp_curve_info *curve_info;

    for( curve_info = mbedtls_ecp_curve_list();
   d8cfc:	4b05      	ldr	r3, [pc, #20]	; (d8d14 <mbedtls_ecp_curve_info_from_grp_id+0x18>)
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
   d8cfe:	781a      	ldrb	r2, [r3, #0]
   d8d00:	b11a      	cbz	r2, d8d0a <mbedtls_ecp_curve_info_from_grp_id+0xe>
         curve_info++ )
    {
        if( curve_info->grp_id == grp_id )
   d8d02:	4282      	cmp	r2, r0
   d8d04:	d003      	beq.n	d8d0e <mbedtls_ecp_curve_info_from_grp_id+0x12>
 */
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_grp_id( mbedtls_ecp_group_id grp_id )
{
    const mbedtls_ecp_curve_info *curve_info;

    for( curve_info = mbedtls_ecp_curve_list();
   d8d06:	330c      	adds	r3, #12
   d8d08:	e7f9      	b.n	d8cfe <mbedtls_ecp_curve_info_from_grp_id+0x2>
    {
        if( curve_info->grp_id == grp_id )
            return( curve_info );
    }

    return( NULL );
   d8d0a:	4610      	mov	r0, r2
   d8d0c:	4770      	bx	lr
   d8d0e:	4618      	mov	r0, r3
}
   d8d10:	4770      	bx	lr
   d8d12:	bf00      	nop
   d8d14:	000e8444 	.word	0x000e8444

000d8d18 <mbedtls_ecp_curve_info_from_tls_id>:
 */
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_tls_id( uint16_t tls_id )
{
    const mbedtls_ecp_curve_info *curve_info;

    for( curve_info = mbedtls_ecp_curve_list();
   d8d18:	4b05      	ldr	r3, [pc, #20]	; (d8d30 <mbedtls_ecp_curve_info_from_tls_id+0x18>)
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
   d8d1a:	781a      	ldrb	r2, [r3, #0]
   d8d1c:	b122      	cbz	r2, d8d28 <mbedtls_ecp_curve_info_from_tls_id+0x10>
         curve_info++ )
    {
        if( curve_info->tls_id == tls_id )
   d8d1e:	885a      	ldrh	r2, [r3, #2]
   d8d20:	4282      	cmp	r2, r0
   d8d22:	d003      	beq.n	d8d2c <mbedtls_ecp_curve_info_from_tls_id+0x14>
 */
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_tls_id( uint16_t tls_id )
{
    const mbedtls_ecp_curve_info *curve_info;

    for( curve_info = mbedtls_ecp_curve_list();
   d8d24:	330c      	adds	r3, #12
   d8d26:	e7f8      	b.n	d8d1a <mbedtls_ecp_curve_info_from_tls_id+0x2>
    {
        if( curve_info->tls_id == tls_id )
            return( curve_info );
    }

    return( NULL );
   d8d28:	4610      	mov	r0, r2
   d8d2a:	4770      	bx	lr
   d8d2c:	4618      	mov	r0, r3
}
   d8d2e:	4770      	bx	lr
   d8d30:	000e8444 	.word	0x000e8444

000d8d34 <mbedtls_ecp_point_init>:

/*
 * Initialize (the components of) a point
 */
void mbedtls_ecp_point_init( mbedtls_ecp_point *pt )
{
   d8d34:	b510      	push	{r4, lr}
   d8d36:	4604      	mov	r4, r0
    ECP_VALIDATE( pt != NULL );

    mbedtls_mpi_init( &pt->X );
   d8d38:	f7fd fb87 	bl	d644a <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
   d8d3c:	f104 000c 	add.w	r0, r4, #12
   d8d40:	f7fd fb83 	bl	d644a <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
   d8d44:	f104 0018 	add.w	r0, r4, #24
}
   d8d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    ECP_VALIDATE( pt != NULL );

    mbedtls_mpi_init( &pt->X );
    mbedtls_mpi_init( &pt->Y );
    mbedtls_mpi_init( &pt->Z );
   d8d4c:	f7fd bb7d 	b.w	d644a <mbedtls_mpi_init>

000d8d50 <mbedtls_ecp_group_init>:

/*
 * Initialize (the components of) a group
 */
void mbedtls_ecp_group_init( mbedtls_ecp_group *grp )
{
   d8d50:	b538      	push	{r3, r4, r5, lr}
    ECP_VALIDATE( grp != NULL );

    grp->id = MBEDTLS_ECP_DP_NONE;
   d8d52:	2500      	movs	r5, #0

/*
 * Initialize (the components of) a group
 */
void mbedtls_ecp_group_init( mbedtls_ecp_group *grp )
{
   d8d54:	4604      	mov	r4, r0
    ECP_VALIDATE( grp != NULL );

    grp->id = MBEDTLS_ECP_DP_NONE;
   d8d56:	f800 5b04 	strb.w	r5, [r0], #4
    mbedtls_mpi_init( &grp->P );
   d8d5a:	f7fd fb76 	bl	d644a <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->A );
   d8d5e:	f104 0010 	add.w	r0, r4, #16
   d8d62:	f7fd fb72 	bl	d644a <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->B );
   d8d66:	f104 001c 	add.w	r0, r4, #28
   d8d6a:	f7fd fb6e 	bl	d644a <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &grp->G );
   d8d6e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d8d72:	f7ff ffdf 	bl	d8d34 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &grp->N );
   d8d76:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d8d7a:	f7fd fb66 	bl	d644a <mbedtls_mpi_init>
    grp->pbits = 0;
   d8d7e:	65a5      	str	r5, [r4, #88]	; 0x58
    grp->nbits = 0;
   d8d80:	65e5      	str	r5, [r4, #92]	; 0x5c
    grp->h = 0;
   d8d82:	6625      	str	r5, [r4, #96]	; 0x60
    grp->modp = NULL;
   d8d84:	6665      	str	r5, [r4, #100]	; 0x64
    grp->t_pre = NULL;
   d8d86:	66a5      	str	r5, [r4, #104]	; 0x68
    grp->t_post = NULL;
   d8d88:	66e5      	str	r5, [r4, #108]	; 0x6c
    grp->t_data = NULL;
   d8d8a:	6725      	str	r5, [r4, #112]	; 0x70
    grp->T = NULL;
   d8d8c:	6765      	str	r5, [r4, #116]	; 0x74
    grp->T_size = 0;
   d8d8e:	67a5      	str	r5, [r4, #120]	; 0x78
   d8d90:	bd38      	pop	{r3, r4, r5, pc}

000d8d92 <mbedtls_ecp_keypair_init>:

/*
 * Initialize (the components of) a key pair
 */
void mbedtls_ecp_keypair_init( mbedtls_ecp_keypair *key )
{
   d8d92:	b510      	push	{r4, lr}
   d8d94:	4604      	mov	r4, r0
    ECP_VALIDATE( key != NULL );

    mbedtls_ecp_group_init( &key->grp );
   d8d96:	f7ff ffdb 	bl	d8d50 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
   d8d9a:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   d8d9e:	f7fd fb54 	bl	d644a <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
   d8da2:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
   d8da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    ECP_VALIDATE( key != NULL );

    mbedtls_ecp_group_init( &key->grp );
    mbedtls_mpi_init( &key->d );
    mbedtls_ecp_point_init( &key->Q );
   d8daa:	f7ff bfc3 	b.w	d8d34 <mbedtls_ecp_point_init>

000d8dae <mbedtls_ecp_point_free>:

/*
 * Unallocate (the components of) a point
 */
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
{
   d8dae:	b510      	push	{r4, lr}
    if( pt == NULL )
   d8db0:	4604      	mov	r4, r0
   d8db2:	b158      	cbz	r0, d8dcc <mbedtls_ecp_point_free+0x1e>
        return;

    mbedtls_mpi_free( &( pt->X ) );
   d8db4:	f7fd fb4f 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
   d8db8:	f104 000c 	add.w	r0, r4, #12
   d8dbc:	f7fd fb4b 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
   d8dc0:	f104 0018 	add.w	r0, r4, #24
}
   d8dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if( pt == NULL )
        return;

    mbedtls_mpi_free( &( pt->X ) );
    mbedtls_mpi_free( &( pt->Y ) );
    mbedtls_mpi_free( &( pt->Z ) );
   d8dc8:	f7fd bb45 	b.w	d6456 <mbedtls_mpi_free>
   d8dcc:	bd10      	pop	{r4, pc}

000d8dce <mbedtls_ecp_group_free>:

/*
 * Unallocate (the components of) a group
 */
void mbedtls_ecp_group_free( mbedtls_ecp_group *grp )
{
   d8dce:	b570      	push	{r4, r5, r6, lr}
    size_t i;

    if( grp == NULL )
   d8dd0:	4604      	mov	r4, r0
   d8dd2:	b358      	cbz	r0, d8e2c <mbedtls_ecp_group_free+0x5e>
        return;

    if( grp->h != 1 )
   d8dd4:	6e03      	ldr	r3, [r0, #96]	; 0x60
   d8dd6:	2b01      	cmp	r3, #1
   d8dd8:	d012      	beq.n	d8e00 <mbedtls_ecp_group_free+0x32>
    {
        mbedtls_mpi_free( &grp->P );
   d8dda:	3004      	adds	r0, #4
   d8ddc:	f7fd fb3b 	bl	d6456 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
   d8de0:	f104 0010 	add.w	r0, r4, #16
   d8de4:	f7fd fb37 	bl	d6456 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
   d8de8:	f104 001c 	add.w	r0, r4, #28
   d8dec:	f7fd fb33 	bl	d6456 <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
   d8df0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d8df4:	f7ff ffdb 	bl	d8dae <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
   d8df8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d8dfc:	f7fd fb2b 	bl	d6456 <mbedtls_mpi_free>
    }

    if( grp->T != NULL )
   d8e00:	6f63      	ldr	r3, [r4, #116]	; 0x74
   d8e02:	b16b      	cbz	r3, d8e20 <mbedtls_ecp_group_free+0x52>
   d8e04:	2500      	movs	r5, #0
    {
        for( i = 0; i < grp->T_size; i++ )
            mbedtls_ecp_point_free( &grp->T[i] );
   d8e06:	2624      	movs	r6, #36	; 0x24
        mbedtls_mpi_free( &grp->N );
    }

    if( grp->T != NULL )
    {
        for( i = 0; i < grp->T_size; i++ )
   d8e08:	6fa3      	ldr	r3, [r4, #120]	; 0x78
            mbedtls_ecp_point_free( &grp->T[i] );
        mbedtls_free( grp->T );
   d8e0a:	6f60      	ldr	r0, [r4, #116]	; 0x74
        mbedtls_mpi_free( &grp->N );
    }

    if( grp->T != NULL )
    {
        for( i = 0; i < grp->T_size; i++ )
   d8e0c:	429d      	cmp	r5, r3
   d8e0e:	d205      	bcs.n	d8e1c <mbedtls_ecp_group_free+0x4e>
            mbedtls_ecp_point_free( &grp->T[i] );
   d8e10:	fb06 0005 	mla	r0, r6, r5, r0
   d8e14:	f7ff ffcb 	bl	d8dae <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
    }

    if( grp->T != NULL )
    {
        for( i = 0; i < grp->T_size; i++ )
   d8e18:	3501      	adds	r5, #1
   d8e1a:	e7f5      	b.n	d8e08 <mbedtls_ecp_group_free+0x3a>
            mbedtls_ecp_point_free( &grp->T[i] );
        mbedtls_free( grp->T );
   d8e1c:	f00c fe90 	bl	e5b40 <free>
    }

    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
   d8e20:	4620      	mov	r0, r4
   d8e22:	217c      	movs	r1, #124	; 0x7c
}
   d8e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        for( i = 0; i < grp->T_size; i++ )
            mbedtls_ecp_point_free( &grp->T[i] );
        mbedtls_free( grp->T );
    }

    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
   d8e28:	f003 bbe2 	b.w	dc5f0 <mbedtls_platform_zeroize>
   d8e2c:	bd70      	pop	{r4, r5, r6, pc}

000d8e2e <mbedtls_ecp_keypair_free>:

/*
 * Unallocate (the components of) a key pair
 */
void mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key )
{
   d8e2e:	b510      	push	{r4, lr}
    if( key == NULL )
   d8e30:	4604      	mov	r4, r0
   d8e32:	b158      	cbz	r0, d8e4c <mbedtls_ecp_keypair_free+0x1e>
        return;

    mbedtls_ecp_group_free( &key->grp );
   d8e34:	f7ff ffcb 	bl	d8dce <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
   d8e38:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   d8e3c:	f7fd fb0b 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
   d8e40:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
   d8e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if( key == NULL )
        return;

    mbedtls_ecp_group_free( &key->grp );
    mbedtls_mpi_free( &key->d );
    mbedtls_ecp_point_free( &key->Q );
   d8e48:	f7ff bfb1 	b.w	d8dae <mbedtls_ecp_point_free>
   d8e4c:	bd10      	pop	{r4, pc}

000d8e4e <mbedtls_ecp_copy>:

/*
 * Copy the contents of a point
 */
int mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
   d8e4e:	b538      	push	{r3, r4, r5, lr}
   d8e50:	4604      	mov	r4, r0
   d8e52:	460d      	mov	r5, r1
    int ret;
    ECP_VALIDATE_RET( P != NULL );
    ECP_VALIDATE_RET( Q != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
   d8e54:	f7fd fb79 	bl	d654a <mbedtls_mpi_copy>
   d8e58:	b970      	cbnz	r0, d8e78 <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
   d8e5a:	f105 010c 	add.w	r1, r5, #12
   d8e5e:	f104 000c 	add.w	r0, r4, #12
   d8e62:	f7fd fb72 	bl	d654a <mbedtls_mpi_copy>
   d8e66:	b938      	cbnz	r0, d8e78 <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
   d8e68:	f105 0118 	add.w	r1, r5, #24
   d8e6c:	f104 0018 	add.w	r0, r4, #24

cleanup:
    return( ret );
}
   d8e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ECP_VALIDATE_RET( P != NULL );
    ECP_VALIDATE_RET( Q != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
   d8e74:	f7fd bb69 	b.w	d654a <mbedtls_mpi_copy>

cleanup:
    return( ret );
}
   d8e78:	bd38      	pop	{r3, r4, r5, pc}

000d8e7a <mbedtls_ecp_group_copy>:
int mbedtls_ecp_group_copy( mbedtls_ecp_group *dst, const mbedtls_ecp_group *src )
{
    ECP_VALIDATE_RET( dst != NULL );
    ECP_VALIDATE_RET( src != NULL );

    return( mbedtls_ecp_group_load( dst, src->id ) );
   d8e7a:	7809      	ldrb	r1, [r1, #0]
   d8e7c:	f001 b9e6 	b.w	da24c <mbedtls_ecp_group_load>

000d8e80 <mbedtls_ecp_set_zero>:

/*
 * Set point to zero
 */
int mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )
{
   d8e80:	b510      	push	{r4, lr}
    int ret;
    ECP_VALIDATE_RET( pt != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
   d8e82:	2101      	movs	r1, #1

/*
 * Set point to zero
 */
int mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )
{
   d8e84:	4604      	mov	r4, r0
    int ret;
    ECP_VALIDATE_RET( pt != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
   d8e86:	f7fd fbc1 	bl	d660c <mbedtls_mpi_lset>
   d8e8a:	b960      	cbnz	r0, d8ea6 <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
   d8e8c:	2101      	movs	r1, #1
   d8e8e:	f104 000c 	add.w	r0, r4, #12
   d8e92:	f7fd fbbb 	bl	d660c <mbedtls_mpi_lset>
   d8e96:	b930      	cbnz	r0, d8ea6 <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
   d8e98:	4601      	mov	r1, r0
   d8e9a:	f104 0018 	add.w	r0, r4, #24

cleanup:
    return( ret );
}
   d8e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    int ret;
    ECP_VALIDATE_RET( pt != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
   d8ea2:	f7fd bbb3 	b.w	d660c <mbedtls_mpi_lset>

cleanup:
    return( ret );
}
   d8ea6:	bd10      	pop	{r4, pc}

000d8ea8 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>:
 *
 * Cost: 1A := 8M + 3S
 */
static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
   d8ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */

    /*
     * Trivial cases: P == 0 or Q == 0 (case 1)
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d8eac:	f102 0918 	add.w	r9, r2, #24
 *
 * Cost: 1A := 8M + 3S
 */
static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
   d8eb0:	b096      	sub	sp, #88	; 0x58
   d8eb2:	4605      	mov	r5, r0
   d8eb4:	460e      	mov	r6, r1
#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */

    /*
     * Trivial cases: P == 0 or Q == 0 (case 1)
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d8eb6:	4648      	mov	r0, r9
   d8eb8:	2100      	movs	r1, #0
 *
 * Cost: 1A := 8M + 3S
 */
static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
   d8eba:	4690      	mov	r8, r2
   d8ebc:	461f      	mov	r7, r3
#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */

    /*
     * Trivial cases: P == 0 or Q == 0 (case 1)
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d8ebe:	f7fd fdf0 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d8ec2:	b908      	cbnz	r0, d8ec8 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x20>
        return( mbedtls_ecp_copy( R, Q ) );
   d8ec4:	4639      	mov	r1, r7
   d8ec6:	e008      	b.n	d8eda <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x32>

    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
   d8ec8:	6a3b      	ldr	r3, [r7, #32]
   d8eca:	b153      	cbz	r3, d8ee2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3a>
   d8ecc:	2100      	movs	r1, #0
   d8ece:	f107 0018 	add.w	r0, r7, #24
   d8ed2:	f7fd fde6 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d8ed6:	b920      	cbnz	r0, d8ee2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3a>
        return( mbedtls_ecp_copy( R, P ) );
   d8ed8:	4641      	mov	r1, r8
   d8eda:	4630      	mov	r0, r6
   d8edc:	f7ff ffb7 	bl	d8e4e <mbedtls_ecp_copy>
   d8ee0:	e1bd      	b.n	d925e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3b6>

    /*
     * Make sure Q coordinates are normalized
     */
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
   d8ee2:	6a3b      	ldr	r3, [r7, #32]
   d8ee4:	b13b      	cbz	r3, d8ef6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x4e>
   d8ee6:	2101      	movs	r1, #1
   d8ee8:	f107 0018 	add.w	r0, r7, #24
   d8eec:	f7fd fdd9 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d8ef0:	2800      	cmp	r0, #0
   d8ef2:	f040 8095 	bne.w	d9020 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x178>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
   d8ef6:	a801      	add	r0, sp, #4
   d8ef8:	f7fd faa7 	bl	d644a <mbedtls_mpi_init>
   d8efc:	a804      	add	r0, sp, #16
   d8efe:	f7fd faa4 	bl	d644a <mbedtls_mpi_init>
   d8f02:	a807      	add	r0, sp, #28
   d8f04:	f7fd faa1 	bl	d644a <mbedtls_mpi_init>
   d8f08:	a80a      	add	r0, sp, #40	; 0x28
   d8f0a:	f7fd fa9e 	bl	d644a <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
   d8f0e:	a80d      	add	r0, sp, #52	; 0x34
   d8f10:	f7fd fa9b 	bl	d644a <mbedtls_mpi_init>
   d8f14:	a810      	add	r0, sp, #64	; 0x40
   d8f16:	f7fd fa98 	bl	d644a <mbedtls_mpi_init>
   d8f1a:	a813      	add	r0, sp, #76	; 0x4c
   d8f1c:	f7fd fa95 	bl	d644a <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
   d8f20:	464a      	mov	r2, r9
   d8f22:	4649      	mov	r1, r9
   d8f24:	a801      	add	r0, sp, #4
   d8f26:	f7fd fedb 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8f2a:	4604      	mov	r4, r0
   d8f2c:	2800      	cmp	r0, #0
   d8f2e:	d160      	bne.n	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d8f30:	4629      	mov	r1, r5
   d8f32:	a801      	add	r0, sp, #4
   d8f34:	f7ff faa2 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8f38:	4604      	mov	r4, r0
   d8f3a:	2800      	cmp	r0, #0
   d8f3c:	d159      	bne.n	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
   d8f3e:	464a      	mov	r2, r9
   d8f40:	a901      	add	r1, sp, #4
   d8f42:	a804      	add	r0, sp, #16
   d8f44:	f7fd fecc 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8f48:	4604      	mov	r4, r0
   d8f4a:	2800      	cmp	r0, #0
   d8f4c:	d151      	bne.n	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d8f4e:	4629      	mov	r1, r5
   d8f50:	a804      	add	r0, sp, #16
   d8f52:	f7ff fa93 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8f56:	4604      	mov	r4, r0
   d8f58:	2800      	cmp	r0, #0
   d8f5a:	d14a      	bne.n	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
   d8f5c:	a901      	add	r1, sp, #4
   d8f5e:	463a      	mov	r2, r7
   d8f60:	4608      	mov	r0, r1
   d8f62:	f7fd febd 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8f66:	4604      	mov	r4, r0
   d8f68:	2800      	cmp	r0, #0
   d8f6a:	d142      	bne.n	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d8f6c:	4629      	mov	r1, r5
   d8f6e:	a801      	add	r0, sp, #4
   d8f70:	f7ff fa84 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8f74:	4604      	mov	r4, r0
   d8f76:	2800      	cmp	r0, #0
   d8f78:	d13b      	bne.n	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
   d8f7a:	a904      	add	r1, sp, #16
   d8f7c:	f107 020c 	add.w	r2, r7, #12
   d8f80:	4608      	mov	r0, r1
   d8f82:	f7fd fead 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8f86:	4604      	mov	r4, r0
   d8f88:	2800      	cmp	r0, #0
   d8f8a:	d132      	bne.n	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d8f8c:	4629      	mov	r1, r5
   d8f8e:	a804      	add	r0, sp, #16
   d8f90:	f7ff fa74 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8f94:	4604      	mov	r4, r0
   d8f96:	bb60      	cbnz	r0, d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
   d8f98:	a901      	add	r1, sp, #4
   d8f9a:	4642      	mov	r2, r8
   d8f9c:	4608      	mov	r0, r1
   d8f9e:	f7fd fe51 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d8fa2:	4604      	mov	r4, r0
   d8fa4:	bb28      	cbnz	r0, d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d8fa6:	1d2f      	adds	r7, r5, #4
   d8fa8:	9b01      	ldr	r3, [sp, #4]
   d8faa:	2b00      	cmp	r3, #0
   d8fac:	da05      	bge.n	d8fba <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x112>
   d8fae:	2100      	movs	r1, #0
   d8fb0:	a801      	add	r0, sp, #4
   d8fb2:	f7fd fd76 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d8fb6:	2800      	cmp	r0, #0
   d8fb8:	d134      	bne.n	d9024 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x17c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
   d8fba:	a904      	add	r1, sp, #16
   d8fbc:	f108 0a0c 	add.w	sl, r8, #12
   d8fc0:	4652      	mov	r2, sl
   d8fc2:	4608      	mov	r0, r1
   d8fc4:	f7fd fe3e 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d8fc8:	4604      	mov	r4, r0
   d8fca:	b990      	cbnz	r0, d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d8fcc:	1d2f      	adds	r7, r5, #4
   d8fce:	9b04      	ldr	r3, [sp, #16]
   d8fd0:	2b00      	cmp	r3, #0
   d8fd2:	db30      	blt.n	d9036 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x18e>

    /* Special cases (2) and (3) */
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
   d8fd4:	2100      	movs	r1, #0
   d8fd6:	a801      	add	r0, sp, #4
   d8fd8:	f7fd fd63 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d8fdc:	4601      	mov	r1, r0
   d8fde:	2800      	cmp	r0, #0
   d8fe0:	d038      	beq.n	d9054 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x1ac>
            ret = mbedtls_ecp_set_zero( R );
            goto cleanup;
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
   d8fe2:	aa01      	add	r2, sp, #4
   d8fe4:	4649      	mov	r1, r9
   d8fe6:	a813      	add	r0, sp, #76	; 0x4c
   d8fe8:	f7fd fe7a 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d8fec:	4604      	mov	r4, r0
   d8fee:	2800      	cmp	r0, #0
   d8ff0:	d03e      	beq.n	d9070 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x1c8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );

cleanup:

    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
   d8ff2:	a801      	add	r0, sp, #4
   d8ff4:	f7fd fa2f 	bl	d6456 <mbedtls_mpi_free>
   d8ff8:	a804      	add	r0, sp, #16
   d8ffa:	f7fd fa2c 	bl	d6456 <mbedtls_mpi_free>
   d8ffe:	a807      	add	r0, sp, #28
   d9000:	f7fd fa29 	bl	d6456 <mbedtls_mpi_free>
   d9004:	a80a      	add	r0, sp, #40	; 0x28
   d9006:	f7fd fa26 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
   d900a:	a80d      	add	r0, sp, #52	; 0x34
   d900c:	f7fd fa23 	bl	d6456 <mbedtls_mpi_free>
   d9010:	a810      	add	r0, sp, #64	; 0x40
   d9012:	f7fd fa20 	bl	d6456 <mbedtls_mpi_free>
   d9016:	a813      	add	r0, sp, #76	; 0x4c
   d9018:	f7fd fa1d 	bl	d6456 <mbedtls_mpi_free>

    return( ret );
   d901c:	4620      	mov	r0, r4
   d901e:	e11e      	b.n	d925e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3b6>

    /*
     * Make sure Q coordinates are normalized
     */
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d9020:	4890      	ldr	r0, [pc, #576]	; (d9264 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3bc>)
   d9022:	e11c      	b.n	d925e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3b6>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
   d9024:	a901      	add	r1, sp, #4
   d9026:	463a      	mov	r2, r7
   d9028:	4608      	mov	r0, r1
   d902a:	f7fd fdea 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d902e:	4604      	mov	r4, r0
   d9030:	2800      	cmp	r0, #0
   d9032:	d0b9      	beq.n	d8fa8 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x100>
   d9034:	e7dd      	b.n	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
   d9036:	2100      	movs	r1, #0
   d9038:	a804      	add	r0, sp, #16
   d903a:	f7fd fd32 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d903e:	2800      	cmp	r0, #0
   d9040:	d0c8      	beq.n	d8fd4 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x12c>
   d9042:	a904      	add	r1, sp, #16
   d9044:	463a      	mov	r2, r7
   d9046:	4608      	mov	r0, r1
   d9048:	f7fd fddb 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d904c:	4604      	mov	r4, r0
   d904e:	2800      	cmp	r0, #0
   d9050:	d0bd      	beq.n	d8fce <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x126>
   d9052:	e7ce      	b.n	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>

    /* Special cases (2) and (3) */
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
    {
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
   d9054:	a804      	add	r0, sp, #16
   d9056:	f7fd fd24 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d905a:	b928      	cbnz	r0, d9068 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x1c0>
        {
            ret = ecp_double_jac( grp, R, P );
   d905c:	4642      	mov	r2, r8
   d905e:	4631      	mov	r1, r6
   d9060:	4628      	mov	r0, r5
   d9062:	f7ff fa4f 	bl	d8504 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>
   d9066:	e0ce      	b.n	d9206 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x35e>
            goto cleanup;
        }
        else
        {
            ret = mbedtls_ecp_set_zero( R );
   d9068:	4630      	mov	r0, r6
   d906a:	f7ff ff09 	bl	d8e80 <mbedtls_ecp_set_zero>
   d906e:	e0ca      	b.n	d9206 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x35e>
            goto cleanup;
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
   d9070:	4629      	mov	r1, r5
   d9072:	a813      	add	r0, sp, #76	; 0x4c
   d9074:	f7ff fa02 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9078:	4604      	mov	r4, r0
   d907a:	2800      	cmp	r0, #0
   d907c:	d1b9      	bne.n	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
   d907e:	aa01      	add	r2, sp, #4
   d9080:	4611      	mov	r1, r2
   d9082:	a807      	add	r0, sp, #28
   d9084:	f7fd fe2c 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d9088:	4604      	mov	r4, r0
   d908a:	2800      	cmp	r0, #0
   d908c:	d1b1      	bne.n	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d908e:	4629      	mov	r1, r5
   d9090:	a807      	add	r0, sp, #28
   d9092:	f7ff f9f3 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9096:	4604      	mov	r4, r0
   d9098:	2800      	cmp	r0, #0
   d909a:	d1aa      	bne.n	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
   d909c:	aa01      	add	r2, sp, #4
   d909e:	a907      	add	r1, sp, #28
   d90a0:	a80a      	add	r0, sp, #40	; 0x28
   d90a2:	f7fd fe1d 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d90a6:	4604      	mov	r4, r0
   d90a8:	2800      	cmp	r0, #0
   d90aa:	d1a2      	bne.n	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d90ac:	4629      	mov	r1, r5
   d90ae:	a80a      	add	r0, sp, #40	; 0x28
   d90b0:	f7ff f9e4 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d90b4:	4604      	mov	r4, r0
   d90b6:	2800      	cmp	r0, #0
   d90b8:	d19b      	bne.n	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
   d90ba:	a907      	add	r1, sp, #28
   d90bc:	4642      	mov	r2, r8
   d90be:	4608      	mov	r0, r1
   d90c0:	f7fd fe0e 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d90c4:	4604      	mov	r4, r0
   d90c6:	2800      	cmp	r0, #0
   d90c8:	d193      	bne.n	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d90ca:	4629      	mov	r1, r5
   d90cc:	a807      	add	r0, sp, #28
   d90ce:	f7ff f9d5 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d90d2:	4604      	mov	r4, r0
   d90d4:	2800      	cmp	r0, #0
   d90d6:	d18c      	bne.n	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
   d90d8:	2202      	movs	r2, #2
   d90da:	a907      	add	r1, sp, #28
   d90dc:	a801      	add	r0, sp, #4
   d90de:	f7fd fe6e 	bl	d6dbe <mbedtls_mpi_mul_int>
   d90e2:	4604      	mov	r4, r0
   d90e4:	2800      	cmp	r0, #0
   d90e6:	d184      	bne.n	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d90e8:	1d2f      	adds	r7, r5, #4
   d90ea:	4639      	mov	r1, r7
   d90ec:	a801      	add	r0, sp, #4
   d90ee:	f7fd fc93 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d90f2:	2800      	cmp	r0, #0
   d90f4:	db08      	blt.n	d9108 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x260>
   d90f6:	a901      	add	r1, sp, #4
   d90f8:	463a      	mov	r2, r7
   d90fa:	4608      	mov	r0, r1
   d90fc:	f7fd fd41 	bl	d6b82 <mbedtls_mpi_sub_abs>
   d9100:	4604      	mov	r4, r0
   d9102:	2800      	cmp	r0, #0
   d9104:	d0f1      	beq.n	d90ea <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x242>
   d9106:	e774      	b.n	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
   d9108:	aa04      	add	r2, sp, #16
   d910a:	4611      	mov	r1, r2
   d910c:	a80d      	add	r0, sp, #52	; 0x34
   d910e:	f7fd fde7 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d9112:	4604      	mov	r4, r0
   d9114:	2800      	cmp	r0, #0
   d9116:	f47f af6c 	bne.w	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d911a:	4629      	mov	r1, r5
   d911c:	a80d      	add	r0, sp, #52	; 0x34
   d911e:	f7ff f9ad 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9122:	4604      	mov	r4, r0
   d9124:	2800      	cmp	r0, #0
   d9126:	f47f af64 	bne.w	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
   d912a:	a90d      	add	r1, sp, #52	; 0x34
   d912c:	aa01      	add	r2, sp, #4
   d912e:	4608      	mov	r0, r1
   d9130:	f7fd fd88 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d9134:	4604      	mov	r4, r0
   d9136:	2800      	cmp	r0, #0
   d9138:	f47f af5b 	bne.w	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d913c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d913e:	2b00      	cmp	r3, #0
   d9140:	da05      	bge.n	d914e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2a6>
   d9142:	2100      	movs	r1, #0
   d9144:	a80d      	add	r0, sp, #52	; 0x34
   d9146:	f7fd fcac 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d914a:	2800      	cmp	r0, #0
   d914c:	d15d      	bne.n	d920a <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x362>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
   d914e:	a90d      	add	r1, sp, #52	; 0x34
   d9150:	aa0a      	add	r2, sp, #40	; 0x28
   d9152:	4608      	mov	r0, r1
   d9154:	f7fd fd76 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d9158:	4604      	mov	r4, r0
   d915a:	2800      	cmp	r0, #0
   d915c:	f47f af49 	bne.w	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d9160:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d9162:	2b00      	cmp	r3, #0
   d9164:	db57      	blt.n	d9216 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x36e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
   d9166:	a907      	add	r1, sp, #28
   d9168:	aa0d      	add	r2, sp, #52	; 0x34
   d916a:	4608      	mov	r0, r1
   d916c:	f7fd fd6a 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d9170:	4604      	mov	r4, r0
   d9172:	2800      	cmp	r0, #0
   d9174:	f47f af3d 	bne.w	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d9178:	9b07      	ldr	r3, [sp, #28]
   d917a:	2b00      	cmp	r3, #0
   d917c:	db57      	blt.n	d922e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x386>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
   d917e:	a907      	add	r1, sp, #28
   d9180:	aa04      	add	r2, sp, #16
   d9182:	4608      	mov	r0, r1
   d9184:	f7fd fdac 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d9188:	4604      	mov	r4, r0
   d918a:	2800      	cmp	r0, #0
   d918c:	f47f af31 	bne.w	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d9190:	4629      	mov	r1, r5
   d9192:	a807      	add	r0, sp, #28
   d9194:	f7ff f972 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9198:	4604      	mov	r4, r0
   d919a:	2800      	cmp	r0, #0
   d919c:	f47f af29 	bne.w	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
   d91a0:	a90a      	add	r1, sp, #40	; 0x28
   d91a2:	4652      	mov	r2, sl
   d91a4:	4608      	mov	r0, r1
   d91a6:	f7fd fd9b 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d91aa:	4604      	mov	r4, r0
   d91ac:	2800      	cmp	r0, #0
   d91ae:	f47f af20 	bne.w	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d91b2:	4629      	mov	r1, r5
   d91b4:	a80a      	add	r0, sp, #40	; 0x28
   d91b6:	f7ff f961 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d91ba:	4604      	mov	r4, r0
   d91bc:	2800      	cmp	r0, #0
   d91be:	f47f af18 	bne.w	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
   d91c2:	aa0a      	add	r2, sp, #40	; 0x28
   d91c4:	a907      	add	r1, sp, #28
   d91c6:	a810      	add	r0, sp, #64	; 0x40
   d91c8:	f7fd fd3c 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d91cc:	4604      	mov	r4, r0
   d91ce:	2800      	cmp	r0, #0
   d91d0:	f47f af0f 	bne.w	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d91d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d91d6:	2b00      	cmp	r3, #0
   d91d8:	db35      	blt.n	d9246 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x39e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
   d91da:	a90d      	add	r1, sp, #52	; 0x34
   d91dc:	4630      	mov	r0, r6
   d91de:	f7fd f9b4 	bl	d654a <mbedtls_mpi_copy>
   d91e2:	4604      	mov	r4, r0
   d91e4:	2800      	cmp	r0, #0
   d91e6:	f47f af04 	bne.w	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
   d91ea:	a910      	add	r1, sp, #64	; 0x40
   d91ec:	f106 000c 	add.w	r0, r6, #12
   d91f0:	f7fd f9ab 	bl	d654a <mbedtls_mpi_copy>
   d91f4:	4604      	mov	r4, r0
   d91f6:	2800      	cmp	r0, #0
   d91f8:	f47f aefb 	bne.w	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
   d91fc:	a913      	add	r1, sp, #76	; 0x4c
   d91fe:	f106 0018 	add.w	r0, r6, #24
   d9202:	f7fd f9a2 	bl	d654a <mbedtls_mpi_copy>
   d9206:	4604      	mov	r4, r0
   d9208:	e6f3      	b.n	d8ff2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
   d920a:	a90d      	add	r1, sp, #52	; 0x34
   d920c:	463a      	mov	r2, r7
   d920e:	4608      	mov	r0, r1
   d9210:	f7fd fcf7 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d9214:	e78e      	b.n	d9134 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x28c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
   d9216:	2100      	movs	r1, #0
   d9218:	a80d      	add	r0, sp, #52	; 0x34
   d921a:	f7fd fc42 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d921e:	2800      	cmp	r0, #0
   d9220:	d0a1      	beq.n	d9166 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2be>
   d9222:	a90d      	add	r1, sp, #52	; 0x34
   d9224:	463a      	mov	r2, r7
   d9226:	4608      	mov	r0, r1
   d9228:	f7fd fceb 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d922c:	e794      	b.n	d9158 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2b0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
   d922e:	2100      	movs	r1, #0
   d9230:	a807      	add	r0, sp, #28
   d9232:	f7fd fc36 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d9236:	2800      	cmp	r0, #0
   d9238:	d0a1      	beq.n	d917e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2d6>
   d923a:	a907      	add	r1, sp, #28
   d923c:	463a      	mov	r2, r7
   d923e:	4608      	mov	r0, r1
   d9240:	f7fd fcdf 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d9244:	e794      	b.n	d9170 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2c8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
   d9246:	2100      	movs	r1, #0
   d9248:	a810      	add	r0, sp, #64	; 0x40
   d924a:	f7fd fc2a 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d924e:	2800      	cmp	r0, #0
   d9250:	d0c3      	beq.n	d91da <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x332>
   d9252:	a910      	add	r1, sp, #64	; 0x40
   d9254:	463a      	mov	r2, r7
   d9256:	4608      	mov	r0, r1
   d9258:	f7fd fcd3 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d925c:	e7b6      	b.n	d91cc <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x324>

    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );

    return( ret );
}
   d925e:	b016      	add	sp, #88	; 0x58
   d9260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9264:	ffffb080 	.word	0xffffb080

000d9268 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6>:
 * once the auxiliary table has been pre-computed.
 *
 * Scalar recoding may use a parity trick that makes us compute -m * P,
 * if that is the case we'll need to recover m * P at the end.
 */
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
   d9268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d926c:	b0d9      	sub	sp, #356	; 0x164
                                   unsigned char *parity_trick )
{
    int ret;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
   d926e:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 * once the auxiliary table has been pre-computed.
 *
 * Scalar recoding may use a parity trick that makes us compute -m * P,
 * if that is the case we'll need to recover m * P at the end.
 */
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
   d9272:	4605      	mov	r5, r0
   d9274:	9302      	str	r3, [sp, #8]
                                   unsigned char *parity_trick )
{
    int ret;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
   d9276:	4658      	mov	r0, fp
 * once the auxiliary table has been pre-computed.
 *
 * Scalar recoding may use a parity trick that makes us compute -m * P,
 * if that is the case we'll need to recover m * P at the end.
 */
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
   d9278:	f89d 3188 	ldrb.w	r3, [sp, #392]	; 0x188
   d927c:	9303      	str	r3, [sp, #12]
   d927e:	460e      	mov	r6, r1
   d9280:	4617      	mov	r7, r2
   d9282:	f89d a18c 	ldrb.w	sl, [sp, #396]	; 0x18c

    mbedtls_mpi_init( &M );
    mbedtls_mpi_init( &mm );

    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
   d9286:	f105 094c 	add.w	r9, r5, #76	; 0x4c
                                   unsigned char *parity_trick )
{
    int ret;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
   d928a:	f7fd f8de 	bl	d644a <mbedtls_mpi_init>
    mbedtls_mpi_init( &mm );
   d928e:	a80d      	add	r0, sp, #52	; 0x34
   d9290:	f7fd f8db 	bl	d644a <mbedtls_mpi_init>

    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
   d9294:	2100      	movs	r1, #0
   d9296:	4648      	mov	r0, r9
   d9298:	f7fd f9d4 	bl	d6644 <mbedtls_mpi_get_bit>
   d929c:	2801      	cmp	r0, #1
   d929e:	d178      	bne.n	d9392 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x12a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* do we need the parity trick? */
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
   d92a0:	2100      	movs	r1, #0
   d92a2:	4638      	mov	r0, r7
   d92a4:	f7fd f9ce 	bl	d6644 <mbedtls_mpi_get_bit>

    /* execute parity fix in constant time */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
   d92a8:	4639      	mov	r1, r7
    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* do we need the parity trick? */
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
   d92aa:	fab0 f880 	clz	r8, r0

    /* execute parity fix in constant time */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
   d92ae:	4658      	mov	r0, fp
   d92b0:	f7fd f94b 	bl	d654a <mbedtls_mpi_copy>
    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* do we need the parity trick? */
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
   d92b4:	ea4f 1858 	mov.w	r8, r8, lsr #5

    /* execute parity fix in constant time */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
   d92b8:	4604      	mov	r4, r0
   d92ba:	2800      	cmp	r0, #0
   d92bc:	d15f      	bne.n	d937e <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x116>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
   d92be:	463a      	mov	r2, r7
   d92c0:	4649      	mov	r1, r9
   d92c2:	a80d      	add	r0, sp, #52	; 0x34
   d92c4:	f7fd fcbe 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   d92c8:	4604      	mov	r4, r0
   d92ca:	2800      	cmp	r0, #0
   d92cc:	d157      	bne.n	d937e <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x116>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, *parity_trick ) );
   d92ce:	4642      	mov	r2, r8
   d92d0:	a90d      	add	r1, sp, #52	; 0x34
   d92d2:	4658      	mov	r0, fp
   d92d4:	f7fd f965 	bl	d65a2 <mbedtls_mpi_safe_cond_assign>
   d92d8:	4604      	mov	r4, r0
   d92da:	2800      	cmp	r0, #0
   d92dc:	d14f      	bne.n	d937e <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x116>
                                  unsigned char w, const mbedtls_mpi *m )
{
    size_t i, j;
    unsigned char c, cc, adjust;

    memset( x, 0, d+1 );
   d92de:	9b64      	ldr	r3, [sp, #400]	; 0x190
   d92e0:	f10d 0958 	add.w	r9, sp, #88	; 0x58
   d92e4:	1c5a      	adds	r2, r3, #1
   d92e6:	4601      	mov	r1, r0
   d92e8:	4648      	mov	r0, r9
   d92ea:	f00e fde2 	bl	e7eb2 <memset>

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
   d92ee:	4627      	mov	r7, r4
        for( j = 0; j < w; j++ )
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
   d92f0:	465b      	mov	r3, fp
    unsigned char c, cc, adjust;

    memset( x, 0, d+1 );

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
   d92f2:	9a64      	ldr	r2, [sp, #400]	; 0x190
   d92f4:	42ba      	cmp	r2, r7
   d92f6:	d01a      	beq.n	d932e <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0xc6>
   d92f8:	f04f 0b00 	mov.w	fp, #0
   d92fc:	463a      	mov	r2, r7
        for( j = 0; j < w; j++ )
   d92fe:	45da      	cmp	sl, fp
   d9300:	d913      	bls.n	d932a <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0xc2>
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
   d9302:	4611      	mov	r1, r2
   d9304:	4618      	mov	r0, r3
   d9306:	9205      	str	r2, [sp, #20]
   d9308:	9304      	str	r3, [sp, #16]
   d930a:	f7fd f99b 	bl	d6644 <mbedtls_mpi_get_bit>
   d930e:	f817 1009 	ldrb.w	r1, [r7, r9]
   d9312:	9b64      	ldr	r3, [sp, #400]	; 0x190
   d9314:	9a05      	ldr	r2, [sp, #20]
   d9316:	fa00 f00b 	lsl.w	r0, r0, fp
   d931a:	4308      	orrs	r0, r1
   d931c:	441a      	add	r2, r3
   d931e:	f807 0009 	strb.w	r0, [r7, r9]

    memset( x, 0, d+1 );

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
        for( j = 0; j < w; j++ )
   d9322:	f10b 0b01 	add.w	fp, fp, #1
   d9326:	9b04      	ldr	r3, [sp, #16]
   d9328:	e7e9      	b.n	d92fe <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x96>
    unsigned char c, cc, adjust;

    memset( x, 0, d+1 );

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
   d932a:	3701      	adds	r7, #1
   d932c:	e7e1      	b.n	d92f2 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x8a>
   d932e:	ab16      	add	r3, sp, #88	; 0x58
   d9330:	f04f 0900 	mov.w	r9, #0
   d9334:	f04f 0c01 	mov.w	ip, #1
        for( j = 0; j < w; j++ )
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;

    /* Now make sure x_1 .. x_d are odd */
    c = 0;
    for( i = 1; i <= d; i++ )
   d9338:	9a64      	ldr	r2, [sp, #400]	; 0x190
   d933a:	4562      	cmp	r2, ip
   d933c:	f103 0301 	add.w	r3, r3, #1
   d9340:	d31d      	bcc.n	d937e <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x116>
    {
        /* Add carry and update it */
        cc   = x[i] & c;
   d9342:	7819      	ldrb	r1, [r3, #0]
        x[i] = x[i] ^ c;
        c = cc;

        /* Adjust if needed, avoiding branches */
        adjust = 1 - ( x[i] & 0x01 );
        c   |= x[i] & ( x[i-1] * adjust );
   d9344:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    c = 0;
    for( i = 1; i <= d; i++ )
    {
        /* Add carry and update it */
        cc   = x[i] & c;
        x[i] = x[i] ^ c;
   d9348:	ea81 0009 	eor.w	r0, r1, r9
   d934c:	f000 0e01 	and.w	lr, r0, #1
   d9350:	f08e 0e01 	eor.w	lr, lr, #1
        c = cc;

        /* Adjust if needed, avoiding branches */
        adjust = 1 - ( x[i] & 0x01 );
        c   |= x[i] & ( x[i-1] * adjust );
   d9354:	fb17 f20e 	smulbb	r2, r7, lr
   d9358:	b240      	sxtb	r0, r0
   d935a:	b252      	sxtb	r2, r2
   d935c:	ea00 0a02 	and.w	sl, r0, r2
   d9360:	ea01 0109 	and.w	r1, r1, r9
   d9364:	ea4a 0901 	orr.w	r9, sl, r1
        x[i] = x[i] ^ ( x[i-1] * adjust );
   d9368:	4042      	eors	r2, r0
        x[i-1] |= adjust << 7;
   d936a:	ea47 17ce 	orr.w	r7, r7, lr, lsl #7
        x[i] = x[i] ^ c;
        c = cc;

        /* Adjust if needed, avoiding branches */
        adjust = 1 - ( x[i] & 0x01 );
        c   |= x[i] & ( x[i-1] * adjust );
   d936e:	fa5f f989 	uxtb.w	r9, r9
        x[i] = x[i] ^ ( x[i-1] * adjust );
   d9372:	701a      	strb	r2, [r3, #0]
        x[i-1] |= adjust << 7;
   d9374:	f803 7c01 	strb.w	r7, [r3, #-1]
        for( j = 0; j < w; j++ )
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;

    /* Now make sure x_1 .. x_d are odd */
    c = 0;
    for( i = 1; i <= d; i++ )
   d9378:	f10c 0c01 	add.w	ip, ip, #1
   d937c:	e7dc      	b.n	d9338 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0xd0>

    /* actual scalar recoding */
    ecp_comb_recode_core( k, d, w, &M );

cleanup:
    mbedtls_mpi_free( &mm );
   d937e:	a80d      	add	r0, sp, #52	; 0x34
   d9380:	f7fd f869 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &M );
   d9384:	a80a      	add	r0, sp, #40	; 0x28
   d9386:	f7fd f866 	bl	d6456 <mbedtls_mpi_free>
        if( rs_ctx->rsm->state == ecp_rsm_final_norm )
            goto final_norm;
    }
#endif

    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
   d938a:	2c00      	cmp	r4, #0
   d938c:	f040 80d3 	bne.w	d9536 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ce>
   d9390:	e001      	b.n	d9396 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x12e>
    mbedtls_mpi_init( &M );
    mbedtls_mpi_init( &mm );

    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d9392:	4c6b      	ldr	r4, [pc, #428]	; (d9540 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2d8>)
   d9394:	e0cf      	b.n	d9536 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ce>
{
    int ret;
    mbedtls_ecp_point Txi;
    size_t i;

    mbedtls_ecp_point_init( &Txi );
   d9396:	a80d      	add	r0, sp, #52	; 0x34
   d9398:	f7ff fccc 	bl	d8d34 <mbedtls_ecp_point_init>
    else
#endif
    {
        /* Start with a non-zero point and randomize its coordinates */
        i = d;
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
   d939c:	9a64      	ldr	r2, [sp, #400]	; 0x190
   d939e:	ab16      	add	r3, sp, #88	; 0x58
   d93a0:	4631      	mov	r1, r6
   d93a2:	5c9b      	ldrb	r3, [r3, r2]
   d93a4:	9300      	str	r3, [sp, #0]
   d93a6:	9a02      	ldr	r2, [sp, #8]
   d93a8:	9b03      	ldr	r3, [sp, #12]
   d93aa:	4628      	mov	r0, r5
   d93ac:	f7ff fc63 	bl	d8c76 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh>
   d93b0:	4604      	mov	r4, r0
   d93b2:	2800      	cmp	r0, #0
   d93b4:	f040 80af 	bne.w	d9516 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ae>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
   d93b8:	f106 0918 	add.w	r9, r6, #24
   d93bc:	2101      	movs	r1, #1
   d93be:	4648      	mov	r0, r9
   d93c0:	f7fd f924 	bl	d660c <mbedtls_mpi_lset>
   d93c4:	4604      	mov	r4, r0
   d93c6:	2800      	cmp	r0, #0
   d93c8:	f040 80a5 	bne.w	d9516 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ae>
        if( f_rng != 0 )
   d93cc:	9b65      	ldr	r3, [sp, #404]	; 0x194
   d93ce:	b943      	cbnz	r3, d93e2 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x17a>
   d93d0:	9a64      	ldr	r2, [sp, #400]	; 0x190
   d93d2:	ab58      	add	r3, sp, #352	; 0x160
   d93d4:	189f      	adds	r7, r3, r2
   d93d6:	f46f 7384 	mvn.w	r3, #264	; 0x108
   d93da:	441f      	add	r7, r3
   d93dc:	f10d 0957 	add.w	r9, sp, #87	; 0x57
   d93e0:	e093      	b.n	d950a <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2a2>
#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng ) );
#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
   d93e2:	6dab      	ldr	r3, [r5, #88]	; 0x58
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
   d93e4:	af07      	add	r7, sp, #28
#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng ) );
#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
   d93e6:	3307      	adds	r3, #7
   d93e8:	08db      	lsrs	r3, r3, #3
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
   d93ea:	4638      	mov	r0, r7
#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng ) );
#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
   d93ec:	9304      	str	r3, [sp, #16]
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
   d93ee:	f7fd f82c 	bl	d644a <mbedtls_mpi_init>
   d93f2:	a80a      	add	r0, sp, #40	; 0x28
   d93f4:	f7fd f829 	bl	d644a <mbedtls_mpi_init>
   d93f8:	f04f 0a0c 	mov.w	sl, #12
    /* Generate l such that 1 < l < p */
    do
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
   d93fc:	f105 0b04 	add.w	fp, r5, #4
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );

    /* Generate l such that 1 < l < p */
    do
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
   d9400:	9b66      	ldr	r3, [sp, #408]	; 0x198
   d9402:	9a65      	ldr	r2, [sp, #404]	; 0x194
   d9404:	9904      	ldr	r1, [sp, #16]
   d9406:	4638      	mov	r0, r7
   d9408:	f7fe f97c 	bl	d7704 <mbedtls_mpi_fill_random>
   d940c:	4603      	mov	r3, r0
   d940e:	2800      	cmp	r0, #0
   d9410:	d156      	bne.n	d94c0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
   d9412:	4659      	mov	r1, fp
   d9414:	4638      	mov	r0, r7
   d9416:	f7fd faff 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d941a:	2800      	cmp	r0, #0
   d941c:	db04      	blt.n	d9428 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x1c0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
   d941e:	2101      	movs	r1, #1
   d9420:	4638      	mov	r0, r7
   d9422:	f7fd fa1a 	bl	d685a <mbedtls_mpi_shift_r>
   d9426:	e7f1      	b.n	d940c <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x1a4>

        if( count++ > 10 )
   d9428:	f1ba 0a01 	subs.w	sl, sl, #1
   d942c:	d054      	beq.n	d94d8 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x270>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
    }
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
   d942e:	2101      	movs	r1, #1
   d9430:	4638      	mov	r0, r7
   d9432:	f7fd fb36 	bl	d6aa2 <mbedtls_mpi_cmp_int>

    p_size = ( grp->pbits + 7 ) / 8;
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );

    /* Generate l such that 1 < l < p */
    do
   d9436:	2800      	cmp	r0, #0
   d9438:	dde2      	ble.n	d9400 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x198>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
    }
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );

    /* Z = l * Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
   d943a:	463a      	mov	r2, r7
   d943c:	4649      	mov	r1, r9
   d943e:	4648      	mov	r0, r9
   d9440:	f7fd fc4e 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d9444:	4603      	mov	r3, r0
   d9446:	2800      	cmp	r0, #0
   d9448:	d13a      	bne.n	d94c0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
   d944a:	4629      	mov	r1, r5
   d944c:	4648      	mov	r0, r9
   d944e:	f7ff f815 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9452:	4603      	mov	r3, r0
   d9454:	bba0      	cbnz	r0, d94c0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>

    /* X = l^2 * X */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
   d9456:	463a      	mov	r2, r7
   d9458:	4639      	mov	r1, r7
   d945a:	a80a      	add	r0, sp, #40	; 0x28
   d945c:	f7fd fc40 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d9460:	4603      	mov	r3, r0
   d9462:	bb68      	cbnz	r0, d94c0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
   d9464:	4629      	mov	r1, r5
   d9466:	a80a      	add	r0, sp, #40	; 0x28
   d9468:	f7ff f808 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d946c:	4603      	mov	r3, r0
   d946e:	bb38      	cbnz	r0, d94c0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
   d9470:	aa0a      	add	r2, sp, #40	; 0x28
   d9472:	4631      	mov	r1, r6
   d9474:	4630      	mov	r0, r6
   d9476:	f7fd fc33 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d947a:	4603      	mov	r3, r0
   d947c:	bb00      	cbnz	r0, d94c0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
   d947e:	4629      	mov	r1, r5
   d9480:	4630      	mov	r0, r6
   d9482:	f7fe fffb 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9486:	4603      	mov	r3, r0
   d9488:	b9d0      	cbnz	r0, d94c0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>

    /* Y = l^3 * Y */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
   d948a:	a90a      	add	r1, sp, #40	; 0x28
   d948c:	463a      	mov	r2, r7
   d948e:	4608      	mov	r0, r1
   d9490:	f7fd fc26 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d9494:	4603      	mov	r3, r0
   d9496:	b998      	cbnz	r0, d94c0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
   d9498:	4629      	mov	r1, r5
   d949a:	a80a      	add	r0, sp, #40	; 0x28
   d949c:	f7fe ffee 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d94a0:	4603      	mov	r3, r0
   d94a2:	b968      	cbnz	r0, d94c0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
   d94a4:	f106 090c 	add.w	r9, r6, #12
   d94a8:	aa0a      	add	r2, sp, #40	; 0x28
   d94aa:	4649      	mov	r1, r9
   d94ac:	4648      	mov	r0, r9
   d94ae:	f7fd fc17 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d94b2:	4603      	mov	r3, r0
   d94b4:	b920      	cbnz	r0, d94c0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
   d94b6:	4629      	mov	r1, r5
   d94b8:	4648      	mov	r0, r9
   d94ba:	f7fe ffdf 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d94be:	4603      	mov	r3, r0

cleanup:
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
   d94c0:	4638      	mov	r0, r7
   d94c2:	9304      	str	r3, [sp, #16]
   d94c4:	f7fc ffc7 	bl	d6456 <mbedtls_mpi_free>
   d94c8:	a80a      	add	r0, sp, #40	; 0x28
   d94ca:	f7fc ffc4 	bl	d6456 <mbedtls_mpi_free>
        /* Start with a non-zero point and randomize its coordinates */
        i = d;
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
        if( f_rng != 0 )
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
   d94ce:	9b04      	ldr	r3, [sp, #16]
   d94d0:	2b00      	cmp	r3, #0
   d94d2:	f43f af7d 	beq.w	d93d0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x168>
   d94d6:	e01b      	b.n	d9510 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2a8>

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );

        if( count++ > 10 )
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
   d94d8:	4b1a      	ldr	r3, [pc, #104]	; (d9544 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2dc>)
   d94da:	e019      	b.n	d9510 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2a8>
    while( i != 0 )
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL + MBEDTLS_ECP_OPS_ADD );
        --i;

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
   d94dc:	4632      	mov	r2, r6
   d94de:	4631      	mov	r1, r6
   d94e0:	4628      	mov	r0, r5
   d94e2:	f7ff f80f 	bl	d8504 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>
   d94e6:	b9a8      	cbnz	r0, d9514 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ac>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
   d94e8:	f817 3901 	ldrb.w	r3, [r7], #-1
   d94ec:	9300      	str	r3, [sp, #0]
   d94ee:	9a02      	ldr	r2, [sp, #8]
   d94f0:	9b03      	ldr	r3, [sp, #12]
   d94f2:	a90d      	add	r1, sp, #52	; 0x34
   d94f4:	4628      	mov	r0, r5
   d94f6:	f7ff fbbe 	bl	d8c76 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh>
   d94fa:	b958      	cbnz	r0, d9514 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ac>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
   d94fc:	ab0d      	add	r3, sp, #52	; 0x34
   d94fe:	4632      	mov	r2, r6
   d9500:	4631      	mov	r1, r6
   d9502:	4628      	mov	r0, r5
   d9504:	f7ff fcd0 	bl	d8ea8 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>
   d9508:	b920      	cbnz	r0, d9514 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ac>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
        if( f_rng != 0 )
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
    }

    while( i != 0 )
   d950a:	454f      	cmp	r7, r9
   d950c:	d1e6      	bne.n	d94dc <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x274>
   d950e:	e002      	b.n	d9516 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ae>
        /* Start with a non-zero point and randomize its coordinates */
        i = d;
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
        if( f_rng != 0 )
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
   d9510:	461c      	mov	r4, r3
   d9512:	e000      	b.n	d9516 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ae>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL + MBEDTLS_ECP_OPS_ADD );
        --i;

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
   d9514:	4604      	mov	r4, r0
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
    }

cleanup:

    mbedtls_ecp_point_free( &Txi );
   d9516:	a80d      	add	r0, sp, #52	; 0x34
   d9518:	f7ff fc49 	bl	d8dae <mbedtls_ecp_point_free>
    }
#endif

    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
                                            &parity_trick ) );
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, RR, T, T_size, k, d,
   d951c:	b95c      	cbnz	r4, d9536 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ce>
                                        f_rng, p_rng, rs_ctx ) );
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, RR, parity_trick ) );
   d951e:	4642      	mov	r2, r8
   d9520:	4631      	mov	r1, r6
   d9522:	4628      	mov	r0, r5
   d9524:	f7ff fb84 	bl	d8c30 <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh>
   d9528:	4604      	mov	r4, r0
   d952a:	b920      	cbnz	r0, d9536 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ce>
        rs_ctx->rsm->state = ecp_rsm_final_norm;

final_norm:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, RR ) );
   d952c:	4631      	mov	r1, r6
   d952e:	4628      	mov	r0, r5
   d9530:	f7ff fa1d 	bl	d896e <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>
   d9534:	4604      	mov	r4, r0
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, RR ) );
#endif

cleanup:
    return( ret );
}
   d9536:	4620      	mov	r0, r4
   d9538:	b059      	add	sp, #356	; 0x164
   d953a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d953e:	bf00      	nop
   d9540:	ffffb080 	.word	0xffffb080
   d9544:	ffffb300 	.word	0xffffb300

000d9548 <mbedtls_ecp_is_zero>:

/*
 * Tell if a point is zero
 */
int mbedtls_ecp_is_zero( mbedtls_ecp_point *pt )
{
   d9548:	b508      	push	{r3, lr}
    ECP_VALIDATE_RET( pt != NULL );

    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
   d954a:	2100      	movs	r1, #0
   d954c:	3018      	adds	r0, #24
   d954e:	f7fd faa8 	bl	d6aa2 <mbedtls_mpi_cmp_int>
}
   d9552:	fab0 f080 	clz	r0, r0
   d9556:	0940      	lsrs	r0, r0, #5
   d9558:	bd08      	pop	{r3, pc}
	...

000d955c <mbedtls_ecp_point_write_binary>:
 */
int mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp,
                                    const mbedtls_ecp_point *P,
                                    int format, size_t *olen,
                                    unsigned char *buf, size_t buflen )
{
   d955c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9560:	460e      	mov	r6, r1
   d9562:	4605      	mov	r5, r0
                      format == MBEDTLS_ECP_PF_COMPRESSED );

    /*
     * Common case: P == 0
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d9564:	2100      	movs	r1, #0
   d9566:	f106 0018 	add.w	r0, r6, #24
 */
int mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp,
                                    const mbedtls_ecp_point *P,
                                    int format, size_t *olen,
                                    unsigned char *buf, size_t buflen )
{
   d956a:	4691      	mov	r9, r2
   d956c:	4698      	mov	r8, r3
   d956e:	9c08      	ldr	r4, [sp, #32]
   d9570:	9f09      	ldr	r7, [sp, #36]	; 0x24
                      format == MBEDTLS_ECP_PF_COMPRESSED );

    /*
     * Common case: P == 0
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d9572:	f7fd fa96 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d9576:	b948      	cbnz	r0, d958c <mbedtls_ecp_point_write_binary+0x30>
    {
        if( buflen < 1 )
   d9578:	b917      	cbnz	r7, d9580 <mbedtls_ecp_point_write_binary+0x24>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
   d957a:	481f      	ldr	r0, [pc, #124]	; (d95f8 <mbedtls_ecp_point_write_binary+0x9c>)
   d957c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

        buf[0] = 0x00;
        *olen = 1;
   d9580:	2301      	movs	r3, #1
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
    {
        if( buflen < 1 )
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );

        buf[0] = 0x00;
   d9582:	7020      	strb	r0, [r4, #0]
        *olen = 1;
   d9584:	f8c8 3000 	str.w	r3, [r8]

        return( 0 );
   d9588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }

    plen = mbedtls_mpi_size( &grp->P );
   d958c:	1d28      	adds	r0, r5, #4
   d958e:	f7fd f8a3 	bl	d66d8 <mbedtls_mpi_size>
   d9592:	4605      	mov	r5, r0

    if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
   d9594:	f1b9 0f00 	cmp.w	r9, #0
   d9598:	d114      	bne.n	d95c4 <mbedtls_ecp_point_write_binary+0x68>
    {
        *olen = 2 * plen + 1;
   d959a:	0042      	lsls	r2, r0, #1
   d959c:	3201      	adds	r2, #1

        if( buflen < *olen )
   d959e:	4297      	cmp	r7, r2

    plen = mbedtls_mpi_size( &grp->P );

    if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
    {
        *olen = 2 * plen + 1;
   d95a0:	f8c8 2000 	str.w	r2, [r8]

        if( buflen < *olen )
   d95a4:	d3e9      	bcc.n	d957a <mbedtls_ecp_point_write_binary+0x1e>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );

        buf[0] = 0x04;
   d95a6:	4621      	mov	r1, r4
   d95a8:	2304      	movs	r3, #4
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   d95aa:	4602      	mov	r2, r0
        *olen = 2 * plen + 1;

        if( buflen < *olen )
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );

        buf[0] = 0x04;
   d95ac:	f801 3b01 	strb.w	r3, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   d95b0:	4630      	mov	r0, r6
   d95b2:	f7fd f8ce 	bl	d6752 <mbedtls_mpi_write_binary>
   d95b6:	b9e8      	cbnz	r0, d95f4 <mbedtls_ecp_point_write_binary+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
   d95b8:	1c69      	adds	r1, r5, #1
   d95ba:	462a      	mov	r2, r5
   d95bc:	4421      	add	r1, r4
   d95be:	f106 000c 	add.w	r0, r6, #12
   d95c2:	e012      	b.n	d95ea <mbedtls_ecp_point_write_binary+0x8e>
    }
    else if( format == MBEDTLS_ECP_PF_COMPRESSED )
   d95c4:	f1b9 0f01 	cmp.w	r9, #1
   d95c8:	d113      	bne.n	d95f2 <mbedtls_ecp_point_write_binary+0x96>
    {
        *olen = plen + 1;
   d95ca:	1c43      	adds	r3, r0, #1

        if( buflen < *olen )
   d95cc:	429f      	cmp	r7, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
    }
    else if( format == MBEDTLS_ECP_PF_COMPRESSED )
    {
        *olen = plen + 1;
   d95ce:	f8c8 3000 	str.w	r3, [r8]

        if( buflen < *olen )
   d95d2:	d3d2      	bcc.n	d957a <mbedtls_ecp_point_write_binary+0x1e>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );

        buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
   d95d4:	2100      	movs	r1, #0
   d95d6:	f106 000c 	add.w	r0, r6, #12
   d95da:	f7fd f833 	bl	d6644 <mbedtls_mpi_get_bit>
   d95de:	4621      	mov	r1, r4
   d95e0:	3002      	adds	r0, #2
   d95e2:	f801 0b01 	strb.w	r0, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   d95e6:	462a      	mov	r2, r5
   d95e8:	4630      	mov	r0, r6
    }

cleanup:
    return( ret );
}
   d95ea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

        if( buflen < *olen )
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );

        buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   d95ee:	f7fd b8b0 	b.w	d6752 <mbedtls_mpi_write_binary>
int mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp,
                                    const mbedtls_ecp_point *P,
                                    int format, size_t *olen,
                                    unsigned char *buf, size_t buflen )
{
    int ret = 0;
   d95f2:	2000      	movs	r0, #0
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
    }

cleanup:
    return( ret );
}
   d95f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d95f8:	ffffb100 	.word	0xffffb100

000d95fc <mbedtls_ecp_point_read_binary>:
 * Import a point from unsigned binary data (SEC1 2.3.4)
 */
int mbedtls_ecp_point_read_binary( const mbedtls_ecp_group *grp,
                                   mbedtls_ecp_point *pt,
                                   const unsigned char *buf, size_t ilen )
{
   d95fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d95fe:	460c      	mov	r4, r1
   d9600:	4615      	mov	r5, r2
    size_t plen;
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );
    ECP_VALIDATE_RET( buf != NULL );

    if( ilen < 1 )
   d9602:	461f      	mov	r7, r3
   d9604:	b90b      	cbnz	r3, d960a <mbedtls_ecp_point_read_binary+0xe>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d9606:	4816      	ldr	r0, [pc, #88]	; (d9660 <mbedtls_ecp_point_read_binary+0x64>)
   d9608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( buf[0] == 0x00 )
   d960a:	7813      	ldrb	r3, [r2, #0]
   d960c:	b933      	cbnz	r3, d961c <mbedtls_ecp_point_read_binary+0x20>
    {
        if( ilen == 1 )
   d960e:	2f01      	cmp	r7, #1
   d9610:	d1f9      	bne.n	d9606 <mbedtls_ecp_point_read_binary+0xa>
            return( mbedtls_ecp_set_zero( pt ) );
   d9612:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );

cleanup:
    return( ret );
}
   d9614:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    if( buf[0] == 0x00 )
    {
        if( ilen == 1 )
            return( mbedtls_ecp_set_zero( pt ) );
   d9618:	f7ff bc32 	b.w	d8e80 <mbedtls_ecp_set_zero>
        else
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }

    plen = mbedtls_mpi_size( &grp->P );
   d961c:	3004      	adds	r0, #4
   d961e:	f7fd f85b 	bl	d66d8 <mbedtls_mpi_size>

    if( buf[0] != 0x04 )
   d9622:	782b      	ldrb	r3, [r5, #0]
   d9624:	2b04      	cmp	r3, #4
            return( mbedtls_ecp_set_zero( pt ) );
        else
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }

    plen = mbedtls_mpi_size( &grp->P );
   d9626:	4606      	mov	r6, r0

    if( buf[0] != 0x04 )
   d9628:	d118      	bne.n	d965c <mbedtls_ecp_point_read_binary+0x60>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );

    if( ilen != 2 * plen + 1 )
   d962a:	0042      	lsls	r2, r0, #1
   d962c:	3201      	adds	r2, #1
   d962e:	4297      	cmp	r7, r2
   d9630:	d1e9      	bne.n	d9606 <mbedtls_ecp_point_read_binary+0xa>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
   d9632:	4602      	mov	r2, r0
   d9634:	1c69      	adds	r1, r5, #1
   d9636:	4620      	mov	r0, r4
   d9638:	f7fd f854 	bl	d66e4 <mbedtls_mpi_read_binary>
   d963c:	b978      	cbnz	r0, d965e <mbedtls_ecp_point_read_binary+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
   d963e:	1c71      	adds	r1, r6, #1
   d9640:	4632      	mov	r2, r6
   d9642:	4429      	add	r1, r5
   d9644:	f104 000c 	add.w	r0, r4, #12
   d9648:	f7fd f84c 	bl	d66e4 <mbedtls_mpi_read_binary>
   d964c:	b938      	cbnz	r0, d965e <mbedtls_ecp_point_read_binary+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
   d964e:	f104 0018 	add.w	r0, r4, #24
   d9652:	2101      	movs	r1, #1

cleanup:
    return( ret );
}
   d9654:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if( ilen != 2 * plen + 1 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
   d9658:	f7fc bfd8 	b.w	d660c <mbedtls_mpi_lset>
    }

    plen = mbedtls_mpi_size( &grp->P );

    if( buf[0] != 0x04 )
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   d965c:	4801      	ldr	r0, [pc, #4]	; (d9664 <mbedtls_ecp_point_read_binary+0x68>)
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );

cleanup:
    return( ret );
}
   d965e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9660:	ffffb080 	.word	0xffffb080
   d9664:	ffffb180 	.word	0xffffb180

000d9668 <mbedtls_ecp_tls_read_point>:
    ECP_VALIDATE_RET( *buf != NULL );

    /*
     * We must have at least two bytes (1 for length, at least one for data)
     */
    if( buf_len < 2 )
   d9668:	2b01      	cmp	r3, #1
 *      } ECPoint;
 */
int mbedtls_ecp_tls_read_point( const mbedtls_ecp_group *grp,
                                mbedtls_ecp_point *pt,
                                const unsigned char **buf, size_t buf_len )
{
   d966a:	b430      	push	{r4, r5}
   d966c:	4615      	mov	r5, r2
    ECP_VALIDATE_RET( *buf != NULL );

    /*
     * We must have at least two bytes (1 for length, at least one for data)
     */
    if( buf_len < 2 )
   d966e:	d90d      	bls.n	d968c <mbedtls_ecp_tls_read_point+0x24>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    data_len = *(*buf)++;
   d9670:	6814      	ldr	r4, [r2, #0]
   d9672:	1c62      	adds	r2, r4, #1
   d9674:	602a      	str	r2, [r5, #0]
   d9676:	7824      	ldrb	r4, [r4, #0]
    if( data_len < 1 || data_len > buf_len - 1 )
   d9678:	b144      	cbz	r4, d968c <mbedtls_ecp_tls_read_point+0x24>
   d967a:	3b01      	subs	r3, #1
   d967c:	429c      	cmp	r4, r3
   d967e:	d805      	bhi.n	d968c <mbedtls_ecp_tls_read_point+0x24>

    /*
     * Save buffer start for read_binary and update buf
     */
    buf_start = *buf;
    *buf += data_len;
   d9680:	1913      	adds	r3, r2, r4
   d9682:	602b      	str	r3, [r5, #0]

    return( mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len ) );
   d9684:	4623      	mov	r3, r4
}
   d9686:	bc30      	pop	{r4, r5}
     * Save buffer start for read_binary and update buf
     */
    buf_start = *buf;
    *buf += data_len;

    return( mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len ) );
   d9688:	f7ff bfb8 	b.w	d95fc <mbedtls_ecp_point_read_binary>
}
   d968c:	4801      	ldr	r0, [pc, #4]	; (d9694 <mbedtls_ecp_tls_read_point+0x2c>)
   d968e:	bc30      	pop	{r4, r5}
   d9690:	4770      	bx	lr
   d9692:	bf00      	nop
   d9694:	ffffb080 	.word	0xffffb080

000d9698 <mbedtls_ecp_tls_write_point>:
 *      } ECPoint;
 */
int mbedtls_ecp_tls_write_point( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt,
                         int format, size_t *olen,
                         unsigned char *buf, size_t blen )
{
   d9698:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d969a:	9c07      	ldr	r4, [sp, #28]
   d969c:	9e06      	ldr	r6, [sp, #24]
   d969e:	461d      	mov	r5, r3
                      format == MBEDTLS_ECP_PF_COMPRESSED );

    /*
     * buffer length must be at least one, for our length byte
     */
    if( blen < 1 )
   d96a0:	b164      	cbz	r4, d96bc <mbedtls_ecp_tls_write_point+0x24>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    if( ( ret = mbedtls_ecp_point_write_binary( grp, pt, format,
   d96a2:	3c01      	subs	r4, #1
   d96a4:	9401      	str	r4, [sp, #4]
   d96a6:	1c74      	adds	r4, r6, #1
   d96a8:	9400      	str	r4, [sp, #0]
   d96aa:	f7ff ff57 	bl	d955c <mbedtls_ecp_point_write_binary>
   d96ae:	b930      	cbnz	r0, d96be <mbedtls_ecp_tls_write_point+0x26>
        return( ret );

    /*
     * write length to the first byte and update total length
     */
    buf[0] = (unsigned char) *olen;
   d96b0:	682b      	ldr	r3, [r5, #0]
   d96b2:	7033      	strb	r3, [r6, #0]
    ++*olen;
   d96b4:	682b      	ldr	r3, [r5, #0]
   d96b6:	3301      	adds	r3, #1
   d96b8:	602b      	str	r3, [r5, #0]

    return( 0 );
   d96ba:	e000      	b.n	d96be <mbedtls_ecp_tls_write_point+0x26>

    /*
     * buffer length must be at least one, for our length byte
     */
    if( blen < 1 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d96bc:	4801      	ldr	r0, [pc, #4]	; (d96c4 <mbedtls_ecp_tls_write_point+0x2c>)
     */
    buf[0] = (unsigned char) *olen;
    ++*olen;

    return( 0 );
}
   d96be:	b002      	add	sp, #8
   d96c0:	bd70      	pop	{r4, r5, r6, pc}
   d96c2:	bf00      	nop
   d96c4:	ffffb080 	.word	0xffffb080

000d96c8 <mbedtls_ecp_tls_read_group_id>:
    ECP_VALIDATE_RET( *buf != NULL );

    /*
     * We expect at least three bytes (see below)
     */
    if( len < 3 )
   d96c8:	2a02      	cmp	r2, #2
 * Read a group id from an ECParameters record (RFC 4492) and convert it to
 * mbedtls_ecp_group_id.
 */
int mbedtls_ecp_tls_read_group_id( mbedtls_ecp_group_id *grp,
                                   const unsigned char **buf, size_t len )
{
   d96ca:	b510      	push	{r4, lr}
   d96cc:	4604      	mov	r4, r0
    ECP_VALIDATE_RET( *buf != NULL );

    /*
     * We expect at least three bytes (see below)
     */
    if( len < 3 )
   d96ce:	d801      	bhi.n	d96d4 <mbedtls_ecp_tls_read_group_id+0xc>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d96d0:	480c      	ldr	r0, [pc, #48]	; (d9704 <mbedtls_ecp_tls_read_group_id+0x3c>)
   d96d2:	bd10      	pop	{r4, pc}

    /*
     * First byte is curve_type; only named_curve is handled
     */
    if( *(*buf)++ != MBEDTLS_ECP_TLS_NAMED_CURVE )
   d96d4:	680b      	ldr	r3, [r1, #0]
   d96d6:	1c5a      	adds	r2, r3, #1
   d96d8:	600a      	str	r2, [r1, #0]
   d96da:	781a      	ldrb	r2, [r3, #0]
   d96dc:	2a03      	cmp	r2, #3
   d96de:	d1f7      	bne.n	d96d0 <mbedtls_ecp_tls_read_group_id+0x8>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /*
     * Next two bytes are the namedcurve value
     */
    tls_id = *(*buf)++;
   d96e0:	1c9a      	adds	r2, r3, #2
   d96e2:	600a      	str	r2, [r1, #0]
    tls_id <<= 8;
    tls_id |= *(*buf)++;
   d96e4:	1cda      	adds	r2, r3, #3
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /*
     * Next two bytes are the namedcurve value
     */
    tls_id = *(*buf)++;
   d96e6:	7858      	ldrb	r0, [r3, #1]
    tls_id <<= 8;
    tls_id |= *(*buf)++;
   d96e8:	600a      	str	r2, [r1, #0]

    if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )
   d96ea:	789b      	ldrb	r3, [r3, #2]
   d96ec:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d96f0:	f7ff fb12 	bl	d8d18 <mbedtls_ecp_curve_info_from_tls_id>
   d96f4:	b118      	cbz	r0, d96fe <mbedtls_ecp_tls_read_group_id+0x36>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );

    *grp = curve_info->grp_id;
   d96f6:	7803      	ldrb	r3, [r0, #0]
   d96f8:	7023      	strb	r3, [r4, #0]

    return( 0 );
   d96fa:	2000      	movs	r0, #0
   d96fc:	bd10      	pop	{r4, pc}
    tls_id = *(*buf)++;
    tls_id <<= 8;
    tls_id |= *(*buf)++;

    if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   d96fe:	4802      	ldr	r0, [pc, #8]	; (d9708 <mbedtls_ecp_tls_read_group_id+0x40>)

    *grp = curve_info->grp_id;

    return( 0 );
}
   d9700:	bd10      	pop	{r4, pc}
   d9702:	bf00      	nop
   d9704:	ffffb080 	.word	0xffffb080
   d9708:	ffffb180 	.word	0xffffb180

000d970c <mbedtls_ecp_check_pubkey>:
/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp,
                              const mbedtls_ecp_point *pt )
{
   d970c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d970e:	460f      	mov	r7, r1
   d9710:	b087      	sub	sp, #28
   d9712:	4605      	mov	r5, r0
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );

    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
   d9714:	2101      	movs	r1, #1
   d9716:	f107 0018 	add.w	r0, r7, #24
   d971a:	f7fd f9c2 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d971e:	4606      	mov	r6, r0
   d9720:	bb10      	cbnz	r0, d9768 <mbedtls_ecp_check_pubkey+0x5c>
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
        return( ecp_check_pubkey_mx( grp, pt ) );
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d9722:	4628      	mov	r0, r5
   d9724:	f7fe fe9f 	bl	d8466 <_ZL12ecp_get_typePK17mbedtls_ecp_group>
   d9728:	2801      	cmp	r0, #1
   d972a:	d11b      	bne.n	d9764 <mbedtls_ecp_check_pubkey+0x58>
{
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
   d972c:	4631      	mov	r1, r6
   d972e:	4638      	mov	r0, r7
   d9730:	f7fd f9b7 	bl	d6aa2 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
   d9734:	2800      	cmp	r0, #0
   d9736:	db17      	blt.n	d9768 <mbedtls_ecp_check_pubkey+0x5c>
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
   d9738:	f107 040c 	add.w	r4, r7, #12
   d973c:	4631      	mov	r1, r6
   d973e:	4620      	mov	r0, r4
   d9740:	f7fd f9af 	bl	d6aa2 <mbedtls_mpi_cmp_int>
{
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
   d9744:	2800      	cmp	r0, #0
   d9746:	db0f      	blt.n	d9768 <mbedtls_ecp_check_pubkey+0x5c>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
   d9748:	1d2e      	adds	r6, r5, #4
   d974a:	4631      	mov	r1, r6
   d974c:	4638      	mov	r0, r7
   d974e:	f7fd f963 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
   d9752:	2800      	cmp	r0, #0
   d9754:	da08      	bge.n	d9768 <mbedtls_ecp_check_pubkey+0x5c>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
   d9756:	4631      	mov	r1, r6
   d9758:	4620      	mov	r0, r4
   d975a:	f7fd f95d 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
   d975e:	2800      	cmp	r0, #0
   d9760:	da02      	bge.n	d9768 <mbedtls_ecp_check_pubkey+0x5c>
   d9762:	e003      	b.n	d976c <mbedtls_ecp_check_pubkey+0x60>
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
        return( ecp_check_pubkey_sw( grp, pt ) );
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d9764:	4845      	ldr	r0, [pc, #276]	; (d987c <mbedtls_ecp_check_pubkey+0x170>)
   d9766:	e086      	b.n	d9876 <mbedtls_ecp_check_pubkey+0x16a>
    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
   d9768:	4845      	ldr	r0, [pc, #276]	; (d9880 <mbedtls_ecp_check_pubkey+0x174>)
   d976a:	e084      	b.n	d9876 <mbedtls_ecp_check_pubkey+0x16a>

    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
   d976c:	4668      	mov	r0, sp
   d976e:	f7fc fe6c 	bl	d644a <mbedtls_mpi_init>
   d9772:	a803      	add	r0, sp, #12
   d9774:	f7fc fe69 	bl	d644a <mbedtls_mpi_init>

    /*
     * YY = Y^2
     * RHS = X (X^2 + A) + B = X^3 + A X + B
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
   d9778:	4622      	mov	r2, r4
   d977a:	4621      	mov	r1, r4
   d977c:	4668      	mov	r0, sp
   d977e:	f7fd faaf 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d9782:	4604      	mov	r4, r0
   d9784:	2800      	cmp	r0, #0
   d9786:	d14d      	bne.n	d9824 <mbedtls_ecp_check_pubkey+0x118>
   d9788:	4629      	mov	r1, r5
   d978a:	4668      	mov	r0, sp
   d978c:	f7fe fe76 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9790:	4604      	mov	r4, r0
   d9792:	2800      	cmp	r0, #0
   d9794:	d146      	bne.n	d9824 <mbedtls_ecp_check_pubkey+0x118>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
   d9796:	463a      	mov	r2, r7
   d9798:	4639      	mov	r1, r7
   d979a:	a803      	add	r0, sp, #12
   d979c:	f7fd faa0 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d97a0:	4604      	mov	r4, r0
   d97a2:	2800      	cmp	r0, #0
   d97a4:	d13e      	bne.n	d9824 <mbedtls_ecp_check_pubkey+0x118>
   d97a6:	4629      	mov	r1, r5
   d97a8:	a803      	add	r0, sp, #12
   d97aa:	f7fe fe67 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d97ae:	4604      	mov	r4, r0
   d97b0:	2800      	cmp	r0, #0
   d97b2:	d137      	bne.n	d9824 <mbedtls_ecp_check_pubkey+0x118>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
   d97b4:	69ab      	ldr	r3, [r5, #24]
   d97b6:	b9a3      	cbnz	r3, d97e2 <mbedtls_ecp_check_pubkey+0xd6>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
   d97b8:	a903      	add	r1, sp, #12
   d97ba:	2203      	movs	r2, #3
   d97bc:	4608      	mov	r0, r1
   d97be:	f7fd fa79 	bl	d6cb4 <mbedtls_mpi_sub_int>
   d97c2:	4604      	mov	r4, r0
   d97c4:	bb70      	cbnz	r0, d9824 <mbedtls_ecp_check_pubkey+0x118>
   d97c6:	9b03      	ldr	r3, [sp, #12]
   d97c8:	2b00      	cmp	r3, #0
   d97ca:	da1e      	bge.n	d980a <mbedtls_ecp_check_pubkey+0xfe>
   d97cc:	2100      	movs	r1, #0
   d97ce:	a803      	add	r0, sp, #12
   d97d0:	f7fd f967 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d97d4:	b1c8      	cbz	r0, d980a <mbedtls_ecp_check_pubkey+0xfe>
   d97d6:	a903      	add	r1, sp, #12
   d97d8:	4632      	mov	r2, r6
   d97da:	4608      	mov	r0, r1
   d97dc:	f7fd fa11 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d97e0:	e7ef      	b.n	d97c2 <mbedtls_ecp_check_pubkey+0xb6>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
   d97e2:	a903      	add	r1, sp, #12
   d97e4:	f105 0210 	add.w	r2, r5, #16
   d97e8:	4608      	mov	r0, r1
   d97ea:	f7fd fa0a 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d97ee:	4604      	mov	r4, r0
   d97f0:	b9c0      	cbnz	r0, d9824 <mbedtls_ecp_check_pubkey+0x118>
   d97f2:	4631      	mov	r1, r6
   d97f4:	a803      	add	r0, sp, #12
   d97f6:	f7fd f90f 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d97fa:	2800      	cmp	r0, #0
   d97fc:	db05      	blt.n	d980a <mbedtls_ecp_check_pubkey+0xfe>
   d97fe:	a903      	add	r1, sp, #12
   d9800:	4632      	mov	r2, r6
   d9802:	4608      	mov	r0, r1
   d9804:	f7fd f9bd 	bl	d6b82 <mbedtls_mpi_sub_abs>
   d9808:	e7f1      	b.n	d97ee <mbedtls_ecp_check_pubkey+0xe2>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
   d980a:	a903      	add	r1, sp, #12
   d980c:	463a      	mov	r2, r7
   d980e:	4608      	mov	r0, r1
   d9810:	f7fd fa66 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   d9814:	4604      	mov	r4, r0
   d9816:	b928      	cbnz	r0, d9824 <mbedtls_ecp_check_pubkey+0x118>
   d9818:	4629      	mov	r1, r5
   d981a:	a803      	add	r0, sp, #12
   d981c:	f7fe fe2e 	bl	d847c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9820:	4604      	mov	r4, r0
   d9822:	b138      	cbz	r0, d9834 <mbedtls_ecp_check_pubkey+0x128>
    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;

cleanup:

    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
   d9824:	4668      	mov	r0, sp
   d9826:	f7fc fe16 	bl	d6456 <mbedtls_mpi_free>
   d982a:	a803      	add	r0, sp, #12
   d982c:	f7fc fe13 	bl	d6456 <mbedtls_mpi_free>

    return( ret );
   d9830:	4620      	mov	r0, r4
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
        return( ecp_check_pubkey_mx( grp, pt ) );
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
        return( ecp_check_pubkey_sw( grp, pt ) );
   d9832:	e020      	b.n	d9876 <mbedtls_ecp_check_pubkey+0x16a>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
   d9834:	a903      	add	r1, sp, #12
   d9836:	f105 021c 	add.w	r2, r5, #28
   d983a:	4608      	mov	r0, r1
   d983c:	f7fd f9e1 	bl	d6c02 <mbedtls_mpi_add_mpi>
   d9840:	4604      	mov	r4, r0
   d9842:	2800      	cmp	r0, #0
   d9844:	d1ee      	bne.n	d9824 <mbedtls_ecp_check_pubkey+0x118>
   d9846:	4631      	mov	r1, r6
   d9848:	a803      	add	r0, sp, #12
   d984a:	f7fd f8e5 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d984e:	2800      	cmp	r0, #0
   d9850:	db08      	blt.n	d9864 <mbedtls_ecp_check_pubkey+0x158>
   d9852:	a903      	add	r1, sp, #12
   d9854:	4632      	mov	r2, r6
   d9856:	4608      	mov	r0, r1
   d9858:	f7fd f993 	bl	d6b82 <mbedtls_mpi_sub_abs>
   d985c:	2800      	cmp	r0, #0
   d985e:	d0f2      	beq.n	d9846 <mbedtls_ecp_check_pubkey+0x13a>
   d9860:	4604      	mov	r4, r0
   d9862:	e7df      	b.n	d9824 <mbedtls_ecp_check_pubkey+0x118>

    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
   d9864:	a903      	add	r1, sp, #12
   d9866:	4668      	mov	r0, sp
   d9868:	f7fd f8d6 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
   d986c:	2800      	cmp	r0, #0
   d986e:	4c04      	ldr	r4, [pc, #16]	; (d9880 <mbedtls_ecp_check_pubkey+0x174>)
   d9870:	bf08      	it	eq
   d9872:	2400      	moveq	r4, #0
   d9874:	e7d6      	b.n	d9824 <mbedtls_ecp_check_pubkey+0x118>
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
        return( ecp_check_pubkey_sw( grp, pt ) );
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
   d9876:	b007      	add	sp, #28
   d9878:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d987a:	bf00      	nop
   d987c:	ffffb080 	.word	0xffffb080
   d9880:	ffffb380 	.word	0xffffb380

000d9884 <mbedtls_ecp_check_privkey>:
/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp,
                               const mbedtls_mpi *d )
{
   d9884:	b538      	push	{r3, r4, r5, lr}
   d9886:	460c      	mov	r4, r1
   d9888:	4605      	mov	r5, r0

        return( 0 );
    }
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d988a:	f7fe fdec 	bl	d8466 <_ZL12ecp_get_typePK17mbedtls_ecp_group>
   d988e:	2801      	cmp	r0, #1
   d9890:	4601      	mov	r1, r0
   d9892:	d10d      	bne.n	d98b0 <mbedtls_ecp_check_privkey+0x2c>
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   d9894:	4620      	mov	r0, r4
   d9896:	f7fd f904 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d989a:	2800      	cmp	r0, #0
   d989c:	db0a      	blt.n	d98b4 <mbedtls_ecp_check_privkey+0x30>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
   d989e:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d98a2:	4620      	mov	r0, r4
   d98a4:	f7fd f8b8 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   d98a8:	2800      	cmp	r0, #0
   d98aa:	da03      	bge.n	d98b4 <mbedtls_ecp_check_privkey+0x30>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
        else
            return( 0 );
   d98ac:	2000      	movs	r0, #0
   d98ae:	bd38      	pop	{r3, r4, r5, pc}
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d98b0:	4801      	ldr	r0, [pc, #4]	; (d98b8 <mbedtls_ecp_check_privkey+0x34>)
   d98b2:	bd38      	pop	{r3, r4, r5, pc}
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
   d98b4:	4801      	ldr	r0, [pc, #4]	; (d98bc <mbedtls_ecp_check_privkey+0x38>)
            return( 0 );
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
   d98b6:	bd38      	pop	{r3, r4, r5, pc}
   d98b8:	ffffb080 	.word	0xffffb080
   d98bc:	ffffb380 	.word	0xffffb380

000d98c0 <mbedtls_ecp_mul_restartable>:
 */
int mbedtls_ecp_mul_restartable( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
   d98c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d98c4:	b0af      	sub	sp, #188	; 0xbc
   d98c6:	4605      	mov	r5, r0
   d98c8:	910a      	str	r1, [sp, #40]	; 0x28
    {
        /* check_privkey is free */
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_CHK );

        /* Common sanity checks */
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
   d98ca:	4611      	mov	r1, r2
 */
int mbedtls_ecp_mul_restartable( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
   d98cc:	920b      	str	r2, [sp, #44]	; 0x2c
   d98ce:	461e      	mov	r6, r3
    {
        /* check_privkey is free */
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_CHK );

        /* Common sanity checks */
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
   d98d0:	f7ff ffd8 	bl	d9884 <mbedtls_ecp_check_privkey>
   d98d4:	4683      	mov	fp, r0
   d98d6:	2800      	cmp	r0, #0
   d98d8:	f040 8113 	bne.w	d9b02 <mbedtls_ecp_mul_restartable+0x242>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
   d98dc:	4631      	mov	r1, r6
   d98de:	4628      	mov	r0, r5
   d98e0:	f7ff ff14 	bl	d970c <mbedtls_ecp_check_pubkey>
   d98e4:	4683      	mov	fp, r0
   d98e6:	2800      	cmp	r0, #0
   d98e8:	f040 810b 	bne.w	d9b02 <mbedtls_ecp_mul_restartable+0x242>
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
        MBEDTLS_MPI_CHK( ecp_mul_mxz( grp, R, m, P, f_rng, p_rng ) );
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d98ec:	4628      	mov	r0, r5
   d98ee:	f7fe fdba 	bl	d8466 <_ZL12ecp_get_typePK17mbedtls_ecp_group>
   d98f2:	2801      	cmp	r0, #1
   d98f4:	f040 8084 	bne.w	d9a00 <mbedtls_ecp_mul_restartable+0x140>

    ECP_RS_ENTER( rsm );

    /* Is P the base point ? */
#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
   d98f8:	f105 0134 	add.w	r1, r5, #52	; 0x34
   d98fc:	f106 000c 	add.w	r0, r6, #12
   d9900:	f7fd f88a 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   d9904:	b948      	cbnz	r0, d991a <mbedtls_ecp_mul_restartable+0x5a>
               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
   d9906:	f105 0128 	add.w	r1, r5, #40	; 0x28
   d990a:	4630      	mov	r0, r6
   d990c:	f7fd f884 	bl	d6a18 <mbedtls_mpi_cmp_mpi>

    ECP_RS_ENTER( rsm );

    /* Is P the base point ? */
#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
   d9910:	fab0 f980 	clz	r9, r0
   d9914:	ea4f 1959 	mov.w	r9, r9, lsr #5
   d9918:	e000      	b.n	d991c <mbedtls_ecp_mul_restartable+0x5c>
   d991a:	46d9      	mov	r9, fp
   d991c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    /*
     * Minimize the number of multiplications, that is minimize
     * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )
     * (see costs of the various parts, with 1S = 1M)
     */
    w = grp->nbits >= 384 ? 5 : 4;
   d991e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   d9922:	bf2c      	ite	cs
   d9924:	2705      	movcs	r7, #5
   d9926:	2704      	movcc	r7, #4
    /*
     * If P == G, pre-compute a bit more, since this may be re-used later.
     * Just adding one avoids upping the cost of the first mul too much,
     * and the memory cost too.
     */
    if( p_eq_g )
   d9928:	f1b9 0f00 	cmp.w	r9, #0
   d992c:	d000      	beq.n	d9930 <mbedtls_ecp_mul_restartable+0x70>
        w++;
   d992e:	3701      	adds	r7, #1
     * (The last test is useful only for very small curves in the test suite.)
     */
    if( w > MBEDTLS_ECP_WINDOW_SIZE )
        w = MBEDTLS_ECP_WINDOW_SIZE;
    if( w >= grp->nbits )
        w = 2;
   d9930:	42bb      	cmp	r3, r7
   d9932:	bf98      	it	ls
   d9934:	2702      	movls	r7, #2
    p_eq_g = 0;
#endif

    /* Pick window size and deduce related sizes */
    w = ecp_pick_window_size( grp, p_eq_g );
    T_size = 1U << ( w - 1 );
   d9936:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
   d993a:	2201      	movs	r2, #1
   d993c:	fa02 f208 	lsl.w	r2, r2, r8
   d9940:	9207      	str	r2, [sp, #28]
   d9942:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d9946:	9208      	str	r2, [sp, #32]
    d = ( grp->nbits + w - 1 ) / w;
   d9948:	3b01      	subs	r3, #1
   d994a:	443b      	add	r3, r7
   d994c:	fbb3 f3f7 	udiv	r3, r3, r7
   d9950:	9309      	str	r3, [sp, #36]	; 0x24

    /* Pre-computed table: do we have it already for the base point? */
    if( p_eq_g && grp->T != NULL )
   d9952:	f1b9 0f00 	cmp.w	r9, #0
   d9956:	d001      	beq.n	d995c <mbedtls_ecp_mul_restartable+0x9c>
   d9958:	6f6c      	ldr	r4, [r5, #116]	; 0x74
   d995a:	bb24      	cbnz	r4, d99a6 <mbedtls_ecp_mul_restartable+0xe6>
    }
    else
#endif
    /* Allocate table if we didn't have any */
    {
        T = (mbedtls_ecp_point *)mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
   d995c:	2124      	movs	r1, #36	; 0x24
   d995e:	9807      	ldr	r0, [sp, #28]
   d9960:	f00e fa5c 	bl	e7e1c <calloc>
        if( T == NULL )
   d9964:	4604      	mov	r4, r0
   d9966:	2800      	cmp	r0, #0
   d9968:	d02e      	beq.n	d99c8 <mbedtls_ecp_mul_restartable+0x108>
   d996a:	f04f 0a00 	mov.w	sl, #0
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
            goto cleanup;
        }

        for( i = 0; i < T_size; i++ )
            mbedtls_ecp_point_init( &T[i] );
   d996e:	f04f 0b24 	mov.w	fp, #36	; 0x24
   d9972:	fb0b 400a 	mla	r0, fp, sl, r4
   d9976:	f7ff f9dd 	bl	d8d34 <mbedtls_ecp_point_init>
   d997a:	f10a 0a01 	add.w	sl, sl, #1
        {
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
            goto cleanup;
        }

        for( i = 0; i < T_size; i++ )
   d997e:	9a08      	ldr	r2, [sp, #32]
   d9980:	fa5f f38a 	uxtb.w	r3, sl
   d9984:	429a      	cmp	r2, r3
   d9986:	d8f4      	bhi.n	d9972 <mbedtls_ecp_mul_restartable+0xb2>
   d9988:	e03d      	b.n	d9a06 <mbedtls_ecp_mul_restartable+0x146>
    for( j = 0; j + 1 < T_size; j++ )
        TT[j] = T + j + 1;

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
   d998a:	9b07      	ldr	r3, [sp, #28]
   d998c:	a90f      	add	r1, sp, #60	; 0x3c
   d998e:	1e5a      	subs	r2, r3, #1
   d9990:	4628      	mov	r0, r5
   d9992:	f7ff f849 	bl	d8a28 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj>
    }

    /* Compute table (or finish computing it) if not done already */
    if( !T_ok )
    {
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d, rs_ctx ) );
   d9996:	4683      	mov	fp, r0
   d9998:	b9c0      	cbnz	r0, d99cc <mbedtls_ecp_mul_restartable+0x10c>

        if( p_eq_g )
   d999a:	f1b9 0f00 	cmp.w	r9, #0
   d999e:	d002      	beq.n	d99a6 <mbedtls_ecp_mul_restartable+0xe6>
        {
            /* almost transfer ownership of T to the group, but keep a copy of
             * the pointer to use for calling the next function more easily */
            grp->T = T;
            grp->T_size = T_size;
   d99a0:	9b07      	ldr	r3, [sp, #28]

        if( p_eq_g )
        {
            /* almost transfer ownership of T to the group, but keep a copy of
             * the pointer to use for calling the next function more easily */
            grp->T = T;
   d99a2:	676c      	str	r4, [r5, #116]	; 0x74
            grp->T_size = T_size;
   d99a4:	67ab      	str	r3, [r5, #120]	; 0x78
        }
    }

    /* Actual comb multiplication using precomputed points */
    MBEDTLS_MPI_CHK( ecp_mul_comb_after_precomp( grp, R, m,
   d99a6:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   d99a8:	9304      	str	r3, [sp, #16]
   d99aa:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   d99ac:	9303      	str	r3, [sp, #12]
   d99ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d99b0:	9302      	str	r3, [sp, #8]
   d99b2:	9b08      	ldr	r3, [sp, #32]
   d99b4:	9300      	str	r3, [sp, #0]
   d99b6:	9701      	str	r7, [sp, #4]
   d99b8:	4623      	mov	r3, r4
   d99ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d99bc:	990a      	ldr	r1, [sp, #40]	; 0x28
   d99be:	4628      	mov	r0, r5
   d99c0:	f7ff fc52 	bl	d9268 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6>
   d99c4:	4683      	mov	fp, r0
   d99c6:	e001      	b.n	d99cc <mbedtls_ecp_mul_restartable+0x10c>
    /* Allocate table if we didn't have any */
    {
        T = (mbedtls_ecp_point *)mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
        if( T == NULL )
        {
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
   d99c8:	f8df b140 	ldr.w	fp, [pc, #320]	; d9b0c <mbedtls_ecp_mul_restartable+0x24c>
                                                 f_rng, p_rng, rs_ctx ) );

cleanup:

    /* does T belong to the group? */
    if( T == grp->T )
   d99cc:	6f6a      	ldr	r2, [r5, #116]	; 0x74
   d99ce:	42a2      	cmp	r2, r4
   d99d0:	d00e      	beq.n	d99f0 <mbedtls_ecp_mul_restartable+0x130>
        T = NULL;
    }
#endif

    /* did T belong to us? then let's destroy it! */
    if( T != NULL )
   d99d2:	b16c      	cbz	r4, d99f0 <mbedtls_ecp_mul_restartable+0x130>
   d99d4:	2500      	movs	r5, #0
    {
        for( i = 0; i < T_size; i++ )
            mbedtls_ecp_point_free( &T[i] );
   d99d6:	2624      	movs	r6, #36	; 0x24
   d99d8:	fb06 4005 	mla	r0, r6, r5, r4
   d99dc:	f7ff f9e7 	bl	d8dae <mbedtls_ecp_point_free>
   d99e0:	3501      	adds	r5, #1
#endif

    /* did T belong to us? then let's destroy it! */
    if( T != NULL )
    {
        for( i = 0; i < T_size; i++ )
   d99e2:	9b08      	ldr	r3, [sp, #32]
   d99e4:	b2ea      	uxtb	r2, r5
   d99e6:	4293      	cmp	r3, r2
   d99e8:	d8f6      	bhi.n	d99d8 <mbedtls_ecp_mul_restartable+0x118>
            mbedtls_ecp_point_free( &T[i] );
        mbedtls_free( T );
   d99ea:	4620      	mov	r0, r4
   d99ec:	f00c f8a8 	bl	e5b40 <free>
    /* don't free R while in progress in case R == P */
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( ret != MBEDTLS_ERR_ECP_IN_PROGRESS )
#endif
    /* prevent caller from using invalid value */
    if( ret != 0 )
   d99f0:	f1bb 0f00 	cmp.w	fp, #0
   d99f4:	f000 8085 	beq.w	d9b02 <mbedtls_ecp_mul_restartable+0x242>
        mbedtls_ecp_point_free( R );
   d99f8:	980a      	ldr	r0, [sp, #40]	; 0x28
   d99fa:	f7ff f9d8 	bl	d8dae <mbedtls_ecp_point_free>
   d99fe:	e080      	b.n	d9b02 <mbedtls_ecp_mul_restartable+0x242>
        /* Common sanity checks */
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
    }

    ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d9a00:	f8df b10c 	ldr.w	fp, [pc, #268]	; d9b10 <mbedtls_ecp_mul_restartable+0x250>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL )
        rs_ctx->depth--;
#endif

    return( ret );
   d9a04:	e07d      	b.n	d9b02 <mbedtls_ecp_mul_restartable+0x242>
#endif
    /*
     * Set T[0] = P and
     * T[2^{l-1}] = 2^{dl} P for l = 1 .. w-1 (this is not the final value)
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
   d9a06:	4631      	mov	r1, r6
   d9a08:	4620      	mov	r0, r4
   d9a0a:	f7ff fa20 	bl	d8e4e <mbedtls_ecp_copy>
   d9a0e:	4683      	mov	fp, r0
   d9a10:	2800      	cmp	r0, #0
   d9a12:	d1db      	bne.n	d99cc <mbedtls_ecp_mul_restartable+0x10c>
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;

    for( ; j < d * ( w - 1 ); j++ )
   d9a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9a16:	fb03 f308 	mul.w	r3, r3, r8
   d9a1a:	930c      	str	r3, [sp, #48]	; 0x30
   d9a1c:	46d8      	mov	r8, fp
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
        cur = T + i;
   d9a1e:	2624      	movs	r6, #36	; 0x24
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;

    for( ; j < d * ( w - 1 ); j++ )
   d9a20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9a22:	4543      	cmp	r3, r8
   d9a24:	d023      	beq.n	d9a6e <mbedtls_ecp_mul_restartable+0x1ae>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
   d9a26:	2201      	movs	r2, #1
   d9a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9a2a:	fbb8 f3f3 	udiv	r3, r8, r3
   d9a2e:	fa02 f103 	lsl.w	r1, r2, r3
        cur = T + i;

        if( j % d == 0 )
   d9a32:	9a09      	ldr	r2, [sp, #36]	; 0x24
    for( ; j < d * ( w - 1 ); j++ )
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
        cur = T + i;
   d9a34:	fa5f fa81 	uxtb.w	sl, r1

        if( j % d == 0 )
   d9a38:	fb02 8313 	mls	r3, r2, r3, r8
    for( ; j < d * ( w - 1 ); j++ )
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
        cur = T + i;
   d9a3c:	fb06 4a0a 	mla	sl, r6, sl, r4

        if( j % d == 0 )
   d9a40:	b153      	cbz	r3, d9a58 <mbedtls_ecp_mul_restartable+0x198>
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
   d9a42:	4652      	mov	r2, sl
   d9a44:	4651      	mov	r1, sl
   d9a46:	4628      	mov	r0, r5
   d9a48:	f7fe fd5c 	bl	d8504 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>
   d9a4c:	4683      	mov	fp, r0
   d9a4e:	2800      	cmp	r0, #0
   d9a50:	d1bc      	bne.n	d99cc <mbedtls_ecp_mul_restartable+0x10c>
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;

    for( ; j < d * ( w - 1 ); j++ )
   d9a52:	f108 0801 	add.w	r8, r8, #1
   d9a56:	e7e3      	b.n	d9a20 <mbedtls_ecp_mul_restartable+0x160>

        i = 1U << ( j / d );
        cur = T + i;

        if( j % d == 0 )
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
   d9a58:	f3c1 0146 	ubfx	r1, r1, #1, #7
   d9a5c:	fb06 4101 	mla	r1, r6, r1, r4
   d9a60:	4650      	mov	r0, sl
   d9a62:	f7ff f9f4 	bl	d8e4e <mbedtls_ecp_copy>
   d9a66:	4683      	mov	fp, r0
   d9a68:	2800      	cmp	r0, #0
   d9a6a:	d0ea      	beq.n	d9a42 <mbedtls_ecp_mul_restartable+0x182>
   d9a6c:	e7ae      	b.n	d99cc <mbedtls_ecp_mul_restartable+0x10c>
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;

    for( ; j < d * ( w - 1 ); j++ )
   d9a6e:	2200      	movs	r2, #0
   d9a70:	2301      	movs	r3, #1
     * Normalize current elements in T. As T has holes,
     * use an auxiliary array of pointers to elements in T.
     */
    j = 0;
    for( i = 1; i < T_size; i <<= 1 )
        TT[j++] = T + i;
   d9a72:	eb03 00c3 	add.w	r0, r3, r3, lsl #3
   d9a76:	a90f      	add	r1, sp, #60	; 0x3c
   d9a78:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   d9a7c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
    /*
     * Normalize current elements in T. As T has holes,
     * use an auxiliary array of pointers to elements in T.
     */
    j = 0;
    for( i = 1; i < T_size; i <<= 1 )
   d9a80:	005b      	lsls	r3, r3, #1
   d9a82:	9808      	ldr	r0, [sp, #32]
   d9a84:	b2db      	uxtb	r3, r3
   d9a86:	4298      	cmp	r0, r3
   d9a88:	f102 0201 	add.w	r2, r2, #1
   d9a8c:	d8f1      	bhi.n	d9a72 <mbedtls_ecp_mul_restartable+0x1b2>
        TT[j++] = T + i;

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
   d9a8e:	4628      	mov	r0, r5
   d9a90:	f7fe ffca 	bl	d8a28 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj>
   d9a94:	4683      	mov	fp, r0
   d9a96:	2800      	cmp	r0, #0
   d9a98:	d198      	bne.n	d99cc <mbedtls_ecp_mul_restartable+0x10c>
   d9a9a:	2601      	movs	r6, #1

    for( i = 1; i < T_size; i <<= 1 )
    {
        j = i;
        while( j-- )
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
   d9a9c:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
   d9aa0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   d9aa4:	f06f 0223 	mvn.w	r2, #35	; 0x23
   d9aa8:	930d      	str	r3, [sp, #52]	; 0x34
   d9aaa:	2348      	movs	r3, #72	; 0x48
   d9aac:	fb13 2a06 	smlabb	sl, r3, r6, r2
   d9ab0:	4613      	mov	r3, r2
   d9ab2:	4373      	muls	r3, r6
   d9ab4:	44a2      	add	sl, r4
   d9ab6:	930c      	str	r3, [sp, #48]	; 0x30
   d9ab8:	46b0      	mov	r8, r6
   d9aba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   d9abc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d9abe:	4452      	add	r2, sl
   d9ac0:	4651      	mov	r1, sl
   d9ac2:	4628      	mov	r0, r5
   d9ac4:	f7ff f9f0 	bl	d8ea8 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>
   d9ac8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d9acc:	f1aa 0a24 	sub.w	sl, sl, #36	; 0x24
   d9ad0:	4683      	mov	fp, r0
   d9ad2:	2800      	cmp	r0, #0
   d9ad4:	f47f af7a 	bne.w	d99cc <mbedtls_ecp_mul_restartable+0x10c>
    MBEDTLS_ECP_BUDGET( ( T_size - 1 ) * MBEDTLS_ECP_OPS_ADD );

    for( i = 1; i < T_size; i <<= 1 )
    {
        j = i;
        while( j-- )
   d9ad8:	f1b8 0f00 	cmp.w	r8, #0
   d9adc:	d1ed      	bne.n	d9aba <mbedtls_ecp_mul_restartable+0x1fa>
     * Compute the remaining ones using the minimal number of additions
     * Be careful to update T[2^l] only after using it!
     */
    MBEDTLS_ECP_BUDGET( ( T_size - 1 ) * MBEDTLS_ECP_OPS_ADD );

    for( i = 1; i < T_size; i <<= 1 )
   d9ade:	0076      	lsls	r6, r6, #1
   d9ae0:	9b08      	ldr	r3, [sp, #32]
   d9ae2:	b2f6      	uxtb	r6, r6
   d9ae4:	42b3      	cmp	r3, r6
   d9ae6:	d8d9      	bhi.n	d9a9c <mbedtls_ecp_mul_restartable+0x1dc>
   d9ae8:	ab0e      	add	r3, sp, #56	; 0x38
     * Normalize final elements in T. Even though there are no holes now, we
     * still need the auxiliary array for homogeneity with the previous
     * call. Also, skip T[0] which is already normalised, being a copy of P.
     */
    for( j = 0; j + 1 < T_size; j++ )
        TT[j] = T + j + 1;
   d9aea:	2124      	movs	r1, #36	; 0x24
    /*
     * Normalize final elements in T. Even though there are no holes now, we
     * still need the auxiliary array for homogeneity with the previous
     * call. Also, skip T[0] which is already normalised, being a copy of P.
     */
    for( j = 0; j + 1 < T_size; j++ )
   d9aec:	9a07      	ldr	r2, [sp, #28]
   d9aee:	f108 0801 	add.w	r8, r8, #1
   d9af2:	4542      	cmp	r2, r8
   d9af4:	f43f af49 	beq.w	d998a <mbedtls_ecp_mul_restartable+0xca>
        TT[j] = T + j + 1;
   d9af8:	fb01 4208 	mla	r2, r1, r8, r4
   d9afc:	f843 2f04 	str.w	r2, [r3, #4]!
   d9b00:	e7f4      	b.n	d9aec <mbedtls_ecp_mul_restartable+0x22c>
    if( rs_ctx != NULL )
        rs_ctx->depth--;
#endif

    return( ret );
}
   d9b02:	4658      	mov	r0, fp
   d9b04:	b02f      	add	sp, #188	; 0xbc
   d9b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9b0a:	bf00      	nop
   d9b0c:	ffffb280 	.word	0xffffb280
   d9b10:	ffffb080 	.word	0xffffb080

000d9b14 <mbedtls_ecp_mul>:
 * Multiplication R = m * P
 */
int mbedtls_ecp_mul( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   d9b14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( R   != NULL );
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    return( mbedtls_ecp_mul_restartable( grp, R, m, P, f_rng, p_rng, NULL ) );
   d9b16:	2400      	movs	r4, #0
   d9b18:	9402      	str	r4, [sp, #8]
   d9b1a:	9c07      	ldr	r4, [sp, #28]
   d9b1c:	9401      	str	r4, [sp, #4]
   d9b1e:	9c06      	ldr	r4, [sp, #24]
   d9b20:	9400      	str	r4, [sp, #0]
   d9b22:	f7ff fecd 	bl	d98c0 <mbedtls_ecp_mul_restartable>
}
   d9b26:	b004      	add	sp, #16
   d9b28:	bd10      	pop	{r4, pc}

000d9b2a <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv>:
static int mbedtls_ecp_mul_shortcuts( mbedtls_ecp_group *grp,
                                      mbedtls_ecp_point *R,
                                      const mbedtls_mpi *m,
                                      const mbedtls_ecp_point *P,
                                      mbedtls_ecp_restart_ctx *rs_ctx )
{
   d9b2a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d9b2e:	4607      	mov	r7, r0
   d9b30:	460c      	mov	r4, r1
    int ret;

    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
   d9b32:	4610      	mov	r0, r2
   d9b34:	2101      	movs	r1, #1
static int mbedtls_ecp_mul_shortcuts( mbedtls_ecp_group *grp,
                                      mbedtls_ecp_point *R,
                                      const mbedtls_mpi *m,
                                      const mbedtls_ecp_point *P,
                                      mbedtls_ecp_restart_ctx *rs_ctx )
{
   d9b36:	4615      	mov	r5, r2
   d9b38:	461e      	mov	r6, r3
   d9b3a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    int ret;

    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
   d9b3e:	f7fc ffb0 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d9b42:	b930      	cbnz	r0, d9b52 <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x28>
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
   d9b44:	4631      	mov	r1, r6
   d9b46:	4620      	mov	r0, r4
                                                      NULL, NULL, rs_ctx ) );
    }

cleanup:
    return( ret );
}
   d9b48:	b004      	add	sp, #16
   d9b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
{
    int ret;

    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
   d9b4e:	f7ff b97e 	b.w	d8e4e <mbedtls_ecp_copy>
    }
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
   d9b52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d9b56:	4628      	mov	r0, r5
   d9b58:	f7fc ffa3 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d9b5c:	b998      	cbnz	r0, d9b86 <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x5c>
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
   d9b5e:	4631      	mov	r1, r6
   d9b60:	4620      	mov	r0, r4
   d9b62:	f7ff f974 	bl	d8e4e <mbedtls_ecp_copy>
   d9b66:	4605      	mov	r5, r0
   d9b68:	b9c8      	cbnz	r0, d9b9e <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x74>
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
   d9b6a:	340c      	adds	r4, #12
   d9b6c:	4601      	mov	r1, r0
   d9b6e:	4620      	mov	r0, r4
   d9b70:	f7fc ff97 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d9b74:	b198      	cbz	r0, d9b9e <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x74>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
   d9b76:	4622      	mov	r2, r4
   d9b78:	1d39      	adds	r1, r7, #4
   d9b7a:	4620      	mov	r0, r4
                                                      NULL, NULL, rs_ctx ) );
    }

cleanup:
    return( ret );
}
   d9b7c:	b004      	add	sp, #16
   d9b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    }
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
   d9b82:	f7fd b85f 	b.w	d6c44 <mbedtls_mpi_sub_mpi>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, R, m, P,
   d9b86:	2300      	movs	r3, #0
   d9b88:	9301      	str	r3, [sp, #4]
   d9b8a:	9300      	str	r3, [sp, #0]
   d9b8c:	462a      	mov	r2, r5
   d9b8e:	f8cd 8008 	str.w	r8, [sp, #8]
   d9b92:	4633      	mov	r3, r6
   d9b94:	4621      	mov	r1, r4
   d9b96:	4638      	mov	r0, r7
   d9b98:	f7ff fe92 	bl	d98c0 <mbedtls_ecp_mul_restartable>
   d9b9c:	4605      	mov	r5, r0
                                                      NULL, NULL, rs_ctx ) );
    }

cleanup:
    return( ret );
}
   d9b9e:	4628      	mov	r0, r5
   d9ba0:	b004      	add	sp, #16
   d9ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d9ba8 <mbedtls_ecp_muladd_restartable>:
int mbedtls_ecp_muladd_restartable(
             mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             const mbedtls_mpi *n, const mbedtls_ecp_point *Q,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
   d9ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9bac:	b08c      	sub	sp, #48	; 0x30
   d9bae:	4605      	mov	r5, r0
   d9bb0:	460e      	mov	r6, r1
   d9bb2:	4614      	mov	r4, r2
   d9bb4:	4698      	mov	r8, r3
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    ECP_VALIDATE_RET( n   != NULL );
    ECP_VALIDATE_RET( Q   != NULL );

    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
   d9bb6:	f7fe fc56 	bl	d8466 <_ZL12ecp_get_typePK17mbedtls_ecp_group>
   d9bba:	2801      	cmp	r0, #1
int mbedtls_ecp_muladd_restartable(
             mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             const mbedtls_mpi *n, const mbedtls_ecp_point *Q,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
   d9bbc:	9f14      	ldr	r7, [sp, #80]	; 0x50
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    ECP_VALIDATE_RET( n   != NULL );
    ECP_VALIDATE_RET( Q   != NULL );

    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
   d9bbe:	d126      	bne.n	d9c0e <mbedtls_ecp_muladd_restartable+0x66>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );

    mbedtls_ecp_point_init( &mP );
   d9bc0:	a803      	add	r0, sp, #12
   d9bc2:	f7ff f8b7 	bl	d8d34 <mbedtls_ecp_point_init>
        if( rs_ctx->ma->state == ecp_rsma_norm )
            goto norm;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pmP, m, P, rs_ctx ) );
   d9bc6:	4622      	mov	r2, r4
   d9bc8:	9700      	str	r7, [sp, #0]
   d9bca:	4643      	mov	r3, r8
   d9bcc:	a903      	add	r1, sp, #12
   d9bce:	4628      	mov	r0, r5
   d9bd0:	f7ff ffab 	bl	d9b2a <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv>
   d9bd4:	4604      	mov	r4, r0
   d9bd6:	b9a8      	cbnz	r0, d9c04 <mbedtls_ecp_muladd_restartable+0x5c>
    if( rs_ctx != NULL && rs_ctx->ma != NULL )
        rs_ctx->ma->state = ecp_rsma_mul2;

mul2:
#endif
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pR,  n, Q, rs_ctx ) );
   d9bd8:	9700      	str	r7, [sp, #0]
   d9bda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d9bdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d9bde:	4631      	mov	r1, r6
   d9be0:	4628      	mov	r0, r5
   d9be2:	f7ff ffa2 	bl	d9b2a <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv>
   d9be6:	4604      	mov	r4, r0
   d9be8:	b960      	cbnz	r0, d9c04 <mbedtls_ecp_muladd_restartable+0x5c>
        rs_ctx->ma->state = ecp_rsma_add;

add:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_ADD );
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, pR, pmP, pR ) );
   d9bea:	4633      	mov	r3, r6
   d9bec:	aa03      	add	r2, sp, #12
   d9bee:	4631      	mov	r1, r6
   d9bf0:	4628      	mov	r0, r5
   d9bf2:	f7ff f959 	bl	d8ea8 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>
   d9bf6:	4604      	mov	r4, r0
   d9bf8:	b920      	cbnz	r0, d9c04 <mbedtls_ecp_muladd_restartable+0x5c>
        rs_ctx->ma->state = ecp_rsma_norm;

norm:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, pR ) );
   d9bfa:	4631      	mov	r1, r6
   d9bfc:	4628      	mov	r0, r5
   d9bfe:	f7fe feb6 	bl	d896e <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>
   d9c02:	4604      	mov	r4, r0
#if defined(MBEDTLS_ECP_INTERNAL_ALT)
    if( is_grp_capable )
        mbedtls_internal_ecp_free( grp );
#endif /* MBEDTLS_ECP_INTERNAL_ALT */

    mbedtls_ecp_point_free( &mP );
   d9c04:	a803      	add	r0, sp, #12
   d9c06:	f7ff f8d2 	bl	d8dae <mbedtls_ecp_point_free>

    ECP_RS_LEAVE( ma );

    return( ret );
   d9c0a:	4620      	mov	r0, r4
   d9c0c:	e000      	b.n	d9c10 <mbedtls_ecp_muladd_restartable+0x68>
    ECP_VALIDATE_RET( P   != NULL );
    ECP_VALIDATE_RET( n   != NULL );
    ECP_VALIDATE_RET( Q   != NULL );

    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   d9c0e:	4802      	ldr	r0, [pc, #8]	; (d9c18 <mbedtls_ecp_muladd_restartable+0x70>)
    mbedtls_ecp_point_free( &mP );

    ECP_RS_LEAVE( ma );

    return( ret );
}
   d9c10:	b00c      	add	sp, #48	; 0x30
   d9c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9c16:	bf00      	nop
   d9c18:	ffffb180 	.word	0xffffb180

000d9c1c <mbedtls_ecp_gen_privkey>:
 */
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d9c1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9c20:	4607      	mov	r7, r0

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
   d9c22:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 */
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d9c24:	460d      	mov	r5, r1
   d9c26:	4692      	mov	sl, r2
   d9c28:	469b      	mov	fp, r3
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d9c2a:	f7fe fc1c 	bl	d8466 <_ZL12ecp_get_typePK17mbedtls_ecp_group>

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
   d9c2e:	3407      	adds	r4, #7
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d9c30:	2801      	cmp	r0, #1

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
   d9c32:	ea4f 04d4 	mov.w	r4, r4, lsr #3
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d9c36:	d124      	bne.n	d9c82 <mbedtls_ecp_gen_privkey+0x66>
             */
            if( ++count > 30 )
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
   d9c38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
         * This also avoids any biais, which is especially important for ECDSA.
         */
        do
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
   d9c3c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
   d9c40:	261f      	movs	r6, #31
             */
            if( ++count > 30 )
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
   d9c42:	9301      	str	r3, [sp, #4]
         * - try until result is in the desired range.
         * This also avoids any biais, which is especially important for ECDSA.
         */
        do
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
   d9c44:	465b      	mov	r3, fp
   d9c46:	4652      	mov	r2, sl
   d9c48:	4621      	mov	r1, r4
   d9c4a:	4628      	mov	r0, r5
   d9c4c:	f7fd fd5a 	bl	d7704 <mbedtls_mpi_fill_random>
   d9c50:	4680      	mov	r8, r0
   d9c52:	b9d8      	cbnz	r0, d9c8c <mbedtls_ecp_gen_privkey+0x70>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
   d9c54:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   d9c56:	4628      	mov	r0, r5
   d9c58:	ebc1 0109 	rsb	r1, r1, r9
   d9c5c:	f7fc fdfd 	bl	d685a <mbedtls_mpi_shift_r>
   d9c60:	4680      	mov	r8, r0
   d9c62:	b998      	cbnz	r0, d9c8c <mbedtls_ecp_gen_privkey+0x70>
             *
             * For most curves, 1 try is enough with overwhelming probability,
             * since N starts with a lot of 1s in binary, but some curves
             * such as secp224k1 are actually very close to the worst case.
             */
            if( ++count > 30 )
   d9c64:	3e01      	subs	r6, #1
   d9c66:	d00f      	beq.n	d9c88 <mbedtls_ecp_gen_privkey+0x6c>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   d9c68:	2101      	movs	r1, #1
   d9c6a:	4628      	mov	r0, r5
   d9c6c:	f7fc ff19 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   d9c70:	2800      	cmp	r0, #0
   d9c72:	dbe7      	blt.n	d9c44 <mbedtls_ecp_gen_privkey+0x28>
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
   d9c74:	9901      	ldr	r1, [sp, #4]
   d9c76:	4628      	mov	r0, r5
   d9c78:	f7fc fece 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
             * such as secp224k1 are actually very close to the worst case.
             */
            if( ++count > 30 )
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   d9c7c:	2800      	cmp	r0, #0
   d9c7e:	dae1      	bge.n	d9c44 <mbedtls_ecp_gen_privkey+0x28>
   d9c80:	e004      	b.n	d9c8c <mbedtls_ecp_gen_privkey+0x70>
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d9c82:	f8df 8010 	ldr.w	r8, [pc, #16]	; d9c94 <mbedtls_ecp_gen_privkey+0x78>
   d9c86:	e001      	b.n	d9c8c <mbedtls_ecp_gen_privkey+0x70>
             * For most curves, 1 try is enough with overwhelming probability,
             * since N starts with a lot of 1s in binary, but some curves
             * such as secp224k1 are actually very close to the worst case.
             */
            if( ++count > 30 )
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
   d9c88:	f8df 800c 	ldr.w	r8, [pc, #12]	; d9c98 <mbedtls_ecp_gen_privkey+0x7c>
    }
#endif /* ECP_SHORTWEIERSTRASS */

cleanup:
    return( ret );
}
   d9c8c:	4640      	mov	r0, r8
   d9c8e:	b003      	add	sp, #12
   d9c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9c94:	ffffb080 	.word	0xffffb080
   d9c98:	ffffb300 	.word	0xffffb300

000d9c9c <mbedtls_ecp_check_pub_priv>:

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
   d9c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
   d9ca0:	7803      	ldrb	r3, [r0, #0]

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
   d9ca2:	b0aa      	sub	sp, #168	; 0xa8
   d9ca4:	4605      	mov	r5, r0
   d9ca6:	460c      	mov	r4, r1
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
   d9ca8:	2b00      	cmp	r3, #0
   d9caa:	d049      	beq.n	d9d40 <mbedtls_ecp_check_pub_priv+0xa4>
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
   d9cac:	780a      	ldrb	r2, [r1, #0]
   d9cae:	429a      	cmp	r2, r3
   d9cb0:	d146      	bne.n	d9d40 <mbedtls_ecp_check_pub_priv+0xa4>
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
   d9cb2:	f101 0688 	add.w	r6, r1, #136	; 0x88
   d9cb6:	4631      	mov	r1, r6
   d9cb8:	3088      	adds	r0, #136	; 0x88
   d9cba:	f7fc fead 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
        pub->grp.id != prv->grp.id ||
   d9cbe:	2800      	cmp	r0, #0
   d9cc0:	d13e      	bne.n	d9d40 <mbedtls_ecp_check_pub_priv+0xa4>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
   d9cc2:	f104 0794 	add.w	r7, r4, #148	; 0x94
   d9cc6:	4639      	mov	r1, r7
   d9cc8:	f105 0094 	add.w	r0, r5, #148	; 0x94
   d9ccc:	f7fc fea4 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
   d9cd0:	2800      	cmp	r0, #0
   d9cd2:	d135      	bne.n	d9d40 <mbedtls_ecp_check_pub_priv+0xa4>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
   d9cd4:	f104 08a0 	add.w	r8, r4, #160	; 0xa0
   d9cd8:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
   d9cdc:	4641      	mov	r1, r8
   d9cde:	f7fc fe9b 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
   d9ce2:	4605      	mov	r5, r0
   d9ce4:	bb60      	cbnz	r0, d9d40 <mbedtls_ecp_check_pub_priv+0xa4>
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }

    mbedtls_ecp_point_init( &Q );
   d9ce6:	a802      	add	r0, sp, #8
   d9ce8:	f7ff f824 	bl	d8d34 <mbedtls_ecp_point_init>
    mbedtls_ecp_group_init( &grp );
   d9cec:	a80b      	add	r0, sp, #44	; 0x2c
   d9cee:	f7ff f82f 	bl	d8d50 <mbedtls_ecp_group_init>

    /* mbedtls_ecp_mul() needs a non-const group... */
    mbedtls_ecp_group_copy( &grp, &prv->grp );
   d9cf2:	4621      	mov	r1, r4
   d9cf4:	a80b      	add	r0, sp, #44	; 0x2c
   d9cf6:	f7ff f8c0 	bl	d8e7a <mbedtls_ecp_group_copy>

    /* Also checks d is valid */
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
   d9cfa:	f104 0328 	add.w	r3, r4, #40	; 0x28
   d9cfe:	f104 027c 	add.w	r2, r4, #124	; 0x7c
   d9d02:	9501      	str	r5, [sp, #4]
   d9d04:	9500      	str	r5, [sp, #0]
   d9d06:	a902      	add	r1, sp, #8
   d9d08:	a80b      	add	r0, sp, #44	; 0x2c
   d9d0a:	f7ff ff03 	bl	d9b14 <mbedtls_ecp_mul>
   d9d0e:	4604      	mov	r4, r0
   d9d10:	b970      	cbnz	r0, d9d30 <mbedtls_ecp_check_pub_priv+0x94>

    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
   d9d12:	4631      	mov	r1, r6
   d9d14:	a802      	add	r0, sp, #8
   d9d16:	f7fc fe7f 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
   d9d1a:	b998      	cbnz	r0, d9d44 <mbedtls_ecp_check_pub_priv+0xa8>
   d9d1c:	4639      	mov	r1, r7
   d9d1e:	a805      	add	r0, sp, #20
   d9d20:	f7fc fe7a 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
    mbedtls_ecp_group_copy( &grp, &prv->grp );

    /* Also checks d is valid */
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );

    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
   d9d24:	b970      	cbnz	r0, d9d44 <mbedtls_ecp_check_pub_priv+0xa8>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
   d9d26:	4641      	mov	r1, r8
   d9d28:	a808      	add	r0, sp, #32
   d9d2a:	f7fc fe75 	bl	d6a18 <mbedtls_mpi_cmp_mpi>

    /* Also checks d is valid */
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );

    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
   d9d2e:	b948      	cbnz	r0, d9d44 <mbedtls_ecp_check_pub_priv+0xa8>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
        goto cleanup;
    }

cleanup:
    mbedtls_ecp_point_free( &Q );
   d9d30:	a802      	add	r0, sp, #8
   d9d32:	f7ff f83c 	bl	d8dae <mbedtls_ecp_point_free>
    mbedtls_ecp_group_free( &grp );
   d9d36:	a80b      	add	r0, sp, #44	; 0x2c
   d9d38:	f7ff f849 	bl	d8dce <mbedtls_ecp_group_free>

    return( ret );
   d9d3c:	4620      	mov	r0, r4
   d9d3e:	e003      	b.n	d9d48 <mbedtls_ecp_check_pub_priv+0xac>
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d9d40:	4803      	ldr	r0, [pc, #12]	; (d9d50 <mbedtls_ecp_check_pub_priv+0xb4>)
   d9d42:	e001      	b.n	d9d48 <mbedtls_ecp_check_pub_priv+0xac>

    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d9d44:	4c02      	ldr	r4, [pc, #8]	; (d9d50 <mbedtls_ecp_check_pub_priv+0xb4>)
   d9d46:	e7f3      	b.n	d9d30 <mbedtls_ecp_check_pub_priv+0x94>
cleanup:
    mbedtls_ecp_point_free( &Q );
    mbedtls_ecp_group_free( &grp );

    return( ret );
}
   d9d48:	b02a      	add	sp, #168	; 0xa8
   d9d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9d4e:	bf00      	nop
   d9d50:	ffffb080 	.word	0xffffb080

000d9d54 <_ZL5add32PmmPa>:
/*
 * Helpers for addition and subtraction of chunks, with signed carry.
 */
static inline void add32( uint32_t *dst, uint32_t src, signed char *carry )
{
    *dst += src;
   d9d54:	6803      	ldr	r3, [r0, #0]
   d9d56:	440b      	add	r3, r1
   d9d58:	6003      	str	r3, [r0, #0]
    *carry += ( *dst < src );
   d9d5a:	7810      	ldrb	r0, [r2, #0]
   d9d5c:	4299      	cmp	r1, r3
   d9d5e:	bf94      	ite	ls
   d9d60:	4603      	movls	r3, r0
   d9d62:	1c43      	addhi	r3, r0, #1
   d9d64:	7013      	strb	r3, [r2, #0]
   d9d66:	4770      	bx	lr

000d9d68 <_ZL5sub32PmmPa>:
}

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
    *carry -= ( *dst < src );
   d9d68:	6803      	ldr	r3, [r0, #0]
    *dst += src;
    *carry += ( *dst < src );
}

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
   d9d6a:	b510      	push	{r4, lr}
    *carry -= ( *dst < src );
   d9d6c:	7814      	ldrb	r4, [r2, #0]
   d9d6e:	428b      	cmp	r3, r1
   d9d70:	bf38      	it	cc
   d9d72:	3c01      	subcc	r4, #1
   d9d74:	7014      	strb	r4, [r2, #0]
    *dst -= src;
   d9d76:	6803      	ldr	r3, [r0, #0]
   d9d78:	1a5b      	subs	r3, r3, r1
   d9d7a:	6003      	str	r3, [r0, #0]
   d9d7c:	bd10      	pop	{r4, pc}

000d9d7e <_ZL12ecp_mod_p256P11mbedtls_mpi>:
#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
   d9d7e:	b530      	push	{r4, r5, lr}
   d9d80:	b08f      	sub	sp, #60	; 0x3c
    INIT( 256 );
   d9d82:	2301      	movs	r3, #1
   d9d84:	2100      	movs	r1, #0
#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
   d9d86:	4604      	mov	r4, r0
    INIT( 256 );
   d9d88:	9302      	str	r3, [sp, #8]
   d9d8a:	a805      	add	r0, sp, #20
   d9d8c:	2309      	movs	r3, #9
   d9d8e:	2224      	movs	r2, #36	; 0x24
   d9d90:	f88d 1003 	strb.w	r1, [sp, #3]
   d9d94:	9303      	str	r3, [sp, #12]
   d9d96:	9004      	str	r0, [sp, #16]
   d9d98:	f00e f88b 	bl	e7eb2 <memset>
   d9d9c:	2110      	movs	r1, #16
   d9d9e:	4620      	mov	r0, r4
   d9da0:	f7fc fb6b 	bl	d647a <mbedtls_mpi_grow>
   d9da4:	4605      	mov	r5, r0
   d9da6:	2800      	cmp	r0, #0
   d9da8:	f040 824d 	bne.w	da246 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4c8>
   d9dac:	68a3      	ldr	r3, [r4, #8]
   d9dae:	681a      	ldr	r2, [r3, #0]

    ADD(  8 ); ADD(  9 );
   d9db0:	6a19      	ldr	r1, [r3, #32]
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
    INIT( 256 );
   d9db2:	9201      	str	r2, [sp, #4]

    ADD(  8 ); ADD(  9 );
   d9db4:	a801      	add	r0, sp, #4
   d9db6:	f10d 0203 	add.w	r2, sp, #3
   d9dba:	f7ff ffcb 	bl	d9d54 <_ZL5add32PmmPa>
   d9dbe:	68a3      	ldr	r3, [r4, #8]
   d9dc0:	f10d 0203 	add.w	r2, sp, #3
   d9dc4:	6a59      	ldr	r1, [r3, #36]	; 0x24
   d9dc6:	a801      	add	r0, sp, #4
   d9dc8:	f7ff ffc4 	bl	d9d54 <_ZL5add32PmmPa>
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
   d9dcc:	68a3      	ldr	r3, [r4, #8]
   d9dce:	f10d 0203 	add.w	r2, sp, #3
   d9dd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   d9dd4:	a801      	add	r0, sp, #4
   d9dd6:	f7ff ffc7 	bl	d9d68 <_ZL5sub32PmmPa>
   d9dda:	68a3      	ldr	r3, [r4, #8]
   d9ddc:	f10d 0203 	add.w	r2, sp, #3
   d9de0:	6b19      	ldr	r1, [r3, #48]	; 0x30
   d9de2:	a801      	add	r0, sp, #4
   d9de4:	f7ff ffc0 	bl	d9d68 <_ZL5sub32PmmPa>
   d9de8:	68a3      	ldr	r3, [r4, #8]
   d9dea:	f10d 0203 	add.w	r2, sp, #3
   d9dee:	6b59      	ldr	r1, [r3, #52]	; 0x34
   d9df0:	a801      	add	r0, sp, #4
   d9df2:	f7ff ffb9 	bl	d9d68 <_ZL5sub32PmmPa>
   d9df6:	68a3      	ldr	r3, [r4, #8]
   d9df8:	f10d 0203 	add.w	r2, sp, #3
   d9dfc:	6b99      	ldr	r1, [r3, #56]	; 0x38
   d9dfe:	a801      	add	r0, sp, #4
   d9e00:	f7ff ffb2 	bl	d9d68 <_ZL5sub32PmmPa>
   d9e04:	68a3      	ldr	r3, [r4, #8]
   d9e06:	9a01      	ldr	r2, [sp, #4]
   d9e08:	601a      	str	r2, [r3, #0]
   d9e0a:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   d9e0e:	68a3      	ldr	r3, [r4, #8]
   d9e10:	f88d 5003 	strb.w	r5, [sp, #3]
   d9e14:	685b      	ldr	r3, [r3, #4]
   d9e16:	9301      	str	r3, [sp, #4]
   d9e18:	2900      	cmp	r1, #0
   d9e1a:	f10d 0203 	add.w	r2, sp, #3
   d9e1e:	da04      	bge.n	d9e2a <_ZL12ecp_mod_p256P11mbedtls_mpi+0xac>
   d9e20:	4249      	negs	r1, r1
   d9e22:	a801      	add	r0, sp, #4
   d9e24:	f7ff ffa0 	bl	d9d68 <_ZL5sub32PmmPa>
   d9e28:	e002      	b.n	d9e30 <_ZL12ecp_mod_p256P11mbedtls_mpi+0xb2>
   d9e2a:	a801      	add	r0, sp, #4
   d9e2c:	f7ff ff92 	bl	d9d54 <_ZL5add32PmmPa>

    ADD(  9 ); ADD( 10 );
   d9e30:	68a3      	ldr	r3, [r4, #8]
   d9e32:	f10d 0203 	add.w	r2, sp, #3
   d9e36:	6a59      	ldr	r1, [r3, #36]	; 0x24
   d9e38:	a801      	add	r0, sp, #4
   d9e3a:	f7ff ff8b 	bl	d9d54 <_ZL5add32PmmPa>
   d9e3e:	68a3      	ldr	r3, [r4, #8]
   d9e40:	f10d 0203 	add.w	r2, sp, #3
   d9e44:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d9e46:	a801      	add	r0, sp, #4
   d9e48:	f7ff ff84 	bl	d9d54 <_ZL5add32PmmPa>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
   d9e4c:	68a3      	ldr	r3, [r4, #8]
   d9e4e:	f10d 0203 	add.w	r2, sp, #3
   d9e52:	6b19      	ldr	r1, [r3, #48]	; 0x30
   d9e54:	a801      	add	r0, sp, #4
   d9e56:	f7ff ff87 	bl	d9d68 <_ZL5sub32PmmPa>
   d9e5a:	68a3      	ldr	r3, [r4, #8]
   d9e5c:	f10d 0203 	add.w	r2, sp, #3
   d9e60:	6b59      	ldr	r1, [r3, #52]	; 0x34
   d9e62:	a801      	add	r0, sp, #4
   d9e64:	f7ff ff80 	bl	d9d68 <_ZL5sub32PmmPa>
   d9e68:	68a3      	ldr	r3, [r4, #8]
   d9e6a:	f10d 0203 	add.w	r2, sp, #3
   d9e6e:	6b99      	ldr	r1, [r3, #56]	; 0x38
   d9e70:	a801      	add	r0, sp, #4
   d9e72:	f7ff ff79 	bl	d9d68 <_ZL5sub32PmmPa>
   d9e76:	68a3      	ldr	r3, [r4, #8]
   d9e78:	f10d 0203 	add.w	r2, sp, #3
   d9e7c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   d9e7e:	a801      	add	r0, sp, #4
   d9e80:	f7ff ff72 	bl	d9d68 <_ZL5sub32PmmPa>
   d9e84:	68a3      	ldr	r3, [r4, #8]
   d9e86:	9a01      	ldr	r2, [sp, #4]
   d9e88:	605a      	str	r2, [r3, #4]
   d9e8a:	68a3      	ldr	r3, [r4, #8]
   d9e8c:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   d9e90:	689b      	ldr	r3, [r3, #8]
   d9e92:	9301      	str	r3, [sp, #4]
   d9e94:	2300      	movs	r3, #0
   d9e96:	4299      	cmp	r1, r3
   d9e98:	f88d 3003 	strb.w	r3, [sp, #3]
   d9e9c:	f10d 0203 	add.w	r2, sp, #3
   d9ea0:	da04      	bge.n	d9eac <_ZL12ecp_mod_p256P11mbedtls_mpi+0x12e>
   d9ea2:	4249      	negs	r1, r1
   d9ea4:	a801      	add	r0, sp, #4
   d9ea6:	f7ff ff5f 	bl	d9d68 <_ZL5sub32PmmPa>
   d9eaa:	e002      	b.n	d9eb2 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x134>
   d9eac:	a801      	add	r0, sp, #4
   d9eae:	f7ff ff51 	bl	d9d54 <_ZL5add32PmmPa>

    ADD( 10 ); ADD( 11 );
   d9eb2:	68a3      	ldr	r3, [r4, #8]
   d9eb4:	f10d 0203 	add.w	r2, sp, #3
   d9eb8:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d9eba:	a801      	add	r0, sp, #4
   d9ebc:	f7ff ff4a 	bl	d9d54 <_ZL5add32PmmPa>
   d9ec0:	68a3      	ldr	r3, [r4, #8]
   d9ec2:	f10d 0203 	add.w	r2, sp, #3
   d9ec6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   d9ec8:	a801      	add	r0, sp, #4
   d9eca:	f7ff ff43 	bl	d9d54 <_ZL5add32PmmPa>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
   d9ece:	68a3      	ldr	r3, [r4, #8]
   d9ed0:	f10d 0203 	add.w	r2, sp, #3
   d9ed4:	6b59      	ldr	r1, [r3, #52]	; 0x34
   d9ed6:	a801      	add	r0, sp, #4
   d9ed8:	f7ff ff46 	bl	d9d68 <_ZL5sub32PmmPa>
   d9edc:	68a3      	ldr	r3, [r4, #8]
   d9ede:	f10d 0203 	add.w	r2, sp, #3
   d9ee2:	6b99      	ldr	r1, [r3, #56]	; 0x38
   d9ee4:	a801      	add	r0, sp, #4
   d9ee6:	f7ff ff3f 	bl	d9d68 <_ZL5sub32PmmPa>
   d9eea:	68a3      	ldr	r3, [r4, #8]
   d9eec:	f10d 0203 	add.w	r2, sp, #3
   d9ef0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   d9ef2:	a801      	add	r0, sp, #4
   d9ef4:	f7ff ff38 	bl	d9d68 <_ZL5sub32PmmPa>
   d9ef8:	68a3      	ldr	r3, [r4, #8]
   d9efa:	9a01      	ldr	r2, [sp, #4]
   d9efc:	609a      	str	r2, [r3, #8]
   d9efe:	68a3      	ldr	r3, [r4, #8]
   d9f00:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   d9f04:	68db      	ldr	r3, [r3, #12]
   d9f06:	9301      	str	r3, [sp, #4]
   d9f08:	2300      	movs	r3, #0
   d9f0a:	4299      	cmp	r1, r3
   d9f0c:	f88d 3003 	strb.w	r3, [sp, #3]
   d9f10:	f10d 0203 	add.w	r2, sp, #3
   d9f14:	da04      	bge.n	d9f20 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x1a2>
   d9f16:	4249      	negs	r1, r1
   d9f18:	a801      	add	r0, sp, #4
   d9f1a:	f7ff ff25 	bl	d9d68 <_ZL5sub32PmmPa>
   d9f1e:	e002      	b.n	d9f26 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x1a8>
   d9f20:	a801      	add	r0, sp, #4
   d9f22:	f7ff ff17 	bl	d9d54 <_ZL5add32PmmPa>

    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
   d9f26:	68a3      	ldr	r3, [r4, #8]
   d9f28:	f10d 0203 	add.w	r2, sp, #3
   d9f2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   d9f2e:	a801      	add	r0, sp, #4
   d9f30:	f7ff ff10 	bl	d9d54 <_ZL5add32PmmPa>
   d9f34:	68a3      	ldr	r3, [r4, #8]
   d9f36:	f10d 0203 	add.w	r2, sp, #3
   d9f3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   d9f3c:	a801      	add	r0, sp, #4
   d9f3e:	f7ff ff09 	bl	d9d54 <_ZL5add32PmmPa>
   d9f42:	68a3      	ldr	r3, [r4, #8]
   d9f44:	f10d 0203 	add.w	r2, sp, #3
   d9f48:	6b19      	ldr	r1, [r3, #48]	; 0x30
   d9f4a:	a801      	add	r0, sp, #4
   d9f4c:	f7ff ff02 	bl	d9d54 <_ZL5add32PmmPa>
   d9f50:	68a3      	ldr	r3, [r4, #8]
   d9f52:	f10d 0203 	add.w	r2, sp, #3
   d9f56:	6b19      	ldr	r1, [r3, #48]	; 0x30
   d9f58:	a801      	add	r0, sp, #4
   d9f5a:	f7ff fefb 	bl	d9d54 <_ZL5add32PmmPa>
   d9f5e:	68a3      	ldr	r3, [r4, #8]
   d9f60:	f10d 0203 	add.w	r2, sp, #3
   d9f64:	6b59      	ldr	r1, [r3, #52]	; 0x34
   d9f66:	a801      	add	r0, sp, #4
   d9f68:	f7ff fef4 	bl	d9d54 <_ZL5add32PmmPa>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
   d9f6c:	68a3      	ldr	r3, [r4, #8]
   d9f6e:	f10d 0203 	add.w	r2, sp, #3
   d9f72:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   d9f74:	a801      	add	r0, sp, #4
   d9f76:	f7ff fef7 	bl	d9d68 <_ZL5sub32PmmPa>
   d9f7a:	68a3      	ldr	r3, [r4, #8]
   d9f7c:	f10d 0203 	add.w	r2, sp, #3
   d9f80:	6a19      	ldr	r1, [r3, #32]
   d9f82:	a801      	add	r0, sp, #4
   d9f84:	f7ff fef0 	bl	d9d68 <_ZL5sub32PmmPa>
   d9f88:	68a3      	ldr	r3, [r4, #8]
   d9f8a:	f10d 0203 	add.w	r2, sp, #3
   d9f8e:	6a59      	ldr	r1, [r3, #36]	; 0x24
   d9f90:	a801      	add	r0, sp, #4
   d9f92:	f7ff fee9 	bl	d9d68 <_ZL5sub32PmmPa>
   d9f96:	68a3      	ldr	r3, [r4, #8]
   d9f98:	9a01      	ldr	r2, [sp, #4]
   d9f9a:	60da      	str	r2, [r3, #12]
   d9f9c:	68a3      	ldr	r3, [r4, #8]
   d9f9e:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   d9fa2:	691b      	ldr	r3, [r3, #16]
   d9fa4:	9301      	str	r3, [sp, #4]
   d9fa6:	2300      	movs	r3, #0
   d9fa8:	4299      	cmp	r1, r3
   d9faa:	f88d 3003 	strb.w	r3, [sp, #3]
   d9fae:	f10d 0203 	add.w	r2, sp, #3
   d9fb2:	da04      	bge.n	d9fbe <_ZL12ecp_mod_p256P11mbedtls_mpi+0x240>
   d9fb4:	4249      	negs	r1, r1
   d9fb6:	a801      	add	r0, sp, #4
   d9fb8:	f7ff fed6 	bl	d9d68 <_ZL5sub32PmmPa>
   d9fbc:	e002      	b.n	d9fc4 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x246>
   d9fbe:	a801      	add	r0, sp, #4
   d9fc0:	f7ff fec8 	bl	d9d54 <_ZL5add32PmmPa>

    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
   d9fc4:	68a3      	ldr	r3, [r4, #8]
   d9fc6:	f10d 0203 	add.w	r2, sp, #3
   d9fca:	6b19      	ldr	r1, [r3, #48]	; 0x30
   d9fcc:	a801      	add	r0, sp, #4
   d9fce:	f7ff fec1 	bl	d9d54 <_ZL5add32PmmPa>
   d9fd2:	68a3      	ldr	r3, [r4, #8]
   d9fd4:	f10d 0203 	add.w	r2, sp, #3
   d9fd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
   d9fda:	a801      	add	r0, sp, #4
   d9fdc:	f7ff feba 	bl	d9d54 <_ZL5add32PmmPa>
   d9fe0:	68a3      	ldr	r3, [r4, #8]
   d9fe2:	f10d 0203 	add.w	r2, sp, #3
   d9fe6:	6b59      	ldr	r1, [r3, #52]	; 0x34
   d9fe8:	a801      	add	r0, sp, #4
   d9fea:	f7ff feb3 	bl	d9d54 <_ZL5add32PmmPa>
   d9fee:	68a3      	ldr	r3, [r4, #8]
   d9ff0:	f10d 0203 	add.w	r2, sp, #3
   d9ff4:	6b59      	ldr	r1, [r3, #52]	; 0x34
   d9ff6:	a801      	add	r0, sp, #4
   d9ff8:	f7ff feac 	bl	d9d54 <_ZL5add32PmmPa>
   d9ffc:	68a3      	ldr	r3, [r4, #8]
   d9ffe:	f10d 0203 	add.w	r2, sp, #3
   da002:	6b99      	ldr	r1, [r3, #56]	; 0x38
   da004:	a801      	add	r0, sp, #4
   da006:	f7ff fea5 	bl	d9d54 <_ZL5add32PmmPa>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
   da00a:	68a3      	ldr	r3, [r4, #8]
   da00c:	f10d 0203 	add.w	r2, sp, #3
   da010:	6a59      	ldr	r1, [r3, #36]	; 0x24
   da012:	a801      	add	r0, sp, #4
   da014:	f7ff fea8 	bl	d9d68 <_ZL5sub32PmmPa>
   da018:	68a3      	ldr	r3, [r4, #8]
   da01a:	f10d 0203 	add.w	r2, sp, #3
   da01e:	6a99      	ldr	r1, [r3, #40]	; 0x28
   da020:	a801      	add	r0, sp, #4
   da022:	f7ff fea1 	bl	d9d68 <_ZL5sub32PmmPa>
   da026:	68a3      	ldr	r3, [r4, #8]
   da028:	9a01      	ldr	r2, [sp, #4]
   da02a:	611a      	str	r2, [r3, #16]
   da02c:	68a3      	ldr	r3, [r4, #8]
   da02e:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   da032:	695b      	ldr	r3, [r3, #20]
   da034:	9301      	str	r3, [sp, #4]
   da036:	2300      	movs	r3, #0
   da038:	4299      	cmp	r1, r3
   da03a:	f88d 3003 	strb.w	r3, [sp, #3]
   da03e:	f10d 0203 	add.w	r2, sp, #3
   da042:	da04      	bge.n	da04e <_ZL12ecp_mod_p256P11mbedtls_mpi+0x2d0>
   da044:	4249      	negs	r1, r1
   da046:	a801      	add	r0, sp, #4
   da048:	f7ff fe8e 	bl	d9d68 <_ZL5sub32PmmPa>
   da04c:	e002      	b.n	da054 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x2d6>
   da04e:	a801      	add	r0, sp, #4
   da050:	f7ff fe80 	bl	d9d54 <_ZL5add32PmmPa>

    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
   da054:	68a3      	ldr	r3, [r4, #8]
   da056:	f10d 0203 	add.w	r2, sp, #3
   da05a:	6b59      	ldr	r1, [r3, #52]	; 0x34
   da05c:	a801      	add	r0, sp, #4
   da05e:	f7ff fe79 	bl	d9d54 <_ZL5add32PmmPa>
   da062:	68a3      	ldr	r3, [r4, #8]
   da064:	f10d 0203 	add.w	r2, sp, #3
   da068:	6b59      	ldr	r1, [r3, #52]	; 0x34
   da06a:	a801      	add	r0, sp, #4
   da06c:	f7ff fe72 	bl	d9d54 <_ZL5add32PmmPa>
   da070:	68a3      	ldr	r3, [r4, #8]
   da072:	f10d 0203 	add.w	r2, sp, #3
   da076:	6b99      	ldr	r1, [r3, #56]	; 0x38
   da078:	a801      	add	r0, sp, #4
   da07a:	f7ff fe6b 	bl	d9d54 <_ZL5add32PmmPa>
   da07e:	68a3      	ldr	r3, [r4, #8]
   da080:	f10d 0203 	add.w	r2, sp, #3
   da084:	6b99      	ldr	r1, [r3, #56]	; 0x38
   da086:	a801      	add	r0, sp, #4
   da088:	f7ff fe64 	bl	d9d54 <_ZL5add32PmmPa>
   da08c:	68a3      	ldr	r3, [r4, #8]
   da08e:	f10d 0203 	add.w	r2, sp, #3
   da092:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   da094:	a801      	add	r0, sp, #4
   da096:	f7ff fe5d 	bl	d9d54 <_ZL5add32PmmPa>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
   da09a:	68a3      	ldr	r3, [r4, #8]
   da09c:	f10d 0203 	add.w	r2, sp, #3
   da0a0:	6a99      	ldr	r1, [r3, #40]	; 0x28
   da0a2:	a801      	add	r0, sp, #4
   da0a4:	f7ff fe60 	bl	d9d68 <_ZL5sub32PmmPa>
   da0a8:	68a3      	ldr	r3, [r4, #8]
   da0aa:	f10d 0203 	add.w	r2, sp, #3
   da0ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   da0b0:	a801      	add	r0, sp, #4
   da0b2:	f7ff fe59 	bl	d9d68 <_ZL5sub32PmmPa>
   da0b6:	68a3      	ldr	r3, [r4, #8]
   da0b8:	9a01      	ldr	r2, [sp, #4]
   da0ba:	615a      	str	r2, [r3, #20]
   da0bc:	68a3      	ldr	r3, [r4, #8]
   da0be:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   da0c2:	699b      	ldr	r3, [r3, #24]
   da0c4:	9301      	str	r3, [sp, #4]
   da0c6:	2300      	movs	r3, #0
   da0c8:	4299      	cmp	r1, r3
   da0ca:	f88d 3003 	strb.w	r3, [sp, #3]
   da0ce:	f10d 0203 	add.w	r2, sp, #3
   da0d2:	da04      	bge.n	da0de <_ZL12ecp_mod_p256P11mbedtls_mpi+0x360>
   da0d4:	4249      	negs	r1, r1
   da0d6:	a801      	add	r0, sp, #4
   da0d8:	f7ff fe46 	bl	d9d68 <_ZL5sub32PmmPa>
   da0dc:	e002      	b.n	da0e4 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x366>
   da0de:	a801      	add	r0, sp, #4
   da0e0:	f7ff fe38 	bl	d9d54 <_ZL5add32PmmPa>

    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
   da0e4:	68a3      	ldr	r3, [r4, #8]
   da0e6:	f10d 0203 	add.w	r2, sp, #3
   da0ea:	6b99      	ldr	r1, [r3, #56]	; 0x38
   da0ec:	a801      	add	r0, sp, #4
   da0ee:	f7ff fe31 	bl	d9d54 <_ZL5add32PmmPa>
   da0f2:	68a3      	ldr	r3, [r4, #8]
   da0f4:	f10d 0203 	add.w	r2, sp, #3
   da0f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
   da0fa:	a801      	add	r0, sp, #4
   da0fc:	f7ff fe2a 	bl	d9d54 <_ZL5add32PmmPa>
   da100:	68a3      	ldr	r3, [r4, #8]
   da102:	f10d 0203 	add.w	r2, sp, #3
   da106:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   da108:	a801      	add	r0, sp, #4
   da10a:	f7ff fe23 	bl	d9d54 <_ZL5add32PmmPa>
   da10e:	68a3      	ldr	r3, [r4, #8]
   da110:	f10d 0203 	add.w	r2, sp, #3
   da114:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   da116:	a801      	add	r0, sp, #4
   da118:	f7ff fe1c 	bl	d9d54 <_ZL5add32PmmPa>
   da11c:	68a3      	ldr	r3, [r4, #8]
   da11e:	f10d 0203 	add.w	r2, sp, #3
   da122:	6b99      	ldr	r1, [r3, #56]	; 0x38
   da124:	a801      	add	r0, sp, #4
   da126:	f7ff fe15 	bl	d9d54 <_ZL5add32PmmPa>
   da12a:	68a3      	ldr	r3, [r4, #8]
   da12c:	f10d 0203 	add.w	r2, sp, #3
   da130:	6b59      	ldr	r1, [r3, #52]	; 0x34
   da132:	a801      	add	r0, sp, #4
   da134:	f7ff fe0e 	bl	d9d54 <_ZL5add32PmmPa>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
   da138:	68a3      	ldr	r3, [r4, #8]
   da13a:	f10d 0203 	add.w	r2, sp, #3
   da13e:	6a19      	ldr	r1, [r3, #32]
   da140:	a801      	add	r0, sp, #4
   da142:	f7ff fe11 	bl	d9d68 <_ZL5sub32PmmPa>
   da146:	68a3      	ldr	r3, [r4, #8]
   da148:	f10d 0203 	add.w	r2, sp, #3
   da14c:	6a59      	ldr	r1, [r3, #36]	; 0x24
   da14e:	a801      	add	r0, sp, #4
   da150:	f7ff fe0a 	bl	d9d68 <_ZL5sub32PmmPa>
   da154:	68a3      	ldr	r3, [r4, #8]
   da156:	9a01      	ldr	r2, [sp, #4]
   da158:	619a      	str	r2, [r3, #24]
   da15a:	68a3      	ldr	r3, [r4, #8]
   da15c:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   da160:	69db      	ldr	r3, [r3, #28]
   da162:	9301      	str	r3, [sp, #4]
   da164:	2300      	movs	r3, #0
   da166:	4299      	cmp	r1, r3
   da168:	f88d 3003 	strb.w	r3, [sp, #3]
   da16c:	f10d 0203 	add.w	r2, sp, #3
   da170:	da04      	bge.n	da17c <_ZL12ecp_mod_p256P11mbedtls_mpi+0x3fe>
   da172:	4249      	negs	r1, r1
   da174:	a801      	add	r0, sp, #4
   da176:	f7ff fdf7 	bl	d9d68 <_ZL5sub32PmmPa>
   da17a:	e002      	b.n	da182 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x404>
   da17c:	a801      	add	r0, sp, #4
   da17e:	f7ff fde9 	bl	d9d54 <_ZL5add32PmmPa>

    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
   da182:	68a3      	ldr	r3, [r4, #8]
   da184:	f10d 0203 	add.w	r2, sp, #3
   da188:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   da18a:	a801      	add	r0, sp, #4
   da18c:	f7ff fde2 	bl	d9d54 <_ZL5add32PmmPa>
   da190:	68a3      	ldr	r3, [r4, #8]
   da192:	f10d 0203 	add.w	r2, sp, #3
   da196:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   da198:	a801      	add	r0, sp, #4
   da19a:	f7ff fddb 	bl	d9d54 <_ZL5add32PmmPa>
   da19e:	68a3      	ldr	r3, [r4, #8]
   da1a0:	f10d 0203 	add.w	r2, sp, #3
   da1a4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   da1a6:	a801      	add	r0, sp, #4
   da1a8:	f7ff fdd4 	bl	d9d54 <_ZL5add32PmmPa>
   da1ac:	68a3      	ldr	r3, [r4, #8]
   da1ae:	f10d 0203 	add.w	r2, sp, #3
   da1b2:	6a19      	ldr	r1, [r3, #32]
   da1b4:	a801      	add	r0, sp, #4
   da1b6:	f7ff fdcd 	bl	d9d54 <_ZL5add32PmmPa>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
   da1ba:	68a3      	ldr	r3, [r4, #8]
   da1bc:	f10d 0203 	add.w	r2, sp, #3
   da1c0:	6a99      	ldr	r1, [r3, #40]	; 0x28
   da1c2:	a801      	add	r0, sp, #4
   da1c4:	f7ff fdd0 	bl	d9d68 <_ZL5sub32PmmPa>
   da1c8:	68a3      	ldr	r3, [r4, #8]
   da1ca:	f10d 0203 	add.w	r2, sp, #3
   da1ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   da1d0:	a801      	add	r0, sp, #4
   da1d2:	f7ff fdc9 	bl	d9d68 <_ZL5sub32PmmPa>
   da1d6:	68a3      	ldr	r3, [r4, #8]
   da1d8:	f10d 0203 	add.w	r2, sp, #3
   da1dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
   da1de:	a801      	add	r0, sp, #4
   da1e0:	f7ff fdc2 	bl	d9d68 <_ZL5sub32PmmPa>
   da1e4:	68a3      	ldr	r3, [r4, #8]
   da1e6:	f10d 0203 	add.w	r2, sp, #3
   da1ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
   da1ec:	a801      	add	r0, sp, #4
   da1ee:	f7ff fdbb 	bl	d9d68 <_ZL5sub32PmmPa>
   da1f2:	68a3      	ldr	r3, [r4, #8]
   da1f4:	9a01      	ldr	r2, [sp, #4]
   da1f6:	61da      	str	r2, [r3, #28]
   da1f8:	f99d 3003 	ldrsb.w	r3, [sp, #3]
   da1fc:	68a2      	ldr	r2, [r4, #8]
   da1fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   da202:	6213      	str	r3, [r2, #32]
   da204:	2300      	movs	r3, #0
   da206:	9301      	str	r3, [sp, #4]
   da208:	2308      	movs	r3, #8
   da20a:	6862      	ldr	r2, [r4, #4]
   da20c:	3301      	adds	r3, #1
   da20e:	4293      	cmp	r3, r2
   da210:	d204      	bcs.n	da21c <_ZL12ecp_mod_p256P11mbedtls_mpi+0x49e>
   da212:	68a2      	ldr	r2, [r4, #8]
   da214:	9901      	ldr	r1, [sp, #4]
   da216:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   da21a:	e7f6      	b.n	da20a <_ZL12ecp_mod_p256P11mbedtls_mpi+0x48c>
   da21c:	f99d 2003 	ldrsb.w	r2, [sp, #3]
   da220:	2a00      	cmp	r2, #0
   da222:	da10      	bge.n	da246 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4c8>
#else
    if( bits == 224 )
        C->p[ C->n - 1 ] = ((mbedtls_mpi_uint) -c) << 32;
    else
#endif
        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;
   da224:	9b03      	ldr	r3, [sp, #12]
   da226:	9904      	ldr	r1, [sp, #16]
   da228:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   da22c:	3b01      	subs	r3, #1
   da22e:	4252      	negs	r2, r2
   da230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* N = - ( C - N ) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
   da234:	4620      	mov	r0, r4
   da236:	4622      	mov	r2, r4
   da238:	a902      	add	r1, sp, #8
   da23a:	f7fc fca2 	bl	d6b82 <mbedtls_mpi_sub_abs>
   da23e:	b910      	cbnz	r0, da246 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4c8>
    N->s = -1;
   da240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   da244:	6023      	str	r3, [r4, #0]
    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7

cleanup:
    return( ret );
}
   da246:	4628      	mov	r0, r5
   da248:	b00f      	add	sp, #60	; 0x3c
   da24a:	bd30      	pop	{r4, r5, pc}

000da24c <mbedtls_ecp_group_load>:

/*
 * Set a group using well-known domain parameters
 */
int mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id )
{
   da24c:	b538      	push	{r3, r4, r5, lr}
   da24e:	460d      	mov	r5, r1
   da250:	4604      	mov	r4, r0
    ECP_VALIDATE_RET( grp != NULL );
    mbedtls_ecp_group_free( grp );
   da252:	f7fe fdbc 	bl	d8dce <mbedtls_ecp_group_free>

    grp->id = id;

    switch( id )
   da256:	2d03      	cmp	r5, #3
int mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id )
{
    ECP_VALIDATE_RET( grp != NULL );
    mbedtls_ecp_group_free( grp );

    grp->id = id;
   da258:	7025      	strb	r5, [r4, #0]

    switch( id )
   da25a:	d127      	bne.n	da2ac <mbedtls_ecp_group_load+0x60>
            return( LOAD_GROUP( secp224r1 ) );
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
   da25c:	4b16      	ldr	r3, [pc, #88]	; (da2b8 <mbedtls_ecp_group_load+0x6c>)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
    X->p = (mbedtls_mpi_uint *) p;
   da25e:	4a17      	ldr	r2, [pc, #92]	; (da2bc <mbedtls_ecp_group_load+0x70>)
            return( LOAD_GROUP( secp224r1 ) );
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
   da260:	6663      	str	r3, [r4, #100]	; 0x64
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
    X->p = (mbedtls_mpi_uint *) p;
   da262:	60e2      	str	r2, [r4, #12]
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
   da264:	2308      	movs	r3, #8
    X->p = (mbedtls_mpi_uint *) p;
   da266:	4a16      	ldr	r2, [pc, #88]	; (da2c0 <mbedtls_ecp_group_load+0x74>)
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
   da268:	60a3      	str	r3, [r4, #8]
   da26a:	6223      	str	r3, [r4, #32]
    X->p = (mbedtls_mpi_uint *) p;
   da26c:	6262      	str	r2, [r4, #36]	; 0x24
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
   da26e:	6523      	str	r3, [r4, #80]	; 0x50
   da270:	62e3      	str	r3, [r4, #44]	; 0x2c
   da272:	63a3      	str	r3, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
   da274:	4a13      	ldr	r2, [pc, #76]	; (da2c4 <mbedtls_ecp_group_load+0x78>)
   da276:	4b14      	ldr	r3, [pc, #80]	; (da2c8 <mbedtls_ecp_group_load+0x7c>)
   da278:	6562      	str	r2, [r4, #84]	; 0x54
 * Create an MPI from embedded constants
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
   da27a:	2501      	movs	r5, #1
    X->n = len / sizeof( mbedtls_mpi_uint );
    X->p = (mbedtls_mpi_uint *) p;
   da27c:	4a13      	ldr	r2, [pc, #76]	; (da2cc <mbedtls_ecp_group_load+0x80>)
   da27e:	63e3      	str	r3, [r4, #60]	; 0x3c
static inline void ecp_mpi_set1( mbedtls_mpi *X )
{
    static mbedtls_mpi_uint one[] = { 1 };
    X->s = 1;
    X->n = 1;
    X->p = one;
   da280:	4b13      	ldr	r3, [pc, #76]	; (da2d0 <mbedtls_ecp_group_load+0x84>)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
    X->p = (mbedtls_mpi_uint *) p;
   da282:	6322      	str	r2, [r4, #48]	; 0x30
static inline void ecp_mpi_set1( mbedtls_mpi *X )
{
    static mbedtls_mpi_uint one[] = { 1 };
    X->s = 1;
    X->n = 1;
    X->p = one;
   da284:	64a3      	str	r3, [r4, #72]	; 0x48
 * Create an MPI from embedded constants
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
   da286:	6065      	str	r5, [r4, #4]
   da288:	61e5      	str	r5, [r4, #28]
   da28a:	64e5      	str	r5, [r4, #76]	; 0x4c
   da28c:	62a5      	str	r5, [r4, #40]	; 0x28
   da28e:	6365      	str	r5, [r4, #52]	; 0x34
 * Set an MPI to static value 1
 */
static inline void ecp_mpi_set1( mbedtls_mpi *X )
{
    static mbedtls_mpi_uint one[] = { 1 };
    X->s = 1;
   da290:	6425      	str	r5, [r4, #64]	; 0x40
    X->n = 1;
   da292:	6465      	str	r5, [r4, #68]	; 0x44

    ecp_mpi_load( &grp->G.X, gx, gxlen );
    ecp_mpi_load( &grp->G.Y, gy, gylen );
    ecp_mpi_set1( &grp->G.Z );

    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
   da294:	1d20      	adds	r0, r4, #4
   da296:	f7fc f9ff 	bl	d6698 <mbedtls_mpi_bitlen>
   da29a:	65a0      	str	r0, [r4, #88]	; 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
   da29c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   da2a0:	f7fc f9fa 	bl	d6698 <mbedtls_mpi_bitlen>

    grp->h = 1;
   da2a4:	6625      	str	r5, [r4, #96]	; 0x60
    ecp_mpi_load( &grp->G.X, gx, gxlen );
    ecp_mpi_load( &grp->G.Y, gy, gylen );
    ecp_mpi_set1( &grp->G.Z );

    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
   da2a6:	65e0      	str	r0, [r4, #92]	; 0x5c
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
            return( LOAD_GROUP( secp256r1 ) );
   da2a8:	2000      	movs	r0, #0
   da2aa:	bd38      	pop	{r3, r4, r5, pc}
            grp->modp = ecp_mod_p448;
            return( ecp_use_curve448( grp ) );
#endif /* MBEDTLS_ECP_DP_CURVE448_ENABLED */

        default:
            mbedtls_ecp_group_free( grp );
   da2ac:	4620      	mov	r0, r4
   da2ae:	f7fe fd8e 	bl	d8dce <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   da2b2:	4808      	ldr	r0, [pc, #32]	; (da2d4 <mbedtls_ecp_group_load+0x88>)
    }
}
   da2b4:	bd38      	pop	{r3, r4, r5, pc}
   da2b6:	bf00      	nop
   da2b8:	000d9d7f 	.word	0x000d9d7f
   da2bc:	000e849c 	.word	0x000e849c
   da2c0:	000e845c 	.word	0x000e845c
   da2c4:	000e847c 	.word	0x000e847c
   da2c8:	000e84dc 	.word	0x000e84dc
   da2cc:	000e84bc 	.word	0x000e84bc
   da2d0:	2003b9e4 	.word	0x2003b9e4
   da2d4:	ffffb180 	.word	0xffffb180

000da2d8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
   da2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
   da2dc:	7bcb      	ldrb	r3, [r1, #15]
        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
   da2de:	f8df c164 	ldr.w	ip, [pc, #356]	; da444 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x16c>
   da2e2:	f003 030f 	and.w	r3, r3, #15
   da2e6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
   da2ea:	b093      	sub	sp, #76	; 0x4c
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
   da2ec:	e9d3 672e 	ldrd	r6, r7, [r3, #184]	; 0xb8
    zl = ctx->HL[lo];
   da2f0:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
   da2f4:	f101 0310 	add.w	r3, r1, #16
   da2f8:	9310      	str	r3, [sp, #64]	; 0x40

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
   da2fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   da2fc:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
   da300:	9310      	str	r3, [sp, #64]	; 0x40
   da302:	f00e 030f 	and.w	r3, lr, #15
   da306:	9311      	str	r3, [sp, #68]	; 0x44
        hi = x[i] >> 4;

        if( i != 15 )
   da308:	9b10      	ldr	r3, [sp, #64]	; 0x40
   da30a:	ebc1 0803 	rsb	r8, r1, r3
   da30e:	f1b8 0f0f 	cmp.w	r8, #15
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
        hi = x[i] >> 4;
   da312:	ea4f 1e2e 	mov.w	lr, lr, asr #4

        if( i != 15 )
   da316:	d03a      	beq.n	da38e <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0xb6>
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
   da318:	0733      	lsls	r3, r6, #28
   da31a:	9309      	str	r3, [sp, #36]	; 0x24
   da31c:	2300      	movs	r3, #0
   da31e:	9308      	str	r3, [sp, #32]
   da320:	0923      	lsrs	r3, r4, #4
   da322:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   da326:	9300      	str	r3, [sp, #0]
   da328:	092b      	lsrs	r3, r5, #4
   da32a:	9301      	str	r3, [sp, #4]
   da32c:	9b11      	ldr	r3, [sp, #68]	; 0x44
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
   da32e:	f004 040f 	and.w	r4, r4, #15
        hi = x[i] >> 4;

        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
   da332:	e9dd ab00 	ldrd	sl, fp, [sp]
   da336:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
   da33a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   da33e:	0933      	lsrs	r3, r6, #4
   da340:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
   da344:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
   da348:	9302      	str	r3, [sp, #8]
   da34a:	093b      	lsrs	r3, r7, #4
        hi = x[i] >> 4;

        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
   da34c:	ea48 080a 	orr.w	r8, r8, sl
   da350:	ea49 090b 	orr.w	r9, r9, fp
   da354:	9303      	str	r3, [sp, #12]
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
   da356:	0423      	lsls	r3, r4, #16
   da358:	e9d5 672e 	ldrd	r6, r7, [r5, #184]	; 0xb8
        hi = x[i] >> 4;

        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
   da35c:	46c2      	mov	sl, r8
   da35e:	46cb      	mov	fp, r9
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
   da360:	930d      	str	r3, [sp, #52]	; 0x34
   da362:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   da366:	2300      	movs	r3, #0
   da368:	930c      	str	r3, [sp, #48]	; 0x30
   da36a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
   da36e:	ea89 0907 	eor.w	r9, r9, r7
   da372:	464f      	mov	r7, r9
   da374:	407c      	eors	r4, r7
   da376:	ea88 0806 	eor.w	r8, r8, r6
   da37a:	4627      	mov	r7, r4
            zl ^= ctx->HL[lo];
   da37c:	e9d5 450e 	ldrd	r4, r5, [r5, #56]	; 0x38
   da380:	4646      	mov	r6, r8
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
   da382:	4073      	eors	r3, r6
   da384:	461e      	mov	r6, r3
            zl ^= ctx->HL[lo];
   da386:	ea84 040a 	eor.w	r4, r4, sl
   da38a:	ea85 050b 	eor.w	r5, r5, fp

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
   da38e:	0733      	lsls	r3, r6, #28
   da390:	930b      	str	r3, [sp, #44]	; 0x2c
   da392:	2300      	movs	r3, #0
   da394:	930a      	str	r3, [sp, #40]	; 0x28
   da396:	0923      	lsrs	r3, r4, #4
   da398:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   da39c:	9304      	str	r3, [sp, #16]
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
   da39e:	f004 040f 	and.w	r4, r4, #15
            zl ^= ctx->HL[lo];

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
   da3a2:	092b      	lsrs	r3, r5, #4
   da3a4:	9305      	str	r3, [sp, #20]
   da3a6:	0933      	lsrs	r3, r6, #4
   da3a8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   da3ac:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   da3b0:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
   da3b4:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
   da3b8:	9306      	str	r3, [sp, #24]
   da3ba:	093b      	lsrs	r3, r7, #4
   da3bc:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
   da3c0:	9307      	str	r3, [sp, #28]
   da3c2:	0423      	lsls	r3, r4, #16
   da3c4:	e9de 672e 	ldrd	r6, r7, [lr, #184]	; 0xb8
            zl ^= ctx->HL[lo];

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
   da3c8:	ea48 080a 	orr.w	r8, r8, sl
   da3cc:	ea49 090b 	orr.w	r9, r9, fp
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
   da3d0:	930f      	str	r3, [sp, #60]	; 0x3c
   da3d2:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   da3d6:	2300      	movs	r3, #0
   da3d8:	930e      	str	r3, [sp, #56]	; 0x38
   da3da:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   da3de:	ea8a 0a06 	eor.w	sl, sl, r6
   da3e2:	ea8b 0b07 	eor.w	fp, fp, r7
   da3e6:	4656      	mov	r6, sl
   da3e8:	465f      	mov	r7, fp
   da3ea:	4073      	eors	r3, r6
   da3ec:	407c      	eors	r4, r7
   da3ee:	461e      	mov	r6, r3
   da3f0:	4627      	mov	r7, r4
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
   da3f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
   da3f4:	e9de 450e 	ldrd	r4, r5, [lr, #56]	; 0x38
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
   da3f8:	4299      	cmp	r1, r3
        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
   da3fa:	ea84 0408 	eor.w	r4, r4, r8
   da3fe:	ea85 0509 	eor.w	r5, r5, r9
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
   da402:	f47f af7a 	bne.w	da2fa <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x22>
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
   da406:	0e3b      	lsrs	r3, r7, #24
   da408:	7013      	strb	r3, [r2, #0]
   da40a:	0c3b      	lsrs	r3, r7, #16
   da40c:	7053      	strb	r3, [r2, #1]
   da40e:	0a3b      	lsrs	r3, r7, #8
   da410:	7093      	strb	r3, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
   da412:	0e33      	lsrs	r3, r6, #24
   da414:	7113      	strb	r3, [r2, #4]
   da416:	0c33      	lsrs	r3, r6, #16
   da418:	7153      	strb	r3, [r2, #5]
   da41a:	0a33      	lsrs	r3, r6, #8
   da41c:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
   da41e:	0e2b      	lsrs	r3, r5, #24
   da420:	7213      	strb	r3, [r2, #8]
   da422:	0c2b      	lsrs	r3, r5, #16
   da424:	7253      	strb	r3, [r2, #9]
   da426:	0a2b      	lsrs	r3, r5, #8
   da428:	7293      	strb	r3, [r2, #10]
    PUT_UINT32_BE( zl, output, 12 );
   da42a:	0e23      	lsrs	r3, r4, #24
   da42c:	7313      	strb	r3, [r2, #12]
   da42e:	0c23      	lsrs	r3, r4, #16
   da430:	7353      	strb	r3, [r2, #13]
   da432:	0a23      	lsrs	r3, r4, #8
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
   da434:	70d7      	strb	r7, [r2, #3]
    PUT_UINT32_BE( zh, output, 4 );
   da436:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
   da438:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
   da43a:	7393      	strb	r3, [r2, #14]
   da43c:	73d4      	strb	r4, [r2, #15]
}
   da43e:	b013      	add	sp, #76	; 0x4c
   da440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da444:	000e8500 	.word	0x000e8500

000da448 <mbedtls_gcm_init>:
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
    GCM_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
   da448:	f44f 72c0 	mov.w	r2, #384	; 0x180
   da44c:	2100      	movs	r1, #0
   da44e:	f00d bd30 	b.w	e7eb2 <memset>

000da452 <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
   da452:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da456:	4604      	mov	r4, r0
   da458:	b08d      	sub	sp, #52	; 0x34
   da45a:	4608      	mov	r0, r1
   da45c:	4691      	mov	r9, r2

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( key != NULL );
    GCM_VALIDATE_RET( keybits == 128 || keybits == 192 || keybits == 256 );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
   da45e:	4619      	mov	r1, r3
   da460:	2201      	movs	r2, #1

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
   da462:	4698      	mov	r8, r3

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( key != NULL );
    GCM_VALIDATE_RET( keybits == 128 || keybits == 192 || keybits == 256 );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
   da464:	f7fd faee 	bl	d7a44 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
   da468:	2800      	cmp	r0, #0
   da46a:	f000 809c 	beq.w	da5a6 <mbedtls_gcm_setkey+0x154>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    if( cipher_info->block_size != 16 )
   da46e:	6945      	ldr	r5, [r0, #20]
   da470:	9002      	str	r0, [sp, #8]
   da472:	2d10      	cmp	r5, #16
   da474:	f040 8097 	bne.w	da5a6 <mbedtls_gcm_setkey+0x154>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    mbedtls_cipher_free( &ctx->cipher_ctx );
   da478:	4620      	mov	r0, r4
   da47a:	f7fd fafb 	bl	d7a74 <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
   da47e:	9902      	ldr	r1, [sp, #8]
   da480:	4620      	mov	r0, r4
   da482:	f7fd fb07 	bl	d7a94 <mbedtls_cipher_setup>
   da486:	4684      	mov	ip, r0
   da488:	2800      	cmp	r0, #0
   da48a:	f040 808e 	bne.w	da5aa <mbedtls_gcm_setkey+0x158>
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
   da48e:	2301      	movs	r3, #1
   da490:	4642      	mov	r2, r8
   da492:	4649      	mov	r1, r9
   da494:	4620      	mov	r0, r4
   da496:	f7fd fb15 	bl	d7ac4 <mbedtls_cipher_setkey>
   da49a:	4684      	mov	ip, r0
   da49c:	2800      	cmp	r0, #0
   da49e:	f040 8084 	bne.w	da5aa <mbedtls_gcm_setkey+0x158>
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;

    memset( h, 0, 16 );
   da4a2:	4601      	mov	r1, r0
{
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
   da4a4:	9007      	str	r0, [sp, #28]

    memset( h, 0, 16 );
   da4a6:	462a      	mov	r2, r5
   da4a8:	a808      	add	r0, sp, #32
   da4aa:	f00d fd02 	bl	e7eb2 <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
   da4ae:	ab07      	add	r3, sp, #28
   da4b0:	9300      	str	r3, [sp, #0]
   da4b2:	ab08      	add	r3, sp, #32
   da4b4:	462a      	mov	r2, r5
   da4b6:	4619      	mov	r1, r3
   da4b8:	4620      	mov	r0, r4
   da4ba:	f7fd fb4d 	bl	d7b58 <mbedtls_cipher_update>
   da4be:	4684      	mov	ip, r0
   da4c0:	2800      	cmp	r0, #0
   da4c2:	d172      	bne.n	da5aa <mbedtls_gcm_setkey+0x158>
   da4c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
   da4c6:	9908      	ldr	r1, [sp, #32]

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
   da4c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   da4ca:	ba18      	rev	r0, r3
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
   da4cc:	ba0b      	rev	r3, r1
   da4ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
   da4d0:	4662      	mov	r2, ip
   da4d2:	fa91 fe81 	rev.w	lr, r1
   da4d6:	4302      	orrs	r2, r0

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
   da4d8:	ba29      	rev	r1, r5
   da4da:	ea4c 000e 	orr.w	r0, ip, lr

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
   da4de:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    ctx->HH[8] = vh;
   da4e2:	e9c4 233e 	strd	r2, r3, [r4, #248]	; 0xf8
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
   da4e6:	f04f 0900 	mov.w	r9, #0
   da4ea:	f04f 0800 	mov.w	r8, #0
   da4ee:	e9c4 892e 	strd	r8, r9, [r4, #184]	; 0xb8
    ctx->HL[0] = 0;
   da4f2:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
   da4f6:	f04f 0e03 	mov.w	lr, #3

    for( i = 4; i > 0; i >>= 1 )
   da4fa:	2504      	movs	r5, #4
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
   da4fc:	f04f 4961 	mov.w	r9, #3774873600	; 0xe1000000
   da500:	f000 0801 	and.w	r8, r0, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
   da504:	07d7      	lsls	r7, r2, #31
   da506:	0849      	lsrs	r1, r1, #1
   da508:	ea4f 0030 	mov.w	r0, r0, rrx
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
   da50c:	085b      	lsrs	r3, r3, #1
   da50e:	ea4f 0232 	mov.w	r2, r2, rrx
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
   da512:	2600      	movs	r6, #0
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
   da514:	fb09 fb08 	mul.w	fp, r9, r8
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
   da518:	4330      	orrs	r0, r6
   da51a:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
   da51e:	4339      	orrs	r1, r7
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
   da520:	4072      	eors	r2, r6
   da522:	ea83 030b 	eor.w	r3, r3, fp

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
   da526:	f1be 0e01 	subs.w	lr, lr, #1
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);

        ctx->HL[i] = vl;
   da52a:	e9c8 010e 	strd	r0, r1, [r8, #56]	; 0x38
        ctx->HH[i] = vh;
   da52e:	e9c8 232e 	strd	r2, r3, [r8, #184]	; 0xb8

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
   da532:	ea4f 0565 	mov.w	r5, r5, asr #1
   da536:	d1e3      	bne.n	da500 <mbedtls_gcm_setkey+0xae>
   da538:	f04f 0803 	mov.w	r8, #3
   da53c:	2202      	movs	r2, #2
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
   da53e:	f104 0938 	add.w	r9, r4, #56	; 0x38
   da542:	f104 0eb8 	add.w	lr, r4, #184	; 0xb8
   da546:	00d3      	lsls	r3, r2, #3
   da548:	eb09 0703 	add.w	r7, r9, r3
   da54c:	4473      	add	r3, lr
        vh = *HiH;
   da54e:	e9d3 0100 	ldrd	r0, r1, [r3]
   da552:	e9cd 0102 	strd	r0, r1, [sp, #8]
        vl = *HiL;
   da556:	e9d7 0100 	ldrd	r0, r1, [r7]
   da55a:	4676      	mov	r6, lr
   da55c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   da560:	4648      	mov	r0, r9
        for( j = 1; j < i; j++ )
   da562:	2101      	movs	r1, #1
        {
            HiH[j] = vh ^ ctx->HH[j];
   da564:	e9f6 4502 	ldrd	r4, r5, [r6, #8]!
   da568:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   da56c:	ea8a 0a04 	eor.w	sl, sl, r4
   da570:	ea8b 0b05 	eor.w	fp, fp, r5
   da574:	4654      	mov	r4, sl
   da576:	465d      	mov	r5, fp
   da578:	e9e3 4502 	strd	r4, r5, [r3, #8]!
            HiL[j] = vl ^ ctx->HL[j];
   da57c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   da580:	e9f0 4502 	ldrd	r4, r5, [r0, #8]!
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
   da584:	3101      	adds	r1, #1
        {
            HiH[j] = vh ^ ctx->HH[j];
            HiL[j] = vl ^ ctx->HL[j];
   da586:	ea8a 0a04 	eor.w	sl, sl, r4
   da58a:	ea8b 0b05 	eor.w	fp, fp, r5
   da58e:	4654      	mov	r4, sl
   da590:	465d      	mov	r5, fp
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
   da592:	4291      	cmp	r1, r2
        {
            HiH[j] = vh ^ ctx->HH[j];
            HiL[j] = vl ^ ctx->HL[j];
   da594:	e9e7 4502 	strd	r4, r5, [r7, #8]!
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
   da598:	d1e4      	bne.n	da564 <mbedtls_gcm_setkey+0x112>

        ctx->HL[i] = vl;
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
   da59a:	f1b8 0801 	subs.w	r8, r8, #1
   da59e:	ea4f 0242 	mov.w	r2, r2, lsl #1
   da5a2:	d1d0      	bne.n	da546 <mbedtls_gcm_setkey+0xf4>
   da5a4:	e001      	b.n	da5aa <mbedtls_gcm_setkey+0x158>
    GCM_VALIDATE_RET( key != NULL );
    GCM_VALIDATE_RET( keybits == 128 || keybits == 192 || keybits == 256 );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   da5a6:	f06f 0c13 	mvn.w	ip, #19

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
        return( ret );

    return( 0 );
}
   da5aa:	4660      	mov	r0, ip
   da5ac:	b00d      	add	sp, #52	; 0x34
   da5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da5b2 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
   da5b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da5b6:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
   da5b8:	f04f 0900 	mov.w	r9, #0
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
   da5bc:	4604      	mov	r4, r0
   da5be:	468b      	mov	fp, r1
   da5c0:	4617      	mov	r7, r2
   da5c2:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
   da5c6:	f8cd 9014 	str.w	r9, [sp, #20]
    GCM_VALIDATE_RET( iv != NULL );
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
   da5ca:	461d      	mov	r5, r3
   da5cc:	2b00      	cmp	r3, #0
   da5ce:	f000 808e 	beq.w	da6ee <mbedtls_gcm_starts+0x13c>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
   da5d2:	f500 76ac 	add.w	r6, r0, #344	; 0x158
   da5d6:	2210      	movs	r2, #16
   da5d8:	4649      	mov	r1, r9
   da5da:	4630      	mov	r0, r6
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
   da5dc:	f504 7ab4 	add.w	sl, r4, #360	; 0x168
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
   da5e0:	f00d fc67 	bl	e7eb2 <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
   da5e4:	4649      	mov	r1, r9
   da5e6:	2210      	movs	r2, #16
   da5e8:	4650      	mov	r0, sl
   da5ea:	f00d fc62 	bl	e7eb2 <memset>

    ctx->mode = mode;
   da5ee:	f8c4 b178 	str.w	fp, [r4, #376]	; 0x178
    ctx->len = 0;
   da5f2:	2000      	movs	r0, #0
   da5f4:	2100      	movs	r1, #0
   da5f6:	f504 739c 	add.w	r3, r4, #312	; 0x138
    ctx->add_len = 0;
   da5fa:	46a3      	mov	fp, r4

    if( iv_len == 12 )
   da5fc:	2d0c      	cmp	r5, #12

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
   da5fe:	e9c3 0100 	strd	r0, r1, [r3]
    ctx->add_len = 0;
   da602:	e9eb 0150 	strd	r0, r1, [fp, #320]!	; 0x140

    if( iv_len == 12 )
   da606:	d10a      	bne.n	da61e <mbedtls_gcm_starts+0x6c>
    {
        memcpy( ctx->y, iv, iv_len );
   da608:	683b      	ldr	r3, [r7, #0]
   da60a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   da60e:	687b      	ldr	r3, [r7, #4]
   da610:	6073      	str	r3, [r6, #4]
   da612:	68bb      	ldr	r3, [r7, #8]
   da614:	60b3      	str	r3, [r6, #8]
        ctx->y[15] = 1;
   da616:	2301      	movs	r3, #1
   da618:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
   da61c:	e03a      	b.n	da694 <mbedtls_gcm_starts+0xe2>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
   da61e:	2210      	movs	r2, #16
   da620:	4649      	mov	r1, r9
   da622:	a806      	add	r0, sp, #24
   da624:	f00d fc45 	bl	e7eb2 <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
   da628:	00eb      	lsls	r3, r5, #3
   da62a:	0e1a      	lsrs	r2, r3, #24
   da62c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
   da630:	0c1a      	lsrs	r2, r3, #16
   da632:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   da636:	0a1a      	lsrs	r2, r3, #8
   da638:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
   da63c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
   da640:	2d10      	cmp	r5, #16
   da642:	462b      	mov	r3, r5
   da644:	f204 1957 	addw	r9, r4, #343	; 0x157
   da648:	bf28      	it	cs
   da64a:	2310      	movcs	r3, #16
   da64c:	463a      	mov	r2, r7
   da64e:	4649      	mov	r1, r9
   da650:	441f      	add	r7, r3

            for( i = 0; i < use_len; i++ )
                ctx->y[i] ^= p[i];
   da652:	f812 eb01 	ldrb.w	lr, [r2], #1
   da656:	f811 0f01 	ldrb.w	r0, [r1, #1]!
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
   da65a:	42ba      	cmp	r2, r7
                ctx->y[i] ^= p[i];
   da65c:	ea8e 0000 	eor.w	r0, lr, r0
   da660:	7008      	strb	r0, [r1, #0]
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
   da662:	d1f6      	bne.n	da652 <mbedtls_gcm_starts+0xa0>
                ctx->y[i] ^= p[i];

            gcm_mult( ctx, ctx->y, ctx->y );
   da664:	4632      	mov	r2, r6
   da666:	4631      	mov	r1, r6
   da668:	4620      	mov	r0, r4
   da66a:	9303      	str	r3, [sp, #12]
   da66c:	f7ff fe34 	bl	da2d8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    {
        memset( work_buf, 0x00, 16 );
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );

        p = iv;
        while( iv_len > 0 )
   da670:	9b03      	ldr	r3, [sp, #12]
   da672:	1aed      	subs	r5, r5, r3
   da674:	d1e4      	bne.n	da640 <mbedtls_gcm_starts+0x8e>
            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
            ctx->y[i] ^= work_buf[i];
   da676:	ab06      	add	r3, sp, #24
   da678:	f819 2f01 	ldrb.w	r2, [r9, #1]!
   da67c:	5d5b      	ldrb	r3, [r3, r5]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
   da67e:	3501      	adds	r5, #1
            ctx->y[i] ^= work_buf[i];
   da680:	4053      	eors	r3, r2

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
   da682:	2d10      	cmp	r5, #16
            ctx->y[i] ^= work_buf[i];
   da684:	f889 3000 	strb.w	r3, [r9]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
   da688:	d1f5      	bne.n	da676 <mbedtls_gcm_starts+0xc4>
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
   da68a:	4632      	mov	r2, r6
   da68c:	4631      	mov	r1, r6
   da68e:	4620      	mov	r0, r4
   da690:	f7ff fe22 	bl	da2d8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
   da694:	ab05      	add	r3, sp, #20
   da696:	9300      	str	r3, [sp, #0]
   da698:	2210      	movs	r2, #16
   da69a:	f504 73a4 	add.w	r3, r4, #328	; 0x148
   da69e:	4631      	mov	r1, r6
   da6a0:	4620      	mov	r0, r4
   da6a2:	f7fd fa59 	bl	d7b58 <mbedtls_cipher_update>
   da6a6:	4605      	mov	r5, r0
   da6a8:	bb18      	cbnz	r0, da6f2 <mbedtls_gcm_starts+0x140>
                             &olen ) ) != 0 )
    {
        return( ret );
    }

    ctx->add_len = add_len;
   da6aa:	f8c4 8140 	str.w	r8, [r4, #320]	; 0x140
   da6ae:	f8cb 0004 	str.w	r0, [fp, #4]
    p = add;
    while( add_len > 0 )
   da6b2:	f1b8 0f00 	cmp.w	r8, #0
   da6b6:	d01c      	beq.n	da6f2 <mbedtls_gcm_starts+0x140>
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
   da6b8:	4646      	mov	r6, r8
   da6ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da6bc:	2e10      	cmp	r6, #16
   da6be:	bf28      	it	cs
   da6c0:	2610      	movcs	r6, #16
   da6c2:	4619      	mov	r1, r3
   da6c4:	4431      	add	r1, r6
   da6c6:	f204 1267 	addw	r2, r4, #359	; 0x167
   da6ca:	9114      	str	r1, [sp, #80]	; 0x50

        for( i = 0; i < use_len; i++ )
            ctx->buf[i] ^= p[i];
   da6cc:	f813 0b01 	ldrb.w	r0, [r3], #1
   da6d0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   da6d4:	4041      	eors	r1, r0
   da6d6:	7011      	strb	r1, [r2, #0]
    p = add;
    while( add_len > 0 )
    {
        use_len = ( add_len < 16 ) ? add_len : 16;

        for( i = 0; i < use_len; i++ )
   da6d8:	9914      	ldr	r1, [sp, #80]	; 0x50
   da6da:	4299      	cmp	r1, r3
   da6dc:	d1f6      	bne.n	da6cc <mbedtls_gcm_starts+0x11a>
            ctx->buf[i] ^= p[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
   da6de:	4652      	mov	r2, sl
   da6e0:	4651      	mov	r1, sl
   da6e2:	4620      	mov	r0, r4
   da6e4:	f7ff fdf8 	bl	da2d8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        add_len -= use_len;
   da6e8:	ebc6 0808 	rsb	r8, r6, r8
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
   da6ec:	e7e1      	b.n	da6b2 <mbedtls_gcm_starts+0x100>
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   da6ee:	f06f 0513 	mvn.w	r5, #19
        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
}
   da6f2:	4628      	mov	r0, r5
   da6f4:	b00b      	add	sp, #44	; 0x2c
   da6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da6fa <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
   da6fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da6fe:	461f      	mov	r7, r3
   da700:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
   da702:	2300      	movs	r3, #0

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
   da704:	4297      	cmp	r7, r2

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
   da706:	4604      	mov	r4, r0
   da708:	460e      	mov	r6, r1
   da70a:	4690      	mov	r8, r2
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
   da70c:	9305      	str	r3, [sp, #20]

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
   da70e:	d902      	bls.n	da716 <mbedtls_gcm_update+0x1c>
   da710:	1abb      	subs	r3, r7, r2
   da712:	428b      	cmp	r3, r1
   da714:	d35d      	bcc.n	da7d2 <mbedtls_gcm_update+0xd8>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
   da716:	4625      	mov	r5, r4
   da718:	e9f5 014e 	ldrd	r0, r1, [r5, #312]!	; 0x138
   da71c:	1982      	adds	r2, r0, r6
   da71e:	f141 0300 	adc.w	r3, r1, #0
   da722:	428b      	cmp	r3, r1
   da724:	bf08      	it	eq
   da726:	4282      	cmpeq	r2, r0
   da728:	d353      	bcc.n	da7d2 <mbedtls_gcm_update+0xd8>
   da72a:	210f      	movs	r1, #15
   da72c:	f06f 001f 	mvn.w	r0, #31
   da730:	4299      	cmp	r1, r3
   da732:	bf08      	it	eq
   da734:	4290      	cmpeq	r0, r2
   da736:	d34c      	bcc.n	da7d2 <mbedtls_gcm_update+0xd8>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
   da738:	e9c5 2300 	strd	r2, r3, [r5]
   da73c:	f504 73b2 	add.w	r3, r4, #356	; 0x164
   da740:	9302      	str	r3, [sp, #8]

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
   da742:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   da746:	f10d 0a18 	add.w	sl, sp, #24
   da74a:	9303      	str	r3, [sp, #12]
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
   da74c:	2e00      	cmp	r6, #0
   da74e:	d043      	beq.n	da7d8 <mbedtls_gcm_update+0xde>
   da750:	f504 75b4 	add.w	r5, r4, #360	; 0x168
    {
        use_len = ( length < 16 ) ? length : 16;
   da754:	2e10      	cmp	r6, #16
   da756:	46b1      	mov	r9, r6
   da758:	462a      	mov	r2, r5
   da75a:	bf28      	it	cs
   da75c:	f04f 0910 	movcs.w	r9, #16
   da760:	46ab      	mov	fp, r5

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
   da762:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
   da766:	3301      	adds	r3, #1
   da768:	b2db      	uxtb	r3, r3
   da76a:	7013      	strb	r3, [r2, #0]
   da76c:	b913      	cbnz	r3, da774 <mbedtls_gcm_update+0x7a>
    p = input;
    while( length > 0 )
    {
        use_len = ( length < 16 ) ? length : 16;

        for( i = 16; i > 12; i-- )
   da76e:	9b02      	ldr	r3, [sp, #8]
   da770:	429a      	cmp	r2, r3
   da772:	d1f6      	bne.n	da762 <mbedtls_gcm_update+0x68>
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
   da774:	ab05      	add	r3, sp, #20
   da776:	9300      	str	r3, [sp, #0]
   da778:	2210      	movs	r2, #16
   da77a:	4653      	mov	r3, sl
   da77c:	9903      	ldr	r1, [sp, #12]
   da77e:	4620      	mov	r0, r4
   da780:	f7fd f9ea 	bl	d7b58 <mbedtls_cipher_update>
   da784:	bb48      	cbnz	r0, da7da <mbedtls_gcm_update+0xe0>
   da786:	4642      	mov	r2, r8
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
   da788:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
   da78c:	b91b      	cbnz	r3, da796 <mbedtls_gcm_update+0x9c>
                ctx->buf[i] ^= p[i];
   da78e:	7829      	ldrb	r1, [r5, #0]
   da790:	7813      	ldrb	r3, [r2, #0]
   da792:	404b      	eors	r3, r1
   da794:	702b      	strb	r3, [r5, #0]
            out_p[i] = ectr[i] ^ p[i];
   da796:	f812 1b01 	ldrb.w	r1, [r2], #1
   da79a:	f81a 3000 	ldrb.w	r3, [sl, r0]
   da79e:	404b      	eors	r3, r1
   da7a0:	543b      	strb	r3, [r7, r0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
   da7a2:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
   da7a6:	2901      	cmp	r1, #1
                ctx->buf[i] ^= out_p[i];
   da7a8:	bf08      	it	eq
   da7aa:	7829      	ldrbeq	r1, [r5, #0]
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
   da7ac:	f100 0001 	add.w	r0, r0, #1
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
                ctx->buf[i] ^= p[i];
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
                ctx->buf[i] ^= out_p[i];
   da7b0:	bf04      	itt	eq
   da7b2:	404b      	eoreq	r3, r1
   da7b4:	702b      	strbeq	r3, [r5, #0]
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
   da7b6:	4581      	cmp	r9, r0
   da7b8:	f105 0501 	add.w	r5, r5, #1
   da7bc:	d1e4      	bne.n	da788 <mbedtls_gcm_update+0x8e>
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
                ctx->buf[i] ^= out_p[i];
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
   da7be:	465a      	mov	r2, fp
   da7c0:	4659      	mov	r1, fp
   da7c2:	4620      	mov	r0, r4
   da7c4:	f7ff fd88 	bl	da2d8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        length -= use_len;
   da7c8:	ebc9 0606 	rsb	r6, r9, r6
        p += use_len;
   da7cc:	44c8      	add	r8, r9
        out_p += use_len;
   da7ce:	444f      	add	r7, r9
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
   da7d0:	e7bc      	b.n	da74c <mbedtls_gcm_update+0x52>
    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   da7d2:	f06f 0013 	mvn.w	r0, #19
   da7d6:	e000      	b.n	da7da <mbedtls_gcm_update+0xe0>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
   da7d8:	4630      	mov	r0, r6
}
   da7da:	b00b      	add	sp, #44	; 0x2c
   da7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da7e0 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
   da7e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   da7e4:	4688      	mov	r8, r1
    uint64_t orig_add_len;

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
   da7e6:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
   da7ea:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   da7ee:	00cd      	lsls	r5, r1, #3
    orig_add_len = ctx->add_len * 8;
   da7f0:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
    uint64_t orig_add_len;

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
   da7f4:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
   da7f8:	00dc      	lsls	r4, r3, #3
    orig_add_len = ctx->add_len * 8;
   da7fa:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   da7fe:	00cf      	lsls	r7, r1, #3
   da800:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
   da804:	00de      	lsls	r6, r3, #3

    if( tag_len > 16 || tag_len < 4 )
   da806:	1f13      	subs	r3, r2, #4
   da808:	2b0c      	cmp	r3, #12
}

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
   da80a:	4681      	mov	r9, r0
   da80c:	4692      	mov	sl, r2
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
    orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
   da80e:	d85b      	bhi.n	da8c8 <mbedtls_gcm_finish+0xe8>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
   da810:	f500 71a4 	add.w	r1, r0, #328	; 0x148
   da814:	4640      	mov	r0, r8
   da816:	f00d fb26 	bl	e7e66 <memcpy>

    if( orig_len || orig_add_len )
   da81a:	ea54 0305 	orrs.w	r3, r4, r5
   da81e:	d104      	bne.n	da82a <mbedtls_gcm_finish+0x4a>
   da820:	ea56 0307 	orrs.w	r3, r6, r7
   da824:	d101      	bne.n	da82a <mbedtls_gcm_finish+0x4a>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
   da826:	2000      	movs	r0, #0
   da828:	e050      	b.n	da8cc <mbedtls_gcm_finish+0xec>

    memcpy( tag, ctx->base_ectr, tag_len );

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );
   da82a:	2210      	movs	r2, #16
   da82c:	2100      	movs	r1, #0
   da82e:	4668      	mov	r0, sp
   da830:	f00d fb3f 	bl	e7eb2 <memset>

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
   da834:	0e3b      	lsrs	r3, r7, #24
   da836:	f88d 3000 	strb.w	r3, [sp]
   da83a:	0c3b      	lsrs	r3, r7, #16
   da83c:	f88d 3001 	strb.w	r3, [sp, #1]
   da840:	0a3b      	lsrs	r3, r7, #8
   da842:	f88d 3002 	strb.w	r3, [sp, #2]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
   da846:	0e33      	lsrs	r3, r6, #24
   da848:	f88d 3004 	strb.w	r3, [sp, #4]
   da84c:	0c33      	lsrs	r3, r6, #16
   da84e:	f88d 3005 	strb.w	r3, [sp, #5]
   da852:	0a33      	lsrs	r3, r6, #8
   da854:	f88d 3006 	strb.w	r3, [sp, #6]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
   da858:	0e2b      	lsrs	r3, r5, #24
   da85a:	f88d 3008 	strb.w	r3, [sp, #8]
   da85e:	0c2b      	lsrs	r3, r5, #16
   da860:	f88d 3009 	strb.w	r3, [sp, #9]
   da864:	0a2b      	lsrs	r3, r5, #8
   da866:	f88d 300a 	strb.w	r3, [sp, #10]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
   da86a:	0e23      	lsrs	r3, r4, #24
   da86c:	f88d 300c 	strb.w	r3, [sp, #12]
   da870:	0c23      	lsrs	r3, r4, #16
   da872:	f88d 300d 	strb.w	r3, [sp, #13]
   da876:	f88d 400f 	strb.w	r4, [sp, #15]
   da87a:	0a23      	lsrs	r3, r4, #8
   da87c:	f209 1467 	addw	r4, r9, #359	; 0x167
   da880:	f88d 300e 	strb.w	r3, [sp, #14]

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
   da884:	f88d 7003 	strb.w	r7, [sp, #3]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
   da888:	f88d 6007 	strb.w	r6, [sp, #7]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
   da88c:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
   da890:	4622      	mov	r2, r4

        for( i = 0; i < 16; i++ )
   da892:	2300      	movs	r3, #0
            ctx->buf[i] ^= work_buf[i];
   da894:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   da898:	f81d 1003 	ldrb.w	r1, [sp, r3]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
   da89c:	3301      	adds	r3, #1
            ctx->buf[i] ^= work_buf[i];
   da89e:	4041      	eors	r1, r0
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
   da8a0:	2b10      	cmp	r3, #16
            ctx->buf[i] ^= work_buf[i];
   da8a2:	7011      	strb	r1, [r2, #0]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
   da8a4:	d1f6      	bne.n	da894 <mbedtls_gcm_finish+0xb4>
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
   da8a6:	f509 72b4 	add.w	r2, r9, #360	; 0x168
   da8aa:	4611      	mov	r1, r2
   da8ac:	4648      	mov	r0, r9
   da8ae:	f7ff fd13 	bl	da2d8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
   da8b2:	44c2      	add	sl, r8
   da8b4:	4641      	mov	r1, r8

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
   da8b6:	780a      	ldrb	r2, [r1, #0]
   da8b8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   da8bc:	4053      	eors	r3, r2
   da8be:	f801 3b01 	strb.w	r3, [r1], #1
        for( i = 0; i < 16; i++ )
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );

        for( i = 0; i < tag_len; i++ )
   da8c2:	4551      	cmp	r1, sl
   da8c4:	d1f7      	bne.n	da8b6 <mbedtls_gcm_finish+0xd6>
   da8c6:	e7ae      	b.n	da826 <mbedtls_gcm_finish+0x46>

    orig_len = ctx->len * 8;
    orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   da8c8:	f06f 0013 	mvn.w	r0, #19
        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
}
   da8cc:	b004      	add	sp, #16
   da8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000da8d2 <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
   da8d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da8d6:	4617      	mov	r7, r2
   da8d8:	461a      	mov	r2, r3
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
   da8da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   da8dc:	9301      	str	r3, [sp, #4]
   da8de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   da8e0:	9300      	str	r3, [sp, #0]
   da8e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
   da8e4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   da8e8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   da8ec:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   da8ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
   da8f0:	4604      	mov	r4, r0
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
   da8f2:	f7ff fe5e 	bl	da5b2 <mbedtls_gcm_starts>
   da8f6:	b970      	cbnz	r0, da916 <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
   da8f8:	464b      	mov	r3, r9
   da8fa:	4642      	mov	r2, r8
   da8fc:	4639      	mov	r1, r7
   da8fe:	4620      	mov	r0, r4
   da900:	f7ff fefb 	bl	da6fa <mbedtls_gcm_update>
   da904:	b938      	cbnz	r0, da916 <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
   da906:	4632      	mov	r2, r6
   da908:	4629      	mov	r1, r5
   da90a:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
   da90c:	b003      	add	sp, #12
   da90e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
   da912:	f7ff bf65 	b.w	da7e0 <mbedtls_gcm_finish>
        return( ret );

    return( 0 );
}
   da916:	b003      	add	sp, #12
   da918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000da91c <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
   da91c:	b5f0      	push	{r4, r5, r6, r7, lr}
   da91e:	b08d      	sub	sp, #52	; 0x34
   da920:	460e      	mov	r6, r1
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( tag != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
   da922:	9916      	ldr	r1, [sp, #88]	; 0x58
   da924:	9103      	str	r1, [sp, #12]
   da926:	9913      	ldr	r1, [sp, #76]	; 0x4c
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
   da928:	9c15      	ldr	r4, [sp, #84]	; 0x54
   da92a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( tag != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
   da92c:	9102      	str	r1, [sp, #8]
   da92e:	af08      	add	r7, sp, #32
   da930:	9912      	ldr	r1, [sp, #72]	; 0x48
   da932:	9101      	str	r1, [sp, #4]
   da934:	9300      	str	r3, [sp, #0]
   da936:	9706      	str	r7, [sp, #24]
   da938:	4613      	mov	r3, r2
   da93a:	9405      	str	r4, [sp, #20]
   da93c:	9504      	str	r5, [sp, #16]
   da93e:	4632      	mov	r2, r6
   da940:	2100      	movs	r1, #0
   da942:	f7ff ffc6 	bl	da8d2 <mbedtls_gcm_crypt_and_tag>
   da946:	b998      	cbnz	r0, da970 <mbedtls_gcm_auth_decrypt+0x54>
   da948:	4602      	mov	r2, r0
   da94a:	4603      	mov	r3, r0
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
   da94c:	42a3      	cmp	r3, r4
   da94e:	d008      	beq.n	da962 <mbedtls_gcm_auth_decrypt+0x46>
        diff |= tag[i] ^ check_tag[i];
   da950:	9914      	ldr	r1, [sp, #80]	; 0x50
   da952:	f811 e003 	ldrb.w	lr, [r1, r3]
   da956:	5cf9      	ldrb	r1, [r7, r3]
   da958:	ea8e 0101 	eor.w	r1, lr, r1
   da95c:	430a      	orrs	r2, r1
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
   da95e:	3301      	adds	r3, #1
   da960:	e7f4      	b.n	da94c <mbedtls_gcm_auth_decrypt+0x30>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
   da962:	b12a      	cbz	r2, da970 <mbedtls_gcm_auth_decrypt+0x54>
    {
        mbedtls_platform_zeroize( output, length );
   da964:	4628      	mov	r0, r5
   da966:	4631      	mov	r1, r6
   da968:	f001 fe42 	bl	dc5f0 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
   da96c:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
   da970:	b00d      	add	sp, #52	; 0x34
   da972:	bdf0      	pop	{r4, r5, r6, r7, pc}

000da974 <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
   da974:	b510      	push	{r4, lr}
    if( ctx == NULL )
   da976:	4604      	mov	r4, r0
   da978:	b140      	cbz	r0, da98c <mbedtls_gcm_free+0x18>
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
   da97a:	f7fd f87b 	bl	d7a74 <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
   da97e:	4620      	mov	r0, r4
   da980:	f44f 71c0 	mov.w	r1, #384	; 0x180
}
   da984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
    if( ctx == NULL )
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
   da988:	f001 be32 	b.w	dc5f0 <mbedtls_platform_zeroize>
   da98c:	bd10      	pop	{r4, pc}
	...

000da990 <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
   da990:	3804      	subs	r0, #4
   da992:	b2c0      	uxtb	r0, r0
   da994:	2804      	cmp	r0, #4
   da996:	bf9a      	itte	ls
   da998:	4b02      	ldrls	r3, [pc, #8]	; (da9a4 <mbedtls_md_info_from_type+0x14>)
   da99a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   da99e:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
   da9a0:	4770      	bx	lr
   da9a2:	bf00      	nop
   da9a4:	000e8580 	.word	0x000e8580

000da9a8 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
   da9a8:	2300      	movs	r3, #0
   da9aa:	6003      	str	r3, [r0, #0]
   da9ac:	6043      	str	r3, [r0, #4]
   da9ae:	6083      	str	r3, [r0, #8]
   da9b0:	4770      	bx	lr

000da9b2 <mbedtls_md_free>:
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
   da9b2:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
   da9b4:	4604      	mov	r4, r0
   da9b6:	b1a8      	cbz	r0, da9e4 <mbedtls_md_free+0x32>
   da9b8:	6803      	ldr	r3, [r0, #0]
   da9ba:	b19b      	cbz	r3, da9e4 <mbedtls_md_free+0x32>
        return;

    if( ctx->md_ctx != NULL )
   da9bc:	6840      	ldr	r0, [r0, #4]
   da9be:	b108      	cbz	r0, da9c4 <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
   da9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   da9c2:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
   da9c4:	68a0      	ldr	r0, [r4, #8]
   da9c6:	b138      	cbz	r0, da9d8 <mbedtls_md_free+0x26>
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
   da9c8:	6823      	ldr	r3, [r4, #0]
   da9ca:	68d9      	ldr	r1, [r3, #12]
   da9cc:	0049      	lsls	r1, r1, #1
   da9ce:	f001 fe0f 	bl	dc5f0 <mbedtls_platform_zeroize>
        mbedtls_free( ctx->hmac_ctx );
   da9d2:	68a0      	ldr	r0, [r4, #8]
   da9d4:	f00b f8b4 	bl	e5b40 <free>
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
   da9d8:	4620      	mov	r0, r4
   da9da:	210c      	movs	r1, #12
}
   da9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
   da9e0:	f001 be06 	b.w	dc5f0 <mbedtls_platform_zeroize>
   da9e4:	bd10      	pop	{r4, pc}
	...

000da9e8 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
   da9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da9ea:	4605      	mov	r5, r0
   da9ec:	4617      	mov	r7, r2
    if( md_info == NULL || ctx == NULL )
   da9ee:	460c      	mov	r4, r1
   da9f0:	b199      	cbz	r1, daa1a <mbedtls_md_setup+0x32>
   da9f2:	b190      	cbz	r0, daa1a <mbedtls_md_setup+0x32>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
   da9f4:	6a0b      	ldr	r3, [r1, #32]
   da9f6:	4798      	blx	r3
   da9f8:	4606      	mov	r6, r0
   da9fa:	6068      	str	r0, [r5, #4]
   da9fc:	b178      	cbz	r0, daa1e <mbedtls_md_setup+0x36>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
   da9fe:	b14f      	cbz	r7, daa14 <mbedtls_md_setup+0x2c>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
   daa00:	68e1      	ldr	r1, [r4, #12]
   daa02:	2002      	movs	r0, #2
   daa04:	f00d fa0a 	bl	e7e1c <calloc>
   daa08:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
   daa0a:	b918      	cbnz	r0, daa14 <mbedtls_md_setup+0x2c>
        {
            md_info->ctx_free_func( ctx->md_ctx );
   daa0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   daa0e:	4630      	mov	r0, r6
   daa10:	4798      	blx	r3
   daa12:	e004      	b.n	daa1e <mbedtls_md_setup+0x36>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
   daa14:	602c      	str	r4, [r5, #0]

    return( 0 );
   daa16:	2000      	movs	r0, #0
   daa18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   daa1a:	4802      	ldr	r0, [pc, #8]	; (daa24 <mbedtls_md_setup+0x3c>)
   daa1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
   daa1e:	4802      	ldr	r0, [pc, #8]	; (daa28 <mbedtls_md_setup+0x40>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
   daa20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   daa22:	bf00      	nop
   daa24:	ffffaf00 	.word	0xffffaf00
   daa28:	ffffae80 	.word	0xffffae80

000daa2c <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
   daa2c:	b120      	cbz	r0, daa38 <mbedtls_md_starts+0xc>
   daa2e:	6803      	ldr	r3, [r0, #0]
   daa30:	b113      	cbz	r3, daa38 <mbedtls_md_starts+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->starts_func( ctx->md_ctx ) );
   daa32:	691b      	ldr	r3, [r3, #16]
   daa34:	6840      	ldr	r0, [r0, #4]
   daa36:	4718      	bx	r3
}
   daa38:	4800      	ldr	r0, [pc, #0]	; (daa3c <mbedtls_md_starts+0x10>)
   daa3a:	4770      	bx	lr
   daa3c:	ffffaf00 	.word	0xffffaf00

000daa40 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL )
   daa40:	b120      	cbz	r0, daa4c <mbedtls_md_update+0xc>
   daa42:	6803      	ldr	r3, [r0, #0]
   daa44:	b113      	cbz	r3, daa4c <mbedtls_md_update+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
   daa46:	695b      	ldr	r3, [r3, #20]
   daa48:	6840      	ldr	r0, [r0, #4]
   daa4a:	4718      	bx	r3
}
   daa4c:	4800      	ldr	r0, [pc, #0]	; (daa50 <mbedtls_md_update+0x10>)
   daa4e:	4770      	bx	lr
   daa50:	ffffaf00 	.word	0xffffaf00

000daa54 <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
    if( ctx == NULL || ctx->md_info == NULL )
   daa54:	b120      	cbz	r0, daa60 <mbedtls_md_finish+0xc>
   daa56:	6803      	ldr	r3, [r0, #0]
   daa58:	b113      	cbz	r3, daa60 <mbedtls_md_finish+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
   daa5a:	699b      	ldr	r3, [r3, #24]
   daa5c:	6840      	ldr	r0, [r0, #4]
   daa5e:	4718      	bx	r3
}
   daa60:	4800      	ldr	r0, [pc, #0]	; (daa64 <mbedtls_md_finish+0x10>)
   daa62:	4770      	bx	lr
   daa64:	ffffaf00 	.word	0xffffaf00

000daa68 <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
   daa68:	b430      	push	{r4, r5}
   daa6a:	460d      	mov	r5, r1
   daa6c:	4611      	mov	r1, r2
    if( md_info == NULL )
   daa6e:	b128      	cbz	r0, daa7c <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
   daa70:	69c4      	ldr	r4, [r0, #28]
   daa72:	461a      	mov	r2, r3
   daa74:	4628      	mov	r0, r5
   daa76:	4623      	mov	r3, r4
}
   daa78:	bc30      	pop	{r4, r5}
            unsigned char *output )
{
    if( md_info == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
   daa7a:	4718      	bx	r3
}
   daa7c:	4801      	ldr	r0, [pc, #4]	; (daa84 <mbedtls_md+0x1c>)
   daa7e:	bc30      	pop	{r4, r5}
   daa80:	4770      	bx	lr
   daa82:	bf00      	nop
   daa84:	ffffaf00 	.word	0xffffaf00

000daa88 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
   daa88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   daa8c:	460e      	mov	r6, r1
   daa8e:	b090      	sub	sp, #64	; 0x40
   daa90:	4690      	mov	r8, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   daa92:	4604      	mov	r4, r0
   daa94:	2800      	cmp	r0, #0
   daa96:	d050      	beq.n	dab3a <mbedtls_md_hmac_starts+0xb2>
   daa98:	6803      	ldr	r3, [r0, #0]
   daa9a:	2b00      	cmp	r3, #0
   daa9c:	d04d      	beq.n	dab3a <mbedtls_md_hmac_starts+0xb2>
   daa9e:	6882      	ldr	r2, [r0, #8]
   daaa0:	2a00      	cmp	r2, #0
   daaa2:	d04a      	beq.n	dab3a <mbedtls_md_hmac_starts+0xb2>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
   daaa4:	68da      	ldr	r2, [r3, #12]
   daaa6:	4542      	cmp	r2, r8
   daaa8:	d219      	bcs.n	daade <mbedtls_md_hmac_starts+0x56>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   daaaa:	691b      	ldr	r3, [r3, #16]
   daaac:	6840      	ldr	r0, [r0, #4]
   daaae:	4798      	blx	r3
   daab0:	4605      	mov	r5, r0
   daab2:	2800      	cmp	r0, #0
   daab4:	d13b      	bne.n	dab2e <mbedtls_md_hmac_starts+0xa6>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
   daab6:	6823      	ldr	r3, [r4, #0]
   daab8:	6860      	ldr	r0, [r4, #4]
   daaba:	695b      	ldr	r3, [r3, #20]
   daabc:	4642      	mov	r2, r8
   daabe:	4631      	mov	r1, r6
   daac0:	4798      	blx	r3
   daac2:	4605      	mov	r5, r0
   daac4:	2800      	cmp	r0, #0
   daac6:	d132      	bne.n	dab2e <mbedtls_md_hmac_starts+0xa6>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
   daac8:	6823      	ldr	r3, [r4, #0]
   daaca:	6860      	ldr	r0, [r4, #4]
   daacc:	699b      	ldr	r3, [r3, #24]
   daace:	4669      	mov	r1, sp
   daad0:	4798      	blx	r3
   daad2:	4605      	mov	r5, r0
   daad4:	bb58      	cbnz	r0, dab2e <mbedtls_md_hmac_starts+0xa6>
            goto cleanup;

        keylen = ctx->md_info->size;
   daad6:	6823      	ldr	r3, [r4, #0]
   daad8:	f8d3 8008 	ldr.w	r8, [r3, #8]
        key = sum;
   daadc:	466e      	mov	r6, sp
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   daade:	6823      	ldr	r3, [r4, #0]

        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
   daae0:	68a7      	ldr	r7, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   daae2:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
   daae4:	2136      	movs	r1, #54	; 0x36
   daae6:	4638      	mov	r0, r7
        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   daae8:	18bd      	adds	r5, r7, r2

    memset( ipad, 0x36, ctx->md_info->block_size );
   daaea:	f00d f9e2 	bl	e7eb2 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
   daaee:	6823      	ldr	r3, [r4, #0]
   daaf0:	215c      	movs	r1, #92	; 0x5c
   daaf2:	68da      	ldr	r2, [r3, #12]
   daaf4:	4628      	mov	r0, r5
   daaf6:	f00d f9dc 	bl	e7eb2 <memset>

    for( i = 0; i < keylen; i++ )
   daafa:	2300      	movs	r3, #0
   daafc:	4598      	cmp	r8, r3
   daafe:	d009      	beq.n	dab14 <mbedtls_md_hmac_starts+0x8c>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
   dab00:	5cf9      	ldrb	r1, [r7, r3]
   dab02:	5cf2      	ldrb	r2, [r6, r3]
   dab04:	404a      	eors	r2, r1
   dab06:	54fa      	strb	r2, [r7, r3]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
   dab08:	5ce9      	ldrb	r1, [r5, r3]
   dab0a:	5cf2      	ldrb	r2, [r6, r3]
   dab0c:	404a      	eors	r2, r1
   dab0e:	54ea      	strb	r2, [r5, r3]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
   dab10:	3301      	adds	r3, #1
   dab12:	e7f3      	b.n	daafc <mbedtls_md_hmac_starts+0x74>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   dab14:	6823      	ldr	r3, [r4, #0]
   dab16:	6860      	ldr	r0, [r4, #4]
   dab18:	691b      	ldr	r3, [r3, #16]
   dab1a:	4798      	blx	r3
   dab1c:	4605      	mov	r5, r0
   dab1e:	b930      	cbnz	r0, dab2e <mbedtls_md_hmac_starts+0xa6>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
   dab20:	6823      	ldr	r3, [r4, #0]
   dab22:	6860      	ldr	r0, [r4, #4]
   dab24:	695d      	ldr	r5, [r3, #20]
   dab26:	68da      	ldr	r2, [r3, #12]
   dab28:	4639      	mov	r1, r7
   dab2a:	47a8      	blx	r5
   dab2c:	4605      	mov	r5, r0
                                           ctx->md_info->block_size ) ) != 0 )
        goto cleanup;

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );
   dab2e:	4668      	mov	r0, sp
   dab30:	2140      	movs	r1, #64	; 0x40
   dab32:	f001 fd5d 	bl	dc5f0 <mbedtls_platform_zeroize>

    return( ret );
   dab36:	4628      	mov	r0, r5
   dab38:	e000      	b.n	dab3c <mbedtls_md_hmac_starts+0xb4>
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dab3a:	4802      	ldr	r0, [pc, #8]	; (dab44 <mbedtls_md_hmac_starts+0xbc>)

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );

    return( ret );
}
   dab3c:	b010      	add	sp, #64	; 0x40
   dab3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dab42:	bf00      	nop
   dab44:	ffffaf00 	.word	0xffffaf00

000dab48 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
   dab48:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   dab4a:	b140      	cbz	r0, dab5e <mbedtls_md_hmac_update+0x16>
   dab4c:	6803      	ldr	r3, [r0, #0]
   dab4e:	b133      	cbz	r3, dab5e <mbedtls_md_hmac_update+0x16>
   dab50:	6884      	ldr	r4, [r0, #8]
   dab52:	b124      	cbz	r4, dab5e <mbedtls_md_hmac_update+0x16>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
   dab54:	695b      	ldr	r3, [r3, #20]
   dab56:	6840      	ldr	r0, [r0, #4]
}
   dab58:	f85d 4b04 	ldr.w	r4, [sp], #4
int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
   dab5c:	4718      	bx	r3
}
   dab5e:	4802      	ldr	r0, [pc, #8]	; (dab68 <mbedtls_md_hmac_update+0x20>)
   dab60:	f85d 4b04 	ldr.w	r4, [sp], #4
   dab64:	4770      	bx	lr
   dab66:	bf00      	nop
   dab68:	ffffaf00 	.word	0xffffaf00

000dab6c <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
   dab6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dab70:	460e      	mov	r6, r1
   dab72:	b090      	sub	sp, #64	; 0x40
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   dab74:	4604      	mov	r4, r0
   dab76:	b320      	cbz	r0, dabc2 <mbedtls_md_hmac_finish+0x56>
   dab78:	6803      	ldr	r3, [r0, #0]
   dab7a:	b313      	cbz	r3, dabc2 <mbedtls_md_hmac_finish+0x56>
   dab7c:	6885      	ldr	r5, [r0, #8]
   dab7e:	b305      	cbz	r5, dabc2 <mbedtls_md_hmac_finish+0x56>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   dab80:	f8d3 800c 	ldr.w	r8, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
   dab84:	6840      	ldr	r0, [r0, #4]
   dab86:	699b      	ldr	r3, [r3, #24]
   dab88:	4669      	mov	r1, sp
   dab8a:	4798      	blx	r3
   dab8c:	b9d0      	cbnz	r0, dabc4 <mbedtls_md_hmac_finish+0x58>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   dab8e:	6823      	ldr	r3, [r4, #0]
   dab90:	6860      	ldr	r0, [r4, #4]
   dab92:	691b      	ldr	r3, [r3, #16]
   dab94:	4798      	blx	r3
   dab96:	b9a8      	cbnz	r0, dabc4 <mbedtls_md_hmac_finish+0x58>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
   dab98:	6823      	ldr	r3, [r4, #0]
   dab9a:	6860      	ldr	r0, [r4, #4]
   dab9c:	695f      	ldr	r7, [r3, #20]
   dab9e:	68da      	ldr	r2, [r3, #12]
   daba0:	eb05 0108 	add.w	r1, r5, r8
   daba4:	47b8      	blx	r7
   daba6:	b968      	cbnz	r0, dabc4 <mbedtls_md_hmac_finish+0x58>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
   daba8:	6823      	ldr	r3, [r4, #0]
   dabaa:	6860      	ldr	r0, [r4, #4]
   dabac:	695d      	ldr	r5, [r3, #20]
   dabae:	689a      	ldr	r2, [r3, #8]
   dabb0:	4669      	mov	r1, sp
   dabb2:	47a8      	blx	r5
   dabb4:	b930      	cbnz	r0, dabc4 <mbedtls_md_hmac_finish+0x58>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
   dabb6:	6823      	ldr	r3, [r4, #0]
   dabb8:	6860      	ldr	r0, [r4, #4]
   dabba:	699b      	ldr	r3, [r3, #24]
   dabbc:	4631      	mov	r1, r6
   dabbe:	4798      	blx	r3
   dabc0:	e000      	b.n	dabc4 <mbedtls_md_hmac_finish+0x58>
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dabc2:	4802      	ldr	r0, [pc, #8]	; (dabcc <mbedtls_md_hmac_finish+0x60>)
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}
   dabc4:	b010      	add	sp, #64	; 0x40
   dabc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dabca:	bf00      	nop
   dabcc:	ffffaf00 	.word	0xffffaf00

000dabd0 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
   dabd0:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   dabd2:	4604      	mov	r4, r0
   dabd4:	b180      	cbz	r0, dabf8 <mbedtls_md_hmac_reset+0x28>
   dabd6:	6803      	ldr	r3, [r0, #0]
   dabd8:	b173      	cbz	r3, dabf8 <mbedtls_md_hmac_reset+0x28>
   dabda:	6885      	ldr	r5, [r0, #8]
   dabdc:	b165      	cbz	r5, dabf8 <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   dabde:	691b      	ldr	r3, [r3, #16]
   dabe0:	6840      	ldr	r0, [r0, #4]
   dabe2:	4798      	blx	r3
   dabe4:	b948      	cbnz	r0, dabfa <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
   dabe6:	6823      	ldr	r3, [r4, #0]
                                       ctx->md_info->block_size ) );
   dabe8:	6860      	ldr	r0, [r4, #4]
   dabea:	695e      	ldr	r6, [r3, #20]
   dabec:	68da      	ldr	r2, [r3, #12]
   dabee:	4629      	mov	r1, r5
   dabf0:	4633      	mov	r3, r6
}
   dabf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
   dabf6:	4718      	bx	r3
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dabf8:	4800      	ldr	r0, [pc, #0]	; (dabfc <mbedtls_md_hmac_reset+0x2c>)

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
}
   dabfa:	bd70      	pop	{r4, r5, r6, pc}
   dabfc:	ffffaf00 	.word	0xffffaf00

000dac00 <mbedtls_md_get_size>:
    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
}

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
   dac00:	b100      	cbz	r0, dac04 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
   dac02:	7a00      	ldrb	r0, [r0, #8]
}
   dac04:	4770      	bx	lr

000dac06 <mbedtls_md_get_name>:
    return md_info->type;
}

const char *mbedtls_md_get_name( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
   dac06:	b100      	cbz	r0, dac0a <mbedtls_md_get_name+0x4>
        return( NULL );

    return md_info->name;
   dac08:	6840      	ldr	r0, [r0, #4]
}
   dac0a:	4770      	bx	lr

000dac0c <_ZL17sha1_process_wrapPvPKh>:
}

static int sha1_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,
                                           data ) );
   dac0c:	f003 ba98 	b.w	de140 <mbedtls_internal_sha1_process>

000dac10 <_ZL15sha1_clone_wrapPvPKv>:
}

static void sha1_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
                  (const mbedtls_sha1_context *) src );
   dac10:	f003 ba76 	b.w	de100 <mbedtls_sha1_clone>

000dac14 <_ZL13sha1_ctx_freePv>:
}

static void sha1_ctx_free( void *ctx )
{
   dac14:	b510      	push	{r4, lr}
   dac16:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
   dac18:	f003 fa6d 	bl	de0f6 <mbedtls_sha1_free>
    mbedtls_free( ctx );
   dac1c:	4620      	mov	r0, r4
}
   dac1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha1_ctx_free( void *ctx )
{
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
    mbedtls_free( ctx );
   dac22:	f00a bf8d 	b.w	e5b40 <free>

000dac26 <_ZL14sha1_ctx_allocv>:
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
}

static void *sha1_ctx_alloc( void )
{
   dac26:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
   dac28:	215c      	movs	r1, #92	; 0x5c
   dac2a:	2001      	movs	r0, #1
   dac2c:	f00d f8f6 	bl	e7e1c <calloc>

    if( ctx != NULL )
   dac30:	4604      	mov	r4, r0
   dac32:	b108      	cbz	r0, dac38 <_ZL14sha1_ctx_allocv+0x12>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
   dac34:	f003 fa5b 	bl	de0ee <mbedtls_sha1_init>

    return( ctx );
}
   dac38:	4620      	mov	r0, r4
   dac3a:	bd10      	pop	{r4, pc}

000dac3c <_ZL16sha1_finish_wrapPvPh>:
                                     input, ilen ) );
}

static int sha1_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
   dac3c:	f004 ba6e 	b.w	df11c <mbedtls_sha1_finish_ret>

000dac40 <_ZL16sha1_update_wrapPvPKhj>:

static int sha1_update_wrap( void *ctx, const unsigned char *input,
                              size_t ilen )
{
    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,
                                     input, ilen ) );
   dac40:	f004 ba32 	b.w	df0a8 <mbedtls_sha1_update_ret>

000dac44 <_ZL16sha1_starts_wrapPv>:

#if defined(MBEDTLS_SHA1_C)

static int sha1_starts_wrap( void *ctx )
{
    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );
   dac44:	f003 ba62 	b.w	de10c <mbedtls_sha1_starts_ret>

000dac48 <_ZL19sha224_process_wrapPvPKh>:
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
                                             data ) );
   dac48:	f004 bb5a 	b.w	df300 <mbedtls_internal_sha256_process>

000dac4c <_ZL17sha224_clone_wrapPvPKv>:
}

static void sha224_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
                    (const mbedtls_sha256_context *) src );
   dac4c:	f004 bb02 	b.w	df254 <mbedtls_sha256_clone>

000dac50 <_ZL15sha224_ctx_freePv>:

    return( ctx );
}

static void sha224_ctx_free( void *ctx )
{
   dac50:	b510      	push	{r4, lr}
   dac52:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
   dac54:	f004 faf9 	bl	df24a <mbedtls_sha256_free>
    mbedtls_free( ctx );
   dac58:	4620      	mov	r0, r4
}
   dac5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha224_ctx_free( void *ctx )
{
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
    mbedtls_free( ctx );
   dac5e:	f00a bf6f 	b.w	e5b40 <free>

000dac62 <_ZL16sha224_ctx_allocv>:
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
}

static void *sha224_ctx_alloc( void )
{
   dac62:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
   dac64:	216c      	movs	r1, #108	; 0x6c
   dac66:	2001      	movs	r0, #1
   dac68:	f00d f8d8 	bl	e7e1c <calloc>

    if( ctx != NULL )
   dac6c:	4604      	mov	r4, r0
   dac6e:	b108      	cbz	r0, dac74 <_ZL16sha224_ctx_allocv+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
   dac70:	f004 fae7 	bl	df242 <mbedtls_sha256_init>

    return( ctx );
}
   dac74:	4620      	mov	r0, r4
   dac76:	bd10      	pop	{r4, pc}

000dac78 <_ZL11sha224_wrapPKhjPh>:
}

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
   dac78:	2301      	movs	r3, #1
   dac7a:	f004 bf75 	b.w	dfb68 <mbedtls_sha256_ret>

000dac7e <_ZL11sha256_wrapPKhjPh>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
   dac7e:	2300      	movs	r3, #0
   dac80:	f004 bf72 	b.w	dfb68 <mbedtls_sha256_ret>

000dac84 <_ZL18sha224_finish_wrapPvPh>:
}

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
                                       output ) );
   dac84:	f004 bedc 	b.w	dfa40 <mbedtls_sha256_finish_ret>

000dac88 <_ZL18sha224_update_wrapPvPKhj>:

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
                                       input, ilen ) );
   dac88:	f004 bea0 	b.w	df9cc <mbedtls_sha256_update_ret>

000dac8c <_ZL18sha224_starts_wrapPv>:
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
   dac8c:	2101      	movs	r1, #1
   dac8e:	f004 bae7 	b.w	df260 <mbedtls_sha256_starts_ret>

000dac92 <_ZL18sha256_starts_wrapPv>:
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
   dac92:	2100      	movs	r1, #0
   dac94:	f004 bae4 	b.w	df260 <mbedtls_sha256_starts_ret>

000dac98 <_ZL19sha384_process_wrapPvPKh>:
}

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
                                             data ) );
   dac98:	f005 b832 	b.w	dfd00 <mbedtls_internal_sha512_process>

000dac9c <_ZL17sha384_clone_wrapPvPKv>:
}

static void sha384_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
                    (const mbedtls_sha512_context *) src );
   dac9c:	f004 bf8e 	b.w	dfbbc <mbedtls_sha512_clone>

000daca0 <_ZL15sha384_ctx_freePv>:

    return( ctx );
}

static void sha384_ctx_free( void *ctx )
{
   daca0:	b510      	push	{r4, lr}
   daca2:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
   daca4:	f004 ff85 	bl	dfbb2 <mbedtls_sha512_free>
    mbedtls_free( ctx );
   daca8:	4620      	mov	r0, r4
}
   dacaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha384_ctx_free( void *ctx )
{
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
    mbedtls_free( ctx );
   dacae:	f00a bf47 	b.w	e5b40 <free>

000dacb2 <_ZL16sha384_ctx_allocv>:
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
}

static void *sha384_ctx_alloc( void )
{
   dacb2:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
   dacb4:	21d8      	movs	r1, #216	; 0xd8
   dacb6:	2001      	movs	r0, #1
   dacb8:	f00d f8b0 	bl	e7e1c <calloc>

    if( ctx != NULL )
   dacbc:	4604      	mov	r4, r0
   dacbe:	b108      	cbz	r0, dacc4 <_ZL16sha384_ctx_allocv+0x12>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
   dacc0:	f004 ff73 	bl	dfbaa <mbedtls_sha512_init>

    return( ctx );
}
   dacc4:	4620      	mov	r0, r4
   dacc6:	bd10      	pop	{r4, pc}

000dacc8 <_ZL11sha384_wrapPKhjPh>:
}

static int sha384_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
   dacc8:	2301      	movs	r3, #1
   dacca:	f005 bfeb 	b.w	e0ca4 <mbedtls_sha512_ret>

000dacce <_ZL11sha512_wrapPKhjPh>:
}

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
   dacce:	2300      	movs	r3, #0
   dacd0:	f005 bfe8 	b.w	e0ca4 <mbedtls_sha512_ret>

000dacd4 <_ZL18sha384_finish_wrapPvPh>:
}

static int sha384_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
                                       output ) );
   dacd4:	f005 beb6 	b.w	e0a44 <mbedtls_sha512_finish_ret>

000dacd8 <_ZL18sha384_update_wrapPvPKhj>:

static int sha384_update_wrap( void *ctx, const unsigned char *input,
                               size_t ilen )
{
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
                                       input, ilen ) );
   dacd8:	f005 be6c 	b.w	e09b4 <mbedtls_sha512_update_ret>

000dacdc <_ZL18sha384_starts_wrapPv>:

#if defined(MBEDTLS_SHA512_C)

static int sha384_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
   dacdc:	2101      	movs	r1, #1
   dacde:	f004 bf73 	b.w	dfbc8 <mbedtls_sha512_starts_ret>

000dace2 <_ZL18sha512_starts_wrapPv>:
    sha384_process_wrap,
};

static int sha512_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
   dace2:	2100      	movs	r1, #0
   dace4:	f004 bf70 	b.w	dfbc8 <mbedtls_sha512_starts_ret>

000dace8 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
   dace8:	b538      	push	{r3, r4, r5, lr}
   dacea:	4605      	mov	r5, r0
   dacec:	b160      	cbz	r0, dad08 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x20>
   dacee:	4c08      	ldr	r4, [pc, #32]	; (dad10 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x28>)
   dacf0:	6820      	ldr	r0, [r4, #0]
   dacf2:	b158      	cbz	r0, dad0c <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x24>
   dacf4:	6862      	ldr	r2, [r4, #4]
   dacf6:	686b      	ldr	r3, [r5, #4]
   dacf8:	429a      	cmp	r2, r3
   dacfa:	d103      	bne.n	dad04 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x1c>
   dacfc:	68a9      	ldr	r1, [r5, #8]
   dacfe:	f00d f8a3 	bl	e7e48 <memcmp>
   dad02:	b110      	cbz	r0, dad0a <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x22>
   dad04:	3414      	adds	r4, #20
   dad06:	e7f3      	b.n	dacf0 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x8>
   dad08:	bd38      	pop	{r3, r4, r5, pc}
   dad0a:	4620      	mov	r0, r4
   dad0c:	bd38      	pop	{r3, r4, r5, pc}
   dad0e:	bf00      	nop
   dad10:	000e92a4 	.word	0x000e92a4

000dad14 <mbedtls_oid_get_attr_short_name>:
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
   dad14:	b570      	push	{r4, r5, r6, lr}
   dad16:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
   dad18:	4605      	mov	r5, r0
   dad1a:	b160      	cbz	r0, dad36 <mbedtls_oid_get_attr_short_name+0x22>
   dad1c:	4c09      	ldr	r4, [pc, #36]	; (dad44 <mbedtls_oid_get_attr_short_name+0x30>)
   dad1e:	6820      	ldr	r0, [r4, #0]
   dad20:	b148      	cbz	r0, dad36 <mbedtls_oid_get_attr_short_name+0x22>
   dad22:	6862      	ldr	r2, [r4, #4]
   dad24:	686b      	ldr	r3, [r5, #4]
   dad26:	429a      	cmp	r2, r3
   dad28:	d103      	bne.n	dad32 <mbedtls_oid_get_attr_short_name+0x1e>
   dad2a:	68a9      	ldr	r1, [r5, #8]
   dad2c:	f00d f88c 	bl	e7e48 <memcmp>
   dad30:	b120      	cbz	r0, dad3c <mbedtls_oid_get_attr_short_name+0x28>
   dad32:	3414      	adds	r4, #20
   dad34:	e7f3      	b.n	dad1e <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
   dad36:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   dad3a:	bd70      	pop	{r4, r5, r6, pc}
   dad3c:	6923      	ldr	r3, [r4, #16]
   dad3e:	6033      	str	r3, [r6, #0]
   dad40:	bd70      	pop	{r4, r5, r6, pc}
   dad42:	bf00      	nop
   dad44:	000e8684 	.word	0x000e8684

000dad48 <mbedtls_oid_get_x509_ext_type>:
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
   dad48:	b570      	push	{r4, r5, r6, lr}
   dad4a:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
   dad4c:	4605      	mov	r5, r0
   dad4e:	b160      	cbz	r0, dad6a <mbedtls_oid_get_x509_ext_type+0x22>
   dad50:	4c09      	ldr	r4, [pc, #36]	; (dad78 <mbedtls_oid_get_x509_ext_type+0x30>)
   dad52:	6820      	ldr	r0, [r4, #0]
   dad54:	b148      	cbz	r0, dad6a <mbedtls_oid_get_x509_ext_type+0x22>
   dad56:	6862      	ldr	r2, [r4, #4]
   dad58:	686b      	ldr	r3, [r5, #4]
   dad5a:	429a      	cmp	r2, r3
   dad5c:	d103      	bne.n	dad66 <mbedtls_oid_get_x509_ext_type+0x1e>
   dad5e:	68a9      	ldr	r1, [r5, #8]
   dad60:	f00d f872 	bl	e7e48 <memcmp>
   dad64:	b120      	cbz	r0, dad70 <mbedtls_oid_get_x509_ext_type+0x28>
   dad66:	3414      	adds	r4, #20
   dad68:	e7f3      	b.n	dad52 <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
   dad6a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   dad6e:	bd70      	pop	{r4, r5, r6, pc}
   dad70:	6923      	ldr	r3, [r4, #16]
   dad72:	6033      	str	r3, [r6, #0]
   dad74:	bd70      	pop	{r4, r5, r6, pc}
   dad76:	bf00      	nop
   dad78:	000e9420 	.word	0x000e9420

000dad7c <mbedtls_oid_get_extended_key_usage>:
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
   dad7c:	b570      	push	{r4, r5, r6, lr}
   dad7e:	460e      	mov	r6, r1
    { ADD_LEN( MBEDTLS_OID_TIME_STAMPING ),    "id-kp-timeStamping",    "Time Stamping" },
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
   dad80:	4605      	mov	r5, r0
   dad82:	b160      	cbz	r0, dad9e <mbedtls_oid_get_extended_key_usage+0x22>
   dad84:	4c09      	ldr	r4, [pc, #36]	; (dadac <mbedtls_oid_get_extended_key_usage+0x30>)
   dad86:	6820      	ldr	r0, [r4, #0]
   dad88:	b148      	cbz	r0, dad9e <mbedtls_oid_get_extended_key_usage+0x22>
   dad8a:	6862      	ldr	r2, [r4, #4]
   dad8c:	686b      	ldr	r3, [r5, #4]
   dad8e:	429a      	cmp	r2, r3
   dad90:	d103      	bne.n	dad9a <mbedtls_oid_get_extended_key_usage+0x1e>
   dad92:	68a9      	ldr	r1, [r5, #8]
   dad94:	f00d f858 	bl	e7e48 <memcmp>
   dad98:	b120      	cbz	r0, dada4 <mbedtls_oid_get_extended_key_usage+0x28>
   dad9a:	3410      	adds	r4, #16
   dad9c:	e7f3      	b.n	dad86 <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
   dad9e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   dada2:	bd70      	pop	{r4, r5, r6, pc}
   dada4:	68e3      	ldr	r3, [r4, #12]
   dada6:	6033      	str	r3, [r6, #0]
   dada8:	bd70      	pop	{r4, r5, r6, pc}
   dadaa:	bf00      	nop
   dadac:	000e8814 	.word	0x000e8814

000dadb0 <mbedtls_oid_get_sig_alg_desc>:
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
   dadb0:	b510      	push	{r4, lr}
   dadb2:	460c      	mov	r4, r1
   dadb4:	f7ff ff98 	bl	dace8 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
   dadb8:	b118      	cbz	r0, dadc2 <mbedtls_oid_get_sig_alg_desc+0x12>
   dadba:	68c3      	ldr	r3, [r0, #12]
   dadbc:	6023      	str	r3, [r4, #0]
   dadbe:	2000      	movs	r0, #0
   dadc0:	bd10      	pop	{r4, pc}
   dadc2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   dadc6:	bd10      	pop	{r4, pc}

000dadc8 <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
   dadc8:	b538      	push	{r3, r4, r5, lr}
   dadca:	460d      	mov	r5, r1
   dadcc:	4614      	mov	r4, r2
   dadce:	f7ff ff8b 	bl	dace8 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
   dadd2:	b128      	cbz	r0, dade0 <mbedtls_oid_get_sig_alg+0x18>
   dadd4:	7c03      	ldrb	r3, [r0, #16]
   dadd6:	702b      	strb	r3, [r5, #0]
   dadd8:	7c43      	ldrb	r3, [r0, #17]
   dadda:	7023      	strb	r3, [r4, #0]
   daddc:	2000      	movs	r0, #0
   dadde:	bd38      	pop	{r3, r4, r5, pc}
   dade0:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   dade4:	bd38      	pop	{r3, r4, r5, pc}
	...

000dade8 <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
   dade8:	b570      	push	{r4, r5, r6, lr}
   dadea:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
   dadec:	4605      	mov	r5, r0
   dadee:	b160      	cbz	r0, dae0a <mbedtls_oid_get_pk_alg+0x22>
   dadf0:	4c09      	ldr	r4, [pc, #36]	; (dae18 <mbedtls_oid_get_pk_alg+0x30>)
   dadf2:	6820      	ldr	r0, [r4, #0]
   dadf4:	b148      	cbz	r0, dae0a <mbedtls_oid_get_pk_alg+0x22>
   dadf6:	6862      	ldr	r2, [r4, #4]
   dadf8:	686b      	ldr	r3, [r5, #4]
   dadfa:	429a      	cmp	r2, r3
   dadfc:	d103      	bne.n	dae06 <mbedtls_oid_get_pk_alg+0x1e>
   dadfe:	68a9      	ldr	r1, [r5, #8]
   dae00:	f00d f822 	bl	e7e48 <memcmp>
   dae04:	b120      	cbz	r0, dae10 <mbedtls_oid_get_pk_alg+0x28>
   dae06:	3414      	adds	r4, #20
   dae08:	e7f3      	b.n	dadf2 <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
   dae0a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   dae0e:	bd70      	pop	{r4, r5, r6, pc}
   dae10:	7c23      	ldrb	r3, [r4, #16]
   dae12:	7033      	strb	r3, [r6, #0]
   dae14:	bd70      	pop	{r4, r5, r6, pc}
   dae16:	bf00      	nop
   dae18:	000e8884 	.word	0x000e8884

000dae1c <mbedtls_oid_get_ec_grp>:
        MBEDTLS_ECP_DP_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
   dae1c:	b570      	push	{r4, r5, r6, lr}
   dae1e:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_ECP_DP_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
   dae20:	4605      	mov	r5, r0
   dae22:	b160      	cbz	r0, dae3e <mbedtls_oid_get_ec_grp+0x22>
   dae24:	4c09      	ldr	r4, [pc, #36]	; (dae4c <mbedtls_oid_get_ec_grp+0x30>)
   dae26:	6820      	ldr	r0, [r4, #0]
   dae28:	b148      	cbz	r0, dae3e <mbedtls_oid_get_ec_grp+0x22>
   dae2a:	6862      	ldr	r2, [r4, #4]
   dae2c:	686b      	ldr	r3, [r5, #4]
   dae2e:	429a      	cmp	r2, r3
   dae30:	d103      	bne.n	dae3a <mbedtls_oid_get_ec_grp+0x1e>
   dae32:	68a9      	ldr	r1, [r5, #8]
   dae34:	f00d f808 	bl	e7e48 <memcmp>
   dae38:	b120      	cbz	r0, dae44 <mbedtls_oid_get_ec_grp+0x28>
   dae3a:	3414      	adds	r4, #20
   dae3c:	e7f3      	b.n	dae26 <mbedtls_oid_get_ec_grp+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
   dae3e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   dae42:	bd70      	pop	{r4, r5, r6, pc}
   dae44:	7c23      	ldrb	r3, [r4, #16]
   dae46:	7033      	strb	r3, [r6, #0]
   dae48:	bd70      	pop	{r4, r5, r6, pc}
   dae4a:	bf00      	nop
   dae4c:	000e8910 	.word	0x000e8910

000dae50 <mbedtls_oid_get_cipher_alg>:
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
   dae50:	b570      	push	{r4, r5, r6, lr}
   dae52:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
   dae54:	4605      	mov	r5, r0
   dae56:	b160      	cbz	r0, dae72 <mbedtls_oid_get_cipher_alg+0x22>
   dae58:	4c09      	ldr	r4, [pc, #36]	; (dae80 <mbedtls_oid_get_cipher_alg+0x30>)
   dae5a:	6820      	ldr	r0, [r4, #0]
   dae5c:	b148      	cbz	r0, dae72 <mbedtls_oid_get_cipher_alg+0x22>
   dae5e:	6862      	ldr	r2, [r4, #4]
   dae60:	686b      	ldr	r3, [r5, #4]
   dae62:	429a      	cmp	r2, r3
   dae64:	d103      	bne.n	dae6e <mbedtls_oid_get_cipher_alg+0x1e>
   dae66:	68a9      	ldr	r1, [r5, #8]
   dae68:	f00c ffee 	bl	e7e48 <memcmp>
   dae6c:	b120      	cbz	r0, dae78 <mbedtls_oid_get_cipher_alg+0x28>
   dae6e:	3414      	adds	r4, #20
   dae70:	e7f3      	b.n	dae5a <mbedtls_oid_get_cipher_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
   dae72:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   dae76:	bd70      	pop	{r4, r5, r6, pc}
   dae78:	7c23      	ldrb	r3, [r4, #16]
   dae7a:	7033      	strb	r3, [r6, #0]
   dae7c:	bd70      	pop	{r4, r5, r6, pc}
   dae7e:	bf00      	nop
   dae80:	000e88d4 	.word	0x000e88d4

000dae84 <mbedtls_oid_get_md_alg>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
   dae84:	b570      	push	{r4, r5, r6, lr}
   dae86:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
   dae88:	4605      	mov	r5, r0
   dae8a:	b160      	cbz	r0, daea6 <mbedtls_oid_get_md_alg+0x22>
   dae8c:	4c09      	ldr	r4, [pc, #36]	; (daeb4 <mbedtls_oid_get_md_alg+0x30>)
   dae8e:	6820      	ldr	r0, [r4, #0]
   dae90:	b148      	cbz	r0, daea6 <mbedtls_oid_get_md_alg+0x22>
   dae92:	6862      	ldr	r2, [r4, #4]
   dae94:	686b      	ldr	r3, [r5, #4]
   dae96:	429a      	cmp	r2, r3
   dae98:	d103      	bne.n	daea2 <mbedtls_oid_get_md_alg+0x1e>
   dae9a:	68a9      	ldr	r1, [r5, #8]
   dae9c:	f00c ffd4 	bl	e7e48 <memcmp>
   daea0:	b120      	cbz	r0, daeac <mbedtls_oid_get_md_alg+0x28>
   daea2:	3414      	adds	r4, #20
   daea4:	e7f3      	b.n	dae8e <mbedtls_oid_get_md_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
   daea6:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   daeaa:	bd70      	pop	{r4, r5, r6, pc}
   daeac:	7c23      	ldrb	r3, [r4, #16]
   daeae:	7033      	strb	r3, [r6, #0]
   daeb0:	bd70      	pop	{r4, r5, r6, pc}
   daeb2:	bf00      	nop
   daeb4:	000e922c 	.word	0x000e922c

000daeb8 <mbedtls_oid_get_oid_by_md>:
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
   daeb8:	b530      	push	{r4, r5, lr}
   daeba:	4b08      	ldr	r3, [pc, #32]	; (daedc <mbedtls_oid_get_oid_by_md+0x24>)
   daebc:	681c      	ldr	r4, [r3, #0]
   daebe:	b14c      	cbz	r4, daed4 <mbedtls_oid_get_oid_by_md+0x1c>
   daec0:	7c1d      	ldrb	r5, [r3, #16]
   daec2:	4285      	cmp	r5, r0
   daec4:	d104      	bne.n	daed0 <mbedtls_oid_get_oid_by_md+0x18>
   daec6:	600c      	str	r4, [r1, #0]
   daec8:	685b      	ldr	r3, [r3, #4]
   daeca:	6013      	str	r3, [r2, #0]
   daecc:	2000      	movs	r0, #0
   daece:	bd30      	pop	{r4, r5, pc}
   daed0:	3314      	adds	r3, #20
   daed2:	e7f3      	b.n	daebc <mbedtls_oid_get_oid_by_md+0x4>
   daed4:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   daed8:	bd30      	pop	{r4, r5, pc}
   daeda:	bf00      	nop
   daedc:	000e922c 	.word	0x000e922c

000daee0 <mbedtls_oid_get_md_hmac>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
   daee0:	b570      	push	{r4, r5, r6, lr}
   daee2:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
   daee4:	4605      	mov	r5, r0
   daee6:	b160      	cbz	r0, daf02 <mbedtls_oid_get_md_hmac+0x22>
   daee8:	4c09      	ldr	r4, [pc, #36]	; (daf10 <mbedtls_oid_get_md_hmac+0x30>)
   daeea:	6820      	ldr	r0, [r4, #0]
   daeec:	b148      	cbz	r0, daf02 <mbedtls_oid_get_md_hmac+0x22>
   daeee:	6862      	ldr	r2, [r4, #4]
   daef0:	686b      	ldr	r3, [r5, #4]
   daef2:	429a      	cmp	r2, r3
   daef4:	d103      	bne.n	daefe <mbedtls_oid_get_md_hmac+0x1e>
   daef6:	68a9      	ldr	r1, [r5, #8]
   daef8:	f00c ffa6 	bl	e7e48 <memcmp>
   daefc:	b120      	cbz	r0, daf08 <mbedtls_oid_get_md_hmac+0x28>
   daefe:	3414      	adds	r4, #20
   daf00:	e7f3      	b.n	daeea <mbedtls_oid_get_md_hmac+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
   daf02:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   daf06:	bd70      	pop	{r4, r5, r6, pc}
   daf08:	7c23      	ldrb	r3, [r4, #16]
   daf0a:	7033      	strb	r3, [r6, #0]
   daf0c:	bd70      	pop	{r4, r5, r6, pc}
   daf0e:	bf00      	nop
   daf10:	000e93a8 	.word	0x000e93a8

000daf14 <mbedtls_oid_get_pkcs12_pbe_alg>:
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
   daf14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   daf16:	460f      	mov	r7, r1
   daf18:	4616      	mov	r6, r2
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
   daf1a:	4605      	mov	r5, r0
   daf1c:	b160      	cbz	r0, daf38 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
   daf1e:	4c0a      	ldr	r4, [pc, #40]	; (daf48 <mbedtls_oid_get_pkcs12_pbe_alg+0x34>)
   daf20:	6820      	ldr	r0, [r4, #0]
   daf22:	b148      	cbz	r0, daf38 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
   daf24:	6862      	ldr	r2, [r4, #4]
   daf26:	686b      	ldr	r3, [r5, #4]
   daf28:	429a      	cmp	r2, r3
   daf2a:	d103      	bne.n	daf34 <mbedtls_oid_get_pkcs12_pbe_alg+0x20>
   daf2c:	68a9      	ldr	r1, [r5, #8]
   daf2e:	f00c ff8b 	bl	e7e48 <memcmp>
   daf32:	b120      	cbz	r0, daf3e <mbedtls_oid_get_pkcs12_pbe_alg+0x2a>
   daf34:	3414      	adds	r4, #20
   daf36:	e7f3      	b.n	daf20 <mbedtls_oid_get_pkcs12_pbe_alg+0xc>
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
   daf38:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   daf3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   daf3e:	7c23      	ldrb	r3, [r4, #16]
   daf40:	703b      	strb	r3, [r7, #0]
   daf42:	7c63      	ldrb	r3, [r4, #17]
   daf44:	7033      	strb	r3, [r6, #0]
   daf46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   daf48:	000e91f0 	.word	0x000e91f0

000daf4c <mbedtls_pem_init>:
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
   daf4c:	2300      	movs	r3, #0
   daf4e:	6003      	str	r3, [r0, #0]
   daf50:	6043      	str	r3, [r0, #4]
   daf52:	6083      	str	r3, [r0, #8]
   daf54:	4770      	bx	lr
	...

000daf58 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
   daf58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   daf5c:	4689      	mov	r9, r1
   daf5e:	b085      	sub	sp, #20
   daf60:	4690      	mov	r8, r2
   daf62:	461f      	mov	r7, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
   daf64:	4606      	mov	r6, r0
   daf66:	2800      	cmp	r0, #0
   daf68:	d063      	beq.n	db032 <mbedtls_pem_read_buffer+0xda>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
   daf6a:	4618      	mov	r0, r3
   daf6c:	f00c fff0 	bl	e7f50 <strstr>

    if( s1 == NULL )
   daf70:	4604      	mov	r4, r0
   daf72:	2800      	cmp	r0, #0
   daf74:	d05f      	beq.n	db036 <mbedtls_pem_read_buffer+0xde>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
   daf76:	4641      	mov	r1, r8
   daf78:	4638      	mov	r0, r7
   daf7a:	f00c ffe9 	bl	e7f50 <strstr>

    if( s2 == NULL || s2 <= s1 )
   daf7e:	4605      	mov	r5, r0
   daf80:	2800      	cmp	r0, #0
   daf82:	d058      	beq.n	db036 <mbedtls_pem_read_buffer+0xde>
   daf84:	4284      	cmp	r4, r0
   daf86:	d256      	bcs.n	db036 <mbedtls_pem_read_buffer+0xde>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
   daf88:	4648      	mov	r0, r9
   daf8a:	f00c ffd9 	bl	e7f40 <strlen>
    if( *s1 == ' '  ) s1++;
   daf8e:	5c22      	ldrb	r2, [r4, r0]
    s2 = (unsigned char *) strstr( (const char *) data, footer );

    if( s2 == NULL || s2 <= s1 )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
   daf90:	1823      	adds	r3, r4, r0
    if( *s1 == ' '  ) s1++;
   daf92:	2a20      	cmp	r2, #32
   daf94:	bf08      	it	eq
   daf96:	3301      	addeq	r3, #1
    if( *s1 == '\r' ) s1++;
   daf98:	781a      	ldrb	r2, [r3, #0]
   daf9a:	2a0d      	cmp	r2, #13
   daf9c:	bf08      	it	eq
   daf9e:	3301      	addeq	r3, #1
    if( *s1 == '\n' ) s1++;
   dafa0:	781a      	ldrb	r2, [r3, #0]
   dafa2:	2a0a      	cmp	r2, #10
   dafa4:	d147      	bne.n	db036 <mbedtls_pem_read_buffer+0xde>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
   dafa6:	4640      	mov	r0, r8
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
    if( *s1 == ' '  ) s1++;
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
   dafa8:	1c5c      	adds	r4, r3, #1
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
   dafaa:	f00c ffc9 	bl	e7f40 <strlen>
    if( *end == ' '  ) end++;
   dafae:	5c2a      	ldrb	r2, [r5, r0]
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
   dafb0:	182b      	adds	r3, r5, r0
    if( *end == ' '  ) end++;
   dafb2:	2a20      	cmp	r2, #32
   dafb4:	bf08      	it	eq
   dafb6:	3301      	addeq	r3, #1
    if( *end == '\r' ) end++;
   dafb8:	781a      	ldrb	r2, [r3, #0]
   dafba:	2a0d      	cmp	r2, #13
   dafbc:	bf08      	it	eq
   dafbe:	3301      	addeq	r3, #1
    if( *end == '\n' ) end++;
   dafc0:	781a      	ldrb	r2, [r3, #0]
   dafc2:	2a0a      	cmp	r2, #10
   dafc4:	bf08      	it	eq
   dafc6:	3301      	addeq	r3, #1
    *use_len = end - data;
   dafc8:	1bdb      	subs	r3, r3, r7
   dafca:	9a0e      	ldr	r2, [sp, #56]	; 0x38

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
   dafcc:	1b2f      	subs	r7, r5, r4
   dafce:	2f15      	cmp	r7, #21
    end = s2;
    end += strlen( footer );
    if( *end == ' '  ) end++;
    if( *end == '\r' ) end++;
    if( *end == '\n' ) end++;
    *use_len = end - data;
   dafd0:	6013      	str	r3, [r2, #0]

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
   dafd2:	dd05      	ble.n	dafe0 <mbedtls_pem_read_buffer+0x88>
   dafd4:	2216      	movs	r2, #22
   dafd6:	491e      	ldr	r1, [pc, #120]	; (db050 <mbedtls_pem_read_buffer+0xf8>)
   dafd8:	4620      	mov	r0, r4
   dafda:	f00c ff35 	bl	e7e48 <memcmp>
   dafde:	b360      	cbz	r0, db03a <mbedtls_pem_read_buffer+0xe2>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
   dafe0:	42a5      	cmp	r5, r4
   dafe2:	d92c      	bls.n	db03e <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
   dafe4:	2100      	movs	r1, #0
   dafe6:	9700      	str	r7, [sp, #0]
   dafe8:	4623      	mov	r3, r4
   dafea:	aa03      	add	r2, sp, #12
   dafec:	4608      	mov	r0, r1
   dafee:	f7fb f889 	bl	d6104 <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
   daff2:	302c      	adds	r0, #44	; 0x2c
   daff4:	d025      	beq.n	db042 <mbedtls_pem_read_buffer+0xea>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
   daff6:	f8dd 800c 	ldr.w	r8, [sp, #12]
   daffa:	2001      	movs	r0, #1
   daffc:	4641      	mov	r1, r8
   daffe:	f00c ff0d 	bl	e7e1c <calloc>
   db002:	4605      	mov	r5, r0
   db004:	b1f8      	cbz	r0, db046 <mbedtls_pem_read_buffer+0xee>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
   db006:	4623      	mov	r3, r4
   db008:	9700      	str	r7, [sp, #0]
   db00a:	aa03      	add	r2, sp, #12
   db00c:	4641      	mov	r1, r8
   db00e:	f7fb f879 	bl	d6104 <mbedtls_base64_decode>
   db012:	4604      	mov	r4, r0
   db014:	b148      	cbz	r0, db02a <mbedtls_pem_read_buffer+0xd2>
    {
        mbedtls_platform_zeroize( buf, len );
   db016:	9903      	ldr	r1, [sp, #12]
   db018:	4628      	mov	r0, r5
   db01a:	f001 fae9 	bl	dc5f0 <mbedtls_platform_zeroize>
        mbedtls_free( buf );
   db01e:	4628      	mov	r0, r5
   db020:	f00a fd8e 	bl	e5b40 <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
   db024:	f5a4 5088 	sub.w	r0, r4, #4352	; 0x1100
   db028:	e00e      	b.n	db048 <mbedtls_pem_read_buffer+0xf0>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
    ctx->buflen = len;
   db02a:	9b03      	ldr	r3, [sp, #12]
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
   db02c:	6035      	str	r5, [r6, #0]
    ctx->buflen = len;
   db02e:	6073      	str	r3, [r6, #4]

    return( 0 );
   db030:	e00a      	b.n	db048 <mbedtls_pem_read_buffer+0xf0>
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
   db032:	4808      	ldr	r0, [pc, #32]	; (db054 <mbedtls_pem_read_buffer+0xfc>)
   db034:	e008      	b.n	db048 <mbedtls_pem_read_buffer+0xf0>

    s1 = (unsigned char *) strstr( (const char *) data, header );

    if( s1 == NULL )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
   db036:	4808      	ldr	r0, [pc, #32]	; (db058 <mbedtls_pem_read_buffer+0x100>)
   db038:	e006      	b.n	db048 <mbedtls_pem_read_buffer+0xf0>

        if( *s1 == '\r' ) s1++;
        if( *s1 == '\n' ) s1++;
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
#else
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
   db03a:	4808      	ldr	r0, [pc, #32]	; (db05c <mbedtls_pem_read_buffer+0x104>)
   db03c:	e004      	b.n	db048 <mbedtls_pem_read_buffer+0xf0>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
   db03e:	4808      	ldr	r0, [pc, #32]	; (db060 <mbedtls_pem_read_buffer+0x108>)
   db040:	e002      	b.n	db048 <mbedtls_pem_read_buffer+0xf0>

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
   db042:	4808      	ldr	r0, [pc, #32]	; (db064 <mbedtls_pem_read_buffer+0x10c>)
   db044:	e000      	b.n	db048 <mbedtls_pem_read_buffer+0xf0>

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
   db046:	4808      	ldr	r0, [pc, #32]	; (db068 <mbedtls_pem_read_buffer+0x110>)

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
   db048:	b005      	add	sp, #20
   db04a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db04e:	bf00      	nop
   db050:	000e9498 	.word	0x000e9498
   db054:	ffffeb80 	.word	0xffffeb80
   db058:	ffffef80 	.word	0xffffef80
   db05c:	ffffec00 	.word	0xffffec00
   db060:	ffffef00 	.word	0xffffef00
   db064:	ffffeed4 	.word	0xffffeed4
   db068:	ffffee80 	.word	0xffffee80

000db06c <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
   db06c:	b510      	push	{r4, lr}
   db06e:	4604      	mov	r4, r0
    if ( ctx->buf != NULL )
   db070:	6800      	ldr	r0, [r0, #0]
   db072:	b128      	cbz	r0, db080 <mbedtls_pem_free+0x14>
    {
        mbedtls_platform_zeroize( ctx->buf, ctx->buflen );
   db074:	6861      	ldr	r1, [r4, #4]
   db076:	f001 fabb 	bl	dc5f0 <mbedtls_platform_zeroize>
        mbedtls_free( ctx->buf );
   db07a:	6820      	ldr	r0, [r4, #0]
   db07c:	f00a fd60 	bl	e5b40 <free>
    }
    mbedtls_free( ctx->info );
   db080:	68a0      	ldr	r0, [r4, #8]
   db082:	f00a fd5d 	bl	e5b40 <free>

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
   db086:	4620      	mov	r0, r4
   db088:	210c      	movs	r1, #12
}
   db08a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mbedtls_platform_zeroize( ctx->buf, ctx->buflen );
        mbedtls_free( ctx->buf );
    }
    mbedtls_free( ctx->info );

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
   db08e:	f001 baaf 	b.w	dc5f0 <mbedtls_platform_zeroize>

000db092 <mbedtls_pk_init>:
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    PK_VALIDATE( ctx != NULL );

    ctx->pk_info = NULL;
   db092:	2300      	movs	r3, #0
   db094:	6003      	str	r3, [r0, #0]
    ctx->pk_ctx = NULL;
   db096:	6043      	str	r3, [r0, #4]
   db098:	4770      	bx	lr

000db09a <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
   db09a:	b510      	push	{r4, lr}
    if( ctx == NULL )
   db09c:	4604      	mov	r4, r0
   db09e:	b150      	cbz	r0, db0b6 <mbedtls_pk_free+0x1c>
        return;

    if ( ctx->pk_info != NULL )
   db0a0:	6803      	ldr	r3, [r0, #0]
   db0a2:	b113      	cbz	r3, db0aa <mbedtls_pk_free+0x10>
        ctx->pk_info->ctx_free_func( ctx->pk_ctx );
   db0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   db0a6:	6840      	ldr	r0, [r0, #4]
   db0a8:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
   db0aa:	4620      	mov	r0, r4
   db0ac:	2108      	movs	r1, #8
}
   db0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return;

    if ( ctx->pk_info != NULL )
        ctx->pk_info->ctx_free_func( ctx->pk_ctx );

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
   db0b2:	f001 ba9d 	b.w	dc5f0 <mbedtls_platform_zeroize>
   db0b6:	bd10      	pop	{r4, pc}

000db0b8 <mbedtls_pk_info_from_type>:

/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
   db0b8:	3801      	subs	r0, #1
   db0ba:	b2c0      	uxtb	r0, r0
   db0bc:	2803      	cmp	r0, #3
   db0be:	bf9a      	itte	ls
   db0c0:	4b02      	ldrls	r3, [pc, #8]	; (db0cc <mbedtls_pk_info_from_type+0x14>)
   db0c2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   db0c6:	2000      	movhi	r0, #0
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
   db0c8:	4770      	bx	lr
   db0ca:	bf00      	nop
   db0cc:	000e94bc 	.word	0x000e94bc

000db0d0 <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
   db0d0:	b570      	push	{r4, r5, r6, lr}
   db0d2:	4605      	mov	r5, r0
    PK_VALIDATE_RET( ctx != NULL );
    if( info == NULL || ctx->pk_info != NULL )
   db0d4:	460e      	mov	r6, r1
   db0d6:	b141      	cbz	r1, db0ea <mbedtls_pk_setup+0x1a>
   db0d8:	6804      	ldr	r4, [r0, #0]
   db0da:	b934      	cbnz	r4, db0ea <mbedtls_pk_setup+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
   db0dc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   db0de:	4798      	blx	r3
   db0e0:	6068      	str	r0, [r5, #4]
   db0e2:	b120      	cbz	r0, db0ee <mbedtls_pk_setup+0x1e>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
   db0e4:	602e      	str	r6, [r5, #0]

    return( 0 );
   db0e6:	4620      	mov	r0, r4
   db0e8:	bd70      	pop	{r4, r5, r6, pc}
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
    PK_VALIDATE_RET( ctx != NULL );
    if( info == NULL || ctx->pk_info != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   db0ea:	4802      	ldr	r0, [pc, #8]	; (db0f4 <mbedtls_pk_setup+0x24>)
   db0ec:	bd70      	pop	{r4, r5, r6, pc}

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
   db0ee:	4802      	ldr	r0, [pc, #8]	; (db0f8 <mbedtls_pk_setup+0x28>)

    ctx->pk_info = info;

    return( 0 );
}
   db0f0:	bd70      	pop	{r4, r5, r6, pc}
   db0f2:	bf00      	nop
   db0f4:	ffffc180 	.word	0xffffc180
   db0f8:	ffffc080 	.word	0xffffc080

000db0fc <mbedtls_pk_can_do>:
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
    /* A context with null pk_info is not set up yet and can't do anything.
     * For backward compatibility, also accept NULL instead of a context
     * pointer. */
    if( ctx == NULL || ctx->pk_info == NULL )
   db0fc:	b120      	cbz	r0, db108 <mbedtls_pk_can_do+0xc>
   db0fe:	6803      	ldr	r3, [r0, #0]
   db100:	b113      	cbz	r3, db108 <mbedtls_pk_can_do+0xc>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
   db102:	68db      	ldr	r3, [r3, #12]
   db104:	4608      	mov	r0, r1
   db106:	4718      	bx	r3
}
   db108:	2000      	movs	r0, #0
   db10a:	4770      	bx	lr

000db10c <mbedtls_pk_verify_restartable>:
int mbedtls_pk_verify_restartable( mbedtls_pk_context *ctx,
               mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len,
               mbedtls_pk_restart_ctx *rs_ctx )
{
   db10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db110:	4617      	mov	r7, r2
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
   db112:	6802      	ldr	r2, [r0, #0]
int mbedtls_pk_verify_restartable( mbedtls_pk_context *ctx,
               mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len,
               mbedtls_pk_restart_ctx *rs_ctx )
{
   db114:	f8dd 8020 	ldr.w	r8, [sp, #32]
   db118:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   db11c:	4604      	mov	r4, r0
   db11e:	460e      	mov	r6, r1
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
   db120:	b912      	cbnz	r2, db128 <mbedtls_pk_verify_restartable+0x1c>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   db122:	480e      	ldr	r0, [pc, #56]	; (db15c <mbedtls_pk_verify_restartable+0x50>)
   db124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
   db128:	b93b      	cbnz	r3, db13a <mbedtls_pk_verify_restartable+0x2e>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
   db12a:	4608      	mov	r0, r1
   db12c:	f7ff fc30 	bl	da990 <mbedtls_md_info_from_type>
   db130:	2800      	cmp	r0, #0
   db132:	d0f6      	beq.n	db122 <mbedtls_pk_verify_restartable+0x16>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
   db134:	f7ff fd64 	bl	dac00 <mbedtls_md_get_size>
   db138:	4603      	mov	r3, r0
    }
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->verify_func == NULL )
   db13a:	6822      	ldr	r2, [r4, #0]
   db13c:	6915      	ldr	r5, [r2, #16]
   db13e:	b155      	cbz	r5, db156 <mbedtls_pk_verify_restartable+0x4a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
   db140:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   db144:	f8cd 8020 	str.w	r8, [sp, #32]
   db148:	463a      	mov	r2, r7
   db14a:	4631      	mov	r1, r6
   db14c:	6860      	ldr	r0, [r4, #4]
   db14e:	46ac      	mov	ip, r5
}
   db150:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
   db154:	4760      	bx	ip
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   db156:	4802      	ldr	r0, [pc, #8]	; (db160 <mbedtls_pk_verify_restartable+0x54>)
   db158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db15c:	ffffc180 	.word	0xffffc180
   db160:	ffffc100 	.word	0xffffc100

000db164 <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
   db164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( mbedtls_pk_verify_restartable( ctx, md_alg, hash, hash_len,
                                           sig, sig_len, NULL ) );
   db166:	2400      	movs	r4, #0
   db168:	9402      	str	r4, [sp, #8]
   db16a:	9c07      	ldr	r4, [sp, #28]
   db16c:	9401      	str	r4, [sp, #4]
   db16e:	9c06      	ldr	r4, [sp, #24]
   db170:	9400      	str	r4, [sp, #0]
   db172:	f7ff ffcb 	bl	db10c <mbedtls_pk_verify_restartable>
}
   db176:	b004      	add	sp, #16
   db178:	bd10      	pop	{r4, pc}
	...

000db17c <mbedtls_pk_sign_restartable>:
             mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_pk_restart_ctx *rs_ctx )
{
   db17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db180:	4616      	mov	r6, r2
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
   db182:	6802      	ldr	r2, [r0, #0]
             mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_pk_restart_ctx *rs_ctx )
{
   db184:	af08      	add	r7, sp, #32
   db186:	4604      	mov	r4, r0
   db188:	460d      	mov	r5, r1
   db18a:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
   db18e:	b912      	cbnz	r2, db196 <mbedtls_pk_sign_restartable+0x1a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   db190:	4811      	ldr	r0, [pc, #68]	; (db1d8 <mbedtls_pk_sign_restartable+0x5c>)
   db192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
   db196:	b93b      	cbnz	r3, db1a8 <mbedtls_pk_sign_restartable+0x2c>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
   db198:	4608      	mov	r0, r1
   db19a:	f7ff fbf9 	bl	da990 <mbedtls_md_info_from_type>
   db19e:	2800      	cmp	r0, #0
   db1a0:	d0f6      	beq.n	db190 <mbedtls_pk_sign_restartable+0x14>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
   db1a2:	f7ff fd2d 	bl	dac00 <mbedtls_md_get_size>
   db1a6:	4603      	mov	r3, r0
    }
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->sign_func == NULL )
   db1a8:	6822      	ldr	r2, [r4, #0]
   db1aa:	f8d2 e014 	ldr.w	lr, [r2, #20]
   db1ae:	f1be 0f00 	cmp.w	lr, #0
   db1b2:	d00d      	beq.n	db1d0 <mbedtls_pk_sign_restartable+0x54>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
   db1b4:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   db1b8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   db1bc:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   db1c0:	9708      	str	r7, [sp, #32]
   db1c2:	4632      	mov	r2, r6
   db1c4:	4629      	mov	r1, r5
   db1c6:	6860      	ldr	r0, [r4, #4]
   db1c8:	46f4      	mov	ip, lr
}
   db1ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
   db1ce:	4760      	bx	ip
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   db1d0:	4802      	ldr	r0, [pc, #8]	; (db1dc <mbedtls_pk_sign_restartable+0x60>)
   db1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db1d6:	bf00      	nop
   db1d8:	ffffc180 	.word	0xffffc180
   db1dc:	ffffc100 	.word	0xffffc100

000db1e0 <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   db1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( input != NULL || ilen == 0 );
    PK_VALIDATE_RET( output != NULL || osize == 0 );
    PK_VALIDATE_RET( olen != NULL );

    if( ctx->pk_info == NULL )
   db1e2:	6804      	ldr	r4, [r0, #0]
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   db1e4:	ad05      	add	r5, sp, #20
   db1e6:	e895 40e0 	ldmia.w	r5, {r5, r6, r7, lr}
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( input != NULL || ilen == 0 );
    PK_VALIDATE_RET( output != NULL || osize == 0 );
    PK_VALIDATE_RET( olen != NULL );

    if( ctx->pk_info == NULL )
   db1ea:	b134      	cbz	r4, db1fa <mbedtls_pk_encrypt+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
   db1ec:	69e4      	ldr	r4, [r4, #28]
   db1ee:	b134      	cbz	r4, db1fe <mbedtls_pk_encrypt+0x1e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
   db1f0:	46a4      	mov	ip, r4
   db1f2:	6840      	ldr	r0, [r0, #4]
}
   db1f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
   db1f8:	4760      	bx	ip
    PK_VALIDATE_RET( input != NULL || ilen == 0 );
    PK_VALIDATE_RET( output != NULL || osize == 0 );
    PK_VALIDATE_RET( olen != NULL );

    if( ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   db1fa:	4802      	ldr	r0, [pc, #8]	; (db204 <mbedtls_pk_encrypt+0x24>)
   db1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   db1fe:	4802      	ldr	r0, [pc, #8]	; (db208 <mbedtls_pk_encrypt+0x28>)

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
}
   db200:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db202:	bf00      	nop
   db204:	ffffc180 	.word	0xffffc180
   db208:	ffffc100 	.word	0xffffc100

000db20c <mbedtls_pk_get_bitlen>:
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    /* For backward compatibility, accept NULL or a context that
     * isn't set up yet, and return a fake value that should be safe. */
    if( ctx == NULL || ctx->pk_info == NULL )
   db20c:	b120      	cbz	r0, db218 <mbedtls_pk_get_bitlen+0xc>
   db20e:	6803      	ldr	r3, [r0, #0]
   db210:	b113      	cbz	r3, db218 <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
   db212:	689b      	ldr	r3, [r3, #8]
   db214:	6840      	ldr	r0, [r0, #4]
   db216:	4718      	bx	r3
}
   db218:	2000      	movs	r0, #0
   db21a:	4770      	bx	lr

000db21c <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
   db21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db220:	461f      	mov	r7, r3
   db222:	b087      	sub	sp, #28
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL )
   db224:	6813      	ldr	r3, [r2, #0]
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
   db226:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   db228:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   db22c:	4683      	mov	fp, r0
   db22e:	460d      	mov	r5, r1
   db230:	4614      	mov	r4, r2
   db232:	e898 0700 	ldmia.w	r8, {r8, r9, sl}
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL )
   db236:	b90b      	cbnz	r3, db23c <mbedtls_pk_verify_ext+0x20>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   db238:	4821      	ldr	r0, [pc, #132]	; (db2c0 <mbedtls_pk_verify_ext+0xa4>)
   db23a:	e03d      	b.n	db2b8 <mbedtls_pk_verify_ext+0x9c>

    if( ! mbedtls_pk_can_do( ctx, type ) )
   db23c:	4601      	mov	r1, r0
   db23e:	4610      	mov	r0, r2
   db240:	f7ff ff5c 	bl	db0fc <mbedtls_pk_can_do>
   db244:	2800      	cmp	r0, #0
   db246:	d034      	beq.n	db2b2 <mbedtls_pk_verify_ext+0x96>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    if( type == MBEDTLS_PK_RSASSA_PSS )
   db248:	f1bb 0f06 	cmp.w	fp, #6
   db24c:	d123      	bne.n	db296 <mbedtls_pk_verify_ext+0x7a>
#if SIZE_MAX > UINT_MAX
        if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

        if( options == NULL )
   db24e:	2d00      	cmp	r5, #0
   db250:	d0f2      	beq.n	db238 <mbedtls_pk_verify_ext+0x1c>
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
   db252:	4620      	mov	r0, r4
   db254:	f7ff ffda 	bl	db20c <mbedtls_pk_get_bitlen>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
   db258:	3007      	adds	r0, #7
   db25a:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
   db25e:	d32a      	bcc.n	db2b6 <mbedtls_pk_verify_ext+0x9a>
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
   db260:	686b      	ldr	r3, [r5, #4]
   db262:	9304      	str	r3, [sp, #16]
   db264:	782b      	ldrb	r3, [r5, #0]
   db266:	9303      	str	r3, [sp, #12]
   db268:	2300      	movs	r3, #0
   db26a:	f8cd a014 	str.w	sl, [sp, #20]
   db26e:	f8cd 8008 	str.w	r8, [sp, #8]
   db272:	e88d 0280 	stmia.w	sp, {r7, r9}
   db276:	461a      	mov	r2, r3
   db278:	4619      	mov	r1, r3
   db27a:	6860      	ldr	r0, [r4, #4]
   db27c:	f002 faa4 	bl	dd7c8 <mbedtls_rsa_rsassa_pss_verify_ext>
                NULL, NULL, MBEDTLS_RSA_PUBLIC,
                md_alg, (unsigned int) hash_len, hash,
                pss_opts->mgf1_hash_id,
                pss_opts->expected_salt_len,
                sig );
        if( ret != 0 )
   db280:	b9d0      	cbnz	r0, db2b8 <mbedtls_pk_verify_ext+0x9c>
   db282:	4620      	mov	r0, r4
   db284:	f7ff ffc2 	bl	db20c <mbedtls_pk_get_bitlen>
            return( ret );

        if( sig_len > mbedtls_pk_get_len( ctx ) )
   db288:	3007      	adds	r0, #7
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

        return( 0 );
   db28a:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
   db28e:	480d      	ldr	r0, [pc, #52]	; (db2c4 <mbedtls_pk_verify_ext+0xa8>)
   db290:	bf98      	it	ls
   db292:	2000      	movls	r0, #0
   db294:	e010      	b.n	db2b8 <mbedtls_pk_verify_ext+0x9c>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_RSA_C && MBEDTLS_PKCS1_V21 */
    }

    /* General case: no options */
    if( options != NULL )
   db296:	2d00      	cmp	r5, #0
   db298:	d1ce      	bne.n	db238 <mbedtls_pk_verify_ext+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
   db29a:	464b      	mov	r3, r9
   db29c:	4642      	mov	r2, r8
   db29e:	4639      	mov	r1, r7
   db2a0:	4620      	mov	r0, r4
   db2a2:	9611      	str	r6, [sp, #68]	; 0x44
   db2a4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
}
   db2a8:	b007      	add	sp, #28
   db2aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
   db2ae:	f7ff bf59 	b.w	db164 <mbedtls_pk_verify>

    if( ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   db2b2:	4805      	ldr	r0, [pc, #20]	; (db2c8 <mbedtls_pk_verify_ext+0xac>)
   db2b4:	e000      	b.n	db2b8 <mbedtls_pk_verify_ext+0x9c>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   db2b6:	4805      	ldr	r0, [pc, #20]	; (db2cc <mbedtls_pk_verify_ext+0xb0>)
    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
}
   db2b8:	b007      	add	sp, #28
   db2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db2be:	bf00      	nop
   db2c0:	ffffc180 	.word	0xffffc180
   db2c4:	ffffc700 	.word	0xffffc700
   db2c8:	ffffc100 	.word	0xffffc100
   db2cc:	ffffbc80 	.word	0xffffbc80

000db2d0 <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
   db2d0:	b118      	cbz	r0, db2da <mbedtls_pk_get_name+0xa>
   db2d2:	6803      	ldr	r3, [r0, #0]
   db2d4:	b10b      	cbz	r3, db2da <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
   db2d6:	6858      	ldr	r0, [r3, #4]
   db2d8:	4770      	bx	lr
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( "invalid PK" );
   db2da:	4801      	ldr	r0, [pc, #4]	; (db2e0 <mbedtls_pk_get_name+0x10>)

    return( ctx->pk_info->name );
}
   db2dc:	4770      	bx	lr
   db2de:	bf00      	nop
   db2e0:	000e94af 	.word	0x000e94af

000db2e4 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
   db2e4:	b110      	cbz	r0, db2ec <mbedtls_pk_get_type+0x8>
   db2e6:	6800      	ldr	r0, [r0, #0]
   db2e8:	b100      	cbz	r0, db2ec <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
   db2ea:	7800      	ldrb	r0, [r0, #0]
}
   db2ec:	4770      	bx	lr

000db2ee <_ZL10rsa_can_do17mbedtls_pk_type_t>:
#include <stdint.h>

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
   db2ee:	2801      	cmp	r0, #1
   db2f0:	d002      	beq.n	db2f8 <_ZL10rsa_can_do17mbedtls_pk_type_t+0xa>
   db2f2:	1f83      	subs	r3, r0, #6
   db2f4:	4258      	negs	r0, r3
   db2f6:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
   db2f8:	4770      	bx	lr
	...

000db2fc <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
   db2fc:	2301      	movs	r3, #1
    items->name = "rsa.N";
   db2fe:	4a06      	ldr	r2, [pc, #24]	; (db318 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x1c>)
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
   db300:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
   db302:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
   db304:	730b      	strb	r3, [r1, #12]

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
   db306:	f100 0208 	add.w	r2, r0, #8

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
   db30a:	4b04      	ldr	r3, [pc, #16]	; (db31c <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x20>)

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
   db30c:	608a      	str	r2, [r1, #8]

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
   db30e:	3014      	adds	r0, #20
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
   db310:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
   db312:	6148      	str	r0, [r1, #20]
   db314:	4770      	bx	lr
   db316:	bf00      	nop
   db318:	000e94cc 	.word	0x000e94cc
   db31c:	000e94d2 	.word	0x000e94d2

000db320 <_ZL12eckey_can_do17mbedtls_pk_type_t>:
 */
static int eckey_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH ||
            type == MBEDTLS_PK_ECDSA );
   db320:	3802      	subs	r0, #2
}
   db322:	2802      	cmp	r0, #2
   db324:	bf8c      	ite	hi
   db326:	2000      	movhi	r0, #0
   db328:	2001      	movls	r0, #1
   db32a:	4770      	bx	lr

000db32c <_ZL16eckey_get_bitlenPKv>:

static size_t eckey_get_bitlen( const void *ctx )
{
    return( ((mbedtls_ecp_keypair *) ctx)->grp.pbits );
}
   db32c:	6d80      	ldr	r0, [r0, #88]	; 0x58
   db32e:	4770      	bx	lr

000db330 <_ZL11eckey_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_ECP;
   db330:	2302      	movs	r3, #2
   db332:	700b      	strb	r3, [r1, #0]
    items->name = "eckey.Q";
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
   db334:	3088      	adds	r0, #136	; 0x88
}

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_ECP;
    items->name = "eckey.Q";
   db336:	4b02      	ldr	r3, [pc, #8]	; (db340 <_ZL11eckey_debugPKvP21mbedtls_pk_debug_item+0x10>)
   db338:	604b      	str	r3, [r1, #4]
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
   db33a:	6088      	str	r0, [r1, #8]
   db33c:	4770      	bx	lr
   db33e:	bf00      	nop
   db340:	000e94d8 	.word	0x000e94d8

000db344 <_ZL14eckeydh_can_do17mbedtls_pk_type_t>:
 * EC key restricted to ECDH
 */
static int eckeydh_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH );
   db344:	3802      	subs	r0, #2
}
   db346:	2801      	cmp	r0, #1
   db348:	bf8c      	ite	hi
   db34a:	2000      	movhi	r0, #0
   db34c:	2001      	movls	r0, #1
   db34e:	4770      	bx	lr

000db350 <_ZL12ecdsa_can_do17mbedtls_pk_type_t>:

#if defined(MBEDTLS_ECDSA_C)
static int ecdsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECDSA );
}
   db350:	1f03      	subs	r3, r0, #4
   db352:	4258      	negs	r0, r3
   db354:	4158      	adcs	r0, r3
   db356:	4770      	bx	lr

000db358 <_ZL13rsa_free_wrapPv>:

    return( ctx );
}

static void rsa_free_wrap( void *ctx )
{
   db358:	b510      	push	{r4, lr}
   db35a:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
   db35c:	f002 fbac 	bl	ddab8 <mbedtls_rsa_free>
    mbedtls_free( ctx );
   db360:	4620      	mov	r0, r4
}
   db362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void rsa_free_wrap( void *ctx )
{
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
    mbedtls_free( ctx );
   db366:	f00a bbeb 	b.w	e5b40 <free>

000db36a <_ZL14rsa_alloc_wrapv>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
}

static void *rsa_alloc_wrap( void )
{
   db36a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
   db36c:	21ac      	movs	r1, #172	; 0xac
   db36e:	2001      	movs	r0, #1
   db370:	f00c fd54 	bl	e7e1c <calloc>

    if( ctx != NULL )
   db374:	4604      	mov	r4, r0
   db376:	b118      	cbz	r0, db380 <_ZL14rsa_alloc_wrapv+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
   db378:	2200      	movs	r2, #0
   db37a:	4611      	mov	r1, r2
   db37c:	f001 fb6c 	bl	dca58 <mbedtls_rsa_init>

    return( ctx );
}
   db380:	4620      	mov	r0, r4
   db382:	bd10      	pop	{r4, pc}

000db384 <_ZL19rsa_check_pair_wrapPKvS0_>:
}

static int rsa_check_pair_wrap( const void *pub, const void *prv )
{
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
   db384:	f001 bbce 	b.w	dcb24 <mbedtls_rsa_check_pub_priv>

000db388 <_ZL14rsa_get_bitlenPKv>:
    return( type == MBEDTLS_PK_RSA ||
            type == MBEDTLS_PK_RSASSA_PSS );
}

static size_t rsa_get_bitlen( const void *ctx )
{
   db388:	b508      	push	{r3, lr}
    const mbedtls_rsa_context * rsa = (const mbedtls_rsa_context *) ctx;
    return( 8 * mbedtls_rsa_get_len( rsa ) );
   db38a:	f001 fb72 	bl	dca72 <mbedtls_rsa_get_len>
}
   db38e:	00c0      	lsls	r0, r0, #3
   db390:	bd08      	pop	{r3, pc}
	...

000db394 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_encrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   db394:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db398:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   db39c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   db3a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   db3a2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   db3a4:	4604      	mov	r4, r0
   db3a6:	4688      	mov	r8, r1
   db3a8:	4617      	mov	r7, r2
   db3aa:	4699      	mov	r9, r3
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
   db3ac:	f001 fb61 	bl	dca72 <mbedtls_rsa_get_len>

    if( *olen > osize )
   db3b0:	4550      	cmp	r0, sl
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
   db3b2:	f8cb 0000 	str.w	r0, [fp]

    if( *olen > osize )
   db3b6:	d80d      	bhi.n	db3d4 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x40>
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
   db3b8:	2300      	movs	r3, #0
   db3ba:	4632      	mov	r2, r6
   db3bc:	4629      	mov	r1, r5
   db3be:	4620      	mov	r0, r4
   db3c0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   db3c4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   db3c8:	970a      	str	r7, [sp, #40]	; 0x28
}
   db3ca:	b001      	add	sp, #4
   db3cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( *olen > osize )
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
   db3d0:	f001 bec0 	b.w	dd154 <mbedtls_rsa_pkcs1_encrypt>
}
   db3d4:	4801      	ldr	r0, [pc, #4]	; (db3dc <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
   db3d6:	b001      	add	sp, #4
   db3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db3dc:	ffffbc00 	.word	0xffffbc00

000db3e0 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_decrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   db3e0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db3e4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   db3e6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   db3ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   db3ec:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   db3ee:	4693      	mov	fp, r2
   db3f0:	4604      	mov	r4, r0
   db3f2:	4688      	mov	r8, r1
   db3f4:	4699      	mov	r9, r3
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;

    if( ilen != mbedtls_rsa_get_len( rsa ) )
   db3f6:	f001 fb3c 	bl	dca72 <mbedtls_rsa_get_len>
   db3fa:	4558      	cmp	r0, fp
   db3fc:	d10f      	bne.n	db41e <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x3e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
   db3fe:	2301      	movs	r3, #1
   db400:	4632      	mov	r2, r6
   db402:	4629      	mov	r1, r5
   db404:	4620      	mov	r0, r4
   db406:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   db40a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   db40e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   db412:	970a      	str	r7, [sp, #40]	; 0x28
}
   db414:	b001      	add	sp, #4
   db416:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( ilen != mbedtls_rsa_get_len( rsa ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
   db41a:	f002 b85b 	b.w	dd4d4 <mbedtls_rsa_pkcs1_decrypt>
}
   db41e:	4802      	ldr	r0, [pc, #8]	; (db428 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
   db420:	b001      	add	sp, #4
   db422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db426:	bf00      	nop
   db428:	ffffbf80 	.word	0xffffbf80

000db42c <_ZL13rsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int rsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   db42c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db430:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   db434:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   db438:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   db43a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   db43c:	460f      	mov	r7, r1
   db43e:	4691      	mov	r9, r2
   db440:	4698      	mov	r8, r3
   db442:	4604      	mov	r4, r0
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
   db444:	f001 fb15 	bl	dca72 <mbedtls_rsa_get_len>

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
   db448:	2301      	movs	r3, #1
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
   db44a:	f8cb 0000 	str.w	r0, [fp]

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
   db44e:	4632      	mov	r2, r6
   db450:	4629      	mov	r1, r5
   db452:	4620      	mov	r0, r4
   db454:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   db458:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   db45c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   db460:	970a      	str	r7, [sp, #40]	; 0x28
}
   db462:	b001      	add	sp, #4
   db464:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
   db468:	f002 b98c 	b.w	dd784 <mbedtls_rsa_pkcs1_sign>

000db46c <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
}

static int rsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
   db46c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db470:	b085      	sub	sp, #20
   db472:	4606      	mov	r6, r0
   db474:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   db476:	460f      	mov	r7, r1
   db478:	4691      	mov	r9, r2
   db47a:	4698      	mov	r8, r3
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
   db47c:	f001 faf9 	bl	dca72 <mbedtls_rsa_get_len>
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
   db480:	42a0      	cmp	r0, r4
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
   db482:	4605      	mov	r5, r0
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
   db484:	d80f      	bhi.n	db4a6 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3a>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
   db486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   db488:	9303      	str	r3, [sp, #12]
   db48a:	2300      	movs	r3, #0
   db48c:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
   db490:	461a      	mov	r2, r3
   db492:	4619      	mov	r1, r3
   db494:	4630      	mov	r0, r6
   db496:	f002 faed 	bl	dda74 <mbedtls_rsa_pkcs1_verify>
   db49a:	b928      	cbnz	r0, db4a8 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
     * We have a special error code for that so that so that callers can
     * use mbedtls_pk_verify() to check "Does the buffer start with a
     * valid signature?" and not just "Does the buffer contain a valid
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
   db49c:	4b04      	ldr	r3, [pc, #16]	; (db4b0 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x44>)
   db49e:	42a5      	cmp	r5, r4
   db4a0:	bf38      	it	cc
   db4a2:	4618      	movcc	r0, r3
   db4a4:	e000      	b.n	db4a8 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   db4a6:	4803      	ldr	r0, [pc, #12]	; (db4b4 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x48>)
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
}
   db4a8:	b005      	add	sp, #20
   db4aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db4ae:	bf00      	nop
   db4b0:	ffffc700 	.word	0xffffc700
   db4b4:	ffffbc80 	.word	0xffffbc80

000db4b8 <_ZL15eckey_free_wrapPv>:

    return( ctx );
}

static void eckey_free_wrap( void *ctx )
{
   db4b8:	b510      	push	{r4, lr}
   db4ba:	4604      	mov	r4, r0
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
   db4bc:	f7fd fcb7 	bl	d8e2e <mbedtls_ecp_keypair_free>
    mbedtls_free( ctx );
   db4c0:	4620      	mov	r0, r4
}
   db4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void eckey_free_wrap( void *ctx )
{
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
    mbedtls_free( ctx );
   db4c6:	f00a bb3b 	b.w	e5b40 <free>

000db4ca <_ZL16eckey_alloc_wrapv>:
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
                                (const mbedtls_ecp_keypair *) prv ) );
}

static void *eckey_alloc_wrap( void )
{
   db4ca:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
   db4cc:	21ac      	movs	r1, #172	; 0xac
   db4ce:	2001      	movs	r0, #1
   db4d0:	f00c fca4 	bl	e7e1c <calloc>

    if( ctx != NULL )
   db4d4:	4604      	mov	r4, r0
   db4d6:	b108      	cbz	r0, db4dc <_ZL16eckey_alloc_wrapv+0x12>
        mbedtls_ecp_keypair_init( (mbedtls_ecp_keypair *)ctx );
   db4d8:	f7fd fc5b 	bl	d8d92 <mbedtls_ecp_keypair_init>

    return( ctx );
}
   db4dc:	4620      	mov	r0, r4
   db4de:	bd10      	pop	{r4, pc}

000db4e0 <_ZL16eckey_check_pairPKvS0_>:
#endif /* MBEDTLS_ECDSA_C */

static int eckey_check_pair( const void *pub, const void *prv )
{
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
                                (const mbedtls_ecp_keypair *) prv ) );
   db4e0:	f7fe bbdc 	b.w	d9c9c <mbedtls_ecp_check_pub_priv>

000db4e4 <_ZL16ecdsa_alloc_wrapv>:

}
#endif /* MBEDTLS_ECP_RESTARTABLE */

static void *ecdsa_alloc_wrap( void )
{
   db4e4:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
   db4e6:	21ac      	movs	r1, #172	; 0xac
   db4e8:	2001      	movs	r0, #1
   db4ea:	f00c fc97 	bl	e7e1c <calloc>

    if( ctx != NULL )
   db4ee:	4604      	mov	r4, r0
   db4f0:	b108      	cbz	r0, db4f6 <_ZL16ecdsa_alloc_wrapv+0x12>
        mbedtls_ecdsa_init( (mbedtls_ecdsa_context *) ctx );
   db4f2:	f7fc ff96 	bl	d8422 <mbedtls_ecdsa_init>

    return( ctx );
}
   db4f6:	4620      	mov	r0, r4
   db4f8:	bd10      	pop	{r4, pc}

000db4fa <_ZL15ecdsa_free_wrapPv>:

static void ecdsa_free_wrap( void *ctx )
{
   db4fa:	b510      	push	{r4, lr}
   db4fc:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
   db4fe:	f7fc ff92 	bl	d8426 <mbedtls_ecdsa_free>
    mbedtls_free( ctx );
   db502:	4620      	mov	r0, r4
}
   db504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void ecdsa_free_wrap( void *ctx )
{
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
    mbedtls_free( ctx );
   db508:	f00a bb1a 	b.w	e5b40 <free>

000db50c <_ZL15ecdsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int ecdsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   db50c:	b410      	push	{r4}
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );
}
   db50e:	f85d 4b04 	ldr.w	r4, [sp], #4
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );
   db512:	f7fc bf1f 	b.w	d8354 <mbedtls_ecdsa_write_signature>

000db516 <_ZL15eckey_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int eckey_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   db516:	b5f0      	push	{r4, r5, r6, r7, lr}
   db518:	b0b1      	sub	sp, #196	; 0xc4
   db51a:	4604      	mov	r4, r0
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
   db51c:	a805      	add	r0, sp, #20

static int eckey_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   db51e:	460d      	mov	r5, r1
   db520:	4616      	mov	r6, r2
   db522:	461f      	mov	r7, r3
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
   db524:	f7fc ff7d 	bl	d8422 <mbedtls_ecdsa_init>

    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, (const mbedtls_ecp_keypair *)ctx ) ) == 0 )
   db528:	4621      	mov	r1, r4
   db52a:	a805      	add	r0, sp, #20
   db52c:	f7fc ff7f 	bl	d842e <mbedtls_ecdsa_from_keypair>
   db530:	4604      	mov	r4, r0
   db532:	b970      	cbnz	r0, db552 <_ZL15eckey_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_+0x3c>
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );
   db534:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   db536:	9303      	str	r3, [sp, #12]
   db538:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   db53a:	9302      	str	r3, [sp, #8]
   db53c:	9b37      	ldr	r3, [sp, #220]	; 0xdc
   db53e:	9301      	str	r3, [sp, #4]
   db540:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   db542:	9300      	str	r3, [sp, #0]
   db544:	4632      	mov	r2, r6
   db546:	463b      	mov	r3, r7
   db548:	4629      	mov	r1, r5
   db54a:	a805      	add	r0, sp, #20
   db54c:	f7fc ff02 	bl	d8354 <mbedtls_ecdsa_write_signature>
   db550:	4604      	mov	r4, r0

    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, (const mbedtls_ecp_keypair *)ctx ) ) == 0 )
        ret = ecdsa_sign_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len,
                               f_rng, p_rng );

    mbedtls_ecdsa_free( &ecdsa );
   db552:	a805      	add	r0, sp, #20
   db554:	f7fc ff67 	bl	d8426 <mbedtls_ecdsa_free>

    return( ret );
}
   db558:	4620      	mov	r0, r4
   db55a:	b031      	add	sp, #196	; 0xc4
   db55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000db560 <_ZL17ecdsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
}

static int ecdsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                       const unsigned char *hash, size_t hash_len,
                       const unsigned char *sig, size_t sig_len )
{
   db560:	b507      	push	{r0, r1, r2, lr}
   db562:	4611      	mov	r1, r2
   db564:	461a      	mov	r2, r3
    int ret;
    ((void) md_alg);

    ret = mbedtls_ecdsa_read_signature( (mbedtls_ecdsa_context *) ctx,
   db566:	9b05      	ldr	r3, [sp, #20]
   db568:	9300      	str	r3, [sp, #0]
   db56a:	9b04      	ldr	r3, [sp, #16]
   db56c:	f7fc ff50 	bl	d8410 <mbedtls_ecdsa_read_signature>

    if( ret == MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( ret );
}
   db570:	4b03      	ldr	r3, [pc, #12]	; (db580 <_ZL17ecdsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x20>)
   db572:	f510 4f98 	cmn.w	r0, #19456	; 0x4c00
   db576:	bf08      	it	eq
   db578:	4618      	moveq	r0, r3
   db57a:	b003      	add	sp, #12
   db57c:	f85d fb04 	ldr.w	pc, [sp], #4
   db580:	ffffc700 	.word	0xffffc700

000db584 <_ZL17eckey_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );

static int eckey_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                       const unsigned char *hash, size_t hash_len,
                       const unsigned char *sig, size_t sig_len )
{
   db584:	b5f0      	push	{r4, r5, r6, r7, lr}
   db586:	b0af      	sub	sp, #188	; 0xbc
   db588:	4604      	mov	r4, r0
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
   db58a:	a803      	add	r0, sp, #12
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );

static int eckey_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                       const unsigned char *hash, size_t hash_len,
                       const unsigned char *sig, size_t sig_len )
{
   db58c:	460d      	mov	r5, r1
   db58e:	4616      	mov	r6, r2
   db590:	461f      	mov	r7, r3
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
   db592:	f7fc ff46 	bl	d8422 <mbedtls_ecdsa_init>

    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, (const mbedtls_ecp_keypair *)ctx ) ) == 0 )
   db596:	4621      	mov	r1, r4
   db598:	a803      	add	r0, sp, #12
   db59a:	f7fc ff48 	bl	d842e <mbedtls_ecdsa_from_keypair>
   db59e:	4604      	mov	r4, r0
   db5a0:	b950      	cbnz	r0, db5b8 <_ZL17eckey_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x34>
        ret = ecdsa_verify_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len );
   db5a2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   db5a4:	9301      	str	r3, [sp, #4]
   db5a6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   db5a8:	9300      	str	r3, [sp, #0]
   db5aa:	4632      	mov	r2, r6
   db5ac:	463b      	mov	r3, r7
   db5ae:	4629      	mov	r1, r5
   db5b0:	a803      	add	r0, sp, #12
   db5b2:	f7ff ffd5 	bl	db560 <_ZL17ecdsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>
   db5b6:	4604      	mov	r4, r0

    mbedtls_ecdsa_free( &ecdsa );
   db5b8:	a803      	add	r0, sp, #12
   db5ba:	f7fc ff34 	bl	d8426 <mbedtls_ecdsa_free>

    return( ret );
}
   db5be:	4620      	mov	r0, r4
   db5c0:	b02f      	add	sp, #188	; 0xbc
   db5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000db5c4 <_ZL18pkcs12_fill_bufferPhjPKhj>:

#endif /* MBEDTLS_ASN1_PARSE_C */

static void pkcs12_fill_buffer( unsigned char *data, size_t data_len,
                                const unsigned char *filler, size_t fill_len )
{
   db5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db5c8:	4606      	mov	r6, r0
   db5ca:	460c      	mov	r4, r1
   db5cc:	4617      	mov	r7, r2
   db5ce:	4698      	mov	r8, r3
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
   db5d0:	b15c      	cbz	r4, db5ea <_ZL18pkcs12_fill_bufferPhjPKhj+0x26>
   db5d2:	4544      	cmp	r4, r8
   db5d4:	4625      	mov	r5, r4
   db5d6:	bf28      	it	cs
   db5d8:	4645      	movcs	r5, r8
    {
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
        memcpy( p, filler, use_len );
   db5da:	4630      	mov	r0, r6
   db5dc:	462a      	mov	r2, r5
   db5de:	4639      	mov	r1, r7
   db5e0:	f00c fc41 	bl	e7e66 <memcpy>
        p += use_len;
   db5e4:	442e      	add	r6, r5
        data_len -= use_len;
   db5e6:	1b64      	subs	r4, r4, r5
                                const unsigned char *filler, size_t fill_len )
{
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
   db5e8:	e7f2      	b.n	db5d0 <_ZL18pkcs12_fill_bufferPhjPKhj+0xc>
   db5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000db5f0 <mbedtls_pkcs12_pbe_sha1_rc4_128>:
    mbedtls_platform_zeroize( key, sizeof( key ) );
    mbedtls_arc4_free( &ctx );

    return( ret );
#endif /* MBEDTLS_ARC4_C */
}
   db5f0:	4800      	ldr	r0, [pc, #0]	; (db5f4 <mbedtls_pkcs12_pbe_sha1_rc4_128+0x4>)
   db5f2:	4770      	bx	lr
   db5f4:	ffffe100 	.word	0xffffe100

000db5f8 <mbedtls_pkcs12_derivation>:

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
   db5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db5fc:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
   db600:	2980      	cmp	r1, #128	; 0x80

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
   db602:	9001      	str	r0, [sp, #4]
   db604:	460f      	mov	r7, r1
   db606:	4693      	mov	fp, r2
   db608:	4699      	mov	r9, r3
   db60a:	9da1      	ldr	r5, [sp, #644]	; 0x284

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
   db60c:	f200 80c3 	bhi.w	db796 <mbedtls_pkcs12_derivation+0x19e>
   db610:	2b40      	cmp	r3, #64	; 0x40
   db612:	f200 80c0 	bhi.w	db796 <mbedtls_pkcs12_derivation+0x19e>
   db616:	2d40      	cmp	r5, #64	; 0x40
   db618:	f200 80bd 	bhi.w	db796 <mbedtls_pkcs12_derivation+0x19e>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( md_type );
   db61c:	f89d 0288 	ldrb.w	r0, [sp, #648]	; 0x288
   db620:	f7ff f9b6 	bl	da990 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   db624:	9000      	str	r0, [sp, #0]
   db626:	2800      	cmp	r0, #0
   db628:	f000 80b7 	beq.w	db79a <mbedtls_pkcs12_derivation+0x1a2>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    mbedtls_md_init( &md_ctx );
   db62c:	a803      	add	r0, sp, #12
   db62e:	f7ff f9bb 	bl	da9a8 <mbedtls_md_init>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   db632:	2200      	movs	r2, #0
   db634:	9900      	ldr	r1, [sp, #0]
   db636:	a803      	add	r0, sp, #12
   db638:	f7ff f9d6 	bl	da9e8 <mbedtls_md_setup>
   db63c:	2800      	cmp	r0, #0
   db63e:	f040 80ad 	bne.w	db79c <mbedtls_pkcs12_derivation+0x1a4>
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
   db642:	9800      	ldr	r0, [sp, #0]
   db644:	f7ff fadc 	bl	dac00 <mbedtls_md_get_size>

    if( hlen <= 32 )
        v = 64;
   db648:	2820      	cmp	r0, #32
   db64a:	bf8c      	ite	hi
   db64c:	2480      	movhi	r4, #128	; 0x80
   db64e:	2440      	movls	r4, #64	; 0x40
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
   db650:	4622      	mov	r2, r4
   db652:	f89d 128c 	ldrb.w	r1, [sp, #652]	; 0x28c

    mbedtls_md_init( &md_ctx );

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
   db656:	4682      	mov	sl, r0
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
   db658:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
    if( hlen <= 32 )
        v = 64;
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
   db65c:	a816      	add	r0, sp, #88	; 0x58
   db65e:	f00c fc28 	bl	e7eb2 <memset>

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
   db662:	462b      	mov	r3, r5
   db664:	9aa0      	ldr	r2, [sp, #640]	; 0x280
   db666:	4621      	mov	r1, r4
   db668:	4640      	mov	r0, r8
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
   db66a:	ad56      	add	r5, sp, #344	; 0x158
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
   db66c:	f7ff ffaa 	bl	db5c4 <_ZL18pkcs12_fill_bufferPhjPKhj>
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
   db670:	464b      	mov	r3, r9
   db672:	465a      	mov	r2, fp
   db674:	4621      	mov	r1, r4
   db676:	4628      	mov	r0, r5
   db678:	f7ff ffa4 	bl	db5c4 <_ZL18pkcs12_fill_bufferPhjPKhj>

        if( datalen == 0 )
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
   db67c:	f50d 79ec 	add.w	r9, sp, #472	; 0x1d8

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );

    p = data;
    while( datalen > 0 )
   db680:	2f00      	cmp	r7, #0
   db682:	d072      	beq.n	db76a <mbedtls_pkcs12_derivation+0x172>
    {
        // Calculate hash( diversifier || salt_block || pwd_block )
        if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
   db684:	a803      	add	r0, sp, #12
   db686:	f7ff f9d1 	bl	daa2c <mbedtls_md_starts>
   db68a:	4606      	mov	r6, r0
   db68c:	2800      	cmp	r0, #0
   db68e:	d16d      	bne.n	db76c <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, diversifier, v ) ) != 0 )
   db690:	4622      	mov	r2, r4
   db692:	a916      	add	r1, sp, #88	; 0x58
   db694:	a803      	add	r0, sp, #12
   db696:	f7ff f9d3 	bl	daa40 <mbedtls_md_update>
   db69a:	4606      	mov	r6, r0
   db69c:	2800      	cmp	r0, #0
   db69e:	d165      	bne.n	db76c <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, salt_block, v ) ) != 0 )
   db6a0:	4622      	mov	r2, r4
   db6a2:	4641      	mov	r1, r8
   db6a4:	a803      	add	r0, sp, #12
   db6a6:	f7ff f9cb 	bl	daa40 <mbedtls_md_update>
   db6aa:	4606      	mov	r6, r0
   db6ac:	2800      	cmp	r0, #0
   db6ae:	d15d      	bne.n	db76c <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, pwd_block, v ) ) != 0 )
   db6b0:	4622      	mov	r2, r4
   db6b2:	4629      	mov	r1, r5
   db6b4:	a803      	add	r0, sp, #12
   db6b6:	f7ff f9c3 	bl	daa40 <mbedtls_md_update>
   db6ba:	4606      	mov	r6, r0
   db6bc:	2800      	cmp	r0, #0
   db6be:	d155      	bne.n	db76c <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
   db6c0:	a906      	add	r1, sp, #24
   db6c2:	a803      	add	r0, sp, #12
   db6c4:	f7ff f9c6 	bl	daa54 <mbedtls_md_finish>
   db6c8:	4606      	mov	r6, r0
   db6ca:	2800      	cmp	r0, #0
   db6cc:	d14e      	bne.n	db76c <mbedtls_pkcs12_derivation+0x174>
   db6ce:	f04f 0b01 	mov.w	fp, #1
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
   db6d2:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   db6d4:	459b      	cmp	fp, r3
   db6d6:	d20b      	bcs.n	db6f0 <mbedtls_pkcs12_derivation+0xf8>
        {
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
   db6d8:	ab06      	add	r3, sp, #24
   db6da:	4652      	mov	r2, sl
   db6dc:	4619      	mov	r1, r3
   db6de:	9800      	ldr	r0, [sp, #0]
   db6e0:	f7ff f9c2 	bl	daa68 <mbedtls_md>
   db6e4:	4606      	mov	r6, r0
   db6e6:	2800      	cmp	r0, #0
   db6e8:	d140      	bne.n	db76c <mbedtls_pkcs12_derivation+0x174>

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
   db6ea:	f10b 0b01 	add.w	fp, fp, #1
   db6ee:	e7f0      	b.n	db6d2 <mbedtls_pkcs12_derivation+0xda>
   db6f0:	4557      	cmp	r7, sl
   db6f2:	46bb      	mov	fp, r7
   db6f4:	bf28      	it	cs
   db6f6:	46d3      	movcs	fp, sl
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
                goto exit;
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
   db6f8:	465a      	mov	r2, fp
   db6fa:	a906      	add	r1, sp, #24
   db6fc:	9801      	ldr	r0, [sp, #4]
   db6fe:	f00c fbb2 	bl	e7e66 <memcpy>
        datalen -= use_len;
        p += use_len;
   db702:	9b01      	ldr	r3, [sp, #4]

        if( datalen == 0 )
   db704:	ebb7 070b 	subs.w	r7, r7, fp
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
        datalen -= use_len;
        p += use_len;
   db708:	445b      	add	r3, fp
   db70a:	9301      	str	r3, [sp, #4]

        if( datalen == 0 )
   db70c:	d02d      	beq.n	db76a <mbedtls_pkcs12_derivation+0x172>
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
   db70e:	4653      	mov	r3, sl
   db710:	aa06      	add	r2, sp, #24
   db712:	4621      	mov	r1, r4
   db714:	4648      	mov	r0, r9
   db716:	f7ff ff55 	bl	db5c4 <_ZL18pkcs12_fill_bufferPhjPKhj>
   db71a:	eb09 0304 	add.w	r3, r9, r4

        // B += 1
        for( i = v; i > 0; i-- )
            if( ++hash_block[i - 1] != 0 )
   db71e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   db722:	3201      	adds	r2, #1
   db724:	b2d2      	uxtb	r2, r2
   db726:	701a      	strb	r2, [r3, #0]
   db728:	b91a      	cbnz	r2, db732 <mbedtls_pkcs12_derivation+0x13a>

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );

        // B += 1
        for( i = v; i > 0; i-- )
   db72a:	454b      	cmp	r3, r9
   db72c:	d1f7      	bne.n	db71e <mbedtls_pkcs12_derivation+0x126>
   db72e:	4623      	mov	r3, r4
   db730:	e001      	b.n	db736 <mbedtls_pkcs12_derivation+0x13e>
   db732:	4623      	mov	r3, r4
   db734:	2200      	movs	r2, #0

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = salt_block[i - 1] + hash_block[i - 1] + c;
   db736:	3b01      	subs	r3, #1
   db738:	f818 0003 	ldrb.w	r0, [r8, r3]
   db73c:	f813 1009 	ldrb.w	r1, [r3, r9]
   db740:	4401      	add	r1, r0
   db742:	4411      	add	r1, r2
            c = (unsigned char) (j >> 8);
   db744:	f3c1 2207 	ubfx	r2, r1, #8, #8
            salt_block[i - 1] = j & 0xFF;
   db748:	f808 1003 	strb.w	r1, [r8, r3]
            if( ++hash_block[i - 1] != 0 )
                break;

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
   db74c:	2b00      	cmp	r3, #0
   db74e:	d1f2      	bne.n	db736 <mbedtls_pkcs12_derivation+0x13e>
   db750:	4622      	mov	r2, r4

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = pwd_block[i - 1] + hash_block[i - 1] + c;
   db752:	3a01      	subs	r2, #1
   db754:	5d50      	ldrb	r0, [r2, r5]
   db756:	f812 1009 	ldrb.w	r1, [r2, r9]
   db75a:	4401      	add	r1, r0
   db75c:	4419      	add	r1, r3
            c = (unsigned char) (j >> 8);
   db75e:	f3c1 2307 	ubfx	r3, r1, #8, #8
            pwd_block[i - 1] = j & 0xFF;
   db762:	5551      	strb	r1, [r2, r5]
            salt_block[i - 1] = j & 0xFF;
        }

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
   db764:	2a00      	cmp	r2, #0
   db766:	d1f4      	bne.n	db752 <mbedtls_pkcs12_derivation+0x15a>
   db768:	e78a      	b.n	db680 <mbedtls_pkcs12_derivation+0x88>
            c = (unsigned char) (j >> 8);
            pwd_block[i - 1] = j & 0xFF;
        }
    }

    ret = 0;
   db76a:	2600      	movs	r6, #0

exit:
    mbedtls_platform_zeroize( salt_block, sizeof( salt_block ) );
   db76c:	2180      	movs	r1, #128	; 0x80
   db76e:	4640      	mov	r0, r8
   db770:	f000 ff3e 	bl	dc5f0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( pwd_block, sizeof( pwd_block ) );
   db774:	2180      	movs	r1, #128	; 0x80
   db776:	4628      	mov	r0, r5
   db778:	f000 ff3a 	bl	dc5f0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( hash_block, sizeof( hash_block ) );
   db77c:	2180      	movs	r1, #128	; 0x80
   db77e:	a876      	add	r0, sp, #472	; 0x1d8
   db780:	f000 ff36 	bl	dc5f0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( hash_output, sizeof( hash_output ) );
   db784:	2140      	movs	r1, #64	; 0x40
   db786:	a806      	add	r0, sp, #24
   db788:	f000 ff32 	bl	dc5f0 <mbedtls_platform_zeroize>

    mbedtls_md_free( &md_ctx );
   db78c:	a803      	add	r0, sp, #12
   db78e:	f7ff f910 	bl	da9b2 <mbedtls_md_free>

    return( ret );
   db792:	4630      	mov	r0, r6
   db794:	e002      	b.n	db79c <mbedtls_pkcs12_derivation+0x1a4>
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
   db796:	4803      	ldr	r0, [pc, #12]	; (db7a4 <mbedtls_pkcs12_derivation+0x1ac>)
   db798:	e000      	b.n	db79c <mbedtls_pkcs12_derivation+0x1a4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
   db79a:	4803      	ldr	r0, [pc, #12]	; (db7a8 <mbedtls_pkcs12_derivation+0x1b0>)
    mbedtls_platform_zeroize( hash_output, sizeof( hash_output ) );

    mbedtls_md_free( &md_ctx );

    return( ret );
}
   db79c:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
   db7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db7a4:	ffffe080 	.word	0xffffe080
   db7a8:	ffffe100 	.word	0xffffe100

000db7ac <mbedtls_pkcs12_pbe>:
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
   db7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db7b0:	b0d9      	sub	sp, #356	; 0x164
   db7b2:	4604      	mov	r4, r0
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
   db7b4:	2600      	movs	r6, #0

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
   db7b6:	4610      	mov	r0, r2
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
   db7b8:	468b      	mov	fp, r1
   db7ba:	4699      	mov	r9, r3
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
   db7bc:	9606      	str	r6, [sp, #24]

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
   db7be:	f7fc f933 	bl	d7a28 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
   db7c2:	4605      	mov	r5, r0
   db7c4:	2800      	cmp	r0, #0
   db7c6:	f000 80ac 	beq.w	db922 <mbedtls_pkcs12_pbe+0x176>
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
   db7ca:	9b63      	ldr	r3, [sp, #396]	; 0x18c

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
   db7cc:	6847      	ldr	r7, [r0, #4]

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
                                          key, keylen,
                                          iv, cipher_info->iv_size ) ) != 0 )
   db7ce:	f8d0 800c 	ldr.w	r8, [r0, #12]
static int pkcs12_pbe_derive_key_iv( mbedtls_asn1_buf *pbe_params, mbedtls_md_type_t md_type,
                                     const unsigned char *pwd,  size_t pwdlen,
                                     unsigned char *key, size_t keylen,
                                     unsigned char *iv,  size_t ivlen )
{
    int ret, iterations = 0;
   db7d2:	9607      	str	r6, [sp, #28]
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
   db7d4:	2b80      	cmp	r3, #128	; 0x80

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
   db7d6:	ea4f 07d7 	mov.w	r7, r7, lsr #3
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
   db7da:	d860      	bhi.n	db89e <mbedtls_pkcs12_pbe+0xf2>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );
   db7dc:	4631      	mov	r1, r6
   db7de:	f44f 7281 	mov.w	r2, #258	; 0x102
   db7e2:	a817      	add	r0, sp, #92	; 0x5c
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
   db7e4:	9608      	str	r6, [sp, #32]
   db7e6:	9609      	str	r6, [sp, #36]	; 0x24
   db7e8:	960a      	str	r6, [sp, #40]	; 0x28
    memset( &unipwd, 0, sizeof(unipwd) );
   db7ea:	f00c fb62 	bl	e7eb2 <memset>
static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
    const unsigned char *end = params->p + params->len;
   db7ee:	6863      	ldr	r3, [r4, #4]
   db7f0:	68a6      	ldr	r6, [r4, #8]
   db7f2:	441e      	add	r6, r3
     *    salt          OCTET STRING,
     *    iterations    INTEGER
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   db7f4:	6823      	ldr	r3, [r4, #0]
   db7f6:	2b30      	cmp	r3, #48	; 0x30

static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
   db7f8:	f104 0a08 	add.w	sl, r4, #8
     *    salt          OCTET STRING,
     *    iterations    INTEGER
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   db7fc:	f040 8093 	bne.w	db926 <mbedtls_pkcs12_pbe+0x17a>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   db800:	2304      	movs	r3, #4
   db802:	aa09      	add	r2, sp, #36	; 0x24
   db804:	4631      	mov	r1, r6
   db806:	4650      	mov	r0, sl
   db808:	f7fa fa7e 	bl	d5d08 <mbedtls_asn1_get_tag>
   db80c:	b950      	cbnz	r0, db824 <mbedtls_pkcs12_pbe+0x78>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
   db80e:	68a2      	ldr	r2, [r4, #8]
    *p += salt->len;
   db810:	9b09      	ldr	r3, [sp, #36]	; 0x24
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
   db812:	920a      	str	r2, [sp, #40]	; 0x28
    *p += salt->len;
   db814:	4413      	add	r3, r2
   db816:	60a3      	str	r3, [r4, #8]

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
   db818:	aa07      	add	r2, sp, #28
   db81a:	4631      	mov	r1, r6
   db81c:	4650      	mov	r0, sl
   db81e:	f7fa faa0 	bl	d5d62 <mbedtls_asn1_get_int>
   db822:	b118      	cbz	r0, db82c <mbedtls_pkcs12_pbe+0x80>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );
   db824:	f5a0 50f4 	sub.w	r0, r0, #7808	; 0x1e80
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
   db828:	b118      	cbz	r0, db832 <mbedtls_pkcs12_pbe+0x86>
   db82a:	e07f      	b.n	db92c <mbedtls_pkcs12_pbe+0x180>
    *p += salt->len;

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
   db82c:	68a3      	ldr	r3, [r4, #8]
   db82e:	429e      	cmp	r6, r3
   db830:	d17b      	bne.n	db92a <mbedtls_pkcs12_pbe+0x17e>
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
   db832:	2300      	movs	r3, #0

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
   db834:	9a63      	ldr	r2, [sp, #396]	; 0x18c
   db836:	429a      	cmp	r2, r3
   db838:	d007      	beq.n	db84a <mbedtls_pkcs12_pbe+0x9e>
        unipwd[i * 2 + 1] = pwd[i];
   db83a:	aa17      	add	r2, sp, #92	; 0x5c
   db83c:	9962      	ldr	r1, [sp, #392]	; 0x188
   db83e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   db842:	5cc9      	ldrb	r1, [r1, r3]
   db844:	7051      	strb	r1, [r2, #1]

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
   db846:	3301      	adds	r3, #1
   db848:	e7f4      	b.n	db834 <mbedtls_pkcs12_pbe+0x88>
        unipwd[i * 2 + 1] = pwd[i];

    if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
   db84a:	9b63      	ldr	r3, [sp, #396]	; 0x18c
   db84c:	f8cd 9008 	str.w	r9, [sp, #8]
   db850:	1c5c      	adds	r4, r3, #1
   db852:	9b07      	ldr	r3, [sp, #28]
   db854:	9304      	str	r3, [sp, #16]
   db856:	2301      	movs	r3, #1
   db858:	9303      	str	r3, [sp, #12]
   db85a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db85c:	9301      	str	r3, [sp, #4]
   db85e:	0064      	lsls	r4, r4, #1
   db860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db862:	9300      	str	r3, [sp, #0]
   db864:	aa17      	add	r2, sp, #92	; 0x5c
   db866:	4623      	mov	r3, r4
   db868:	4639      	mov	r1, r7
   db86a:	a80f      	add	r0, sp, #60	; 0x3c
   db86c:	f7ff fec4 	bl	db5f8 <mbedtls_pkcs12_derivation>
   db870:	2800      	cmp	r0, #0
   db872:	d15b      	bne.n	db92c <mbedtls_pkcs12_pbe+0x180>
                                   MBEDTLS_PKCS12_DERIVE_KEY, iterations ) ) != 0 )
    {
        return( ret );
    }

    if( iv == NULL || ivlen == 0 )
   db874:	f1b8 0f00 	cmp.w	r8, #0
   db878:	d013      	beq.n	db8a2 <mbedtls_pkcs12_pbe+0xf6>
        return( 0 );

    if( ( ret = mbedtls_pkcs12_derivation( iv, ivlen, unipwd, pwdlen * 2 + 2,
   db87a:	9b07      	ldr	r3, [sp, #28]
   db87c:	9304      	str	r3, [sp, #16]
   db87e:	2302      	movs	r3, #2
   db880:	9303      	str	r3, [sp, #12]
   db882:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db884:	9301      	str	r3, [sp, #4]
   db886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db888:	9300      	str	r3, [sp, #0]
   db88a:	f8cd 9008 	str.w	r9, [sp, #8]
   db88e:	4623      	mov	r3, r4
   db890:	aa17      	add	r2, sp, #92	; 0x5c
   db892:	4641      	mov	r1, r8
   db894:	a80b      	add	r0, sp, #44	; 0x2c
   db896:	f7ff feaf 	bl	db5f8 <mbedtls_pkcs12_derivation>
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
   db89a:	b110      	cbz	r0, db8a2 <mbedtls_pkcs12_pbe+0xf6>
   db89c:	e046      	b.n	db92c <mbedtls_pkcs12_pbe+0x180>
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
   db89e:	4825      	ldr	r0, [pc, #148]	; (db934 <mbedtls_pkcs12_pbe+0x188>)
   db8a0:	e044      	b.n	db92c <mbedtls_pkcs12_pbe+0x180>
                                          iv, cipher_info->iv_size ) ) != 0 )
    {
        return( ret );
    }

    mbedtls_cipher_init( &cipher_ctx );
   db8a2:	a817      	add	r0, sp, #92	; 0x5c
   db8a4:	f7fc f8e2 	bl	d7a6c <mbedtls_cipher_init>

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
   db8a8:	4629      	mov	r1, r5
   db8aa:	a817      	add	r0, sp, #92	; 0x5c
   db8ac:	f7fc f8f2 	bl	d7a94 <mbedtls_cipher_setup>
   db8b0:	4604      	mov	r4, r0
   db8b2:	bb48      	cbnz	r0, db908 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
   db8b4:	fa4f f38b 	sxtb.w	r3, fp
   db8b8:	00fa      	lsls	r2, r7, #3
   db8ba:	a90f      	add	r1, sp, #60	; 0x3c
   db8bc:	a817      	add	r0, sp, #92	; 0x5c
   db8be:	f7fc f901 	bl	d7ac4 <mbedtls_cipher_setkey>
   db8c2:	4604      	mov	r4, r0
   db8c4:	bb00      	cbnz	r0, db908 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_set_iv( &cipher_ctx, iv, cipher_info->iv_size ) ) != 0 )
   db8c6:	68ea      	ldr	r2, [r5, #12]
   db8c8:	a90b      	add	r1, sp, #44	; 0x2c
   db8ca:	a817      	add	r0, sp, #92	; 0x5c
   db8cc:	f7fc f91a 	bl	d7b04 <mbedtls_cipher_set_iv>
   db8d0:	4604      	mov	r4, r0
   db8d2:	b9c8      	cbnz	r0, db908 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_reset( &cipher_ctx ) ) != 0 )
   db8d4:	a817      	add	r0, sp, #92	; 0x5c
   db8d6:	f7fc f935 	bl	d7b44 <mbedtls_cipher_reset>
   db8da:	4604      	mov	r4, r0
   db8dc:	b9a0      	cbnz	r0, db908 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_update( &cipher_ctx, data, len,
   db8de:	ad06      	add	r5, sp, #24
   db8e0:	9500      	str	r5, [sp, #0]
   db8e2:	a964      	add	r1, sp, #400	; 0x190
   db8e4:	c90e      	ldmia	r1, {r1, r2, r3}
   db8e6:	a817      	add	r0, sp, #92	; 0x5c
   db8e8:	f7fc f936 	bl	d7b58 <mbedtls_cipher_update>
   db8ec:	4604      	mov	r4, r0
   db8ee:	b958      	cbnz	r0, db908 <mbedtls_pkcs12_pbe+0x15c>
                                output, &olen ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_finish( &cipher_ctx, output + olen, &olen ) ) != 0 )
   db8f0:	6829      	ldr	r1, [r5, #0]
   db8f2:	9b66      	ldr	r3, [sp, #408]	; 0x198
   db8f4:	462a      	mov	r2, r5
   db8f6:	4419      	add	r1, r3
   db8f8:	a817      	add	r0, sp, #92	; 0x5c
   db8fa:	f7fc f971 	bl	d7be0 <mbedtls_cipher_finish>
        ret = MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH;
   db8fe:	f5a4 54f0 	sub.w	r4, r4, #7680	; 0x1e00
   db902:	2800      	cmp	r0, #0
   db904:	bf08      	it	eq
   db906:	2400      	moveq	r4, #0

exit:
    mbedtls_platform_zeroize( key, sizeof( key ) );
   db908:	2120      	movs	r1, #32
   db90a:	a80f      	add	r0, sp, #60	; 0x3c
   db90c:	f000 fe70 	bl	dc5f0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( iv,  sizeof( iv  ) );
   db910:	2110      	movs	r1, #16
   db912:	a80b      	add	r0, sp, #44	; 0x2c
   db914:	f000 fe6c 	bl	dc5f0 <mbedtls_platform_zeroize>
    mbedtls_cipher_free( &cipher_ctx );
   db918:	a817      	add	r0, sp, #92	; 0x5c
   db91a:	f7fc f8ab 	bl	d7a74 <mbedtls_cipher_free>

    return( ret );
   db91e:	4620      	mov	r0, r4
   db920:	e004      	b.n	db92c <mbedtls_pkcs12_pbe+0x180>
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
   db922:	4805      	ldr	r0, [pc, #20]	; (db938 <mbedtls_pkcs12_pbe+0x18c>)
   db924:	e002      	b.n	db92c <mbedtls_pkcs12_pbe+0x180>
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   db926:	4805      	ldr	r0, [pc, #20]	; (db93c <mbedtls_pkcs12_pbe+0x190>)
   db928:	e000      	b.n	db92c <mbedtls_pkcs12_pbe+0x180>
    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   db92a:	4805      	ldr	r0, [pc, #20]	; (db940 <mbedtls_pkcs12_pbe+0x194>)
    mbedtls_platform_zeroize( key, sizeof( key ) );
    mbedtls_platform_zeroize( iv,  sizeof( iv  ) );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
   db92c:	b059      	add	sp, #356	; 0x164
   db92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db932:	bf00      	nop
   db934:	ffffe080 	.word	0xffffe080
   db938:	ffffe100 	.word	0xffffe100
   db93c:	ffffe11e 	.word	0xffffe11e
   db940:	ffffe11a 	.word	0xffffe11a

000db944 <mbedtls_pkcs5_pbkdf2_hmac>:

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
   db944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db948:	b0a5      	sub	sp, #148	; 0x94
   db94a:	4604      	mov	r4, r0
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
   db94c:	6800      	ldr	r0, [r0, #0]

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
   db94e:	9301      	str	r3, [sp, #4]
   db950:	460f      	mov	r7, r1
   db952:	4693      	mov	fp, r2
   db954:	9e30      	ldr	r6, [sp, #192]	; 0xc0
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
   db956:	f7ff f953 	bl	dac00 <mbedtls_md_get_size>
    size_t use_len;
    unsigned char *out_p = output;
    unsigned char counter[4];

    memset( counter, 0, 4 );
   db95a:	2300      	movs	r3, #0
   db95c:	9303      	str	r3, [sp, #12]
    counter[3] = 1;
   db95e:	2301      	movs	r3, #1
{
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
   db960:	4681      	mov	r9, r0
    size_t use_len;
    unsigned char *out_p = output;
    unsigned char counter[4];

    memset( counter, 0, 4 );
    counter[3] = 1;
   db962:	f88d 300f 	strb.w	r3, [sp, #15]
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
   db966:	f10d 0850 	add.w	r8, sp, #80	; 0x50
#if UINT_MAX > 0xFFFFFFFF
    if( iteration_count > 0xFFFFFFFF )
        return( MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA );
#endif

    while( key_length )
   db96a:	2e00      	cmp	r6, #0
   db96c:	d05c      	beq.n	dba28 <mbedtls_pkcs5_pbkdf2_hmac+0xe4>
    {
        // U1 ends up in work
        //
        if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
   db96e:	465a      	mov	r2, fp
   db970:	4639      	mov	r1, r7
   db972:	4620      	mov	r0, r4
   db974:	f7ff f888 	bl	daa88 <mbedtls_md_hmac_starts>
   db978:	2800      	cmp	r0, #0
   db97a:	d156      	bne.n	dba2a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, salt, slen ) ) != 0 )
   db97c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   db97e:	9901      	ldr	r1, [sp, #4]
   db980:	4620      	mov	r0, r4
   db982:	f7ff f8e1 	bl	dab48 <mbedtls_md_hmac_update>
   db986:	2800      	cmp	r0, #0
   db988:	d14f      	bne.n	dba2a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
   db98a:	2204      	movs	r2, #4
   db98c:	a903      	add	r1, sp, #12
   db98e:	4620      	mov	r0, r4
   db990:	f7ff f8da 	bl	dab48 <mbedtls_md_hmac_update>
   db994:	2800      	cmp	r0, #0
   db996:	d148      	bne.n	dba2a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
   db998:	4641      	mov	r1, r8
   db99a:	4620      	mov	r0, r4
   db99c:	f7ff f8e6 	bl	dab6c <mbedtls_md_hmac_finish>
   db9a0:	2800      	cmp	r0, #0
   db9a2:	d142      	bne.n	dba2a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        memcpy( md1, work, md_size );
   db9a4:	ad04      	add	r5, sp, #16
   db9a6:	464a      	mov	r2, r9
   db9a8:	4641      	mov	r1, r8
   db9aa:	4628      	mov	r0, r5
   db9ac:	f00c fa5b 	bl	e7e66 <memcpy>

        for( i = 1; i < iteration_count; i++ )
   db9b0:	f04f 0a01 	mov.w	sl, #1
   db9b4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   db9b6:	459a      	cmp	sl, r3
   db9b8:	d21d      	bcs.n	db9f6 <mbedtls_pkcs5_pbkdf2_hmac+0xb2>
        {
            // U2 ends up in md1
            //
            if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
   db9ba:	465a      	mov	r2, fp
   db9bc:	4639      	mov	r1, r7
   db9be:	4620      	mov	r0, r4
   db9c0:	f7ff f862 	bl	daa88 <mbedtls_md_hmac_starts>
   db9c4:	bb88      	cbnz	r0, dba2a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_update( ctx, md1, md_size ) ) != 0 )
   db9c6:	464a      	mov	r2, r9
   db9c8:	4629      	mov	r1, r5
   db9ca:	4620      	mov	r0, r4
   db9cc:	f7ff f8bc 	bl	dab48 <mbedtls_md_hmac_update>
   db9d0:	bb58      	cbnz	r0, dba2a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
   db9d2:	4629      	mov	r1, r5
   db9d4:	4620      	mov	r0, r4
   db9d6:	f7ff f8c9 	bl	dab6c <mbedtls_md_hmac_finish>
   db9da:	bb30      	cbnz	r0, dba2a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
   db9dc:	4548      	cmp	r0, r9
   db9de:	da07      	bge.n	db9f0 <mbedtls_pkcs5_pbkdf2_hmac+0xac>
                work[j] ^= md1[j];
   db9e0:	f810 2008 	ldrb.w	r2, [r0, r8]
   db9e4:	5d43      	ldrb	r3, [r0, r5]
   db9e6:	4053      	eors	r3, r2
   db9e8:	f800 3008 	strb.w	r3, [r0, r8]
            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
   db9ec:	3001      	adds	r0, #1
   db9ee:	e7f5      	b.n	db9dc <mbedtls_pkcs5_pbkdf2_hmac+0x98>
        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
            return( ret );

        memcpy( md1, work, md_size );

        for( i = 1; i < iteration_count; i++ )
   db9f0:	f10a 0a01 	add.w	sl, sl, #1
   db9f4:	e7de      	b.n	db9b4 <mbedtls_pkcs5_pbkdf2_hmac+0x70>
            //
            for( j = 0; j < md_size; j++ )
                work[j] ^= md1[j];
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
   db9f6:	454e      	cmp	r6, r9
   db9f8:	4635      	mov	r5, r6
   db9fa:	bf28      	it	cs
   db9fc:	464d      	movcs	r5, r9
        memcpy( out_p, work, use_len );
   db9fe:	462a      	mov	r2, r5
   dba00:	4641      	mov	r1, r8
   dba02:	9831      	ldr	r0, [sp, #196]	; 0xc4
   dba04:	f00c fa2f 	bl	e7e66 <memcpy>

        key_length -= (uint32_t) use_len;
        out_p += use_len;
   dba08:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   dba0a:	442b      	add	r3, r5
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
   dba0c:	1b76      	subs	r6, r6, r5
        out_p += use_len;
   dba0e:	9331      	str	r3, [sp, #196]	; 0xc4
   dba10:	aa04      	add	r2, sp, #16

        for( i = 4; i > 0; i-- )
            if( ++counter[i - 1] != 0 )
   dba12:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
   dba16:	3301      	adds	r3, #1
   dba18:	b2db      	uxtb	r3, r3
   dba1a:	7013      	strb	r3, [r2, #0]
   dba1c:	2b00      	cmp	r3, #0
   dba1e:	d1a4      	bne.n	db96a <mbedtls_pkcs5_pbkdf2_hmac+0x26>
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
        out_p += use_len;

        for( i = 4; i > 0; i-- )
   dba20:	ab03      	add	r3, sp, #12
   dba22:	4293      	cmp	r3, r2
   dba24:	d1f5      	bne.n	dba12 <mbedtls_pkcs5_pbkdf2_hmac+0xce>
   dba26:	e7a0      	b.n	db96a <mbedtls_pkcs5_pbkdf2_hmac+0x26>
            if( ++counter[i - 1] != 0 )
                break;
    }

    return( 0 );
   dba28:	4630      	mov	r0, r6
}
   dba2a:	b025      	add	sp, #148	; 0x94
   dba2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dba30 <mbedtls_pkcs5_pbes2>:

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
   dba30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dba34:	b0bb      	sub	sp, #236	; 0xec
   dba36:	461f      	mov	r7, r3
    int ret, iterations = 0, keylen = 0;
   dba38:	2300      	movs	r3, #0
   dba3a:	9306      	str	r3, [sp, #24]
   dba3c:	9307      	str	r3, [sp, #28]
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
    unsigned char key[32], iv[32];
    size_t olen = 0;
   dba3e:	9309      	str	r3, [sp, #36]	; 0x24
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
    end = p + pbe_params->len;
   dba40:	6844      	ldr	r4, [r0, #4]
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
   dba42:	6883      	ldr	r3, [r0, #8]
   dba44:	9308      	str	r3, [sp, #32]
    end = p + pbe_params->len;
   dba46:	441c      	add	r4, r3
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   dba48:	6803      	ldr	r3, [r0, #0]
{
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
   dba4a:	f04f 0904 	mov.w	r9, #4
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   dba4e:	2b30      	cmp	r3, #48	; 0x30

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
   dba50:	460d      	mov	r5, r1
   dba52:	4616      	mov	r6, r2
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
   dba54:	f88d 9016 	strb.w	r9, [sp, #22]
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   dba58:	f040 80c9 	bne.w	dbbee <mbedtls_pkcs5_pbes2+0x1be>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &kdf_alg_oid, &kdf_alg_params ) ) != 0 )
   dba5c:	ab10      	add	r3, sp, #64	; 0x40
   dba5e:	aa0a      	add	r2, sp, #40	; 0x28
   dba60:	4621      	mov	r1, r4
   dba62:	a808      	add	r0, sp, #32
   dba64:	f7fa fa2d 	bl	d5ec2 <mbedtls_asn1_get_alg>
   dba68:	2800      	cmp	r0, #0
   dba6a:	d158      	bne.n	dbb1e <mbedtls_pkcs5_pbes2+0xee>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
   dba6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   dba6e:	2a09      	cmp	r2, #9
   dba70:	d14c      	bne.n	dbb0c <mbedtls_pkcs5_pbes2+0xdc>
   dba72:	990c      	ldr	r1, [sp, #48]	; 0x30
   dba74:	4861      	ldr	r0, [pc, #388]	; (dbbfc <mbedtls_pkcs5_pbes2+0x1cc>)
   dba76:	f00c f9e7 	bl	e7e48 <memcmp>
   dba7a:	2800      	cmp	r0, #0
   dba7c:	d146      	bne.n	dbb0c <mbedtls_pkcs5_pbes2+0xdc>
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
   dba7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    const unsigned char *end = params->p + params->len;
   dba80:	9a11      	ldr	r2, [sp, #68]	; 0x44
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
   dba82:	9324      	str	r3, [sp, #144]	; 0x90
    const unsigned char *end = params->p + params->len;
   dba84:	eb03 0802 	add.w	r8, r3, r2

    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   dba88:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dba8a:	2b30      	cmp	r3, #48	; 0x30
   dba8c:	f040 80af 	bne.w	dbbee <mbedtls_pkcs5_pbes2+0x1be>
     *    keyLength         INTEGER OPTIONAL
     *    prf               AlgorithmIdentifier DEFAULT algid-hmacWithSHA1
     *  }
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   dba90:	464b      	mov	r3, r9
   dba92:	aa17      	add	r2, sp, #92	; 0x5c
   dba94:	4641      	mov	r1, r8
   dba96:	a824      	add	r0, sp, #144	; 0x90
   dba98:	f7fa f936 	bl	d5d08 <mbedtls_asn1_get_tag>
   dba9c:	b9f8      	cbnz	r0, dbade <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
   dba9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    p += salt->len;
   dbaa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
   dbaa2:	9218      	str	r2, [sp, #96]	; 0x60
    p += salt->len;
   dbaa4:	4413      	add	r3, r2

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
   dbaa6:	4641      	mov	r1, r8
   dbaa8:	aa06      	add	r2, sp, #24
   dbaaa:	a824      	add	r0, sp, #144	; 0x90
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
    p += salt->len;
   dbaac:	9324      	str	r3, [sp, #144]	; 0x90

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
   dbaae:	f7fa f958 	bl	d5d62 <mbedtls_asn1_get_int>
   dbab2:	b9a0      	cbnz	r0, dbade <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( p == end )
   dbab4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   dbab6:	4598      	cmp	r8, r3
   dbab8:	d022      	beq.n	dbb00 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( &p, end, keylen ) ) != 0 )
   dbaba:	aa07      	add	r2, sp, #28
   dbabc:	4641      	mov	r1, r8
   dbabe:	a824      	add	r0, sp, #144	; 0x90
   dbac0:	f7fa f94f 	bl	d5d62 <mbedtls_asn1_get_int>
   dbac4:	b110      	cbz	r0, dbacc <mbedtls_pkcs5_pbes2+0x9c>
    {
        if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   dbac6:	f110 0f62 	cmn.w	r0, #98	; 0x62
   dbaca:	d108      	bne.n	dbade <mbedtls_pkcs5_pbes2+0xae>
            return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
    }

    if( p == end )
   dbacc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   dbace:	4598      	cmp	r8, r3
   dbad0:	d016      	beq.n	dbb00 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
   dbad2:	aa2c      	add	r2, sp, #176	; 0xb0
   dbad4:	4641      	mov	r1, r8
   dbad6:	a824      	add	r0, sp, #144	; 0x90
   dbad8:	f7fa fa40 	bl	d5f5c <mbedtls_asn1_get_alg_null>
   dbadc:	b128      	cbz	r0, dbaea <mbedtls_pkcs5_pbes2+0xba>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
   dbade:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = pkcs5_parse_pbkdf2_params( &kdf_alg_params,
   dbae2:	2800      	cmp	r0, #0
   dbae4:	f040 8086 	bne.w	dbbf4 <mbedtls_pkcs5_pbes2+0x1c4>
   dbae8:	e00a      	b.n	dbb00 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
   dbaea:	f10d 0116 	add.w	r1, sp, #22
   dbaee:	a82c      	add	r0, sp, #176	; 0xb0
   dbaf0:	f7ff f9f6 	bl	daee0 <mbedtls_oid_get_md_hmac>
   dbaf4:	b950      	cbnz	r0, dbb0c <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( p != end )
   dbaf6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   dbaf8:	4598      	cmp	r8, r3
   dbafa:	d001      	beq.n	dbb00 <mbedtls_pkcs5_pbes2+0xd0>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   dbafc:	4840      	ldr	r0, [pc, #256]	; (dbc00 <mbedtls_pkcs5_pbes2+0x1d0>)
   dbafe:	e079      	b.n	dbbf4 <mbedtls_pkcs5_pbes2+0x1c4>
                                           &md_type ) ) != 0 )
    {
        return( ret );
    }

    md_info = mbedtls_md_info_from_type( md_type );
   dbb00:	f89d 0016 	ldrb.w	r0, [sp, #22]
   dbb04:	f7fe ff44 	bl	da990 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   dbb08:	4681      	mov	r9, r0
   dbb0a:	b908      	cbnz	r0, dbb10 <mbedtls_pkcs5_pbes2+0xe0>

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
   dbb0c:	483d      	ldr	r0, [pc, #244]	; (dbc04 <mbedtls_pkcs5_pbes2+0x1d4>)
   dbb0e:	e071      	b.n	dbbf4 <mbedtls_pkcs5_pbes2+0x1c4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &enc_scheme_oid,
   dbb10:	ab13      	add	r3, sp, #76	; 0x4c
   dbb12:	aa0d      	add	r2, sp, #52	; 0x34
   dbb14:	4621      	mov	r1, r4
   dbb16:	a808      	add	r0, sp, #32
   dbb18:	f7fa f9d3 	bl	d5ec2 <mbedtls_asn1_get_alg>
   dbb1c:	b110      	cbz	r0, dbb24 <mbedtls_pkcs5_pbes2+0xf4>
                              &enc_scheme_params ) ) != 0 )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
   dbb1e:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
   dbb22:	e067      	b.n	dbbf4 <mbedtls_pkcs5_pbes2+0x1c4>
    }

    if( mbedtls_oid_get_cipher_alg( &enc_scheme_oid, &cipher_alg ) != 0 )
   dbb24:	f10d 0117 	add.w	r1, sp, #23
   dbb28:	a80d      	add	r0, sp, #52	; 0x34
   dbb2a:	f7ff f991 	bl	dae50 <mbedtls_oid_get_cipher_alg>
   dbb2e:	2800      	cmp	r0, #0
   dbb30:	d1ec      	bne.n	dbb0c <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    cipher_info = mbedtls_cipher_info_from_type( cipher_alg );
   dbb32:	f89d 0017 	ldrb.w	r0, [sp, #23]
   dbb36:	f7fb ff77 	bl	d7a28 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
   dbb3a:	4680      	mov	r8, r0
   dbb3c:	2800      	cmp	r0, #0
   dbb3e:	d0e5      	beq.n	dbb0c <mbedtls_pkcs5_pbes2+0xdc>

    /*
     * The value of keylen from pkcs5_parse_pbkdf2_params() is ignored
     * since it is optional and we don't know if it was set or not
     */
    keylen = cipher_info->key_bitlen / 8;
   dbb40:	6843      	ldr	r3, [r0, #4]
   dbb42:	08db      	lsrs	r3, r3, #3
   dbb44:	9307      	str	r3, [sp, #28]

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
   dbb46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   dbb48:	2b04      	cmp	r3, #4
   dbb4a:	d152      	bne.n	dbbf2 <mbedtls_pkcs5_pbes2+0x1c2>
   dbb4c:	68c3      	ldr	r3, [r0, #12]
   dbb4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dbb50:	429a      	cmp	r2, r3
   dbb52:	d14e      	bne.n	dbbf2 <mbedtls_pkcs5_pbes2+0x1c2>
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
    }

    mbedtls_md_init( &md_ctx );
   dbb54:	a819      	add	r0, sp, #100	; 0x64
   dbb56:	f7fe ff27 	bl	da9a8 <mbedtls_md_init>
    mbedtls_cipher_init( &cipher_ctx );
   dbb5a:	a82c      	add	r0, sp, #176	; 0xb0
   dbb5c:	f7fb ff86 	bl	d7a6c <mbedtls_cipher_init>

    memcpy( iv, enc_scheme_params.p, enc_scheme_params.len );
   dbb60:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dbb62:	9915      	ldr	r1, [sp, #84]	; 0x54
   dbb64:	a824      	add	r0, sp, #144	; 0x90
   dbb66:	f00c f97e 	bl	e7e66 <memcpy>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
   dbb6a:	2201      	movs	r2, #1
   dbb6c:	4649      	mov	r1, r9
   dbb6e:	a819      	add	r0, sp, #100	; 0x64
   dbb70:	f7fe ff3a 	bl	da9e8 <mbedtls_md_setup>
   dbb74:	4604      	mov	r4, r0
   dbb76:	2800      	cmp	r0, #0
   dbb78:	d131      	bne.n	dbbde <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_pkcs5_pbkdf2_hmac( &md_ctx, pwd, pwdlen, salt.p, salt.len,
   dbb7a:	9b07      	ldr	r3, [sp, #28]
   dbb7c:	9302      	str	r3, [sp, #8]
   dbb7e:	9b06      	ldr	r3, [sp, #24]
   dbb80:	9301      	str	r3, [sp, #4]
   dbb82:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   dbb86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dbb88:	9300      	str	r3, [sp, #0]
   dbb8a:	f8cd 900c 	str.w	r9, [sp, #12]
   dbb8e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   dbb90:	463a      	mov	r2, r7
   dbb92:	4631      	mov	r1, r6
   dbb94:	a819      	add	r0, sp, #100	; 0x64
   dbb96:	f7ff fed5 	bl	db944 <mbedtls_pkcs5_pbkdf2_hmac>
   dbb9a:	4604      	mov	r4, r0
   dbb9c:	b9f8      	cbnz	r0, dbbde <mbedtls_pkcs5_pbes2+0x1ae>
                                   iterations, keylen, key ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
   dbb9e:	4641      	mov	r1, r8
   dbba0:	a82c      	add	r0, sp, #176	; 0xb0
   dbba2:	f7fb ff77 	bl	d7a94 <mbedtls_cipher_setup>
   dbba6:	4604      	mov	r4, r0
   dbba8:	b9c8      	cbnz	r0, dbbde <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
   dbbaa:	9a07      	ldr	r2, [sp, #28]
   dbbac:	b26b      	sxtb	r3, r5
   dbbae:	00d2      	lsls	r2, r2, #3
   dbbb0:	4649      	mov	r1, r9
   dbbb2:	a82c      	add	r0, sp, #176	; 0xb0
   dbbb4:	f7fb ff86 	bl	d7ac4 <mbedtls_cipher_setkey>
   dbbb8:	4604      	mov	r4, r0
   dbbba:	b980      	cbnz	r0, dbbde <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_crypt( &cipher_ctx, iv, enc_scheme_params.len,
   dbbbc:	ab09      	add	r3, sp, #36	; 0x24
   dbbbe:	9302      	str	r3, [sp, #8]
   dbbc0:	9b44      	ldr	r3, [sp, #272]	; 0x110
   dbbc2:	9301      	str	r3, [sp, #4]
   dbbc4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   dbbc6:	9300      	str	r3, [sp, #0]
   dbbc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dbbca:	9b42      	ldr	r3, [sp, #264]	; 0x108
   dbbcc:	a924      	add	r1, sp, #144	; 0x90
   dbbce:	a82c      	add	r0, sp, #176	; 0xb0
   dbbd0:	f7fc f828 	bl	d7c24 <mbedtls_cipher_crypt>
                              data, datalen, output, &olen ) ) != 0 )
        ret = MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH;
   dbbd4:	f5a4 5438 	sub.w	r4, r4, #11776	; 0x2e00
   dbbd8:	2800      	cmp	r0, #0
   dbbda:	bf08      	it	eq
   dbbdc:	2400      	moveq	r4, #0

exit:
    mbedtls_md_free( &md_ctx );
   dbbde:	a819      	add	r0, sp, #100	; 0x64
   dbbe0:	f7fe fee7 	bl	da9b2 <mbedtls_md_free>
    mbedtls_cipher_free( &cipher_ctx );
   dbbe4:	a82c      	add	r0, sp, #176	; 0xb0
   dbbe6:	f7fb ff45 	bl	d7a74 <mbedtls_cipher_free>

    return( ret );
   dbbea:	4620      	mov	r0, r4
   dbbec:	e002      	b.n	dbbf4 <mbedtls_pkcs5_pbes2+0x1c4>
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   dbbee:	4806      	ldr	r0, [pc, #24]	; (dbc08 <mbedtls_pkcs5_pbes2+0x1d8>)
   dbbf0:	e000      	b.n	dbbf4 <mbedtls_pkcs5_pbes2+0x1c4>
    keylen = cipher_info->key_bitlen / 8;

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
   dbbf2:	4806      	ldr	r0, [pc, #24]	; (dbc0c <mbedtls_pkcs5_pbes2+0x1dc>)
exit:
    mbedtls_md_free( &md_ctx );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
   dbbf4:	b03b      	add	sp, #236	; 0xec
   dbbf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dbbfa:	bf00      	nop
   dbbfc:	000e95b0 	.word	0x000e95b0
   dbc00:	ffffd09a 	.word	0xffffd09a
   dbc04:	ffffd180 	.word	0xffffd180
   dbc08:	ffffd09e 	.word	0xffffd09e
   dbc0c:	ffffd100 	.word	0xffffd100

000dbc10 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context>:
 *  }
 */
static int pk_get_rsapubkey( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_rsa_context *rsa )
{
   dbc10:	b570      	push	{r4, r5, r6, lr}
   dbc12:	b08a      	sub	sp, #40	; 0x28
   dbc14:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dbc16:	2330      	movs	r3, #48	; 0x30
   dbc18:	aa09      	add	r2, sp, #36	; 0x24
 *  }
 */
static int pk_get_rsapubkey( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_rsa_context *rsa )
{
   dbc1a:	4604      	mov	r4, r0
   dbc1c:	460d      	mov	r5, r1
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dbc1e:	f7fa f873 	bl	d5d08 <mbedtls_asn1_get_tag>
   dbc22:	bb30      	cbnz	r0, dbc72 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x62>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
   dbc24:	6822      	ldr	r2, [r4, #0]
   dbc26:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbc28:	4413      	add	r3, r2
   dbc2a:	429d      	cmp	r5, r3
   dbc2c:	d001      	beq.n	dbc32 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x22>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   dbc2e:	4824      	ldr	r0, [pc, #144]	; (dbcc0 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xb0>)
   dbc30:	e043      	b.n	dbcba <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xaa>

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   dbc32:	2302      	movs	r3, #2
   dbc34:	aa09      	add	r2, sp, #36	; 0x24
   dbc36:	4629      	mov	r1, r5
   dbc38:	4620      	mov	r0, r4
   dbc3a:	f7fa f865 	bl	d5d08 <mbedtls_asn1_get_tag>
   dbc3e:	b9c0      	cbnz	r0, dbc72 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x62>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
   dbc40:	9006      	str	r0, [sp, #24]
   dbc42:	9005      	str	r0, [sp, #20]
   dbc44:	9004      	str	r0, [sp, #16]
   dbc46:	9003      	str	r0, [sp, #12]
   dbc48:	9002      	str	r0, [sp, #8]
   dbc4a:	9001      	str	r0, [sp, #4]
   dbc4c:	9000      	str	r0, [sp, #0]
   dbc4e:	4603      	mov	r3, r0
   dbc50:	9a09      	ldr	r2, [sp, #36]	; 0x24
   dbc52:	6821      	ldr	r1, [r4, #0]
   dbc54:	4630      	mov	r0, r6
   dbc56:	f000 fe15 	bl	dc884 <mbedtls_rsa_import_raw>
   dbc5a:	bb68      	cbnz	r0, dbcb8 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xa8>
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
   dbc5c:	6822      	ldr	r2, [r4, #0]
   dbc5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbc60:	4413      	add	r3, r2
   dbc62:	6023      	str	r3, [r4, #0]

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   dbc64:	aa09      	add	r2, sp, #36	; 0x24
   dbc66:	2302      	movs	r3, #2
   dbc68:	4629      	mov	r1, r5
   dbc6a:	4620      	mov	r0, r4
   dbc6c:	f7fa f84c 	bl	d5d08 <mbedtls_asn1_get_tag>
   dbc70:	b110      	cbz	r0, dbc78 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x68>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
   dbc72:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
   dbc76:	e020      	b.n	dbcba <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xaa>

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
   dbc78:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbc7a:	9306      	str	r3, [sp, #24]
   dbc7c:	6823      	ldr	r3, [r4, #0]
   dbc7e:	9305      	str	r3, [sp, #20]
   dbc80:	9004      	str	r0, [sp, #16]
   dbc82:	9003      	str	r0, [sp, #12]
   dbc84:	9002      	str	r0, [sp, #8]
   dbc86:	9001      	str	r0, [sp, #4]
   dbc88:	9000      	str	r0, [sp, #0]
   dbc8a:	4603      	mov	r3, r0
   dbc8c:	4602      	mov	r2, r0
   dbc8e:	4601      	mov	r1, r0
   dbc90:	4630      	mov	r0, r6
   dbc92:	f000 fdf7 	bl	dc884 <mbedtls_rsa_import_raw>
   dbc96:	b978      	cbnz	r0, dbcb8 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xa8>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
   dbc98:	6822      	ldr	r2, [r4, #0]
   dbc9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbc9c:	4413      	add	r3, r2
   dbc9e:	6023      	str	r3, [r4, #0]

    if( mbedtls_rsa_complete( rsa ) != 0 ||
   dbca0:	4630      	mov	r0, r6
   dbca2:	f000 fe2d 	bl	dc900 <mbedtls_rsa_complete>
   dbca6:	b938      	cbnz	r0, dbcb8 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xa8>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
   dbca8:	4630      	mov	r0, r6
   dbcaa:	f000 fee5 	bl	dca78 <mbedtls_rsa_check_pubkey>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
   dbcae:	b918      	cbnz	r0, dbcb8 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xa8>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
    }

    if( *p != end )
   dbcb0:	6823      	ldr	r3, [r4, #0]
   dbcb2:	429d      	cmp	r5, r3
   dbcb4:	d001      	beq.n	dbcba <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xaa>
   dbcb6:	e7ba      	b.n	dbc2e <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x1e>
    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
   dbcb8:	4802      	ldr	r0, [pc, #8]	; (dbcc4 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xb4>)
    if( *p != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   dbcba:	b00a      	add	sp, #40	; 0x28
   dbcbc:	bd70      	pop	{r4, r5, r6, pc}
   dbcbe:	bf00      	nop
   dbcc0:	ffffc49a 	.word	0xffffc49a
   dbcc4:	ffffc500 	.word	0xffffc500

000dbcc8 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>:
 *   namedCurve         OBJECT IDENTIFIER
 *   specifiedCurve     SpecifiedECDomain -- = SEQUENCE { ... }
 *   -- implicitCurve   NULL
 */
static int pk_use_ecparams( const mbedtls_asn1_buf *params, mbedtls_ecp_group *grp )
{
   dbcc8:	b513      	push	{r0, r1, r4, lr}
    int ret;
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
   dbcca:	6803      	ldr	r3, [r0, #0]
   dbccc:	2b06      	cmp	r3, #6
 *   namedCurve         OBJECT IDENTIFIER
 *   specifiedCurve     SpecifiedECDomain -- = SEQUENCE { ... }
 *   -- implicitCurve   NULL
 */
static int pk_use_ecparams( const mbedtls_asn1_buf *params, mbedtls_ecp_group *grp )
{
   dbcce:	460c      	mov	r4, r1
    int ret;
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
   dbcd0:	d001      	beq.n	dbcd6 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0xe>
    {
#if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)
        if( ( ret = pk_group_id_from_specified( params, &grp_id ) ) != 0 )
            return( ret );
#else
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   dbcd2:	480a      	ldr	r0, [pc, #40]	; (dbcfc <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x34>)
   dbcd4:	e00f      	b.n	dbcf6 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x2e>
    int ret;
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
    {
        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
   dbcd6:	f10d 0107 	add.w	r1, sp, #7
   dbcda:	f7ff f89f 	bl	dae1c <mbedtls_oid_get_ec_grp>
   dbcde:	b948      	cbnz	r0, dbcf4 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x2c>
    }

    /*
     * grp may already be initilialized; if so, make sure IDs match
     */
    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )
   dbce0:	7823      	ldrb	r3, [r4, #0]
   dbce2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   dbce6:	b10b      	cbz	r3, dbcec <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x24>
   dbce8:	4299      	cmp	r1, r3
   dbcea:	d1f2      	bne.n	dbcd2 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0xa>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
   dbcec:	4620      	mov	r0, r4
   dbcee:	f7fe faad 	bl	da24c <mbedtls_ecp_group_load>
   dbcf2:	e000      	b.n	dbcf6 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x2e>
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
    {
        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
            return( MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE );
   dbcf4:	4802      	ldr	r0, [pc, #8]	; (dbd00 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x38>)

    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
        return( ret );

    return( 0 );
}
   dbcf6:	b002      	add	sp, #8
   dbcf8:	bd10      	pop	{r4, pc}
   dbcfa:	bf00      	nop
   dbcfc:	ffffc300 	.word	0xffffc300
   dbd00:	ffffc600 	.word	0xffffc600

000dbd04 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
   dbd04:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbd06:	b08f      	sub	sp, #60	; 0x3c
   dbd08:	460c      	mov	r4, r1
   dbd0a:	4615      	mov	r5, r2
   dbd0c:	4607      	mov	r7, r0
    int ret, version;
    size_t len;
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );
   dbd0e:	a80b      	add	r0, sp, #44	; 0x2c
   dbd10:	f7fa fb9b 	bl	d644a <mbedtls_mpi_init>
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbd14:	2330      	movs	r3, #48	; 0x30
   dbd16:	aa09      	add	r2, sp, #36	; 0x24
   dbd18:	1961      	adds	r1, r4, r5
   dbd1a:	a80a      	add	r0, sp, #40	; 0x28
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );

    p = (unsigned char *) key;
   dbd1c:	940a      	str	r4, [sp, #40]	; 0x28
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbd1e:	f7f9 fff3 	bl	d5d08 <mbedtls_asn1_get_tag>
   dbd22:	b940      	cbnz	r0, dbd36 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x32>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
   dbd24:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbd26:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   dbd28:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   dbd2a:	aa08      	add	r2, sp, #32
   dbd2c:	4631      	mov	r1, r6
   dbd2e:	a80a      	add	r0, sp, #40	; 0x28
   dbd30:	f7fa f817 	bl	d5d62 <mbedtls_asn1_get_int>
   dbd34:	b110      	cbz	r0, dbd3c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x38>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dbd36:	f5a0 5574 	sub.w	r5, r0, #15616	; 0x3d00
   dbd3a:	e0d4      	b.n	dbee6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    }

    if( version != 0 )
   dbd3c:	9d08      	ldr	r5, [sp, #32]
   dbd3e:	b9dd      	cbnz	r5, dbd78 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x74>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
    }

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbd40:	2302      	movs	r3, #2
   dbd42:	aa09      	add	r2, sp, #36	; 0x24
   dbd44:	4631      	mov	r1, r6
   dbd46:	a80a      	add	r0, sp, #40	; 0x28
   dbd48:	f7f9 ffde 	bl	d5d08 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbd4c:	4604      	mov	r4, r0
   dbd4e:	2800      	cmp	r0, #0
   dbd50:	f040 80c5 	bne.w	dbede <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
   dbd54:	9006      	str	r0, [sp, #24]
   dbd56:	9005      	str	r0, [sp, #20]
   dbd58:	9004      	str	r0, [sp, #16]
   dbd5a:	9003      	str	r0, [sp, #12]
   dbd5c:	9002      	str	r0, [sp, #8]
   dbd5e:	9001      	str	r0, [sp, #4]
   dbd60:	9000      	str	r0, [sp, #0]
   dbd62:	4603      	mov	r3, r0
   dbd64:	9a09      	ldr	r2, [sp, #36]	; 0x24
   dbd66:	990a      	ldr	r1, [sp, #40]	; 0x28
   dbd68:	4638      	mov	r0, r7
   dbd6a:	f000 fd8b 	bl	dc884 <mbedtls_rsa_import_raw>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
    }

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbd6e:	4604      	mov	r4, r0
   dbd70:	2800      	cmp	r0, #0
   dbd72:	f040 80b4 	bne.w	dbede <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
   dbd76:	e001      	b.n	dbd7c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x78>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    if( version != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
   dbd78:	4d5c      	ldr	r5, [pc, #368]	; (dbeec <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e8>)
   dbd7a:	e0b4      	b.n	dbee6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
   dbd7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dbd7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbd80:	4413      	add	r3, r2
   dbd82:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbd84:	aa09      	add	r2, sp, #36	; 0x24
   dbd86:	2302      	movs	r3, #2
   dbd88:	4631      	mov	r1, r6
   dbd8a:	a80a      	add	r0, sp, #40	; 0x28
   dbd8c:	f7f9 ffbc 	bl	d5d08 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbd90:	4604      	mov	r4, r0
   dbd92:	2800      	cmp	r0, #0
   dbd94:	f040 80a3 	bne.w	dbede <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
   dbd98:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbd9a:	9306      	str	r3, [sp, #24]
   dbd9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbd9e:	9305      	str	r3, [sp, #20]
   dbda0:	9404      	str	r4, [sp, #16]
   dbda2:	9403      	str	r4, [sp, #12]
   dbda4:	9402      	str	r4, [sp, #8]
   dbda6:	9401      	str	r4, [sp, #4]
   dbda8:	9400      	str	r4, [sp, #0]
   dbdaa:	4623      	mov	r3, r4
   dbdac:	4622      	mov	r2, r4
   dbdae:	4621      	mov	r1, r4
   dbdb0:	4638      	mov	r0, r7
   dbdb2:	f000 fd67 	bl	dc884 <mbedtls_rsa_import_raw>
        goto cleanup;
    p += len;

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbdb6:	4604      	mov	r4, r0
   dbdb8:	2800      	cmp	r0, #0
   dbdba:	f040 8090 	bne.w	dbede <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, p, len ) ) != 0 )
        goto cleanup;
    p += len;
   dbdbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dbdc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbdc2:	4413      	add	r3, r2
   dbdc4:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbdc6:	aa09      	add	r2, sp, #36	; 0x24
   dbdc8:	2302      	movs	r3, #2
   dbdca:	4631      	mov	r1, r6
   dbdcc:	a80a      	add	r0, sp, #40	; 0x28
   dbdce:	f7f9 ff9b 	bl	d5d08 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbdd2:	4604      	mov	r4, r0
   dbdd4:	2800      	cmp	r0, #0
   dbdd6:	f040 8082 	bne.w	dbede <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
   dbdda:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbddc:	9304      	str	r3, [sp, #16]
   dbdde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbde0:	9406      	str	r4, [sp, #24]
   dbde2:	9405      	str	r4, [sp, #20]
   dbde4:	9303      	str	r3, [sp, #12]
   dbde6:	9402      	str	r4, [sp, #8]
   dbde8:	9401      	str	r4, [sp, #4]
   dbdea:	9400      	str	r4, [sp, #0]
   dbdec:	4623      	mov	r3, r4
   dbdee:	4622      	mov	r2, r4
   dbdf0:	4621      	mov	r1, r4
   dbdf2:	4638      	mov	r0, r7
   dbdf4:	f000 fd46 	bl	dc884 <mbedtls_rsa_import_raw>
        goto cleanup;
    p += len;

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbdf8:	4604      	mov	r4, r0
   dbdfa:	2800      	cmp	r0, #0
   dbdfc:	d16f      	bne.n	dbede <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        p, len, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
   dbdfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dbe00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbe02:	4413      	add	r3, r2
   dbe04:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbe06:	aa09      	add	r2, sp, #36	; 0x24
   dbe08:	2302      	movs	r3, #2
   dbe0a:	4631      	mov	r1, r6
   dbe0c:	a80a      	add	r0, sp, #40	; 0x28
   dbe0e:	f7f9 ff7b 	bl	d5d08 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbe12:	4604      	mov	r4, r0
   dbe14:	2800      	cmp	r0, #0
   dbe16:	d162      	bne.n	dbede <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
   dbe18:	2200      	movs	r2, #0
   dbe1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbe1c:	9300      	str	r3, [sp, #0]
   dbe1e:	9206      	str	r2, [sp, #24]
   dbe20:	9205      	str	r2, [sp, #20]
   dbe22:	9204      	str	r2, [sp, #16]
   dbe24:	9203      	str	r2, [sp, #12]
   dbe26:	9202      	str	r2, [sp, #8]
   dbe28:	9201      	str	r2, [sp, #4]
   dbe2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbe2c:	4611      	mov	r1, r2
   dbe2e:	4638      	mov	r0, r7
   dbe30:	f000 fd28 	bl	dc884 <mbedtls_rsa_import_raw>
        goto cleanup;
    p += len;

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbe34:	4604      	mov	r4, r0
   dbe36:	2800      	cmp	r0, #0
   dbe38:	d151      	bne.n	dbede <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
   dbe3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dbe3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbe3e:	4413      	add	r3, r2
   dbe40:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbe42:	aa09      	add	r2, sp, #36	; 0x24
   dbe44:	2302      	movs	r3, #2
   dbe46:	4631      	mov	r1, r6
   dbe48:	a80a      	add	r0, sp, #40	; 0x28
   dbe4a:	f7f9 ff5d 	bl	d5d08 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbe4e:	4604      	mov	r4, r0
   dbe50:	2800      	cmp	r0, #0
   dbe52:	d144      	bne.n	dbede <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
   dbe54:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbe56:	9302      	str	r3, [sp, #8]
   dbe58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbe5a:	9406      	str	r4, [sp, #24]
   dbe5c:	9405      	str	r4, [sp, #20]
   dbe5e:	9404      	str	r4, [sp, #16]
   dbe60:	9403      	str	r4, [sp, #12]
   dbe62:	9301      	str	r3, [sp, #4]
   dbe64:	9400      	str	r4, [sp, #0]
   dbe66:	4623      	mov	r3, r4
   dbe68:	4622      	mov	r2, r4
   dbe6a:	4621      	mov	r1, r4
   dbe6c:	4638      	mov	r0, r7
   dbe6e:	f000 fd09 	bl	dc884 <mbedtls_rsa_import_raw>
        goto cleanup;
    p += len;

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbe72:	4604      	mov	r4, r0
   dbe74:	2800      	cmp	r0, #0
   dbe76:	d132      	bne.n	dbede <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
   dbe78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dbe7a:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
   dbe7c:	4638      	mov	r0, r7
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
   dbe7e:	4413      	add	r3, r2
   dbe80:	930a      	str	r3, [sp, #40]	; 0x28

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
   dbe82:	f000 fd3d 	bl	dc900 <mbedtls_rsa_complete>
   dbe86:	4604      	mov	r4, r0
   dbe88:	b9c8      	cbnz	r0, dbebe <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ba>
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   dbe8a:	aa0b      	add	r2, sp, #44	; 0x2c
   dbe8c:	4631      	mov	r1, r6
   dbe8e:	a80a      	add	r0, sp, #40	; 0x28
   dbe90:	f7f9 ff8b 	bl	d5daa <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   dbe94:	4604      	mov	r4, r0
   dbe96:	bb10      	cbnz	r0, dbede <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
   dbe98:	aa0b      	add	r2, sp, #44	; 0x2c
   dbe9a:	4631      	mov	r1, r6
   dbe9c:	a80a      	add	r0, sp, #40	; 0x28
   dbe9e:	f7f9 ff84 	bl	d5daa <mbedtls_asn1_get_mpi>
    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   dbea2:	4604      	mov	r4, r0
   dbea4:	b9d8      	cbnz	r0, dbede <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 )
   dbea6:	aa0b      	add	r2, sp, #44	; 0x2c
   dbea8:	4631      	mov	r1, r6
   dbeaa:	a80a      	add	r0, sp, #40	; 0x28
   dbeac:	f7f9 ff7d 	bl	d5daa <mbedtls_asn1_get_mpi>
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   dbeb0:	4604      	mov	r4, r0
   dbeb2:	b9a0      	cbnz	r0, dbede <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        goto cleanup;

    if( p != end )
    {
        ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
   dbeb4:	4b0e      	ldr	r3, [pc, #56]	; (dbef0 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ec>)
   dbeb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dbeb8:	4296      	cmp	r6, r2
   dbeba:	bf18      	it	ne
   dbebc:	461c      	movne	r4, r3
    }

cleanup:

    mbedtls_mpi_free( &T );
   dbebe:	a80b      	add	r0, sp, #44	; 0x2c
   dbec0:	f7fa fac9 	bl	d6456 <mbedtls_mpi_free>

    if( ret != 0 )
   dbec4:	b17c      	cbz	r4, dbee6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    {
        /* Wrap error code if it's coming from a lower level */
        if( ( ret & 0xff80 ) == 0 )
   dbec6:	f64f 7380 	movw	r3, #65408	; 0xff80
   dbeca:	4023      	ands	r3, r4
   dbecc:	b913      	cbnz	r3, dbed4 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d0>
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;
   dbece:	f5a4 5574 	sub.w	r5, r4, #15616	; 0x3d00
   dbed2:	e000      	b.n	dbed6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d2>
        else
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
   dbed4:	4d07      	ldr	r5, [pc, #28]	; (dbef4 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1f0>)

        mbedtls_rsa_free( rsa );
   dbed6:	4638      	mov	r0, r7
   dbed8:	f001 fdee 	bl	ddab8 <mbedtls_rsa_free>
   dbedc:	e003      	b.n	dbee6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
    }

cleanup:

    mbedtls_mpi_free( &T );
   dbede:	a80b      	add	r0, sp, #44	; 0x2c
   dbee0:	f7fa fab9 	bl	d6456 <mbedtls_mpi_free>
   dbee4:	e7ef      	b.n	dbec6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1c2>

        mbedtls_rsa_free( rsa );
    }

    return( ret );
}
   dbee6:	4628      	mov	r0, r5
   dbee8:	b00f      	add	sp, #60	; 0x3c
   dbeea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dbeec:	ffffc280 	.word	0xffffc280
   dbef0:	ffffc29a 	.word	0xffffc29a
   dbef4:	ffffc300 	.word	0xffffc300

000dbef8 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
   dbef8:	b530      	push	{r4, r5, lr}
   dbefa:	4615      	mov	r5, r2
   dbefc:	b085      	sub	sp, #20
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
   dbefe:	2200      	movs	r2, #0
   dbf00:	601a      	str	r2, [r3, #0]
   dbf02:	605a      	str	r2, [r3, #4]
   dbf04:	609a      	str	r2, [r3, #8]

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
   dbf06:	aa01      	add	r2, sp, #4
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
   dbf08:	461c      	mov	r4, r3
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
   dbf0a:	f7f9 ffda 	bl	d5ec2 <mbedtls_asn1_get_alg>
   dbf0e:	b110      	cbz	r0, dbf16 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1e>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
   dbf10:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
   dbf14:	e014      	b.n	dbf40 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
   dbf16:	4629      	mov	r1, r5
   dbf18:	a801      	add	r0, sp, #4
   dbf1a:	f7fe ff65 	bl	dade8 <mbedtls_oid_get_pk_alg>
   dbf1e:	b960      	cbnz	r0, dbf3a <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x42>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
   dbf20:	782b      	ldrb	r3, [r5, #0]
   dbf22:	2b01      	cmp	r3, #1
   dbf24:	d10c      	bne.n	dbf40 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
   dbf26:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
   dbf28:	2b05      	cmp	r3, #5
   dbf2a:	d000      	beq.n	dbf2e <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x36>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
   dbf2c:	b93b      	cbnz	r3, dbf3e <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x46>
   dbf2e:	6863      	ldr	r3, [r4, #4]
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
   dbf30:	4804      	ldr	r0, [pc, #16]	; (dbf44 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
   dbf32:	2b00      	cmp	r3, #0
   dbf34:	bf08      	it	eq
   dbf36:	2000      	moveq	r0, #0
   dbf38:	e002      	b.n	dbf40 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   dbf3a:	4803      	ldr	r0, [pc, #12]	; (dbf48 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x50>)
   dbf3c:	e000      	b.n	dbf40 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
   dbf3e:	4801      	ldr	r0, [pc, #4]	; (dbf44 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
    }

    return( 0 );
}
   dbf40:	b005      	add	sp, #20
   dbf42:	bd30      	pop	{r4, r5, pc}
   dbf44:	ffffc580 	.word	0xffffc580
   dbf48:	ffffc380 	.word	0xffffc380

000dbf4c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>:
 * Parse a SEC1 encoded private EC key
 */
static int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,
                                  const unsigned char *key,
                                  size_t keylen )
{
   dbf4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbf4e:	b089      	sub	sp, #36	; 0x24
   dbf50:	4605      	mov	r5, r0
    int ret;
    int version, pubkey_done;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
   dbf52:	9104      	str	r1, [sp, #16]
     *      privateKey     OCTET STRING,
     *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
     *      publicKey  [1] BIT STRING OPTIONAL
     *    }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbf54:	2330      	movs	r3, #48	; 0x30
   dbf56:	4411      	add	r1, r2
   dbf58:	a804      	add	r0, sp, #16
   dbf5a:	aa03      	add	r2, sp, #12
   dbf5c:	f7f9 fed4 	bl	d5d08 <mbedtls_asn1_get_tag>
   dbf60:	2800      	cmp	r0, #0
   dbf62:	d168      	bne.n	dc036 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xea>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
   dbf64:	9b03      	ldr	r3, [sp, #12]
   dbf66:	9f04      	ldr	r7, [sp, #16]
   dbf68:	441f      	add	r7, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   dbf6a:	aa02      	add	r2, sp, #8
   dbf6c:	4639      	mov	r1, r7
   dbf6e:	a804      	add	r0, sp, #16
   dbf70:	f7f9 fef7 	bl	d5d62 <mbedtls_asn1_get_int>
   dbf74:	2800      	cmp	r0, #0
   dbf76:	d15e      	bne.n	dc036 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xea>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 1 )
   dbf78:	9b02      	ldr	r3, [sp, #8]
   dbf7a:	2b01      	cmp	r3, #1
   dbf7c:	f040 8094 	bne.w	dc0a8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x15c>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   dbf80:	2304      	movs	r3, #4
   dbf82:	aa03      	add	r2, sp, #12
   dbf84:	4639      	mov	r1, r7
   dbf86:	a804      	add	r0, sp, #16
   dbf88:	f7f9 febe 	bl	d5d08 <mbedtls_asn1_get_tag>
   dbf8c:	2800      	cmp	r0, #0
   dbf8e:	d152      	bne.n	dc036 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xea>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_mpi_read_binary( &eck->d, p, len ) ) != 0 )
   dbf90:	f105 067c 	add.w	r6, r5, #124	; 0x7c
   dbf94:	9a03      	ldr	r2, [sp, #12]
   dbf96:	9904      	ldr	r1, [sp, #16]
   dbf98:	4630      	mov	r0, r6
   dbf9a:	f7fa fba3 	bl	d66e4 <mbedtls_mpi_read_binary>
   dbf9e:	4604      	mov	r4, r0
   dbfa0:	2800      	cmp	r0, #0
   dbfa2:	d166      	bne.n	dc072 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x126>
    {
        mbedtls_ecp_keypair_free( eck );
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    p += len;
   dbfa4:	9a04      	ldr	r2, [sp, #16]
   dbfa6:	9b03      	ldr	r3, [sp, #12]
   dbfa8:	4413      	add	r3, r2

    pubkey_done = 0;
    if( p != end )
   dbfaa:	429f      	cmp	r7, r3
    {
        mbedtls_ecp_keypair_free( eck );
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    p += len;
   dbfac:	9304      	str	r3, [sp, #16]

    pubkey_done = 0;
    if( p != end )
   dbfae:	d02e      	beq.n	dc00e <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xc2>
    {
        /*
         * Is 'parameters' present?
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbfb0:	23a0      	movs	r3, #160	; 0xa0
   dbfb2:	aa03      	add	r2, sp, #12
   dbfb4:	4639      	mov	r1, r7
   dbfb6:	a804      	add	r0, sp, #16
   dbfb8:	f7f9 fea6 	bl	d5d08 <mbedtls_asn1_get_tag>
   dbfbc:	4604      	mov	r4, r0
   dbfbe:	bb18      	cbnz	r0, dc008 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xbc>
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
   dbfc0:	9a03      	ldr	r2, [sp, #12]
   dbfc2:	9b04      	ldr	r3, [sp, #16]
static int pk_get_ecparams( unsigned char **p, const unsigned char *end,
                            mbedtls_asn1_buf *params )
{
    int ret;

    if ( end - *p < 1 )
   dbfc4:	2a00      	cmp	r2, #0
         * Is 'parameters' present?
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
   dbfc6:	eb03 0402 	add.w	r4, r3, r2
static int pk_get_ecparams( unsigned char **p, const unsigned char *end,
                            mbedtls_asn1_buf *params )
{
    int ret;

    if ( end - *p < 1 )
   dbfca:	dd71      	ble.n	dc0b0 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x164>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    /* Tag may be either OID or SEQUENCE */
    params->tag = **p;
   dbfcc:	781b      	ldrb	r3, [r3, #0]
   dbfce:	9305      	str	r3, [sp, #20]
    if( params->tag != MBEDTLS_ASN1_OID
   dbfd0:	2b06      	cmp	r3, #6
   dbfd2:	d16f      	bne.n	dc0b4 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x168>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    }

    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
   dbfd4:	aa06      	add	r2, sp, #24
   dbfd6:	4621      	mov	r1, r4
   dbfd8:	a804      	add	r0, sp, #16
   dbfda:	f7f9 fe95 	bl	d5d08 <mbedtls_asn1_get_tag>
   dbfde:	b150      	cbz	r0, dbff6 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xaa>
         * Is 'parameters' present?
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
   dbfe0:	f5b0 5474 	subs.w	r4, r0, #15616	; 0x3d00
   dbfe4:	d167      	bne.n	dc0b6 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x16a>
                ( ret = pk_use_ecparams( &params, &eck->grp )  ) != 0 )
   dbfe6:	4629      	mov	r1, r5
   dbfe8:	a805      	add	r0, sp, #20
   dbfea:	f7ff fe6d 	bl	dbcc8 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>
         * Is 'parameters' present?
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
   dbfee:	4604      	mov	r4, r0
   dbff0:	2800      	cmp	r0, #0
   dbff2:	d160      	bne.n	dc0b6 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x16a>
   dbff4:	e00b      	b.n	dc00e <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xc2>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    params->p = *p;
   dbff6:	9a04      	ldr	r2, [sp, #16]
    *p += params->len;
   dbff8:	9b06      	ldr	r3, [sp, #24]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    params->p = *p;
   dbffa:	9207      	str	r2, [sp, #28]
    *p += params->len;
   dbffc:	4413      	add	r3, r2

    if( *p != end )
   dbffe:	429c      	cmp	r4, r3
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    params->p = *p;
    *p += params->len;
   dc000:	9304      	str	r3, [sp, #16]

    if( *p != end )
   dc002:	d0f0      	beq.n	dbfe6 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x9a>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   dc004:	4c2f      	ldr	r4, [pc, #188]	; (dc0c4 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x178>)
   dc006:	e056      	b.n	dc0b6 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x16a>
            {
                mbedtls_ecp_keypair_free( eck );
                return( ret );
            }
        }
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   dc008:	f110 0f62 	cmn.w	r0, #98	; 0x62
   dc00c:	d131      	bne.n	dc072 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x126>
            mbedtls_ecp_keypair_free( eck );
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
        }
    }

    if( p != end )
   dc00e:	9b04      	ldr	r3, [sp, #16]
   dc010:	429f      	cmp	r7, r3
   dc012:	d034      	beq.n	dc07e <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x132>
    {
        /*
         * Is 'publickey' present? If not, or if we can't read it (eg because it
         * is compressed), create it from the private key.
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dc014:	23a1      	movs	r3, #161	; 0xa1
   dc016:	aa03      	add	r2, sp, #12
   dc018:	4639      	mov	r1, r7
   dc01a:	a804      	add	r0, sp, #16
   dc01c:	f7f9 fe74 	bl	d5d08 <mbedtls_asn1_get_tag>
   dc020:	4604      	mov	r4, r0
   dc022:	bb18      	cbnz	r0, dc06c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x120>
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
        {
            end2 = p + len;
   dc024:	9b03      	ldr	r3, [sp, #12]
   dc026:	9c04      	ldr	r4, [sp, #16]
   dc028:	441c      	add	r4, r3

            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
   dc02a:	aa03      	add	r2, sp, #12
   dc02c:	4621      	mov	r1, r4
   dc02e:	a804      	add	r0, sp, #16
   dc030:	f7f9 fef3 	bl	d5e1a <mbedtls_asn1_get_bitstring_null>
   dc034:	b110      	cbz	r0, dc03c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xf0>
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dc036:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
   dc03a:	e03f      	b.n	dc0bc <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>

            if( p + len != end2 )
   dc03c:	9a04      	ldr	r2, [sp, #16]
   dc03e:	9b03      	ldr	r3, [sp, #12]
   dc040:	4413      	add	r3, r2
   dc042:	429c      	cmp	r4, r3
   dc044:	d132      	bne.n	dc0ac <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x160>
static int pk_get_ecpubkey( unsigned char **p, const unsigned char *end,
                            mbedtls_ecp_keypair *key )
{
    int ret;

    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
   dc046:	f105 0788 	add.w	r7, r5, #136	; 0x88
   dc04a:	1aa3      	subs	r3, r4, r2
   dc04c:	4639      	mov	r1, r7
   dc04e:	4628      	mov	r0, r5
   dc050:	f7fd fad4 	bl	d95fc <mbedtls_ecp_point_read_binary>
   dc054:	b918      	cbnz	r0, dc05e <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x112>
                    (const unsigned char *) *p, end - *p ) ) == 0 )
    {
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
   dc056:	4639      	mov	r1, r7
   dc058:	4628      	mov	r0, r5
   dc05a:	f7fd fb57 	bl	d970c <mbedtls_ecp_check_pubkey>
    }

    /*
     * We know mbedtls_ecp_point_read_binary consumed all bytes or failed
     */
    *p = (unsigned char *) end;
   dc05e:	9404      	str	r4, [sp, #16]

            if( p + len != end2 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                        MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

            if( ( ret = pk_get_ecpubkey( &p, end2, eck ) ) == 0 )
   dc060:	b1d8      	cbz	r0, dc09a <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x14e>
            {
                /*
                 * The only acceptable failure mode of pk_get_ecpubkey() above
                 * is if the point format is not recognized.
                 */
                if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE )
   dc062:	f510 4f9d 	cmn.w	r0, #20096	; 0x4e80
   dc066:	d00a      	beq.n	dc07e <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x132>
                    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   dc068:	4c17      	ldr	r4, [pc, #92]	; (dc0c8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x17c>)
   dc06a:	e027      	b.n	dc0bc <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>
            }
        }
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   dc06c:	f110 0f62 	cmn.w	r0, #98	; 0x62
   dc070:	d005      	beq.n	dc07e <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x132>

    if( ! pubkey_done &&
        ( ret = mbedtls_ecp_mul( &eck->grp, &eck->Q, &eck->d, &eck->grp.G,
                                                      NULL, NULL ) ) != 0 )
    {
        mbedtls_ecp_keypair_free( eck );
   dc072:	4628      	mov	r0, r5
   dc074:	f7fc fedb 	bl	d8e2e <mbedtls_ecp_keypair_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dc078:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
   dc07c:	e01e      	b.n	dc0bc <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
        }
    }

    if( ! pubkey_done &&
        ( ret = mbedtls_ecp_mul( &eck->grp, &eck->Q, &eck->d, &eck->grp.G,
   dc07e:	2300      	movs	r3, #0
   dc080:	9301      	str	r3, [sp, #4]
   dc082:	9300      	str	r3, [sp, #0]
   dc084:	4632      	mov	r2, r6
   dc086:	f105 0328 	add.w	r3, r5, #40	; 0x28
   dc08a:	f105 0188 	add.w	r1, r5, #136	; 0x88
   dc08e:	4628      	mov	r0, r5
   dc090:	f7fd fd40 	bl	d9b14 <mbedtls_ecp_mul>
            mbedtls_ecp_keypair_free( eck );
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
        }
    }

    if( ! pubkey_done &&
   dc094:	4604      	mov	r4, r0
   dc096:	2800      	cmp	r0, #0
   dc098:	d1eb      	bne.n	dc072 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x126>
    {
        mbedtls_ecp_keypair_free( eck );
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    if( ( ret = mbedtls_ecp_check_privkey( &eck->grp, &eck->d ) ) != 0 )
   dc09a:	4631      	mov	r1, r6
   dc09c:	4628      	mov	r0, r5
   dc09e:	f7fd fbf1 	bl	d9884 <mbedtls_ecp_check_privkey>
   dc0a2:	4604      	mov	r4, r0
   dc0a4:	b150      	cbz	r0, dc0bc <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>
   dc0a6:	e006      	b.n	dc0b6 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x16a>

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
   dc0a8:	4c08      	ldr	r4, [pc, #32]	; (dc0cc <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x180>)
   dc0aa:	e007      	b.n	dc0bc <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>
            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

            if( p + len != end2 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                        MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   dc0ac:	4c05      	ldr	r4, [pc, #20]	; (dc0c4 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x178>)
   dc0ae:	e005      	b.n	dc0bc <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>
{
    int ret;

    if ( end - *p < 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   dc0b0:	4c07      	ldr	r4, [pc, #28]	; (dc0d0 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x184>)
   dc0b2:	e000      	b.n	dc0b6 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x16a>
            && params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE )
#endif
            )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   dc0b4:	4c07      	ldr	r4, [pc, #28]	; (dc0d4 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x188>)
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
                ( ret = pk_use_ecparams( &params, &eck->grp )  ) != 0 )
            {
                mbedtls_ecp_keypair_free( eck );
   dc0b6:	4628      	mov	r0, r5
   dc0b8:	f7fc feb9 	bl	d8e2e <mbedtls_ecp_keypair_free>
        mbedtls_ecp_keypair_free( eck );
        return( ret );
    }

    return( 0 );
}
   dc0bc:	4620      	mov	r0, r4
   dc0be:	b009      	add	sp, #36	; 0x24
   dc0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc0c2:	bf00      	nop
   dc0c4:	ffffc29a 	.word	0xffffc29a
   dc0c8:	ffffc300 	.word	0xffffc300
   dc0cc:	ffffc280 	.word	0xffffc280
   dc0d0:	ffffc2a0 	.word	0xffffc2a0
   dc0d4:	ffffc29e 	.word	0xffffc29e

000dc0d8 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
   dc0d8:	b570      	push	{r4, r5, r6, lr}
   dc0da:	b088      	sub	sp, #32
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   dc0dc:	2300      	movs	r3, #0
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
   dc0de:	4605      	mov	r5, r0
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
   dc0e0:	9104      	str	r1, [sp, #16]
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   dc0e2:	f88d 3007 	strb.w	r3, [sp, #7]
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dc0e6:	4411      	add	r1, r2
   dc0e8:	2330      	movs	r3, #48	; 0x30
   dc0ea:	aa03      	add	r2, sp, #12
   dc0ec:	a804      	add	r0, sp, #16
   dc0ee:	f7f9 fe0b 	bl	d5d08 <mbedtls_asn1_get_tag>
   dc0f2:	b9d0      	cbnz	r0, dc12a <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x52>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
   dc0f4:	9b03      	ldr	r3, [sp, #12]
   dc0f6:	9e04      	ldr	r6, [sp, #16]
   dc0f8:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   dc0fa:	aa02      	add	r2, sp, #8
   dc0fc:	4631      	mov	r1, r6
   dc0fe:	a804      	add	r0, sp, #16
   dc100:	f7f9 fe2f 	bl	d5d62 <mbedtls_asn1_get_int>
   dc104:	b988      	cbnz	r0, dc12a <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x52>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
   dc106:	9c02      	ldr	r4, [sp, #8]
   dc108:	2c00      	cmp	r4, #0
   dc10a:	d13f      	bne.n	dc18c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xb4>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
   dc10c:	ab05      	add	r3, sp, #20
   dc10e:	f10d 0207 	add.w	r2, sp, #7
   dc112:	4631      	mov	r1, r6
   dc114:	a804      	add	r0, sp, #16
   dc116:	f7ff feef 	bl	dbef8 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
   dc11a:	b930      	cbnz	r0, dc12a <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x52>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   dc11c:	2304      	movs	r3, #4
   dc11e:	aa03      	add	r2, sp, #12
   dc120:	4631      	mov	r1, r6
   dc122:	a804      	add	r0, sp, #16
   dc124:	f7f9 fdf0 	bl	d5d08 <mbedtls_asn1_get_tag>
   dc128:	b110      	cbz	r0, dc130 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x58>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dc12a:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
   dc12e:	e039      	b.n	dc1a4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>

    if( len < 1 )
   dc130:	9b03      	ldr	r3, [sp, #12]
   dc132:	b36b      	cbz	r3, dc190 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xb8>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
   dc134:	f89d 0007 	ldrb.w	r0, [sp, #7]
   dc138:	f7fe ffbe 	bl	db0b8 <mbedtls_pk_info_from_type>
   dc13c:	4601      	mov	r1, r0
   dc13e:	b908      	cbnz	r0, dc144 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x6c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   dc140:	4c1a      	ldr	r4, [pc, #104]	; (dc1ac <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xd4>)
   dc142:	e02f      	b.n	dc1a4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
   dc144:	4628      	mov	r0, r5
   dc146:	f7fe ffc3 	bl	db0d0 <mbedtls_pk_setup>
   dc14a:	bb18      	cbnz	r0, dc194 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xbc>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
   dc14c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   dc150:	2b01      	cmp	r3, #1
   dc152:	d10a      	bne.n	dc16a <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x92>
    {
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
   dc154:	9a03      	ldr	r2, [sp, #12]
   dc156:	9904      	ldr	r1, [sp, #16]
   dc158:	6868      	ldr	r0, [r5, #4]
   dc15a:	f7ff fdd3 	bl	dbd04 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
   dc15e:	4604      	mov	r4, r0
   dc160:	b1d0      	cbz	r0, dc198 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xc0>
        {
            mbedtls_pk_free( pk );
   dc162:	4628      	mov	r0, r5
   dc164:	f7fe ff99 	bl	db09a <mbedtls_pk_free>
            return( ret );
   dc168:	e01c      	b.n	dc1a4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>
        }
    } else
#endif /* MBEDTLS_RSA_C */
#if defined(MBEDTLS_ECP_C)
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
   dc16a:	3b02      	subs	r3, #2
   dc16c:	2b01      	cmp	r3, #1
   dc16e:	d8e7      	bhi.n	dc140 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x68>
    {
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
   dc170:	6869      	ldr	r1, [r5, #4]
   dc172:	a805      	add	r0, sp, #20
   dc174:	f7ff fda8 	bl	dbcc8 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>
   dc178:	4606      	mov	r6, r0
   dc17a:	b978      	cbnz	r0, dc19c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xc4>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), p, len )  ) != 0 )
   dc17c:	9a03      	ldr	r2, [sp, #12]
   dc17e:	9904      	ldr	r1, [sp, #16]
   dc180:	6868      	ldr	r0, [r5, #4]
   dc182:	f7ff fee3 	bl	dbf4c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>
    } else
#endif /* MBEDTLS_RSA_C */
#if defined(MBEDTLS_ECP_C)
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
    {
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
   dc186:	4606      	mov	r6, r0
   dc188:	b940      	cbnz	r0, dc19c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xc4>
   dc18a:	e00b      	b.n	dc1a4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
   dc18c:	4c08      	ldr	r4, [pc, #32]	; (dc1b0 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xd8>)
   dc18e:	e009      	b.n	dc1a4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( len < 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   dc190:	4c08      	ldr	r4, [pc, #32]	; (dc1b4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xdc>)
   dc192:	e007      	b.n	dc1a4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>
   dc194:	4604      	mov	r4, r0
   dc196:	e005      	b.n	dc1a4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>
        }
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
   dc198:	2400      	movs	r4, #0
   dc19a:	e003      	b.n	dc1a4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
    {
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), p, len )  ) != 0 )
        {
            mbedtls_pk_free( pk );
   dc19c:	4628      	mov	r0, r5
   dc19e:	f7fe ff7c 	bl	db09a <mbedtls_pk_free>
            return( ret );
   dc1a2:	4634      	mov	r4, r6
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
}
   dc1a4:	4620      	mov	r0, r4
   dc1a6:	b008      	add	sp, #32
   dc1a8:	bd70      	pop	{r4, r5, r6, pc}
   dc1aa:	bf00      	nop
   dc1ac:	ffffc380 	.word	0xffffc380
   dc1b0:	ffffc280 	.word	0xffffc280
   dc1b4:	ffffc2a0 	.word	0xffffc2a0

000dc1b8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>:
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
   dc1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc1ba:	b091      	sub	sp, #68	; 0x44
   dc1bc:	4606      	mov	r6, r0
   dc1be:	9d16      	ldr	r5, [sp, #88]	; 0x58
#if defined(MBEDTLS_PKCS12_C)
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
   dc1c0:	9109      	str	r1, [sp, #36]	; 0x24
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
   dc1c2:	461f      	mov	r7, r3
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
    end = p + keylen;
   dc1c4:	4411      	add	r1, r2

    if( pwdlen == 0 )
   dc1c6:	2d00      	cmp	r5, #0
   dc1c8:	d066      	beq.n	dc298 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe0>
     *  EncryptedData ::= OCTET STRING
     *
     *  The EncryptedData OCTET STRING is a PKCS#8 PrivateKeyInfo
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dc1ca:	2330      	movs	r3, #48	; 0x30
   dc1cc:	aa08      	add	r2, sp, #32
   dc1ce:	a809      	add	r0, sp, #36	; 0x24
   dc1d0:	f7f9 fd9a 	bl	d5d08 <mbedtls_asn1_get_tag>
   dc1d4:	b980      	cbnz	r0, dc1f8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
   dc1d6:	9b08      	ldr	r3, [sp, #32]
   dc1d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   dc1da:	441c      	add	r4, r3

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
   dc1dc:	aa0a      	add	r2, sp, #40	; 0x28
   dc1de:	ab0d      	add	r3, sp, #52	; 0x34
   dc1e0:	4621      	mov	r1, r4
   dc1e2:	a809      	add	r0, sp, #36	; 0x24
   dc1e4:	f7f9 fe6d 	bl	d5ec2 <mbedtls_asn1_get_alg>
   dc1e8:	b930      	cbnz	r0, dc1f8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   dc1ea:	2304      	movs	r3, #4
   dc1ec:	aa08      	add	r2, sp, #32
   dc1ee:	4621      	mov	r1, r4
   dc1f0:	a809      	add	r0, sp, #36	; 0x24
   dc1f2:	f7f9 fd89 	bl	d5d08 <mbedtls_asn1_get_tag>
   dc1f6:	b110      	cbz	r0, dc1fe <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x46>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dc1f8:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
   dc1fc:	e055      	b.n	dc2aa <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
   dc1fe:	f10d 011f 	add.w	r1, sp, #31
   dc202:	f10d 021e 	add.w	r2, sp, #30
   dc206:	a80a      	add	r0, sp, #40	; 0x28
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    buf = p;
   dc208:	9c09      	ldr	r4, [sp, #36]	; 0x24

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
   dc20a:	f7fe fe83 	bl	daf14 <mbedtls_oid_get_pkcs12_pbe_alg>
   dc20e:	4601      	mov	r1, r0
   dc210:	b9a0      	cbnz	r0, dc23c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x84>
    {
        if( ( ret = mbedtls_pkcs12_pbe( &pbe_params, MBEDTLS_PKCS12_PBE_DECRYPT,
   dc212:	9808      	ldr	r0, [sp, #32]
   dc214:	9003      	str	r0, [sp, #12]
   dc216:	9809      	ldr	r0, [sp, #36]	; 0x24
   dc218:	9002      	str	r0, [sp, #8]
   dc21a:	f89d 301f 	ldrb.w	r3, [sp, #31]
   dc21e:	f89d 201e 	ldrb.w	r2, [sp, #30]
   dc222:	9404      	str	r4, [sp, #16]
   dc224:	9501      	str	r5, [sp, #4]
   dc226:	9700      	str	r7, [sp, #0]
   dc228:	a80d      	add	r0, sp, #52	; 0x34
   dc22a:	f7ff fabf 	bl	db7ac <mbedtls_pkcs12_pbe>
   dc22e:	2800      	cmp	r0, #0
   dc230:	d036      	beq.n	dc2a0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                cipher_alg, md_alg,
                                pwd, pwdlen, p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH )
   dc232:	f510 5ff0 	cmn.w	r0, #7680	; 0x1e00
   dc236:	d138      	bne.n	dc2aa <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
                return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
   dc238:	481d      	ldr	r0, [pc, #116]	; (dc2b0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf8>)
   dc23a:	e036      	b.n	dc2aa <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
            return( ret );
        }

        decrypted = 1;
    }
    else if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128, &pbe_alg_oid ) == 0 )
   dc23c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   dc23e:	2a0a      	cmp	r2, #10
   dc240:	d114      	bne.n	dc26c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xb4>
   dc242:	990c      	ldr	r1, [sp, #48]	; 0x30
   dc244:	481b      	ldr	r0, [pc, #108]	; (dc2b4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xfc>)
   dc246:	f00b fdff 	bl	e7e48 <memcmp>
   dc24a:	4601      	mov	r1, r0
   dc24c:	bb30      	cbnz	r0, dc29c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs12_pbe_sha1_rc4_128( &pbe_params,
   dc24e:	9b08      	ldr	r3, [sp, #32]
   dc250:	9301      	str	r3, [sp, #4]
   dc252:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc254:	9300      	str	r3, [sp, #0]
   dc256:	9402      	str	r4, [sp, #8]
   dc258:	462b      	mov	r3, r5
   dc25a:	463a      	mov	r2, r7
   dc25c:	a80d      	add	r0, sp, #52	; 0x34
   dc25e:	f7ff f9c7 	bl	db5f0 <mbedtls_pkcs12_pbe_sha1_rc4_128>
   dc262:	bb10      	cbnz	r0, dc2aa <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
        }

        // Best guess for password mismatch when using RC4. If first tag is
        // not MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE
        //
        if( *buf != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   dc264:	7823      	ldrb	r3, [r4, #0]
   dc266:	2b30      	cmp	r3, #48	; 0x30
   dc268:	d01a      	beq.n	dc2a0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
   dc26a:	e7e5      	b.n	dc238 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x80>
        decrypted = 1;
    }
    else
#endif /* MBEDTLS_PKCS12_C */
#if defined(MBEDTLS_PKCS5_C)
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBES2, &pbe_alg_oid ) == 0 )
   dc26c:	2a09      	cmp	r2, #9
   dc26e:	d115      	bne.n	dc29c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
   dc270:	990c      	ldr	r1, [sp, #48]	; 0x30
   dc272:	4811      	ldr	r0, [pc, #68]	; (dc2b8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x100>)
   dc274:	f00b fde8 	bl	e7e48 <memcmp>
   dc278:	4601      	mov	r1, r0
   dc27a:	b978      	cbnz	r0, dc29c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs5_pbes2( &pbe_params, MBEDTLS_PKCS5_DECRYPT, pwd, pwdlen,
   dc27c:	9b08      	ldr	r3, [sp, #32]
   dc27e:	9301      	str	r3, [sp, #4]
   dc280:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc282:	9300      	str	r3, [sp, #0]
   dc284:	9402      	str	r4, [sp, #8]
   dc286:	462b      	mov	r3, r5
   dc288:	463a      	mov	r2, r7
   dc28a:	a80d      	add	r0, sp, #52	; 0x34
   dc28c:	f7ff fbd0 	bl	dba30 <mbedtls_pkcs5_pbes2>
   dc290:	b130      	cbz	r0, dc2a0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                  p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH )
   dc292:	f510 5f38 	cmn.w	r0, #11776	; 0x2e00
   dc296:	e7ce      	b.n	dc236 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x7e>

    p = key;
    end = p + keylen;

    if( pwdlen == 0 )
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
   dc298:	4808      	ldr	r0, [pc, #32]	; (dc2bc <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x104>)
   dc29a:	e006      	b.n	dc2aa <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
    {
        ((void) pwd);
    }

    if( decrypted == 0 )
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
   dc29c:	4808      	ldr	r0, [pc, #32]	; (dc2c0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x108>)
   dc29e:	e004      	b.n	dc2aa <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
   dc2a0:	9a08      	ldr	r2, [sp, #32]
   dc2a2:	4621      	mov	r1, r4
   dc2a4:	4630      	mov	r0, r6
   dc2a6:	f7ff ff17 	bl	dc0d8 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
}
   dc2aa:	b011      	add	sp, #68	; 0x44
   dc2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc2ae:	bf00      	nop
   dc2b0:	ffffc480 	.word	0xffffc480
   dc2b4:	000e95ba 	.word	0x000e95ba
   dc2b8:	000e95c5 	.word	0x000e95c5
   dc2bc:	ffffc400 	.word	0xffffc400
   dc2c0:	ffffc680 	.word	0xffffc680

000dc2c4 <mbedtls_pk_parse_subpubkey>:
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
   dc2c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc2c8:	b087      	sub	sp, #28
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   dc2ca:	2300      	movs	r3, #0
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
   dc2cc:	4617      	mov	r7, r2
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   dc2ce:	f88d 3007 	strb.w	r3, [sp, #7]
    PK_VALIDATE_RET( p != NULL );
    PK_VALIDATE_RET( *p != NULL );
    PK_VALIDATE_RET( end != NULL );
    PK_VALIDATE_RET( pk != NULL );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dc2d2:	aa02      	add	r2, sp, #8
   dc2d4:	2330      	movs	r3, #48	; 0x30
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
   dc2d6:	4606      	mov	r6, r0
    PK_VALIDATE_RET( p != NULL );
    PK_VALIDATE_RET( *p != NULL );
    PK_VALIDATE_RET( end != NULL );
    PK_VALIDATE_RET( pk != NULL );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dc2d8:	f7f9 fd16 	bl	d5d08 <mbedtls_asn1_get_tag>
   dc2dc:	b110      	cbz	r0, dc2e4 <mbedtls_pk_parse_subpubkey+0x20>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dc2de:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
   dc2e2:	e05c      	b.n	dc39e <mbedtls_pk_parse_subpubkey+0xda>
    }

    end = *p + len;
   dc2e4:	9b02      	ldr	r3, [sp, #8]
   dc2e6:	6835      	ldr	r5, [r6, #0]
   dc2e8:	441d      	add	r5, r3

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
   dc2ea:	f10d 0207 	add.w	r2, sp, #7
   dc2ee:	ab03      	add	r3, sp, #12
   dc2f0:	4629      	mov	r1, r5
   dc2f2:	4630      	mov	r0, r6
   dc2f4:	f7ff fe00 	bl	dbef8 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
   dc2f8:	2800      	cmp	r0, #0
   dc2fa:	d150      	bne.n	dc39e <mbedtls_pk_parse_subpubkey+0xda>
        return( ret );

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
   dc2fc:	aa02      	add	r2, sp, #8
   dc2fe:	4629      	mov	r1, r5
   dc300:	4630      	mov	r0, r6
   dc302:	f7f9 fd8a 	bl	d5e1a <mbedtls_asn1_get_bitstring_null>
   dc306:	b110      	cbz	r0, dc30e <mbedtls_pk_parse_subpubkey+0x4a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
   dc308:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
   dc30c:	e047      	b.n	dc39e <mbedtls_pk_parse_subpubkey+0xda>

    if( *p + len != end )
   dc30e:	6832      	ldr	r2, [r6, #0]
   dc310:	9b02      	ldr	r3, [sp, #8]
   dc312:	4413      	add	r3, r2
   dc314:	429d      	cmp	r5, r3
   dc316:	d139      	bne.n	dc38c <mbedtls_pk_parse_subpubkey+0xc8>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
   dc318:	f89d 0007 	ldrb.w	r0, [sp, #7]
   dc31c:	f7fe fecc 	bl	db0b8 <mbedtls_pk_info_from_type>
   dc320:	4601      	mov	r1, r0
   dc322:	b3a8      	cbz	r0, dc390 <mbedtls_pk_parse_subpubkey+0xcc>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
   dc324:	4638      	mov	r0, r7
   dc326:	f7fe fed3 	bl	db0d0 <mbedtls_pk_setup>
   dc32a:	2800      	cmp	r0, #0
   dc32c:	d137      	bne.n	dc39e <mbedtls_pk_parse_subpubkey+0xda>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
   dc32e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   dc332:	2b01      	cmp	r3, #1
   dc334:	d107      	bne.n	dc346 <mbedtls_pk_parse_subpubkey+0x82>
    {
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
   dc336:	687a      	ldr	r2, [r7, #4]
   dc338:	4629      	mov	r1, r5
   dc33a:	4630      	mov	r0, r6
   dc33c:	f7ff fc68 	bl	dbc10 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
   dc340:	4604      	mov	r4, r0
   dc342:	b1f0      	cbz	r0, dc382 <mbedtls_pk_parse_subpubkey+0xbe>
   dc344:	e027      	b.n	dc396 <mbedtls_pk_parse_subpubkey+0xd2>
    {
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
    } else
#endif /* MBEDTLS_RSA_C */
#if defined(MBEDTLS_ECP_C)
    if( pk_alg == MBEDTLS_PK_ECKEY_DH || pk_alg == MBEDTLS_PK_ECKEY )
   dc346:	3b02      	subs	r3, #2
   dc348:	2b01      	cmp	r3, #1
   dc34a:	d823      	bhi.n	dc394 <mbedtls_pk_parse_subpubkey+0xd0>
    {
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
   dc34c:	6879      	ldr	r1, [r7, #4]
   dc34e:	a803      	add	r0, sp, #12
   dc350:	f7ff fcba 	bl	dbcc8 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>
        if( ret == 0 )
   dc354:	4604      	mov	r4, r0
   dc356:	b9f0      	cbnz	r0, dc396 <mbedtls_pk_parse_subpubkey+0xd2>
   dc358:	f8d7 8004 	ldr.w	r8, [r7, #4]
                            mbedtls_ecp_keypair *key )
{
    int ret;

    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
                    (const unsigned char *) *p, end - *p ) ) == 0 )
   dc35c:	6832      	ldr	r2, [r6, #0]
static int pk_get_ecpubkey( unsigned char **p, const unsigned char *end,
                            mbedtls_ecp_keypair *key )
{
    int ret;

    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
   dc35e:	f108 0988 	add.w	r9, r8, #136	; 0x88
   dc362:	1aab      	subs	r3, r5, r2
   dc364:	4649      	mov	r1, r9
   dc366:	4640      	mov	r0, r8
   dc368:	f7fd f948 	bl	d95fc <mbedtls_ecp_point_read_binary>
   dc36c:	4604      	mov	r4, r0
   dc36e:	b920      	cbnz	r0, dc37a <mbedtls_pk_parse_subpubkey+0xb6>
                    (const unsigned char *) *p, end - *p ) ) == 0 )
    {
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
   dc370:	4649      	mov	r1, r9
   dc372:	4640      	mov	r0, r8
   dc374:	f7fd f9ca 	bl	d970c <mbedtls_ecp_check_pubkey>
   dc378:	4604      	mov	r4, r0
    }

    /*
     * We know mbedtls_ecp_point_read_binary consumed all bytes or failed
     */
    *p = (unsigned char *) end;
   dc37a:	6035      	str	r5, [r6, #0]
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
   dc37c:	b95c      	cbnz	r4, dc396 <mbedtls_pk_parse_subpubkey+0xd2>
   dc37e:	2000      	movs	r0, #0
   dc380:	e00d      	b.n	dc39e <mbedtls_pk_parse_subpubkey+0xda>
   dc382:	6833      	ldr	r3, [r6, #0]
   dc384:	429d      	cmp	r5, r3
   dc386:	d0fa      	beq.n	dc37e <mbedtls_pk_parse_subpubkey+0xba>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
   dc388:	4c06      	ldr	r4, [pc, #24]	; (dc3a4 <mbedtls_pk_parse_subpubkey+0xe0>)
   dc38a:	e004      	b.n	dc396 <mbedtls_pk_parse_subpubkey+0xd2>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   dc38c:	4805      	ldr	r0, [pc, #20]	; (dc3a4 <mbedtls_pk_parse_subpubkey+0xe0>)
   dc38e:	e006      	b.n	dc39e <mbedtls_pk_parse_subpubkey+0xda>

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   dc390:	4805      	ldr	r0, [pc, #20]	; (dc3a8 <mbedtls_pk_parse_subpubkey+0xe4>)
   dc392:	e004      	b.n	dc39e <mbedtls_pk_parse_subpubkey+0xda>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
        if( ret == 0 )
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
   dc394:	4c04      	ldr	r4, [pc, #16]	; (dc3a8 <mbedtls_pk_parse_subpubkey+0xe4>)
    if( ret == 0 && *p != end )
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;

    if( ret != 0 )
        mbedtls_pk_free( pk );
   dc396:	4638      	mov	r0, r7
   dc398:	f7fe fe7f 	bl	db09a <mbedtls_pk_free>
   dc39c:	4620      	mov	r0, r4

    return( ret );
}
   dc39e:	b007      	add	sp, #28
   dc3a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc3a4:	ffffc49a 	.word	0xffffc49a
   dc3a8:	ffffc380 	.word	0xffffc380

000dc3ac <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
   dc3ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc3b0:	b089      	sub	sp, #36	; 0x24
   dc3b2:	4605      	mov	r5, r0
   dc3b4:	460c      	mov	r4, r1
   dc3b6:	461f      	mov	r7, r3
   dc3b8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    size_t len;
    mbedtls_pem_context pem;
#endif

    PK_VALIDATE_RET( pk != NULL );
    if( keylen == 0 )
   dc3bc:	4616      	mov	r6, r2
   dc3be:	2a00      	cmp	r2, #0
   dc3c0:	f000 80f7 	beq.w	dc5b2 <mbedtls_pk_parse_key+0x206>
#if defined(MBEDTLS_PEM_PARSE_C)
   mbedtls_pem_init( &pem );

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
   dc3c4:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
    if( keylen == 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
    PK_VALIDATE_RET( key != NULL );

#if defined(MBEDTLS_PEM_PARSE_C)
   mbedtls_pem_init( &pem );
   dc3c8:	a805      	add	r0, sp, #20
   dc3ca:	f7fe fdbf 	bl	daf4c <mbedtls_pem_init>

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
   dc3ce:	f814 3009 	ldrb.w	r3, [r4, r9]
   dc3d2:	b123      	cbz	r3, dc3de <mbedtls_pk_parse_key+0x32>
        return( ret );
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
   dc3d4:	f814 3009 	ldrb.w	r3, [r4, r9]
   dc3d8:	2b00      	cmp	r3, #0
   dc3da:	d13f      	bne.n	dc45c <mbedtls_pk_parse_key+0xb0>
   dc3dc:	e029      	b.n	dc432 <mbedtls_pk_parse_key+0x86>
#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
   dc3de:	ab04      	add	r3, sp, #16
   dc3e0:	9302      	str	r3, [sp, #8]
   dc3e2:	e88d 0180 	stmia.w	sp, {r7, r8}
   dc3e6:	4623      	mov	r3, r4
   dc3e8:	4a75      	ldr	r2, [pc, #468]	; (dc5c0 <mbedtls_pk_parse_key+0x214>)
   dc3ea:	4976      	ldr	r1, [pc, #472]	; (dc5c4 <mbedtls_pk_parse_key+0x218>)
   dc3ec:	a805      	add	r0, sp, #20
   dc3ee:	f7fe fdb3 	bl	daf58 <mbedtls_pem_read_buffer>
                               "-----BEGIN RSA PRIVATE KEY-----",
                               "-----END RSA PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );

    if( ret == 0 )
   dc3f2:	b978      	cbnz	r0, dc414 <mbedtls_pk_parse_key+0x68>
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
   dc3f4:	2001      	movs	r0, #1
   dc3f6:	f7fe fe5f 	bl	db0b8 <mbedtls_pk_info_from_type>
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
   dc3fa:	4601      	mov	r1, r0
   dc3fc:	4628      	mov	r0, r5
   dc3fe:	f7fe fe67 	bl	db0d0 <mbedtls_pk_setup>
   dc402:	4604      	mov	r4, r0
   dc404:	2800      	cmp	r0, #0
   dc406:	d177      	bne.n	dc4f8 <mbedtls_pk_parse_key+0x14c>
            ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
   dc408:	9a06      	ldr	r2, [sp, #24]
   dc40a:	9905      	ldr	r1, [sp, #20]
   dc40c:	6868      	ldr	r0, [r5, #4]
   dc40e:	f7ff fc79 	bl	dbd04 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
   dc412:	e06f      	b.n	dc4f4 <mbedtls_pk_parse_key+0x148>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
   dc414:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
   dc418:	d101      	bne.n	dc41e <mbedtls_pk_parse_key+0x72>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
   dc41a:	486b      	ldr	r0, [pc, #428]	; (dc5c8 <mbedtls_pk_parse_key+0x21c>)
   dc41c:	e0cc      	b.n	dc5b8 <mbedtls_pk_parse_key+0x20c>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
   dc41e:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
   dc422:	d101      	bne.n	dc428 <mbedtls_pk_parse_key+0x7c>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
   dc424:	4869      	ldr	r0, [pc, #420]	; (dc5cc <mbedtls_pk_parse_key+0x220>)
   dc426:	e0c7      	b.n	dc5b8 <mbedtls_pk_parse_key+0x20c>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   dc428:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   dc42c:	f040 80c4 	bne.w	dc5b8 <mbedtls_pk_parse_key+0x20c>
   dc430:	e7d0      	b.n	dc3d4 <mbedtls_pk_parse_key+0x28>
#if defined(MBEDTLS_ECP_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
   dc432:	ab04      	add	r3, sp, #16
   dc434:	9302      	str	r3, [sp, #8]
   dc436:	e88d 0180 	stmia.w	sp, {r7, r8}
   dc43a:	4623      	mov	r3, r4
   dc43c:	4a64      	ldr	r2, [pc, #400]	; (dc5d0 <mbedtls_pk_parse_key+0x224>)
   dc43e:	4965      	ldr	r1, [pc, #404]	; (dc5d4 <mbedtls_pk_parse_key+0x228>)
   dc440:	a805      	add	r0, sp, #20
   dc442:	f7fe fd89 	bl	daf58 <mbedtls_pem_read_buffer>
                               "-----BEGIN EC PRIVATE KEY-----",
                               "-----END EC PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );
    if( ret == 0 )
   dc446:	b168      	cbz	r0, dc464 <mbedtls_pk_parse_key+0xb8>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
   dc448:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
   dc44c:	d0e5      	beq.n	dc41a <mbedtls_pk_parse_key+0x6e>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
   dc44e:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
   dc452:	d0e7      	beq.n	dc424 <mbedtls_pk_parse_key+0x78>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   dc454:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   dc458:	f040 80ae 	bne.w	dc5b8 <mbedtls_pk_parse_key+0x20c>
        return( ret );
#endif /* MBEDTLS_ECP_C */

    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
   dc45c:	f814 3009 	ldrb.w	r3, [r4, r9]
   dc460:	b9a3      	cbnz	r3, dc48c <mbedtls_pk_parse_key+0xe0>
   dc462:	e017      	b.n	dc494 <mbedtls_pk_parse_key+0xe8>
                               "-----BEGIN EC PRIVATE KEY-----",
                               "-----END EC PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );
    if( ret == 0 )
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
   dc464:	2002      	movs	r0, #2
   dc466:	f7fe fe27 	bl	db0b8 <mbedtls_pk_info_from_type>

        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
   dc46a:	4601      	mov	r1, r0
   dc46c:	4628      	mov	r0, r5
   dc46e:	f7fe fe2f 	bl	db0d0 <mbedtls_pk_setup>
   dc472:	4604      	mov	r4, r0
   dc474:	2800      	cmp	r0, #0
   dc476:	d13f      	bne.n	dc4f8 <mbedtls_pk_parse_key+0x14c>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
   dc478:	9a06      	ldr	r2, [sp, #24]
   dc47a:	9905      	ldr	r1, [sp, #20]
   dc47c:	6868      	ldr	r0, [r5, #4]
   dc47e:	f7ff fd65 	bl	dbf4c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>
   dc482:	e037      	b.n	dc4f4 <mbedtls_pk_parse_key+0x148>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   dc484:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   dc488:	f040 8096 	bne.w	dc5b8 <mbedtls_pk_parse_key+0x20c>
        return( ret );

#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
   dc48c:	f814 3009 	ldrb.w	r3, [r4, r9]
   dc490:	b9ab      	cbnz	r3, dc4be <mbedtls_pk_parse_key+0x112>
   dc492:	e01b      	b.n	dc4cc <mbedtls_pk_parse_key+0x120>

    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
   dc494:	aa04      	add	r2, sp, #16
   dc496:	9202      	str	r2, [sp, #8]
   dc498:	9301      	str	r3, [sp, #4]
   dc49a:	9300      	str	r3, [sp, #0]
   dc49c:	4a4e      	ldr	r2, [pc, #312]	; (dc5d8 <mbedtls_pk_parse_key+0x22c>)
   dc49e:	494f      	ldr	r1, [pc, #316]	; (dc5dc <mbedtls_pk_parse_key+0x230>)
   dc4a0:	4623      	mov	r3, r4
   dc4a2:	a805      	add	r0, sp, #20
   dc4a4:	f7fe fd58 	bl	daf58 <mbedtls_pem_read_buffer>
                               "-----BEGIN PRIVATE KEY-----",
                               "-----END PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
   dc4a8:	2800      	cmp	r0, #0
   dc4aa:	d1eb      	bne.n	dc484 <mbedtls_pk_parse_key+0xd8>
    {
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
   dc4ac:	9a06      	ldr	r2, [sp, #24]
   dc4ae:	9905      	ldr	r1, [sp, #20]
   dc4b0:	4628      	mov	r0, r5
   dc4b2:	f7ff fe11 	bl	dc0d8 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
   dc4b6:	e01d      	b.n	dc4f4 <mbedtls_pk_parse_key+0x148>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   dc4b8:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   dc4bc:	d17c      	bne.n	dc5b8 <mbedtls_pk_parse_key+0x20c>
     */
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    {
        unsigned char *key_copy;

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
   dc4be:	4631      	mov	r1, r6
   dc4c0:	2001      	movs	r0, #1
   dc4c2:	f00b fcab 	bl	e7e1c <calloc>
   dc4c6:	4681      	mov	r9, r0
   dc4c8:	b9f0      	cbnz	r0, dc508 <mbedtls_pk_parse_key+0x15c>
   dc4ca:	e074      	b.n	dc5b6 <mbedtls_pk_parse_key+0x20a>
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
   dc4cc:	aa04      	add	r2, sp, #16
   dc4ce:	9202      	str	r2, [sp, #8]
   dc4d0:	9301      	str	r3, [sp, #4]
   dc4d2:	9300      	str	r3, [sp, #0]
   dc4d4:	4a42      	ldr	r2, [pc, #264]	; (dc5e0 <mbedtls_pk_parse_key+0x234>)
   dc4d6:	4943      	ldr	r1, [pc, #268]	; (dc5e4 <mbedtls_pk_parse_key+0x238>)
   dc4d8:	4623      	mov	r3, r4
   dc4da:	a805      	add	r0, sp, #20
   dc4dc:	f7fe fd3c 	bl	daf58 <mbedtls_pem_read_buffer>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
   dc4e0:	2800      	cmp	r0, #0
   dc4e2:	d1e9      	bne.n	dc4b8 <mbedtls_pk_parse_key+0x10c>
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
   dc4e4:	f8cd 8000 	str.w	r8, [sp]
   dc4e8:	463b      	mov	r3, r7
   dc4ea:	9a06      	ldr	r2, [sp, #24]
   dc4ec:	9905      	ldr	r1, [sp, #20]
   dc4ee:	4628      	mov	r0, r5
   dc4f0:	f7ff fe62 	bl	dc1b8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
   dc4f4:	4604      	mov	r4, r0
   dc4f6:	b110      	cbz	r0, dc4fe <mbedtls_pk_parse_key+0x152>
                                                      pem.buf, pem.buflen,
                                                      pwd, pwdlen ) ) != 0 )
        {
            mbedtls_pk_free( pk );
   dc4f8:	4628      	mov	r0, r5
   dc4fa:	f7fe fdce 	bl	db09a <mbedtls_pk_free>
        }

        mbedtls_pem_free( &pem );
   dc4fe:	a805      	add	r0, sp, #20
   dc500:	f7fe fdb4 	bl	db06c <mbedtls_pem_free>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
   dc504:	4620      	mov	r0, r4
        {
            mbedtls_pk_free( pk );
        }

        mbedtls_pem_free( &pem );
        return( ret );
   dc506:	e057      	b.n	dc5b8 <mbedtls_pk_parse_key+0x20c>
        unsigned char *key_copy;

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );

        memcpy( key_copy, key, keylen );
   dc508:	4632      	mov	r2, r6
   dc50a:	4621      	mov	r1, r4
   dc50c:	f00b fcab 	bl	e7e66 <memcpy>

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
   dc510:	463b      	mov	r3, r7
   dc512:	4632      	mov	r2, r6
   dc514:	4649      	mov	r1, r9
   dc516:	f8cd 8000 	str.w	r8, [sp]
   dc51a:	4628      	mov	r0, r5
   dc51c:	f7ff fe4c 	bl	dc1b8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
                                                pwd, pwdlen );

        mbedtls_platform_zeroize( key_copy, keylen );
   dc520:	4631      	mov	r1, r6
        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );

        memcpy( key_copy, key, keylen );

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
   dc522:	4607      	mov	r7, r0
                                                pwd, pwdlen );

        mbedtls_platform_zeroize( key_copy, keylen );
   dc524:	4648      	mov	r0, r9
   dc526:	f000 f863 	bl	dc5f0 <mbedtls_platform_zeroize>
        mbedtls_free( key_copy );
   dc52a:	4648      	mov	r0, r9
   dc52c:	f009 fb08 	bl	e5b40 <free>
    }

    if( ret == 0 )
   dc530:	b90f      	cbnz	r7, dc536 <mbedtls_pk_parse_key+0x18a>
        return( 0 );
   dc532:	2000      	movs	r0, #0
   dc534:	e040      	b.n	dc5b8 <mbedtls_pk_parse_key+0x20c>

    mbedtls_pk_free( pk );
   dc536:	4628      	mov	r0, r5
   dc538:	f7fe fdaf 	bl	db09a <mbedtls_pk_free>
    mbedtls_pk_init( pk );
   dc53c:	4628      	mov	r0, r5
   dc53e:	f7fe fda8 	bl	db092 <mbedtls_pk_init>

    if( ret == MBEDTLS_ERR_PK_PASSWORD_MISMATCH )
   dc542:	f517 5f6e 	cmn.w	r7, #15232	; 0x3b80
   dc546:	f43f af68 	beq.w	dc41a <mbedtls_pk_parse_key+0x6e>
    {
        return( ret );
    }
#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */

    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
   dc54a:	4632      	mov	r2, r6
   dc54c:	4621      	mov	r1, r4
   dc54e:	4628      	mov	r0, r5
   dc550:	f7ff fdc2 	bl	dc0d8 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
   dc554:	2800      	cmp	r0, #0
   dc556:	d0ec      	beq.n	dc532 <mbedtls_pk_parse_key+0x186>
        return( 0 );

    mbedtls_pk_free( pk );
   dc558:	4628      	mov	r0, r5
   dc55a:	f7fe fd9e 	bl	db09a <mbedtls_pk_free>
    mbedtls_pk_init( pk );
   dc55e:	4628      	mov	r0, r5
   dc560:	f7fe fd97 	bl	db092 <mbedtls_pk_init>

#if defined(MBEDTLS_RSA_C)

    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
   dc564:	2001      	movs	r0, #1
   dc566:	f7fe fda7 	bl	db0b8 <mbedtls_pk_info_from_type>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
   dc56a:	4601      	mov	r1, r0
   dc56c:	4628      	mov	r0, r5
   dc56e:	f7fe fdaf 	bl	db0d0 <mbedtls_pk_setup>
   dc572:	b930      	cbnz	r0, dc582 <mbedtls_pk_parse_key+0x1d6>
        pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), key, keylen ) == 0 )
   dc574:	4632      	mov	r2, r6
   dc576:	4621      	mov	r1, r4
   dc578:	6868      	ldr	r0, [r5, #4]
   dc57a:	f7ff fbc3 	bl	dbd04 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
    mbedtls_pk_init( pk );

#if defined(MBEDTLS_RSA_C)

    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
   dc57e:	2800      	cmp	r0, #0
   dc580:	d0d7      	beq.n	dc532 <mbedtls_pk_parse_key+0x186>
        pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), key, keylen ) == 0 )
    {
        return( 0 );
    }

    mbedtls_pk_free( pk );
   dc582:	4628      	mov	r0, r5
   dc584:	f7fe fd89 	bl	db09a <mbedtls_pk_free>
    mbedtls_pk_init( pk );
   dc588:	4628      	mov	r0, r5
   dc58a:	f7fe fd82 	bl	db092 <mbedtls_pk_init>
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
   dc58e:	2002      	movs	r0, #2
   dc590:	f7fe fd92 	bl	db0b8 <mbedtls_pk_info_from_type>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
   dc594:	4601      	mov	r1, r0
   dc596:	4628      	mov	r0, r5
   dc598:	f7fe fd9a 	bl	db0d0 <mbedtls_pk_setup>
   dc59c:	b930      	cbnz	r0, dc5ac <mbedtls_pk_parse_key+0x200>
        pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
   dc59e:	4632      	mov	r2, r6
   dc5a0:	4621      	mov	r1, r4
   dc5a2:	6868      	ldr	r0, [r5, #4]
   dc5a4:	f7ff fcd2 	bl	dbf4c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>
    mbedtls_pk_init( pk );
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
   dc5a8:	2800      	cmp	r0, #0
   dc5aa:	d0c2      	beq.n	dc532 <mbedtls_pk_parse_key+0x186>
        pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
                               key, keylen ) == 0 )
    {
        return( 0 );
    }
    mbedtls_pk_free( pk );
   dc5ac:	4628      	mov	r0, r5
   dc5ae:	f7fe fd74 	bl	db09a <mbedtls_pk_free>
    mbedtls_pem_context pem;
#endif

    PK_VALIDATE_RET( pk != NULL );
    if( keylen == 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   dc5b2:	480d      	ldr	r0, [pc, #52]	; (dc5e8 <mbedtls_pk_parse_key+0x23c>)
   dc5b4:	e000      	b.n	dc5b8 <mbedtls_pk_parse_key+0x20c>
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    {
        unsigned char *key_copy;

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );
   dc5b6:	480d      	ldr	r0, [pc, #52]	; (dc5ec <mbedtls_pk_parse_key+0x240>)
     * twice, once here and once by the caller, but this is
     * also ok and in line with the mbedtls_pk_free() calls
     * on failed PEM parsing attempts. */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
}
   dc5b8:	b009      	add	sp, #36	; 0x24
   dc5ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc5be:	bf00      	nop
   dc5c0:	000e95cf 	.word	0x000e95cf
   dc5c4:	000e95ed 	.word	0x000e95ed
   dc5c8:	ffffc480 	.word	0xffffc480
   dc5cc:	ffffc400 	.word	0xffffc400
   dc5d0:	000e960d 	.word	0x000e960d
   dc5d4:	000e962a 	.word	0x000e962a
   dc5d8:	000e9649 	.word	0x000e9649
   dc5dc:	000e9663 	.word	0x000e9663
   dc5e0:	000e967f 	.word	0x000e967f
   dc5e4:	000e96a3 	.word	0x000e96a3
   dc5e8:	ffffc300 	.word	0xffffc300
   dc5ec:	ffffc080 	.word	0xffffc080

000dc5f0 <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
   dc5f0:	460a      	mov	r2, r1
   dc5f2:	b119      	cbz	r1, dc5fc <mbedtls_platform_zeroize+0xc>
        memset_func( buf, 0, len );
   dc5f4:	4b02      	ldr	r3, [pc, #8]	; (dc600 <mbedtls_platform_zeroize+0x10>)
   dc5f6:	2100      	movs	r1, #0
   dc5f8:	681b      	ldr	r3, [r3, #0]
   dc5fa:	4718      	bx	r3
   dc5fc:	4770      	bx	lr
   dc5fe:	bf00      	nop
   dc600:	2003b9e8 	.word	0x2003b9e8

000dc604 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
   dc604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc608:	b095      	sub	sp, #84	; 0x54
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
   dc60a:	ae04      	add	r6, sp, #16
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
   dc60c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
   dc60e:	9301      	str	r3, [sp, #4]
   dc610:	4607      	mov	r7, r0
   dc612:	460c      	mov	r4, r1
   dc614:	4691      	mov	r9, r2
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
   dc616:	2100      	movs	r1, #0
   dc618:	2240      	movs	r2, #64	; 0x40
   dc61a:	4630      	mov	r0, r6
    memset( counter, 0, 4 );
   dc61c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
   dc620:	f00b fc47 	bl	e7eb2 <memset>
    memset( counter, 0, 4 );
   dc624:	2300      	movs	r3, #0

    hlen = mbedtls_md_get_size( md_ctx->md_info );
   dc626:	6828      	ldr	r0, [r5, #0]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
   dc628:	f848 3d44 	str.w	r3, [r8, #-68]!

    hlen = mbedtls_md_get_size( md_ctx->md_info );
   dc62c:	f7fe fae8 	bl	dac00 <mbedtls_md_get_size>
   dc630:	4682      	mov	sl, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
   dc632:	b37c      	cbz	r4, dc694 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
   dc634:	4554      	cmp	r4, sl
    {
        use_len = hlen;
        if( dlen < hlen )
            use_len = dlen;

        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
   dc636:	4628      	mov	r0, r5
   dc638:	46a3      	mov	fp, r4
   dc63a:	bf28      	it	cs
   dc63c:	46d3      	movcs	fp, sl
   dc63e:	f7fe f9f5 	bl	daa2c <mbedtls_md_starts>
   dc642:	4603      	mov	r3, r0
   dc644:	bb38      	cbnz	r0, dc696 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
   dc646:	9a01      	ldr	r2, [sp, #4]
   dc648:	4649      	mov	r1, r9
   dc64a:	4628      	mov	r0, r5
   dc64c:	f7fe f9f8 	bl	daa40 <mbedtls_md_update>
   dc650:	4603      	mov	r3, r0
   dc652:	bb00      	cbnz	r0, dc696 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
   dc654:	2204      	movs	r2, #4
   dc656:	4641      	mov	r1, r8
   dc658:	4628      	mov	r0, r5
   dc65a:	f7fe f9f1 	bl	daa40 <mbedtls_md_update>
   dc65e:	4603      	mov	r3, r0
   dc660:	b9c8      	cbnz	r0, dc696 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
   dc662:	4631      	mov	r1, r6
   dc664:	4628      	mov	r0, r5
   dc666:	f7fe f9f5 	bl	daa54 <mbedtls_md_finish>
   dc66a:	4603      	mov	r3, r0
   dc66c:	b998      	cbnz	r0, dc696 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
   dc66e:	463a      	mov	r2, r7
            goto exit;

        for( i = 0; i < use_len; ++i )
   dc670:	455b      	cmp	r3, fp
   dc672:	d007      	beq.n	dc684 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x80>
            *p++ ^= mask[i];
   dc674:	f812 0b01 	ldrb.w	r0, [r2], #1
   dc678:	5cf1      	ldrb	r1, [r6, r3]
   dc67a:	4041      	eors	r1, r0
   dc67c:	f802 1c01 	strb.w	r1, [r2, #-1]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
   dc680:	3301      	adds	r3, #1
   dc682:	e7f5      	b.n	dc670 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x6c>
            *p++ ^= mask[i];

        counter[3]++;
   dc684:	f89d 200f 	ldrb.w	r2, [sp, #15]
   dc688:	3201      	adds	r2, #1
   dc68a:	441f      	add	r7, r3
   dc68c:	f88d 200f 	strb.w	r2, [sp, #15]

        dlen -= use_len;
   dc690:	1ae4      	subs	r4, r4, r3
    hlen = mbedtls_md_get_size( md_ctx->md_info );

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
   dc692:	e7ce      	b.n	dc632 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x2e>
   dc694:	4623      	mov	r3, r4

        dlen -= use_len;
    }

exit:
    mbedtls_platform_zeroize( mask, sizeof( mask ) );
   dc696:	4630      	mov	r0, r6
   dc698:	2140      	movs	r1, #64	; 0x40
   dc69a:	9301      	str	r3, [sp, #4]
   dc69c:	f7ff ffa8 	bl	dc5f0 <mbedtls_platform_zeroize>

    return( ret );
}
   dc6a0:	9b01      	ldr	r3, [sp, #4]
   dc6a2:	4618      	mov	r0, r3
   dc6a4:	b015      	add	sp, #84	; 0x54
   dc6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000dc6ac <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
   dc6ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   dc6b0:	461d      	mov	r5, r3
    size_t oid_size  = 0;
   dc6b2:	2300      	movs	r3, #0
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
   dc6b4:	460e      	mov	r6, r1
   dc6b6:	4691      	mov	r9, r2
   dc6b8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    size_t oid_size  = 0;
   dc6bc:	9300      	str	r3, [sp, #0]
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
   dc6be:	9301      	str	r3, [sp, #4]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
   dc6c0:	4604      	mov	r4, r0
   dc6c2:	b328      	cbz	r0, dc710 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x64>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
   dc6c4:	f7fe f964 	bl	da990 <mbedtls_md_info_from_type>
        if( md_info == NULL )
   dc6c8:	4606      	mov	r6, r0
   dc6ca:	2800      	cmp	r0, #0
   dc6cc:	d063      	beq.n	dc796 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
   dc6ce:	4620      	mov	r0, r4
   dc6d0:	466a      	mov	r2, sp
   dc6d2:	a901      	add	r1, sp, #4
   dc6d4:	f7fe fbf0 	bl	daeb8 <mbedtls_oid_get_oid_by_md>
   dc6d8:	4604      	mov	r4, r0
   dc6da:	2800      	cmp	r0, #0
   dc6dc:	d15b      	bne.n	dc796 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
   dc6de:	4630      	mov	r0, r6
   dc6e0:	f7fe fa8e 	bl	dac00 <mbedtls_md_get_size>

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
   dc6e4:	9f00      	ldr	r7, [sp, #0]
   dc6e6:	4407      	add	r7, r0
   dc6e8:	f107 0308 	add.w	r3, r7, #8
   dc6ec:	2b7f      	cmp	r3, #127	; 0x7f
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
   dc6ee:	4606      	mov	r6, r0

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
   dc6f0:	d851      	bhi.n	dc796 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
   dc6f2:	f110 020a 	adds.w	r2, r0, #10
   dc6f6:	d24e      	bcs.n	dc796 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            10 + hashlen            <  hashlen      ||
            10 + hashlen + oid_size <  10 + hashlen )
   dc6f8:	f107 030a 	add.w	r3, r7, #10
        hashlen = mbedtls_md_get_size( md_info );

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
            10 + hashlen            <  hashlen      ||
   dc6fc:	429a      	cmp	r2, r3
   dc6fe:	d84a      	bhi.n	dc796 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
         *   (Insist on 1-byte length encodings to protect against variants of
         *    Bleichenbacher's forgery attack against lax PKCS#1v1.5 verification)
         * - Need hashlen bytes for hash
         * - Need oid_size bytes for hash alg OID.
         */
        if( nb_pad < 10 + hashlen + oid_size )
   dc700:	429d      	cmp	r5, r3
   dc702:	d348      	bcc.n	dc796 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
   dc704:	f1a5 030a 	sub.w	r3, r5, #10
   dc708:	1bdf      	subs	r7, r3, r7
        nb_pad -= hashlen;
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
   dc70a:	2f0a      	cmp	r7, #10
   dc70c:	d806      	bhi.n	dc71c <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x70>
   dc70e:	e042      	b.n	dc796 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
    }
    else
    {
        if( nb_pad < hashlen )
   dc710:	428d      	cmp	r5, r1
   dc712:	d340      	bcc.n	dc796 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        nb_pad -= hashlen;
   dc714:	1a6d      	subs	r5, r5, r1
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
   dc716:	2d0a      	cmp	r5, #10
   dc718:	d93d      	bls.n	dc796 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
   dc71a:	e03e      	b.n	dc79a <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xee>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
   dc71c:	46c2      	mov	sl, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
   dc71e:	3f03      	subs	r7, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
   dc720:	f80a 4b02 	strb.w	r4, [sl], #2
    *p++ = MBEDTLS_RSA_SIGN;
   dc724:	2301      	movs	r3, #1
    memset( p, 0xFF, nb_pad );
   dc726:	463a      	mov	r2, r7
    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
   dc728:	f888 3001 	strb.w	r3, [r8, #1]
    memset( p, 0xFF, nb_pad );
   dc72c:	21ff      	movs	r1, #255	; 0xff
   dc72e:	4650      	mov	r0, sl
   dc730:	f00b fbbf 	bl	e7eb2 <memset>
    p += nb_pad;
   dc734:	eb0a 0307 	add.w	r3, sl, r7
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
   dc738:	2130      	movs	r1, #48	; 0x30
    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
    memset( p, 0xFF, nb_pad );
    p += nb_pad;
    *p++ = 0;
   dc73a:	f80a 4007 	strb.w	r4, [sl, r7]
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
   dc73e:	7059      	strb	r1, [r3, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
   dc740:	9f00      	ldr	r7, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
   dc742:	70d9      	strb	r1, [r3, #3]
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
   dc744:	f107 0208 	add.w	r2, r7, #8
   dc748:	4432      	add	r2, r6
   dc74a:	709a      	strb	r2, [r3, #2]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
   dc74c:	b2fa      	uxtb	r2, r7
   dc74e:	1d11      	adds	r1, r2, #4
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
   dc750:	f103 0a07 	add.w	sl, r3, #7
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
   dc754:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
   dc756:	2106      	movs	r1, #6
   dc758:	7159      	strb	r1, [r3, #5]
    *p++ = (unsigned char) oid_size;
   dc75a:	719a      	strb	r2, [r3, #6]
    memcpy( p, oid, oid_size );
   dc75c:	9901      	ldr	r1, [sp, #4]
   dc75e:	463a      	mov	r2, r7
   dc760:	4650      	mov	r0, sl
   dc762:	f00b fb80 	bl	e7e66 <memcpy>
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
   dc766:	2205      	movs	r2, #5
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
   dc768:	eb0a 0307 	add.w	r3, sl, r7
    *p++ = MBEDTLS_ASN1_NULL;
   dc76c:	f80a 2007 	strb.w	r2, [sl, r7]
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
   dc770:	2204      	movs	r2, #4
    *p++ = (unsigned char) hashlen;
   dc772:	189f      	adds	r7, r3, r2
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
   dc774:	709a      	strb	r2, [r3, #2]
    *p++ = (unsigned char) hashlen;
   dc776:	70de      	strb	r6, [r3, #3]
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
   dc778:	705c      	strb	r4, [r3, #1]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
    *p++ = (unsigned char) hashlen;
    memcpy( p, hash, hashlen );
   dc77a:	4632      	mov	r2, r6
   dc77c:	4649      	mov	r1, r9
   dc77e:	4638      	mov	r0, r7
   dc780:	f00b fb71 	bl	e7e66 <memcpy>
    p += hashlen;

    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
   dc784:	443e      	add	r6, r7
   dc786:	eb08 0305 	add.w	r3, r8, r5
   dc78a:	429e      	cmp	r6, r3
   dc78c:	d019      	beq.n	dc7c2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>
    {
        mbedtls_platform_zeroize( dst, dst_len );
   dc78e:	4629      	mov	r1, r5
   dc790:	4640      	mov	r0, r8
   dc792:	f7ff ff2d 	bl	dc5f0 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dc796:	4c0d      	ldr	r4, [pc, #52]	; (dc7cc <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x120>)
   dc798:	e013      	b.n	dc7c2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
   dc79a:	4643      	mov	r3, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
   dc79c:	1eef      	subs	r7, r5, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
   dc79e:	f803 0b02 	strb.w	r0, [r3], #2
    *p++ = MBEDTLS_RSA_SIGN;
   dc7a2:	2201      	movs	r2, #1
   dc7a4:	f888 2001 	strb.w	r2, [r8, #1]
    memset( p, 0xFF, nb_pad );
   dc7a8:	21ff      	movs	r1, #255	; 0xff
   dc7aa:	463a      	mov	r2, r7
   dc7ac:	4618      	mov	r0, r3
   dc7ae:	f00b fb80 	bl	e7eb2 <memset>
   dc7b2:	4603      	mov	r3, r0
    p += nb_pad;
    *p++ = 0;
   dc7b4:	55c4      	strb	r4, [r0, r7]

    /* Are we signing raw data? */
    if( md_alg == MBEDTLS_MD_NONE )
    {
        memcpy( p, hash, hashlen );
   dc7b6:	1ea8      	subs	r0, r5, #2
   dc7b8:	4632      	mov	r2, r6
   dc7ba:	4649      	mov	r1, r9
   dc7bc:	4418      	add	r0, r3
   dc7be:	f00b fb52 	bl	e7e66 <memcpy>
        mbedtls_platform_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }

    return( 0 );
}
   dc7c2:	4620      	mov	r0, r4
   dc7c4:	b002      	add	sp, #8
   dc7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc7ca:	bf00      	nop
   dc7cc:	ffffbf80 	.word	0xffffbf80

000dc7d0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
   dc7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
   dc7d2:	f100 0508 	add.w	r5, r0, #8
   dc7d6:	6847      	ldr	r7, [r0, #4]
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
   dc7d8:	4604      	mov	r4, r0
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
   dc7da:	4628      	mov	r0, r5
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
   dc7dc:	460e      	mov	r6, r1
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
   dc7de:	f7f9 ff7b 	bl	d66d8 <mbedtls_mpi_size>
   dc7e2:	4287      	cmp	r7, r0
   dc7e4:	d117      	bne.n	dc816 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
   dc7e6:	6863      	ldr	r3, [r4, #4]
   dc7e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   dc7ec:	d813      	bhi.n	dc816 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
   dc7ee:	2100      	movs	r1, #0
   dc7f0:	4628      	mov	r0, r5
   dc7f2:	f7fa f956 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   dc7f6:	2800      	cmp	r0, #0
   dc7f8:	dd0d      	ble.n	dc816 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
   dc7fa:	2100      	movs	r1, #0
   dc7fc:	4628      	mov	r0, r5
   dc7fe:	f7f9 ff21 	bl	d6644 <mbedtls_mpi_get_bit>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
   dc802:	b140      	cbz	r0, dc816 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
   dc804:	b1ee      	cbz	r6, dc842 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x72>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
   dc806:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   dc80a:	2100      	movs	r1, #0
   dc80c:	4628      	mov	r0, r5
   dc80e:	f7fa f948 	bl	d6aa2 <mbedtls_mpi_cmp_int>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
   dc812:	2800      	cmp	r0, #0
   dc814:	dc01      	bgt.n	dc81a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x4a>
    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dc816:	481a      	ldr	r0, [pc, #104]	; (dc880 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xb0>)
   dc818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
   dc81a:	2100      	movs	r1, #0
   dc81c:	4628      	mov	r0, r5
   dc81e:	f7f9 ff11 	bl	d6644 <mbedtls_mpi_get_bit>
#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
   dc822:	2800      	cmp	r0, #0
   dc824:	d0f7      	beq.n	dc816 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
   dc826:	f104 0538 	add.w	r5, r4, #56	; 0x38
   dc82a:	2100      	movs	r1, #0
   dc82c:	4628      	mov	r0, r5
   dc82e:	f7fa f938 	bl	d6aa2 <mbedtls_mpi_cmp_int>
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
   dc832:	2800      	cmp	r0, #0
   dc834:	ddef      	ble.n	dc816 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
   dc836:	2100      	movs	r1, #0
   dc838:	4628      	mov	r0, r5
   dc83a:	f7f9 ff03 	bl	d6644 <mbedtls_mpi_get_bit>
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
   dc83e:	2800      	cmp	r0, #0
   dc840:	d0e9      	beq.n	dc816 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
   dc842:	2100      	movs	r1, #0
   dc844:	f104 0014 	add.w	r0, r4, #20
   dc848:	f7fa f92b 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   dc84c:	2800      	cmp	r0, #0
   dc84e:	dde2      	ble.n	dc816 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
   dc850:	b1a6      	cbz	r6, dc87c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xac>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
   dc852:	2100      	movs	r1, #0
   dc854:	f104 0044 	add.w	r0, r4, #68	; 0x44
   dc858:	f7fa f923 	bl	d6aa2 <mbedtls_mpi_cmp_int>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
   dc85c:	2800      	cmp	r0, #0
   dc85e:	ddda      	ble.n	dc816 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
   dc860:	2100      	movs	r1, #0
   dc862:	f104 0050 	add.w	r0, r4, #80	; 0x50
   dc866:	f7fa f91c 	bl	d6aa2 <mbedtls_mpi_cmp_int>
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
   dc86a:	2800      	cmp	r0, #0
   dc86c:	ddd3      	ble.n	dc816 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
   dc86e:	2100      	movs	r1, #0
   dc870:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   dc874:	f7fa f915 	bl	d6aa2 <mbedtls_mpi_cmp_int>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
   dc878:	2800      	cmp	r0, #0
   dc87a:	ddcc      	ble.n	dc816 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
   dc87c:	2000      	movs	r0, #0
   dc87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dc880:	ffffbf80 	.word	0xffffbf80

000dc884 <mbedtls_rsa_import_raw>:
                            unsigned char const *N, size_t N_len,
                            unsigned char const *P, size_t P_len,
                            unsigned char const *Q, size_t Q_len,
                            unsigned char const *D, size_t D_len,
                            unsigned char const *E, size_t E_len )
{
   dc884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc888:	9f09      	ldr	r7, [sp, #36]	; 0x24
   dc88a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   dc88c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   dc88e:	4604      	mov	r4, r0
   dc890:	4698      	mov	r8, r3
    int ret = 0;
    RSA_VALIDATE_RET( ctx != NULL );

    if( N != NULL )
   dc892:	b149      	cbz	r1, dc8a8 <mbedtls_rsa_import_raw+0x24>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
   dc894:	f100 0908 	add.w	r9, r0, #8
   dc898:	4648      	mov	r0, r9
   dc89a:	f7f9 ff23 	bl	d66e4 <mbedtls_mpi_read_binary>
   dc89e:	bb50      	cbnz	r0, dc8f6 <mbedtls_rsa_import_raw+0x72>
        ctx->len = mbedtls_mpi_size( &ctx->N );
   dc8a0:	4648      	mov	r0, r9
   dc8a2:	f7f9 ff19 	bl	d66d8 <mbedtls_mpi_size>
   dc8a6:	6060      	str	r0, [r4, #4]
    }

    if( P != NULL )
   dc8a8:	f1b8 0f00 	cmp.w	r8, #0
   dc8ac:	d101      	bne.n	dc8b2 <mbedtls_rsa_import_raw+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );

    if( Q != NULL )
   dc8ae:	b947      	cbnz	r7, dc8c2 <mbedtls_rsa_import_raw+0x3e>
   dc8b0:	e00e      	b.n	dc8d0 <mbedtls_rsa_import_raw+0x4c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
        ctx->len = mbedtls_mpi_size( &ctx->N );
    }

    if( P != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
   dc8b2:	9a08      	ldr	r2, [sp, #32]
   dc8b4:	4641      	mov	r1, r8
   dc8b6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   dc8ba:	f7f9 ff13 	bl	d66e4 <mbedtls_mpi_read_binary>
   dc8be:	b9d0      	cbnz	r0, dc8f6 <mbedtls_rsa_import_raw+0x72>
   dc8c0:	e7f5      	b.n	dc8ae <mbedtls_rsa_import_raw+0x2a>

    if( Q != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
   dc8c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dc8c4:	4639      	mov	r1, r7
   dc8c6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   dc8ca:	f7f9 ff0b 	bl	d66e4 <mbedtls_mpi_read_binary>
   dc8ce:	b990      	cbnz	r0, dc8f6 <mbedtls_rsa_import_raw+0x72>

    if( D != NULL )
   dc8d0:	b136      	cbz	r6, dc8e0 <mbedtls_rsa_import_raw+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
   dc8d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   dc8d4:	4631      	mov	r1, r6
   dc8d6:	f104 0020 	add.w	r0, r4, #32
   dc8da:	f7f9 ff03 	bl	d66e4 <mbedtls_mpi_read_binary>
   dc8de:	b950      	cbnz	r0, dc8f6 <mbedtls_rsa_import_raw+0x72>

    if( E != NULL )
   dc8e0:	b135      	cbz	r5, dc8f0 <mbedtls_rsa_import_raw+0x6c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
   dc8e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   dc8e4:	4629      	mov	r1, r5
   dc8e6:	f104 0014 	add.w	r0, r4, #20
   dc8ea:	f7f9 fefb 	bl	d66e4 <mbedtls_mpi_read_binary>

cleanup:

    if( ret != 0 )
   dc8ee:	b910      	cbnz	r0, dc8f6 <mbedtls_rsa_import_raw+0x72>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    return( 0 );
   dc8f0:	2000      	movs	r0, #0
   dc8f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );

cleanup:

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
   dc8f6:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080

    return( 0 );
}
   dc8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000dc900 <mbedtls_rsa_complete>:

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
   dc900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int have_N, have_P, have_Q, have_D, have_E;
    int n_missing, pq_missing, d_missing, is_pub, is_priv;

    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
   dc904:	f100 0b08 	add.w	fp, r0, #8

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
   dc908:	b087      	sub	sp, #28
   dc90a:	4607      	mov	r7, r0
    int have_N, have_P, have_Q, have_D, have_E;
    int n_missing, pq_missing, d_missing, is_pub, is_priv;

    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
   dc90c:	2100      	movs	r1, #0
   dc90e:	4658      	mov	r0, fp
   dc910:	f7fa f8c7 	bl	d6aa2 <mbedtls_mpi_cmp_int>
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
   dc914:	f107 092c 	add.w	r9, r7, #44	; 0x2c
   dc918:	2100      	movs	r1, #0
    int have_N, have_P, have_Q, have_D, have_E;
    int n_missing, pq_missing, d_missing, is_pub, is_priv;

    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
   dc91a:	4680      	mov	r8, r0
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
   dc91c:	4648      	mov	r0, r9
   dc91e:	f7fa f8c0 	bl	d6aa2 <mbedtls_mpi_cmp_int>
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
   dc922:	f107 0a38 	add.w	sl, r7, #56	; 0x38
    int n_missing, pq_missing, d_missing, is_pub, is_priv;

    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
   dc926:	9005      	str	r0, [sp, #20]
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
   dc928:	2100      	movs	r1, #0
   dc92a:	4650      	mov	r0, sl
   dc92c:	f7fa f8b9 	bl	d6aa2 <mbedtls_mpi_cmp_int>
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
   dc930:	f107 0320 	add.w	r3, r7, #32
   dc934:	2100      	movs	r1, #0

    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
   dc936:	4605      	mov	r5, r0
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
   dc938:	4618      	mov	r0, r3
   dc93a:	9302      	str	r3, [sp, #8]
   dc93c:	f7fa f8b1 	bl	d6aa2 <mbedtls_mpi_cmp_int>
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
   dc940:	f107 0314 	add.w	r3, r7, #20
    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
   dc944:	9004      	str	r0, [sp, #16]
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
   dc946:	2100      	movs	r1, #0
   dc948:	4618      	mov	r0, r3
   dc94a:	9303      	str	r3, [sp, #12]
   dc94c:	f7fa f8a9 	bl	d6aa2 <mbedtls_mpi_cmp_int>
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
   dc950:	9b05      	ldr	r3, [sp, #20]
   dc952:	9a04      	ldr	r2, [sp, #16]
   dc954:	b14b      	cbz	r3, dc96a <mbedtls_rsa_complete+0x6a>
   dc956:	b125      	cbz	r5, dc962 <mbedtls_rsa_complete+0x62>
   dc958:	b12a      	cbz	r2, dc966 <mbedtls_rsa_complete+0x66>
   dc95a:	1c06      	adds	r6, r0, #0
   dc95c:	bf18      	it	ne
   dc95e:	2601      	movne	r6, #1
   dc960:	e013      	b.n	dc98a <mbedtls_rsa_complete+0x8a>
   dc962:	462e      	mov	r6, r5
   dc964:	e011      	b.n	dc98a <mbedtls_rsa_complete+0x8a>
   dc966:	4616      	mov	r6, r2
   dc968:	e00f      	b.n	dc98a <mbedtls_rsa_complete+0x8a>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
   dc96a:	f1b8 0f00 	cmp.w	r8, #0
   dc96e:	d103      	bne.n	dc978 <mbedtls_rsa_complete+0x78>
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
   dc970:	4644      	mov	r4, r8
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
   dc972:	4646      	mov	r6, r8
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
   dc974:	2200      	movs	r2, #0
   dc976:	e024      	b.n	dc9c2 <mbedtls_rsa_complete+0xc2>
     * (2) D and potentially N missing.
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
   dc978:	b9cd      	cbnz	r5, dc9ae <mbedtls_rsa_complete+0xae>
   dc97a:	b11a      	cbz	r2, dc984 <mbedtls_rsa_complete+0x84>
   dc97c:	b9f0      	cbnz	r0, dc9bc <mbedtls_rsa_complete+0xbc>
   dc97e:	4606      	mov	r6, r0
   dc980:	4604      	mov	r4, r0
   dc982:	e00e      	b.n	dc9a2 <mbedtls_rsa_complete+0xa2>
   dc984:	462e      	mov	r6, r5
   dc986:	462c      	mov	r4, r5
   dc988:	e00d      	b.n	dc9a6 <mbedtls_rsa_complete+0xa6>
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
   dc98a:	b1ad      	cbz	r5, dc9b8 <mbedtls_rsa_complete+0xb8>
   dc98c:	b992      	cbnz	r2, dc9b4 <mbedtls_rsa_complete+0xb4>
   dc98e:	1c04      	adds	r4, r0, #0
   dc990:	bf18      	it	ne
   dc992:	2401      	movne	r4, #1
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
   dc994:	f1b8 0f00 	cmp.w	r8, #0
   dc998:	d0ec      	beq.n	dc974 <mbedtls_rsa_complete+0x74>
   dc99a:	2b00      	cmp	r3, #0
   dc99c:	d1ea      	bne.n	dc974 <mbedtls_rsa_complete+0x74>
   dc99e:	2d00      	cmp	r5, #0
   dc9a0:	d1e8      	bne.n	dc974 <mbedtls_rsa_complete+0x74>
   dc9a2:	2a00      	cmp	r2, #0
   dc9a4:	d1e6      	bne.n	dc974 <mbedtls_rsa_complete+0x74>
   dc9a6:	2800      	cmp	r0, #0
   dc9a8:	d0e4      	beq.n	dc974 <mbedtls_rsa_complete+0x74>
   dc9aa:	2201      	movs	r2, #1
   dc9ac:	e009      	b.n	dc9c2 <mbedtls_rsa_complete+0xc2>
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
   dc9ae:	461c      	mov	r4, r3
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
   dc9b0:	461e      	mov	r6, r3
   dc9b2:	e7df      	b.n	dc974 <mbedtls_rsa_complete+0x74>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
   dc9b4:	2400      	movs	r4, #0
   dc9b6:	e7ed      	b.n	dc994 <mbedtls_rsa_complete+0x94>
   dc9b8:	462c      	mov	r4, r5
   dc9ba:	e7db      	b.n	dc974 <mbedtls_rsa_complete+0x74>
     * (2) D and potentially N missing.
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
   dc9bc:	2601      	movs	r6, #1
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
   dc9be:	462c      	mov	r4, r5
   dc9c0:	e002      	b.n	dc9c8 <mbedtls_rsa_complete+0xc8>
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    is_priv = n_missing || pq_missing || d_missing;
   dc9c2:	2e00      	cmp	r6, #0
   dc9c4:	d03d      	beq.n	dca42 <mbedtls_rsa_complete+0x142>
   dc9c6:	2600      	movs	r6, #0
   dc9c8:	9404      	str	r4, [sp, #16]
   dc9ca:	2401      	movs	r4, #1

    /*
     * Step 1: Deduce N if P, Q are provided.
     */

    if( !have_N && have_P && have_Q )
   dc9cc:	f1b8 0f00 	cmp.w	r8, #0
   dc9d0:	d10b      	bne.n	dc9ea <mbedtls_rsa_complete+0xea>
   dc9d2:	b153      	cbz	r3, dc9ea <mbedtls_rsa_complete+0xea>
   dc9d4:	b14d      	cbz	r5, dc9ea <mbedtls_rsa_complete+0xea>
    {
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
   dc9d6:	4652      	mov	r2, sl
   dc9d8:	4649      	mov	r1, r9
   dc9da:	4658      	mov	r0, fp
   dc9dc:	f7fa f980 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   dc9e0:	bb28      	cbnz	r0, dca2e <mbedtls_rsa_complete+0x12e>
                                         &ctx->Q ) ) != 0 )
        {
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
        }

        ctx->len = mbedtls_mpi_size( &ctx->N );
   dc9e2:	4658      	mov	r0, fp
   dc9e4:	f7f9 fe78 	bl	d66d8 <mbedtls_mpi_size>
   dc9e8:	6078      	str	r0, [r7, #4]

    /*
     * Step 2: Deduce and verify all remaining core parameters.
     */

    if( pq_missing )
   dc9ea:	b146      	cbz	r6, dc9fe <mbedtls_rsa_complete+0xfe>
    {
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
                                         &ctx->P, &ctx->Q );
   dc9ec:	f8cd a000 	str.w	sl, [sp]
   dc9f0:	464b      	mov	r3, r9
   dc9f2:	9a02      	ldr	r2, [sp, #8]
   dc9f4:	9903      	ldr	r1, [sp, #12]
   dc9f6:	4658      	mov	r0, fp
   dc9f8:	f001 f898 	bl	ddb2c <mbedtls_rsa_deduce_primes>
   dc9fc:	e007      	b.n	dca0e <mbedtls_rsa_complete+0x10e>
        if( ret != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    }
    else if( d_missing )
   dc9fe:	9b04      	ldr	r3, [sp, #16]
   dca00:	b133      	cbz	r3, dca10 <mbedtls_rsa_complete+0x110>
    {
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
   dca02:	9b02      	ldr	r3, [sp, #8]
   dca04:	9a03      	ldr	r2, [sp, #12]
   dca06:	4651      	mov	r1, sl
   dca08:	4648      	mov	r0, r9
   dca0a:	f001 f98b 	bl	ddd24 <mbedtls_rsa_deduce_private_exponent>
   dca0e:	b970      	cbnz	r0, dca2e <mbedtls_rsa_complete+0x12e>
     * Step 3: Deduce all additional parameters specific
     *         to our current RSA implementation.
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
   dca10:	b184      	cbz	r4, dca34 <mbedtls_rsa_complete+0x134>
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
   dca12:	f107 035c 	add.w	r3, r7, #92	; 0x5c
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
   dca16:	9301      	str	r3, [sp, #4]
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
   dca18:	f107 0350 	add.w	r3, r7, #80	; 0x50
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
   dca1c:	9300      	str	r3, [sp, #0]
   dca1e:	9a02      	ldr	r2, [sp, #8]
   dca20:	f107 0344 	add.w	r3, r7, #68	; 0x44
   dca24:	4651      	mov	r1, sl
   dca26:	4648      	mov	r0, r9
   dca28:	f001 fb20 	bl	de06c <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
   dca2c:	b110      	cbz	r0, dca34 <mbedtls_rsa_complete+0x134>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
   dca2e:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
   dca32:	e00c      	b.n	dca4e <mbedtls_rsa_complete+0x14e>

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
   dca34:	4621      	mov	r1, r4
   dca36:	4638      	mov	r0, r7
}
   dca38:	b007      	add	sp, #28
   dca3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
   dca3e:	f7ff bec7 	b.w	dc7d0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    is_priv = n_missing || pq_missing || d_missing;

    if( !is_priv && !is_pub )
   dca42:	b90c      	cbnz	r4, dca48 <mbedtls_rsa_complete+0x148>
   dca44:	b112      	cbz	r2, dca4c <mbedtls_rsa_complete+0x14c>
   dca46:	4626      	mov	r6, r4
   dca48:	9404      	str	r4, [sp, #16]
   dca4a:	e7bf      	b.n	dc9cc <mbedtls_rsa_complete+0xcc>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dca4c:	4801      	ldr	r0, [pc, #4]	; (dca54 <mbedtls_rsa_complete+0x154>)
    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
}
   dca4e:	b007      	add	sp, #28
   dca50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dca54:	ffffbf80 	.word	0xffffbf80

000dca58 <mbedtls_rsa_init>:
 * Initialize an RSA context
 */
void mbedtls_rsa_init( mbedtls_rsa_context *ctx,
               int padding,
               int hash_id )
{
   dca58:	b570      	push	{r4, r5, r6, lr}
   dca5a:	4604      	mov	r4, r0
   dca5c:	460e      	mov	r6, r1
   dca5e:	4615      	mov	r5, r2
    RSA_VALIDATE( ctx != NULL );
    RSA_VALIDATE( padding == MBEDTLS_RSA_PKCS_V15 ||
                  padding == MBEDTLS_RSA_PKCS_V21 );

    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
   dca60:	2100      	movs	r1, #0
   dca62:	22ac      	movs	r2, #172	; 0xac
   dca64:	f00b fa25 	bl	e7eb2 <memset>
{
    RSA_VALIDATE( ctx != NULL );
    RSA_VALIDATE( padding == MBEDTLS_RSA_PKCS_V15 ||
                  padding == MBEDTLS_RSA_PKCS_V21 );

    ctx->padding = padding;
   dca68:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    ctx->hash_id = hash_id;
   dca6c:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
   dca70:	bd70      	pop	{r4, r5, r6, pc}

000dca72 <mbedtls_rsa_get_len>:
 */

size_t mbedtls_rsa_get_len( const mbedtls_rsa_context *ctx )
{
    return( ctx->len );
}
   dca72:	6840      	ldr	r0, [r0, #4]
   dca74:	4770      	bx	lr
	...

000dca78 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
   dca78:	b570      	push	{r4, r5, r6, lr}
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
   dca7a:	2100      	movs	r1, #0

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
   dca7c:	4604      	mov	r4, r0
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
   dca7e:	f7ff fea7 	bl	dc7d0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
   dca82:	4605      	mov	r5, r0
   dca84:	b9b8      	cbnz	r0, dcab6 <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
   dca86:	f104 0608 	add.w	r6, r4, #8
   dca8a:	4630      	mov	r0, r6
   dca8c:	f7f9 fe04 	bl	d6698 <mbedtls_mpi_bitlen>
   dca90:	287f      	cmp	r0, #127	; 0x7f
   dca92:	d910      	bls.n	dcab6 <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
   dca94:	3414      	adds	r4, #20
   dca96:	4629      	mov	r1, r5
   dca98:	4620      	mov	r0, r4
   dca9a:	f7f9 fdd3 	bl	d6644 <mbedtls_mpi_get_bit>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
   dca9e:	b150      	cbz	r0, dcab6 <mbedtls_rsa_check_pubkey+0x3e>
   dcaa0:	4620      	mov	r0, r4
   dcaa2:	f7f9 fdf9 	bl	d6698 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
   dcaa6:	2801      	cmp	r0, #1
   dcaa8:	d905      	bls.n	dcab6 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
   dcaaa:	4631      	mov	r1, r6
   dcaac:	4620      	mov	r0, r4
   dcaae:	f7f9 ffb3 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
   dcab2:	2800      	cmp	r0, #0
   dcab4:	db00      	blt.n	dcab8 <mbedtls_rsa_check_pubkey+0x40>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   dcab6:	4d01      	ldr	r5, [pc, #4]	; (dcabc <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
   dcab8:	4628      	mov	r0, r5
   dcaba:	bd70      	pop	{r4, r5, r6, pc}
   dcabc:	ffffbe00 	.word	0xffffbe00

000dcac0 <mbedtls_rsa_check_privkey>:

/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
   dcac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dcac2:	b085      	sub	sp, #20
   dcac4:	4604      	mov	r4, r0
    RSA_VALIDATE_RET( ctx != NULL );

    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
   dcac6:	f7ff ffd7 	bl	dca78 <mbedtls_rsa_check_pubkey>
   dcaca:	bb28      	cbnz	r0, dcb18 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
   dcacc:	2101      	movs	r1, #1
   dcace:	4620      	mov	r0, r4
   dcad0:	f7ff fe7e 	bl	dc7d0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    RSA_VALIDATE_RET( ctx != NULL );

    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
   dcad4:	bb00      	cbnz	r0, dcb18 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
   dcad6:	f104 0314 	add.w	r3, r4, #20
   dcada:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   dcade:	f104 0638 	add.w	r6, r4, #56	; 0x38
   dcae2:	f104 0720 	add.w	r7, r4, #32
   dcae6:	9002      	str	r0, [sp, #8]
   dcae8:	9001      	str	r0, [sp, #4]
   dcaea:	9300      	str	r3, [sp, #0]
   dcaec:	4632      	mov	r2, r6
   dcaee:	463b      	mov	r3, r7
   dcaf0:	4629      	mov	r1, r5
   dcaf2:	f104 0008 	add.w	r0, r4, #8
   dcaf6:	f001 f9f3 	bl	ddee0 <mbedtls_rsa_validate_params>
   dcafa:	b968      	cbnz	r0, dcb18 <mbedtls_rsa_check_privkey+0x58>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
   dcafc:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   dcb00:	9301      	str	r3, [sp, #4]
   dcb02:	f104 0350 	add.w	r3, r4, #80	; 0x50
   dcb06:	9300      	str	r3, [sp, #0]
   dcb08:	463a      	mov	r2, r7
   dcb0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   dcb0e:	4631      	mov	r1, r6
   dcb10:	4628      	mov	r0, r5
   dcb12:	f001 f965 	bl	ddde0 <mbedtls_rsa_validate_crt>
   dcb16:	b100      	cbz	r0, dcb1a <mbedtls_rsa_check_privkey+0x5a>
    RSA_VALIDATE_RET( ctx != NULL );

    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   dcb18:	4801      	ldr	r0, [pc, #4]	; (dcb20 <mbedtls_rsa_check_privkey+0x60>)
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }
#endif

    return( 0 );
}
   dcb1a:	b005      	add	sp, #20
   dcb1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dcb1e:	bf00      	nop
   dcb20:	ffffbe00 	.word	0xffffbe00

000dcb24 <mbedtls_rsa_check_pub_priv>:
/*
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
   dcb24:	b538      	push	{r3, r4, r5, lr}
   dcb26:	4605      	mov	r5, r0
   dcb28:	460c      	mov	r4, r1
    RSA_VALIDATE_RET( pub != NULL );
    RSA_VALIDATE_RET( prv != NULL );

    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
   dcb2a:	f7ff ffa5 	bl	dca78 <mbedtls_rsa_check_pubkey>
   dcb2e:	b950      	cbnz	r0, dcb46 <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
   dcb30:	4620      	mov	r0, r4
   dcb32:	f7ff ffc5 	bl	dcac0 <mbedtls_rsa_check_privkey>
                                const mbedtls_rsa_context *prv )
{
    RSA_VALIDATE_RET( pub != NULL );
    RSA_VALIDATE_RET( prv != NULL );

    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
   dcb36:	b930      	cbnz	r0, dcb46 <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
   dcb38:	f104 0108 	add.w	r1, r4, #8
   dcb3c:	f105 0008 	add.w	r0, r5, #8
   dcb40:	f7f9 ff6a 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   dcb44:	b108      	cbz	r0, dcb4a <mbedtls_rsa_check_pub_priv+0x26>
    RSA_VALIDATE_RET( prv != NULL );

    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   dcb46:	4805      	ldr	r0, [pc, #20]	; (dcb5c <mbedtls_rsa_check_pub_priv+0x38>)
   dcb48:	bd38      	pop	{r3, r4, r5, pc}
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
   dcb4a:	f104 0114 	add.w	r1, r4, #20
   dcb4e:	f105 0014 	add.w	r0, r5, #20
   dcb52:	f7f9 ff61 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
   dcb56:	2800      	cmp	r0, #0
   dcb58:	d1f5      	bne.n	dcb46 <mbedtls_rsa_check_pub_priv+0x22>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
   dcb5a:	bd38      	pop	{r3, r4, r5, pc}
   dcb5c:	ffffbe00 	.word	0xffffbe00

000dcb60 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
   dcb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dcb64:	460c      	mov	r4, r1
   dcb66:	b086      	sub	sp, #24
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
   dcb68:	2100      	movs	r1, #0
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
   dcb6a:	4605      	mov	r5, r0
   dcb6c:	4617      	mov	r7, r2
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
   dcb6e:	f7ff fe2f 	bl	dc7d0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
   dcb72:	4606      	mov	r6, r0
   dcb74:	bb78      	cbnz	r0, dcbd6 <mbedtls_rsa_public+0x76>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
   dcb76:	a803      	add	r0, sp, #12
   dcb78:	f7f9 fc67 	bl	d644a <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
   dcb7c:	4621      	mov	r1, r4
   dcb7e:	686a      	ldr	r2, [r5, #4]
   dcb80:	a803      	add	r0, sp, #12
   dcb82:	f7f9 fdaf 	bl	d66e4 <mbedtls_mpi_read_binary>
   dcb86:	4604      	mov	r4, r0
   dcb88:	b9f0      	cbnz	r0, dcbc8 <mbedtls_rsa_public+0x68>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
   dcb8a:	f105 0408 	add.w	r4, r5, #8
   dcb8e:	4621      	mov	r1, r4
   dcb90:	a803      	add	r0, sp, #12
   dcb92:	f7f9 ff41 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   dcb96:	2800      	cmp	r0, #0
   dcb98:	da14      	bge.n	dcbc4 <mbedtls_rsa_public+0x64>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
   dcb9a:	f105 0368 	add.w	r3, r5, #104	; 0x68
   dcb9e:	a903      	add	r1, sp, #12
   dcba0:	9300      	str	r3, [sp, #0]
   dcba2:	f105 0214 	add.w	r2, r5, #20
   dcba6:	4623      	mov	r3, r4
   dcba8:	4608      	mov	r0, r1
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
   dcbaa:	f8d5 8004 	ldr.w	r8, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
   dcbae:	f7fa fb05 	bl	d71bc <mbedtls_mpi_exp_mod>
   dcbb2:	4604      	mov	r4, r0
   dcbb4:	b940      	cbnz	r0, dcbc8 <mbedtls_rsa_public+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
   dcbb6:	4642      	mov	r2, r8
   dcbb8:	4639      	mov	r1, r7
   dcbba:	a803      	add	r0, sp, #12
   dcbbc:	f7f9 fdc9 	bl	d6752 <mbedtls_mpi_write_binary>
   dcbc0:	4604      	mov	r4, r0
   dcbc2:	e001      	b.n	dcbc8 <mbedtls_rsa_public+0x68>

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   dcbc4:	f06f 0403 	mvn.w	r4, #3
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
   dcbc8:	a803      	add	r0, sp, #12
   dcbca:	f7f9 fc44 	bl	d6456 <mbedtls_mpi_free>

    if( ret != 0 )
   dcbce:	b11c      	cbz	r4, dcbd8 <mbedtls_rsa_public+0x78>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
   dcbd0:	f5a4 4685 	sub.w	r6, r4, #17024	; 0x4280
   dcbd4:	e000      	b.n	dcbd8 <mbedtls_rsa_public+0x78>
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dcbd6:	4e02      	ldr	r6, [pc, #8]	; (dcbe0 <mbedtls_rsa_public+0x80>)

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );

    return( 0 );
}
   dcbd8:	4630      	mov	r0, r6
   dcbda:	b006      	add	sp, #24
   dcbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dcbe0:	ffffbf80 	.word	0xffffbf80

000dcbe4 <mbedtls_rsa_private>:
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
   dcbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcbe8:	460e      	mov	r6, r1
   dcbea:	b0a5      	sub	sp, #148	; 0x94

    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input  != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 1             /* private key checks */,
   dcbec:	2101      	movs	r1, #1
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
   dcbee:	4604      	mov	r4, r0
   dcbf0:	4692      	mov	sl, r2
   dcbf2:	461d      	mov	r5, r3

    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input  != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 1             /* private key checks */,
   dcbf4:	f7ff fdec 	bl	dc7d0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
   dcbf8:	9003      	str	r0, [sp, #12]
   dcbfa:	2800      	cmp	r0, #0
   dcbfc:	f040 819b 	bne.w	dcf36 <mbedtls_rsa_private+0x352>
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    /* MPI Initialization */
    mbedtls_mpi_init( &T );
   dcc00:	a806      	add	r0, sp, #24
   dcc02:	f7f9 fc22 	bl	d644a <mbedtls_mpi_init>

    mbedtls_mpi_init( &P1 );
   dcc06:	a809      	add	r0, sp, #36	; 0x24
   dcc08:	f7f9 fc1f 	bl	d644a <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
   dcc0c:	a80c      	add	r0, sp, #48	; 0x30
   dcc0e:	f7f9 fc1c 	bl	d644a <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
   dcc12:	a80f      	add	r0, sp, #60	; 0x3c
   dcc14:	f7f9 fc19 	bl	d644a <mbedtls_mpi_init>

    if( f_rng != NULL )
   dcc18:	b12e      	cbz	r6, dcc26 <mbedtls_rsa_private+0x42>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_init( &D_blind );
#else
        mbedtls_mpi_init( &DP_blind );
   dcc1a:	a818      	add	r0, sp, #96	; 0x60
   dcc1c:	f7f9 fc15 	bl	d644a <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
   dcc20:	a81b      	add	r0, sp, #108	; 0x6c
   dcc22:	f7f9 fc12 	bl	d644a <mbedtls_mpi_init>
#endif
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
   dcc26:	a812      	add	r0, sp, #72	; 0x48
   dcc28:	f7f9 fc0f 	bl	d644a <mbedtls_mpi_init>
   dcc2c:	a815      	add	r0, sp, #84	; 0x54
   dcc2e:	f7f9 fc0c 	bl	d644a <mbedtls_mpi_init>
#endif

    mbedtls_mpi_init( &I );
   dcc32:	a81e      	add	r0, sp, #120	; 0x78
   dcc34:	f7f9 fc09 	bl	d644a <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
   dcc38:	a821      	add	r0, sp, #132	; 0x84
   dcc3a:	f7f9 fc06 	bl	d644a <mbedtls_mpi_init>

    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
   dcc3e:	6862      	ldr	r2, [r4, #4]
   dcc40:	4629      	mov	r1, r5
   dcc42:	a806      	add	r0, sp, #24
   dcc44:	f7f9 fd4e 	bl	d66e4 <mbedtls_mpi_read_binary>
   dcc48:	4607      	mov	r7, r0
   dcc4a:	2800      	cmp	r0, #0
   dcc4c:	f040 8150 	bne.w	dcef0 <mbedtls_rsa_private+0x30c>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
   dcc50:	f104 0508 	add.w	r5, r4, #8
   dcc54:	4629      	mov	r1, r5
   dcc56:	a806      	add	r0, sp, #24
   dcc58:	f7f9 fede 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   dcc5c:	2800      	cmp	r0, #0
   dcc5e:	f280 8143 	bge.w	dcee8 <mbedtls_rsa_private+0x304>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
   dcc62:	a906      	add	r1, sp, #24
   dcc64:	a81e      	add	r0, sp, #120	; 0x78
   dcc66:	f7f9 fc70 	bl	d654a <mbedtls_mpi_copy>
   dcc6a:	4607      	mov	r7, r0
   dcc6c:	2800      	cmp	r0, #0
   dcc6e:	f040 813f 	bne.w	dcef0 <mbedtls_rsa_private+0x30c>
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
    mbedtls_mpi *DQ = &ctx->DQ;
   dcc72:	f104 0350 	add.w	r3, r4, #80	; 0x50
     * the mod p resp. mod q computation (if used). */
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
   dcc76:	f104 0944 	add.w	r9, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
   dcc7a:	9304      	str	r3, [sp, #16]
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );

    if( f_rng != NULL )
   dcc7c:	2e00      	cmp	r6, #0
   dcc7e:	f000 80c5 	beq.w	dce0c <mbedtls_rsa_private+0x228>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
   dcc82:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   dcc86:	b323      	cbz	r3, dccd2 <mbedtls_rsa_private+0xee>
    {
        /* We already have blinding values, just update them by squaring */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
   dcc88:	f104 088c 	add.w	r8, r4, #140	; 0x8c
   dcc8c:	4642      	mov	r2, r8
   dcc8e:	4641      	mov	r1, r8
   dcc90:	4640      	mov	r0, r8
   dcc92:	f7fa f825 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   dcc96:	4607      	mov	r7, r0
   dcc98:	2800      	cmp	r0, #0
   dcc9a:	f040 8129 	bne.w	dcef0 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
   dcc9e:	462a      	mov	r2, r5
   dcca0:	4641      	mov	r1, r8
   dcca2:	4640      	mov	r0, r8
   dcca4:	f7fa fa58 	bl	d7158 <mbedtls_mpi_mod_mpi>
   dcca8:	4607      	mov	r7, r0
   dccaa:	2800      	cmp	r0, #0
   dccac:	f040 8120 	bne.w	dcef0 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
   dccb0:	f104 0898 	add.w	r8, r4, #152	; 0x98
   dccb4:	4642      	mov	r2, r8
   dccb6:	4641      	mov	r1, r8
   dccb8:	4640      	mov	r0, r8
   dccba:	f7fa f811 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   dccbe:	4607      	mov	r7, r0
   dccc0:	2800      	cmp	r0, #0
   dccc2:	f040 8115 	bne.w	dcef0 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
   dccc6:	462a      	mov	r2, r5
   dccc8:	4641      	mov	r1, r8
   dccca:	4640      	mov	r0, r8
   dcccc:	f7fa fa44 	bl	d7158 <mbedtls_mpi_mod_mpi>
   dccd0:	e037      	b.n	dcd42 <mbedtls_rsa_private+0x15e>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
   dccd2:	230c      	movs	r3, #12
   dccd4:	9305      	str	r3, [sp, #20]
    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
   dccd6:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   dccda:	f104 088c 	add.w	r8, r4, #140	; 0x8c
        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
   dccde:	9b05      	ldr	r3, [sp, #20]
   dcce0:	3b01      	subs	r3, #1
   dcce2:	9305      	str	r3, [sp, #20]
   dcce4:	f000 812a 	beq.w	dcf3c <mbedtls_rsa_private+0x358>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
   dcce8:	6861      	ldr	r1, [r4, #4]
   dccea:	4653      	mov	r3, sl
   dccec:	4632      	mov	r2, r6
   dccee:	3901      	subs	r1, #1
   dccf0:	4658      	mov	r0, fp
   dccf2:	f7fa fd07 	bl	d7704 <mbedtls_mpi_fill_random>
   dccf6:	4607      	mov	r7, r0
   dccf8:	2800      	cmp	r0, #0
   dccfa:	f040 80f9 	bne.w	dcef0 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   dccfe:	462a      	mov	r2, r5
   dcd00:	4659      	mov	r1, fp
   dcd02:	4640      	mov	r0, r8
   dcd04:	f7fa fc79 	bl	d75fa <mbedtls_mpi_gcd>
   dcd08:	4607      	mov	r7, r0
   dcd0a:	2800      	cmp	r0, #0
   dcd0c:	f040 80f0 	bne.w	dcef0 <mbedtls_rsa_private+0x30c>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
   dcd10:	2101      	movs	r1, #1
   dcd12:	4640      	mov	r0, r8
   dcd14:	f7f9 fec5 	bl	d6aa2 <mbedtls_mpi_cmp_int>

        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
   dcd18:	2800      	cmp	r0, #0
   dcd1a:	d1e0      	bne.n	dccde <mbedtls_rsa_private+0xfa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );

    /* Blinding value: Vi =  Vf^(-e) mod N */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   dcd1c:	462a      	mov	r2, r5
   dcd1e:	4659      	mov	r1, fp
   dcd20:	4640      	mov	r0, r8
   dcd22:	f7fa fd23 	bl	d776c <mbedtls_mpi_inv_mod>
   dcd26:	4607      	mov	r7, r0
   dcd28:	2800      	cmp	r0, #0
   dcd2a:	f040 80e1 	bne.w	dcef0 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
   dcd2e:	f104 0368 	add.w	r3, r4, #104	; 0x68
   dcd32:	9300      	str	r3, [sp, #0]
   dcd34:	f104 0214 	add.w	r2, r4, #20
   dcd38:	462b      	mov	r3, r5
   dcd3a:	4641      	mov	r1, r8
   dcd3c:	4640      	mov	r0, r8
   dcd3e:	f7fa fa3d 	bl	d71bc <mbedtls_mpi_exp_mod>
   dcd42:	4607      	mov	r7, r0
    {
        /*
         * Blinding
         * T = T * Vi mod N
         */
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
   dcd44:	2800      	cmp	r0, #0
   dcd46:	f040 80d3 	bne.w	dcef0 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
   dcd4a:	a906      	add	r1, sp, #24
   dcd4c:	f104 028c 	add.w	r2, r4, #140	; 0x8c
   dcd50:	4608      	mov	r0, r1
   dcd52:	f7f9 ffc5 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   dcd56:	4607      	mov	r7, r0
   dcd58:	2800      	cmp	r0, #0
   dcd5a:	f040 80c9 	bne.w	dcef0 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
   dcd5e:	a906      	add	r1, sp, #24
   dcd60:	462a      	mov	r2, r5
   dcd62:	4608      	mov	r0, r1
   dcd64:	f7fa f9f8 	bl	d7158 <mbedtls_mpi_mod_mpi>
   dcd68:	4607      	mov	r7, r0
   dcd6a:	2800      	cmp	r0, #0
   dcd6c:	f040 80c0 	bne.w	dcef0 <mbedtls_rsa_private+0x30c>

        /*
         * Exponent blinding
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
   dcd70:	2201      	movs	r2, #1
   dcd72:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   dcd76:	a809      	add	r0, sp, #36	; 0x24
   dcd78:	f7f9 ff9c 	bl	d6cb4 <mbedtls_mpi_sub_int>
   dcd7c:	4607      	mov	r7, r0
   dcd7e:	2800      	cmp	r0, #0
   dcd80:	f040 80b6 	bne.w	dcef0 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
   dcd84:	2201      	movs	r2, #1
   dcd86:	f104 0138 	add.w	r1, r4, #56	; 0x38
   dcd8a:	a80c      	add	r0, sp, #48	; 0x30
   dcd8c:	f7f9 ff92 	bl	d6cb4 <mbedtls_mpi_sub_int>
   dcd90:	4607      	mov	r7, r0
   dcd92:	2800      	cmp	r0, #0
   dcd94:	f040 80ac 	bne.w	dcef0 <mbedtls_rsa_private+0x30c>
        D = &D_blind;
#else
        /*
         * DP_blind = ( P - 1 ) * R + DP
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
   dcd98:	4653      	mov	r3, sl
   dcd9a:	4632      	mov	r2, r6
   dcd9c:	211c      	movs	r1, #28
   dcd9e:	a80f      	add	r0, sp, #60	; 0x3c
   dcda0:	f7fa fcb0 	bl	d7704 <mbedtls_mpi_fill_random>
   dcda4:	4607      	mov	r7, r0
   dcda6:	2800      	cmp	r0, #0
   dcda8:	f040 80a2 	bne.w	dcef0 <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
   dcdac:	aa0f      	add	r2, sp, #60	; 0x3c
   dcdae:	a909      	add	r1, sp, #36	; 0x24
   dcdb0:	a818      	add	r0, sp, #96	; 0x60
   dcdb2:	f7f9 ff95 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   dcdb6:	4607      	mov	r7, r0
   dcdb8:	2800      	cmp	r0, #0
   dcdba:	f040 8099 	bne.w	dcef0 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
   dcdbe:	a918      	add	r1, sp, #96	; 0x60
   dcdc0:	464a      	mov	r2, r9
   dcdc2:	4608      	mov	r0, r1
   dcdc4:	f7f9 ff1d 	bl	d6c02 <mbedtls_mpi_add_mpi>
   dcdc8:	4607      	mov	r7, r0
   dcdca:	2800      	cmp	r0, #0
   dcdcc:	f040 8090 	bne.w	dcef0 <mbedtls_rsa_private+0x30c>
        DP = &DP_blind;

        /*
         * DQ_blind = ( Q - 1 ) * R + DQ
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
   dcdd0:	4653      	mov	r3, sl
   dcdd2:	4632      	mov	r2, r6
   dcdd4:	211c      	movs	r1, #28
   dcdd6:	a80f      	add	r0, sp, #60	; 0x3c
   dcdd8:	f7fa fc94 	bl	d7704 <mbedtls_mpi_fill_random>
   dcddc:	4607      	mov	r7, r0
   dcdde:	2800      	cmp	r0, #0
   dcde0:	f040 8086 	bne.w	dcef0 <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
   dcde4:	aa0f      	add	r2, sp, #60	; 0x3c
   dcde6:	a90c      	add	r1, sp, #48	; 0x30
   dcde8:	a81b      	add	r0, sp, #108	; 0x6c
   dcdea:	f7f9 ff79 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   dcdee:	4607      	mov	r7, r0
   dcdf0:	2800      	cmp	r0, #0
   dcdf2:	d17d      	bne.n	dcef0 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
   dcdf4:	a91b      	add	r1, sp, #108	; 0x6c
   dcdf6:	9a04      	ldr	r2, [sp, #16]
   dcdf8:	4608      	mov	r0, r1
   dcdfa:	f7f9 ff02 	bl	d6c02 <mbedtls_mpi_add_mpi>
   dcdfe:	4607      	mov	r7, r0
   dce00:	2800      	cmp	r0, #0
   dce02:	d175      	bne.n	dcef0 <mbedtls_rsa_private+0x30c>
                    &ctx->DQ ) );

        DQ = &DQ_blind;
   dce04:	ab1b      	add	r3, sp, #108	; 0x6c
   dce06:	9304      	str	r3, [sp, #16]
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
                    &ctx->DP ) );

        DP = &DP_blind;
   dce08:	f10d 0960 	add.w	r9, sp, #96	; 0x60
     *
     * TP = input ^ dP mod P
     * TQ = input ^ dQ mod Q
     */

    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
   dce0c:	f104 0374 	add.w	r3, r4, #116	; 0x74
   dce10:	f104 082c 	add.w	r8, r4, #44	; 0x2c
   dce14:	9300      	str	r3, [sp, #0]
   dce16:	464a      	mov	r2, r9
   dce18:	4643      	mov	r3, r8
   dce1a:	a906      	add	r1, sp, #24
   dce1c:	a812      	add	r0, sp, #72	; 0x48
   dce1e:	f7fa f9cd 	bl	d71bc <mbedtls_mpi_exp_mod>
   dce22:	4607      	mov	r7, r0
   dce24:	2800      	cmp	r0, #0
   dce26:	d163      	bne.n	dcef0 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
   dce28:	f104 0380 	add.w	r3, r4, #128	; 0x80
   dce2c:	f104 0938 	add.w	r9, r4, #56	; 0x38
   dce30:	9300      	str	r3, [sp, #0]
   dce32:	9a04      	ldr	r2, [sp, #16]
   dce34:	464b      	mov	r3, r9
   dce36:	a906      	add	r1, sp, #24
   dce38:	a815      	add	r0, sp, #84	; 0x54
   dce3a:	f7fa f9bf 	bl	d71bc <mbedtls_mpi_exp_mod>
   dce3e:	4607      	mov	r7, r0
   dce40:	2800      	cmp	r0, #0
   dce42:	d155      	bne.n	dcef0 <mbedtls_rsa_private+0x30c>

    /*
     * T = (TP - TQ) * (Q^-1 mod P) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
   dce44:	aa15      	add	r2, sp, #84	; 0x54
   dce46:	a912      	add	r1, sp, #72	; 0x48
   dce48:	a806      	add	r0, sp, #24
   dce4a:	f7f9 fefb 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   dce4e:	4607      	mov	r7, r0
   dce50:	2800      	cmp	r0, #0
   dce52:	d14d      	bne.n	dcef0 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
   dce54:	f104 025c 	add.w	r2, r4, #92	; 0x5c
   dce58:	a906      	add	r1, sp, #24
   dce5a:	a812      	add	r0, sp, #72	; 0x48
   dce5c:	f7f9 ff40 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   dce60:	4607      	mov	r7, r0
   dce62:	2800      	cmp	r0, #0
   dce64:	d144      	bne.n	dcef0 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
   dce66:	4642      	mov	r2, r8
   dce68:	a912      	add	r1, sp, #72	; 0x48
   dce6a:	a806      	add	r0, sp, #24
   dce6c:	f7fa f974 	bl	d7158 <mbedtls_mpi_mod_mpi>
   dce70:	4607      	mov	r7, r0
   dce72:	2800      	cmp	r0, #0
   dce74:	d13c      	bne.n	dcef0 <mbedtls_rsa_private+0x30c>

    /*
     * T = TQ + T * Q
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
   dce76:	464a      	mov	r2, r9
   dce78:	a906      	add	r1, sp, #24
   dce7a:	a812      	add	r0, sp, #72	; 0x48
   dce7c:	f7f9 ff30 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   dce80:	4607      	mov	r7, r0
   dce82:	2800      	cmp	r0, #0
   dce84:	d134      	bne.n	dcef0 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
   dce86:	aa12      	add	r2, sp, #72	; 0x48
   dce88:	a915      	add	r1, sp, #84	; 0x54
   dce8a:	a806      	add	r0, sp, #24
   dce8c:	f7f9 feb9 	bl	d6c02 <mbedtls_mpi_add_mpi>
   dce90:	4607      	mov	r7, r0
   dce92:	bb68      	cbnz	r0, dcef0 <mbedtls_rsa_private+0x30c>
#endif /* MBEDTLS_RSA_NO_CRT */

    if( f_rng != NULL )
   dce94:	b966      	cbnz	r6, dceb0 <mbedtls_rsa_private+0x2cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
   dce96:	f104 0368 	add.w	r3, r4, #104	; 0x68
   dce9a:	9300      	str	r3, [sp, #0]
   dce9c:	f104 0214 	add.w	r2, r4, #20
   dcea0:	462b      	mov	r3, r5
   dcea2:	a906      	add	r1, sp, #24
   dcea4:	a821      	add	r0, sp, #132	; 0x84
   dcea6:	f7fa f989 	bl	d71bc <mbedtls_mpi_exp_mod>
   dceaa:	4607      	mov	r7, r0
   dceac:	bb00      	cbnz	r0, dcef0 <mbedtls_rsa_private+0x30c>
   dceae:	e00f      	b.n	dced0 <mbedtls_rsa_private+0x2ec>
    {
        /*
         * Unblind
         * T = T * Vf mod N
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
   dceb0:	a906      	add	r1, sp, #24
   dceb2:	f104 0298 	add.w	r2, r4, #152	; 0x98
   dceb6:	4608      	mov	r0, r1
   dceb8:	f7f9 ff12 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   dcebc:	4607      	mov	r7, r0
   dcebe:	b9b8      	cbnz	r0, dcef0 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
   dcec0:	a906      	add	r1, sp, #24
   dcec2:	462a      	mov	r2, r5
   dcec4:	4608      	mov	r0, r1
   dcec6:	f7fa f947 	bl	d7158 <mbedtls_mpi_mod_mpi>
   dceca:	4607      	mov	r7, r0
   dcecc:	b980      	cbnz	r0, dcef0 <mbedtls_rsa_private+0x30c>
   dcece:	e7e2      	b.n	dce96 <mbedtls_rsa_private+0x2b2>
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
   dced0:	a91e      	add	r1, sp, #120	; 0x78
   dced2:	a821      	add	r0, sp, #132	; 0x84
   dced4:	f7f9 fda0 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
   dced8:	b948      	cbnz	r0, dceee <mbedtls_rsa_private+0x30a>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
   dceda:	6862      	ldr	r2, [r4, #4]
   dcedc:	992e      	ldr	r1, [sp, #184]	; 0xb8
   dcede:	a806      	add	r0, sp, #24
   dcee0:	f7f9 fc37 	bl	d6752 <mbedtls_mpi_write_binary>
   dcee4:	4607      	mov	r7, r0
   dcee6:	e003      	b.n	dcef0 <mbedtls_rsa_private+0x30c>
    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   dcee8:	f06f 0703 	mvn.w	r7, #3
   dceec:	e000      	b.n	dcef0 <mbedtls_rsa_private+0x30c>
    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   dceee:	4f16      	ldr	r7, [pc, #88]	; (dcf48 <mbedtls_rsa_private+0x364>)
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &P1 );
   dcef0:	a809      	add	r0, sp, #36	; 0x24
   dcef2:	f7f9 fab0 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
   dcef6:	a80c      	add	r0, sp, #48	; 0x30
   dcef8:	f7f9 faad 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
   dcefc:	a80f      	add	r0, sp, #60	; 0x3c
   dcefe:	f7f9 faaa 	bl	d6456 <mbedtls_mpi_free>

    if( f_rng != NULL )
   dcf02:	b12e      	cbz	r6, dcf10 <mbedtls_rsa_private+0x32c>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_free( &D_blind );
#else
        mbedtls_mpi_free( &DP_blind );
   dcf04:	a818      	add	r0, sp, #96	; 0x60
   dcf06:	f7f9 faa6 	bl	d6456 <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
   dcf0a:	a81b      	add	r0, sp, #108	; 0x6c
   dcf0c:	f7f9 faa3 	bl	d6456 <mbedtls_mpi_free>
#endif
    }

    mbedtls_mpi_free( &T );
   dcf10:	a806      	add	r0, sp, #24
   dcf12:	f7f9 faa0 	bl	d6456 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
   dcf16:	a812      	add	r0, sp, #72	; 0x48
   dcf18:	f7f9 fa9d 	bl	d6456 <mbedtls_mpi_free>
   dcf1c:	a815      	add	r0, sp, #84	; 0x54
   dcf1e:	f7f9 fa9a 	bl	d6456 <mbedtls_mpi_free>
#endif

    mbedtls_mpi_free( &C );
   dcf22:	a821      	add	r0, sp, #132	; 0x84
   dcf24:	f7f9 fa97 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
   dcf28:	a81e      	add	r0, sp, #120	; 0x78
   dcf2a:	f7f9 fa94 	bl	d6456 <mbedtls_mpi_free>

    if( ret != 0 )
   dcf2e:	b13f      	cbz	r7, dcf40 <mbedtls_rsa_private+0x35c>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
   dcf30:	f5a7 4386 	sub.w	r3, r7, #17152	; 0x4300
   dcf34:	e000      	b.n	dcf38 <mbedtls_rsa_private+0x354>
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 1             /* private key checks */,
                                f_rng != NULL /* blinding y/n       */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dcf36:	4b05      	ldr	r3, [pc, #20]	; (dcf4c <mbedtls_rsa_private+0x368>)
   dcf38:	9303      	str	r3, [sp, #12]
   dcf3a:	e001      	b.n	dcf40 <mbedtls_rsa_private+0x35c>
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
   dcf3c:	4f04      	ldr	r7, [pc, #16]	; (dcf50 <mbedtls_rsa_private+0x36c>)
   dcf3e:	e7d7      	b.n	dcef0 <mbedtls_rsa_private+0x30c>

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );

    return( 0 );
}
   dcf40:	9803      	ldr	r0, [sp, #12]
   dcf42:	b025      	add	sp, #148	; 0x94
   dcf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcf48:	ffffbc80 	.word	0xffffbc80
   dcf4c:	ffffbf80 	.word	0xffffbf80
   dcf50:	ffffbb80 	.word	0xffffbb80

000dcf54 <mbedtls_rsa_rsaes_oaep_encrypt>:
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
   dcf54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcf58:	b08d      	sub	sp, #52	; 0x34
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( label_len == 0 || label != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   dcf5a:	2b01      	cmp	r3, #1
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
   dcf5c:	4680      	mov	r8, r0
   dcf5e:	468b      	mov	fp, r1
   dcf60:	9205      	str	r2, [sp, #20]
   dcf62:	9306      	str	r3, [sp, #24]
   dcf64:	9f18      	ldr	r7, [sp, #96]	; 0x60
   dcf66:	9e1a      	ldr	r6, [sp, #104]	; 0x68
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( label_len == 0 || label != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   dcf68:	d105      	bne.n	dcf76 <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
   dcf6a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   dcf6e:	2b01      	cmp	r3, #1
   dcf70:	d001      	beq.n	dcf76 <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dcf72:	4b41      	ldr	r3, [pc, #260]	; (dd078 <mbedtls_rsa_rsaes_oaep_encrypt+0x124>)
   dcf74:	e07b      	b.n	dd06e <mbedtls_rsa_rsaes_oaep_encrypt+0x11a>

    if( f_rng == NULL )
   dcf76:	f1bb 0f00 	cmp.w	fp, #0
   dcf7a:	d0fa      	beq.n	dcf72 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   dcf7c:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
   dcf80:	f7fd fd06 	bl	da990 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   dcf84:	9003      	str	r0, [sp, #12]
   dcf86:	2800      	cmp	r0, #0
   dcf88:	d0f3      	beq.n	dcf72 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
   dcf8a:	f8d8 4004 	ldr.w	r4, [r8, #4]
    hlen = mbedtls_md_get_size( md_info );
   dcf8e:	f7fd fe37 	bl	dac00 <mbedtls_md_get_size>
   dcf92:	4605      	mov	r5, r0

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
   dcf94:	b200      	sxth	r0, r0
   dcf96:	0043      	lsls	r3, r0, #1
   dcf98:	9304      	str	r3, [sp, #16]
   dcf9a:	9a04      	ldr	r2, [sp, #16]
   dcf9c:	1cbb      	adds	r3, r7, #2
   dcf9e:	4413      	add	r3, r2
   dcfa0:	429f      	cmp	r7, r3
   dcfa2:	d8e6      	bhi.n	dcf72 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
   dcfa4:	429c      	cmp	r4, r3
   dcfa6:	d3e4      	bcc.n	dcf72 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( output, 0, olen );
   dcfa8:	4622      	mov	r2, r4
   dcfaa:	2100      	movs	r1, #0
   dcfac:	4630      	mov	r0, r6
   dcfae:	f00a ff80 	bl	e7eb2 <memset>

    *p++ = 0;
   dcfb2:	f106 0901 	add.w	r9, r6, #1
   dcfb6:	2300      	movs	r3, #0
   dcfb8:	7033      	strb	r3, [r6, #0]

    /* Generate a random octet string seed */
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
   dcfba:	462a      	mov	r2, r5
   dcfbc:	4649      	mov	r1, r9
   dcfbe:	9805      	ldr	r0, [sp, #20]
   dcfc0:	47d8      	blx	fp
   dcfc2:	b110      	cbz	r0, dcfca <mbedtls_rsa_rsaes_oaep_encrypt+0x76>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   dcfc4:	f5a0 4389 	sub.w	r3, r0, #17536	; 0x4480
   dcfc8:	e051      	b.n	dd06e <mbedtls_rsa_rsaes_oaep_encrypt+0x11a>

    p += hlen;
   dcfca:	eb09 0a05 	add.w	sl, r9, r5

    /* Construct DB */
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
   dcfce:	4653      	mov	r3, sl
   dcfd0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   dcfd2:	9916      	ldr	r1, [sp, #88]	; 0x58
   dcfd4:	9803      	ldr	r0, [sp, #12]
   dcfd6:	f7fd fd47 	bl	daa68 <mbedtls_md>
   dcfda:	4603      	mov	r3, r0
   dcfdc:	2800      	cmp	r0, #0
   dcfde:	d146      	bne.n	dd06e <mbedtls_rsa_rsaes_oaep_encrypt+0x11a>
   dcfe0:	9007      	str	r0, [sp, #28]
   dcfe2:	1ea0      	subs	r0, r4, #2
   dcfe4:	9b04      	ldr	r3, [sp, #16]
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
    memcpy( p, input, ilen );
   dcfe6:	9919      	ldr	r1, [sp, #100]	; 0x64
   dcfe8:	1bc0      	subs	r0, r0, r7
   dcfea:	4428      	add	r0, r5
   dcfec:	1ac0      	subs	r0, r0, r3
    /* Construct DB */
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
   dcfee:	2201      	movs	r2, #1
   dcff0:	f80a 2000 	strb.w	r2, [sl, r0]
    memcpy( p, input, ilen );
   dcff4:	4410      	add	r0, r2
   dcff6:	4450      	add	r0, sl
   dcff8:	463a      	mov	r2, r7

    mbedtls_md_init( &md_ctx );
   dcffa:	af09      	add	r7, sp, #36	; 0x24
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
    memcpy( p, input, ilen );
   dcffc:	f00a ff33 	bl	e7e66 <memcpy>

    mbedtls_md_init( &md_ctx );
   dd000:	4638      	mov	r0, r7
   dd002:	f7fd fcd1 	bl	da9a8 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   dd006:	9b07      	ldr	r3, [sp, #28]
   dd008:	9903      	ldr	r1, [sp, #12]
   dd00a:	461a      	mov	r2, r3
   dd00c:	4638      	mov	r0, r7
   dd00e:	f7fd fceb 	bl	da9e8 <mbedtls_md_setup>
   dd012:	4603      	mov	r3, r0
   dd014:	b9a8      	cbnz	r0, dd042 <mbedtls_rsa_rsaes_oaep_encrypt+0xee>
        goto exit;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
   dd016:	f105 0a01 	add.w	sl, r5, #1
   dd01a:	3c01      	subs	r4, #1
   dd01c:	44b2      	add	sl, r6
   dd01e:	1b64      	subs	r4, r4, r5
   dd020:	462b      	mov	r3, r5
   dd022:	9700      	str	r7, [sp, #0]
   dd024:	464a      	mov	r2, r9
   dd026:	4621      	mov	r1, r4
   dd028:	4650      	mov	r0, sl
   dd02a:	f7ff faeb 	bl	dc604 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
   dd02e:	4603      	mov	r3, r0
   dd030:	b938      	cbnz	r0, dd042 <mbedtls_rsa_rsaes_oaep_encrypt+0xee>
                          &md_ctx ) ) != 0 )
        goto exit;

    /* maskedSeed: Apply seedMask to seed */
    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
   dd032:	4623      	mov	r3, r4
   dd034:	9700      	str	r7, [sp, #0]
   dd036:	4652      	mov	r2, sl
   dd038:	4629      	mov	r1, r5
   dd03a:	4648      	mov	r0, r9
   dd03c:	f7ff fae2 	bl	dc604 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
   dd040:	4603      	mov	r3, r0
                          &md_ctx ) ) != 0 )
        goto exit;

exit:
    mbedtls_md_free( &md_ctx );
   dd042:	a809      	add	r0, sp, #36	; 0x24
   dd044:	9303      	str	r3, [sp, #12]
   dd046:	f7fd fcb4 	bl	da9b2 <mbedtls_md_free>

    if( ret != 0 )
   dd04a:	9b03      	ldr	r3, [sp, #12]
   dd04c:	b97b      	cbnz	r3, dd06e <mbedtls_rsa_rsaes_oaep_encrypt+0x11a>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   dd04e:	9b06      	ldr	r3, [sp, #24]
   dd050:	b92b      	cbnz	r3, dd05e <mbedtls_rsa_rsaes_oaep_encrypt+0x10a>
   dd052:	4632      	mov	r2, r6
   dd054:	4631      	mov	r1, r6
   dd056:	4640      	mov	r0, r8
   dd058:	f7ff fd82 	bl	dcb60 <mbedtls_rsa_public>
   dd05c:	e006      	b.n	dd06c <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
   dd05e:	9600      	str	r6, [sp, #0]
   dd060:	4633      	mov	r3, r6
   dd062:	9a05      	ldr	r2, [sp, #20]
   dd064:	4659      	mov	r1, fp
   dd066:	4640      	mov	r0, r8
   dd068:	f7ff fdbc 	bl	dcbe4 <mbedtls_rsa_private>
   dd06c:	4603      	mov	r3, r0
}
   dd06e:	4618      	mov	r0, r3
   dd070:	b00d      	add	sp, #52	; 0x34
   dd072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd076:	bf00      	nop
   dd078:	ffffbf80 	.word	0xffffbf80

000dd07c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
   dd07c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd080:	469a      	mov	sl, r3
    RSA_VALIDATE_RET( mode == MBEDTLS_RSA_PRIVATE ||
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   dd082:	f1ba 0f01 	cmp.w	sl, #1
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
   dd086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dd088:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   dd08c:	9300      	str	r3, [sp, #0]
   dd08e:	4607      	mov	r7, r0
   dd090:	4689      	mov	r9, r1
   dd092:	4693      	mov	fp, r2
   dd094:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    RSA_VALIDATE_RET( mode == MBEDTLS_RSA_PRIVATE ||
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   dd096:	d104      	bne.n	dd0a2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
   dd098:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   dd09c:	b10b      	cbz	r3, dd0a2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dd09e:	482c      	ldr	r0, [pc, #176]	; (dd150 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd4>)
   dd0a0:	e052      	b.n	dd148 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xcc>

    olen = ctx->len;

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
   dd0a2:	f118 030b 	adds.w	r3, r8, #11
    RSA_VALIDATE_RET( input != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
   dd0a6:	687c      	ldr	r4, [r7, #4]

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
   dd0a8:	d2f9      	bcs.n	dd09e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
   dd0aa:	429c      	cmp	r4, r3
   dd0ac:	d3f7      	bcc.n	dd09e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
   dd0ae:	3c03      	subs	r4, #3

    *p++ = 0;
   dd0b0:	2300      	movs	r3, #0

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
   dd0b2:	ebc8 0404 	rsb	r4, r8, r4

    *p++ = 0;
   dd0b6:	702b      	strb	r3, [r5, #0]
    if( mode == MBEDTLS_RSA_PUBLIC )
   dd0b8:	f1ba 0f00 	cmp.w	sl, #0
   dd0bc:	d119      	bne.n	dd0f2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
    {
        if( f_rng == NULL )
   dd0be:	f1b9 0f00 	cmp.w	r9, #0
   dd0c2:	d0ec      	beq.n	dd09e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        *p++ = MBEDTLS_RSA_CRYPT;
   dd0c4:	1cae      	adds	r6, r5, #2
   dd0c6:	2302      	movs	r3, #2
   dd0c8:	706b      	strb	r3, [r5, #1]
   dd0ca:	4434      	add	r4, r6

        while( nb_pad-- > 0 )
   dd0cc:	42a6      	cmp	r6, r4
   dd0ce:	d01a      	beq.n	dd106 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x8a>
   dd0d0:	2364      	movs	r3, #100	; 0x64
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
   dd0d2:	2201      	movs	r2, #1
   dd0d4:	4631      	mov	r1, r6
   dd0d6:	4658      	mov	r0, fp
   dd0d8:	9301      	str	r3, [sp, #4]
   dd0da:	47c8      	blx	r9
            } while( *p == 0 && --rng_dl && ret == 0 );
   dd0dc:	7832      	ldrb	r2, [r6, #0]
   dd0de:	bb7a      	cbnz	r2, dd140 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc4>
   dd0e0:	9b01      	ldr	r3, [sp, #4]
   dd0e2:	3b01      	subs	r3, #1
   dd0e4:	d102      	bne.n	dd0ec <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x70>

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   dd0e6:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
   dd0ea:	e02d      	b.n	dd148 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xcc>
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );
   dd0ec:	2800      	cmp	r0, #0
   dd0ee:	d0f0      	beq.n	dd0d2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x56>
   dd0f0:	e7f9      	b.n	dd0e6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x6a>
            p++;
        }
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;
   dd0f2:	2201      	movs	r2, #1
   dd0f4:	1cab      	adds	r3, r5, #2
   dd0f6:	706a      	strb	r2, [r5, #1]
   dd0f8:	441c      	add	r4, r3

        while( nb_pad-- > 0 )
            *p++ = 0xFF;
   dd0fa:	22ff      	movs	r2, #255	; 0xff
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
   dd0fc:	429c      	cmp	r4, r3
   dd0fe:	d002      	beq.n	dd106 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x8a>
            *p++ = 0xFF;
   dd100:	f803 2b01 	strb.w	r2, [r3], #1
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
   dd104:	e7fa      	b.n	dd0fc <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x80>
            *p++ = 0xFF;
    }

    *p++ = 0;
   dd106:	4620      	mov	r0, r4
   dd108:	2300      	movs	r3, #0
   dd10a:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy( p, input, ilen );
   dd10e:	4642      	mov	r2, r8
   dd110:	9900      	ldr	r1, [sp, #0]
   dd112:	f00a fea8 	bl	e7e66 <memcpy>

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   dd116:	f1ba 0f00 	cmp.w	sl, #0
   dd11a:	d107      	bne.n	dd12c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xb0>
   dd11c:	462a      	mov	r2, r5
   dd11e:	4629      	mov	r1, r5
   dd120:	4638      	mov	r0, r7
}
   dd122:	b003      	add	sp, #12
   dd124:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   dd128:	f7ff bd1a 	b.w	dcb60 <mbedtls_rsa_public>
   dd12c:	462b      	mov	r3, r5
   dd12e:	465a      	mov	r2, fp
   dd130:	4649      	mov	r1, r9
   dd132:	4638      	mov	r0, r7
   dd134:	950c      	str	r5, [sp, #48]	; 0x30
}
   dd136:	b003      	add	sp, #12
   dd138:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   dd13c:	f7ff bd52 	b.w	dcbe4 <mbedtls_rsa_private>
            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
   dd140:	2800      	cmp	r0, #0
   dd142:	d1d0      	bne.n	dd0e6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x6a>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

            p++;
   dd144:	3601      	adds	r6, #1
        if( f_rng == NULL )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        *p++ = MBEDTLS_RSA_CRYPT;

        while( nb_pad-- > 0 )
   dd146:	e7c1      	b.n	dd0cc <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x50>
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
}
   dd148:	b003      	add	sp, #12
   dd14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd14e:	bf00      	nop
   dd150:	ffffbf80 	.word	0xffffbf80

000dd154 <mbedtls_rsa_pkcs1_encrypt>:
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
   dd154:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd156:	b087      	sub	sp, #28
    RSA_VALIDATE_RET( mode == MBEDTLS_RSA_PRIVATE ||
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );

    switch( ctx->padding )
   dd158:	f8d0 70a4 	ldr.w	r7, [r0, #164]	; 0xa4
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
   dd15c:	ac0c      	add	r4, sp, #48	; 0x30
   dd15e:	cc70      	ldmia	r4, {r4, r5, r6}
    RSA_VALIDATE_RET( mode == MBEDTLS_RSA_PRIVATE ||
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );

    switch( ctx->padding )
   dd160:	b157      	cbz	r7, dd178 <mbedtls_rsa_pkcs1_encrypt+0x24>
   dd162:	2f01      	cmp	r7, #1
   dd164:	d110      	bne.n	dd188 <mbedtls_rsa_pkcs1_encrypt+0x34>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
   dd166:	9402      	str	r4, [sp, #8]
   dd168:	2400      	movs	r4, #0
   dd16a:	9604      	str	r6, [sp, #16]
   dd16c:	9503      	str	r5, [sp, #12]
   dd16e:	9401      	str	r4, [sp, #4]
   dd170:	9400      	str	r4, [sp, #0]
   dd172:	f7ff feef 	bl	dcf54 <mbedtls_rsa_rsaes_oaep_encrypt>
   dd176:	e008      	b.n	dd18a <mbedtls_rsa_pkcs1_encrypt+0x36>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
   dd178:	960e      	str	r6, [sp, #56]	; 0x38
   dd17a:	950d      	str	r5, [sp, #52]	; 0x34
   dd17c:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   dd17e:	b007      	add	sp, #28
   dd180:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
   dd184:	f7ff bf7a 	b.w	dd07c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   dd188:	4801      	ldr	r0, [pc, #4]	; (dd190 <mbedtls_rsa_pkcs1_encrypt+0x3c>)
    }
}
   dd18a:	b007      	add	sp, #28
   dd18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dd18e:	bf00      	nop
   dd190:	ffffbf00 	.word	0xffffbf00

000dd194 <mbedtls_rsa_rsaes_oaep_decrypt>:
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
   dd194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd198:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
    RSA_VALIDATE_RET( olen != NULL );

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   dd19c:	2b01      	cmp	r3, #1
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
   dd19e:	4606      	mov	r6, r0
   dd1a0:	468a      	mov	sl, r1
   dd1a2:	9203      	str	r2, [sp, #12]
   dd1a4:	469b      	mov	fp, r3
    RSA_VALIDATE_RET( olen != NULL );

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   dd1a6:	d105      	bne.n	dd1b4 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
   dd1a8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   dd1ac:	2b01      	cmp	r3, #1
   dd1ae:	d001      	beq.n	dd1b4 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dd1b0:	485c      	ldr	r0, [pc, #368]	; (dd324 <mbedtls_rsa_rsaes_oaep_decrypt+0x190>)
   dd1b2:	e0b2      	b.n	dd31a <mbedtls_rsa_rsaes_oaep_decrypt+0x186>

    ilen = ctx->len;
   dd1b4:	6877      	ldr	r7, [r6, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
   dd1b6:	f1a7 0310 	sub.w	r3, r7, #16
   dd1ba:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
   dd1be:	d8f7      	bhi.n	dd1b0 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   dd1c0:	f896 00a8 	ldrb.w	r0, [r6, #168]	; 0xa8
   dd1c4:	f7fd fbe4 	bl	da990 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   dd1c8:	9002      	str	r0, [sp, #8]
   dd1ca:	2800      	cmp	r0, #0
   dd1cc:	d0f0      	beq.n	dd1b0 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   dd1ce:	f7fd fd17 	bl	dac00 <mbedtls_md_get_size>

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
   dd1d2:	f100 0801 	add.w	r8, r0, #1
   dd1d6:	ea4f 0548 	mov.w	r5, r8, lsl #1
   dd1da:	42af      	cmp	r7, r5

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   dd1dc:	4604      	mov	r4, r0

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
   dd1de:	d3e7      	bcc.n	dd1b0 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
   dd1e0:	f10d 0960 	add.w	r9, sp, #96	; 0x60
    /*
     * RSA operation
     */
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   dd1e4:	f1bb 0f00 	cmp.w	fp, #0
   dd1e8:	d106      	bne.n	dd1f8 <mbedtls_rsa_rsaes_oaep_decrypt+0x64>
   dd1ea:	464a      	mov	r2, r9
   dd1ec:	f8dd 1494 	ldr.w	r1, [sp, #1172]	; 0x494
   dd1f0:	4630      	mov	r0, r6
   dd1f2:	f7ff fcb5 	bl	dcb60 <mbedtls_rsa_public>
   dd1f6:	e008      	b.n	dd20a <mbedtls_rsa_rsaes_oaep_decrypt+0x76>
   dd1f8:	f8cd 9000 	str.w	r9, [sp]
   dd1fc:	f8dd 3494 	ldr.w	r3, [sp, #1172]	; 0x494
   dd200:	9a03      	ldr	r2, [sp, #12]
   dd202:	4651      	mov	r1, sl
   dd204:	4630      	mov	r0, r6
   dd206:	f7ff fced 	bl	dcbe4 <mbedtls_rsa_private>
   dd20a:	4682      	mov	sl, r0

    if( ret != 0 )
   dd20c:	2800      	cmp	r0, #0
   dd20e:	d13c      	bne.n	dd28a <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;

    /*
     * Unmask data and generate lHash
     */
    mbedtls_md_init( &md_ctx );
   dd210:	ae05      	add	r6, sp, #20
   dd212:	4630      	mov	r0, r6
   dd214:	f7fd fbc8 	bl	da9a8 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   dd218:	4652      	mov	r2, sl
   dd21a:	9902      	ldr	r1, [sp, #8]
   dd21c:	4630      	mov	r0, r6
   dd21e:	f7fd fbe3 	bl	da9e8 <mbedtls_md_setup>
   dd222:	4682      	mov	sl, r0
   dd224:	b108      	cbz	r0, dd22a <mbedtls_rsa_rsaes_oaep_decrypt+0x96>
    {
        mbedtls_md_free( &md_ctx );
   dd226:	4630      	mov	r0, r6
   dd228:	e03b      	b.n	dd2a2 <mbedtls_rsa_rsaes_oaep_decrypt+0x10e>
        goto cleanup;
    }

    /* seed: Apply seedMask to maskedSeed */
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
   dd22a:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
   dd22e:	44c8      	add	r8, r9
   dd230:	ebc4 0b0b 	rsb	fp, r4, fp
   dd234:	9600      	str	r6, [sp, #0]
   dd236:	465b      	mov	r3, fp
   dd238:	4642      	mov	r2, r8
   dd23a:	4621      	mov	r1, r4
   dd23c:	f10d 0061 	add.w	r0, sp, #97	; 0x61
   dd240:	f7ff f9e0 	bl	dc604 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
                          &md_ctx ) ) != 0 ||
   dd244:	4682      	mov	sl, r0
   dd246:	bb58      	cbnz	r0, dd2a0 <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
    /* DB: Apply dbMask to maskedDB */
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
   dd248:	9600      	str	r6, [sp, #0]
   dd24a:	4623      	mov	r3, r4
   dd24c:	f10d 0261 	add.w	r2, sp, #97	; 0x61
   dd250:	4659      	mov	r1, fp
   dd252:	4640      	mov	r0, r8
   dd254:	f7ff f9d6 	bl	dc604 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
        goto cleanup;
    }

    /* seed: Apply seedMask to maskedSeed */
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
                          &md_ctx ) ) != 0 ||
   dd258:	4682      	mov	sl, r0
   dd25a:	bb08      	cbnz	r0, dd2a0 <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
   dd25c:	e024      	b.n	dd2a8 <mbedtls_rsa_rsaes_oaep_decrypt+0x114>
     * The only information "leaked" is whether the padding was correct or not
     * (eg, no data is copied if it was not correct). This meets the
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
   dd25e:	5c88      	ldrb	r0, [r1, r2]
   dd260:	f080 0001 	eor.w	r0, r0, #1
   dd264:	ea50 030e 	orrs.w	r3, r0, lr
   dd268:	d151      	bne.n	dd30e <mbedtls_rsa_rsaes_oaep_decrypt+0x17a>
        pad_done |= p[i];
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
    }

    p += pad_len;
    bad |= *p++ ^ 0x01;
   dd26a:	3201      	adds	r2, #1
   dd26c:	4411      	add	r1, r2
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
   dd26e:	aa18      	add	r2, sp, #96	; 0x60
   dd270:	1a8a      	subs	r2, r1, r2
   dd272:	f8dd 049c 	ldr.w	r0, [sp, #1180]	; 0x49c
   dd276:	1aba      	subs	r2, r7, r2
   dd278:	4282      	cmp	r2, r0
   dd27a:	d84b      	bhi.n	dd314 <mbedtls_rsa_rsaes_oaep_decrypt+0x180>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
   dd27c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   dd280:	6002      	str	r2, [r0, #0]
    memcpy( output, p, *olen );
   dd282:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
   dd286:	f00a fdee 	bl	e7e66 <memcpy>
    ret = 0;

cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
   dd28a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   dd28e:	a818      	add	r0, sp, #96	; 0x60
   dd290:	f7ff f9ae 	bl	dc5f0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( lhash, sizeof( lhash ) );
   dd294:	a808      	add	r0, sp, #32
   dd296:	2140      	movs	r1, #64	; 0x40
   dd298:	f7ff f9aa 	bl	dc5f0 <mbedtls_platform_zeroize>

    return( ret );
   dd29c:	4650      	mov	r0, sl
   dd29e:	e03c      	b.n	dd31a <mbedtls_rsa_rsaes_oaep_decrypt+0x186>
                          &md_ctx ) ) != 0 ||
    /* DB: Apply dbMask to maskedDB */
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
                          &md_ctx ) ) != 0 )
    {
        mbedtls_md_free( &md_ctx );
   dd2a0:	a805      	add	r0, sp, #20
   dd2a2:	f7fd fb86 	bl	da9b2 <mbedtls_md_free>
        goto cleanup;
   dd2a6:	e7f0      	b.n	dd28a <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    }

    mbedtls_md_free( &md_ctx );
   dd2a8:	4630      	mov	r0, r6

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
   dd2aa:	ae08      	add	r6, sp, #32
    {
        mbedtls_md_free( &md_ctx );
        goto cleanup;
    }

    mbedtls_md_free( &md_ctx );
   dd2ac:	f7fd fb81 	bl	da9b2 <mbedtls_md_free>

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
   dd2b0:	4633      	mov	r3, r6
   dd2b2:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
   dd2b6:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
   dd2ba:	9802      	ldr	r0, [sp, #8]
   dd2bc:	f7fd fbd4 	bl	daa68 <mbedtls_md>
   dd2c0:	4682      	mov	sl, r0
   dd2c2:	2800      	cmp	r0, #0
   dd2c4:	d1e1      	bne.n	dd28a <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */
   dd2c6:	f10d 0361 	add.w	r3, sp, #97	; 0x61
     * Check contents, in "constant-time"
     */
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */
   dd2ca:	f899 e000 	ldrb.w	lr, [r9]

    p += hlen; /* Skip seed */
   dd2ce:	1919      	adds	r1, r3, r4

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
   dd2d0:	4650      	mov	r0, sl
   dd2d2:	42a0      	cmp	r0, r4
   dd2d4:	d208      	bcs.n	dd2e8 <mbedtls_rsa_rsaes_oaep_decrypt+0x154>
        bad |= lhash[i] ^ *p++;
   dd2d6:	5c32      	ldrb	r2, [r6, r0]
   dd2d8:	f811 c000 	ldrb.w	ip, [r1, r0]
   dd2dc:	ea82 0c0c 	eor.w	ip, r2, ip
   dd2e0:	ea4c 0e0e 	orr.w	lr, ip, lr
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
   dd2e4:	3001      	adds	r0, #1
   dd2e6:	e7f4      	b.n	dd2d2 <mbedtls_rsa_rsaes_oaep_decrypt+0x13e>
   dd2e8:	4421      	add	r1, r4
   dd2ea:	1b7d      	subs	r5, r7, r5

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
   dd2ec:	2400      	movs	r4, #0
   dd2ee:	460e      	mov	r6, r1
   dd2f0:	440d      	add	r5, r1
   dd2f2:	4622      	mov	r2, r4
   dd2f4:	42b5      	cmp	r5, r6
   dd2f6:	d0b2      	beq.n	dd25e <mbedtls_rsa_rsaes_oaep_decrypt+0xca>
    {
        pad_done |= p[i];
   dd2f8:	f816 0b01 	ldrb.w	r0, [r6], #1
   dd2fc:	4304      	orrs	r4, r0
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   dd2fe:	4260      	negs	r0, r4
   dd300:	4320      	orrs	r0, r4
   dd302:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   dd306:	f080 0001 	eor.w	r0, r0, #1
   dd30a:	4402      	add	r2, r0

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
   dd30c:	e7f2      	b.n	dd2f4 <mbedtls_rsa_rsaes_oaep_decrypt+0x160>
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
   dd30e:	f8df a018 	ldr.w	sl, [pc, #24]	; dd328 <mbedtls_rsa_rsaes_oaep_decrypt+0x194>
   dd312:	e7ba      	b.n	dd28a <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
   dd314:	f8df a014 	ldr.w	sl, [pc, #20]	; dd32c <mbedtls_rsa_rsaes_oaep_decrypt+0x198>
   dd318:	e7b7      	b.n	dd28a <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
    mbedtls_platform_zeroize( lhash, sizeof( lhash ) );

    return( ret );
}
   dd31a:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
   dd31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd322:	bf00      	nop
   dd324:	ffffbf80 	.word	0xffffbf80
   dd328:	ffffbf00 	.word	0xffffbf00
   dd32c:	ffffbc00 	.word	0xffffbc00

000dd330 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len )
{
   dd330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ilen = ctx->len;
    plaintext_max_size = ( output_max_len > ilen - 11 ?
                           ilen - 11 :
                           output_max_len );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   dd334:	2b01      	cmp	r3, #1
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len )
{
   dd336:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
   dd33a:	461f      	mov	r7, r3
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output_max_len == 0 || output != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( olen != NULL );

    ilen = ctx->len;
   dd33c:	6845      	ldr	r5, [r0, #4]
    plaintext_max_size = ( output_max_len > ilen - 11 ?
                           ilen - 11 :
                           output_max_len );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   dd33e:	d104      	bne.n	dd34a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1a>
   dd340:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   dd344:	2b00      	cmp	r3, #0
   dd346:	f040 80be 	bne.w	dd4c6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x196>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    if( ilen < 16 || ilen > sizeof( buf ) )
   dd34a:	f1a5 0310 	sub.w	r3, r5, #16
   dd34e:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
   dd352:	f200 80b8 	bhi.w	dd4c6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x196>
   dd356:	ae02      	add	r6, sp, #8
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   dd358:	b94f      	cbnz	r7, dd36e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x3e>
   dd35a:	4632      	mov	r2, r6
   dd35c:	f8dd 142c 	ldr.w	r1, [sp, #1068]	; 0x42c
   dd360:	f7ff fbfe 	bl	dcb60 <mbedtls_rsa_public>

    if( ret != 0 )
   dd364:	4604      	mov	r4, r0
   dd366:	2800      	cmp	r0, #0
   dd368:	f040 80a6 	bne.w	dd4b8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x188>
   dd36c:	e025      	b.n	dd3ba <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x8a>
    if( ilen < 16 || ilen > sizeof( buf ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   dd36e:	9600      	str	r6, [sp, #0]
   dd370:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
   dd374:	f7ff fc36 	bl	dcbe4 <mbedtls_rsa_private>

    if( ret != 0 )
   dd378:	4604      	mov	r4, r0
   dd37a:	2800      	cmp	r0, #0
   dd37c:	f040 809c 	bne.w	dd4b8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x188>

    /* Check and get padding length in constant time and constant
     * memory trace. The first byte must be 0. */
    bad |= buf[0];

    if( mode == MBEDTLS_RSA_PRIVATE )
   dd380:	2f01      	cmp	r7, #1
    if( ret != 0 )
        goto cleanup;

    /* Check and get padding length in constant time and constant
     * memory trace. The first byte must be 0. */
    bad |= buf[0];
   dd382:	7832      	ldrb	r2, [r6, #0]

    if( mode == MBEDTLS_RSA_PRIVATE )
   dd384:	d11a      	bne.n	dd3bc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x8c>
    {
        /* Decode EME-PKCS1-v1_5 padding: 0x00 || 0x02 || PS || 0x00
         * where PS must be at least 8 nonzero bytes. */
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;
   dd386:	7873      	ldrb	r3, [r6, #1]
   dd388:	f083 0302 	eor.w	r3, r3, #2
   dd38c:	4313      	orrs	r3, r2
     * attack. Potential side channels include overall timing, memory
     * access patterns (especially visible to an adversary who has access
     * to a shared memory cache), and branches (especially visible to
     * an adversary who has access to a shared code cache or to a shared
     * branch predictor). */
    size_t pad_count = 0;
   dd38e:	4601      	mov	r1, r0
         * where PS must be at least 8 nonzero bytes. */
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count. */
        for( i = 2; i < ilen; i++ )
   dd390:	2402      	movs	r4, #2
        {
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
   dd392:	5d37      	ldrb	r7, [r6, r4]
   dd394:	427a      	negs	r2, r7
   dd396:	433a      	orrs	r2, r7
   dd398:	f3c2 12c0 	ubfx	r2, r2, #7, #1
   dd39c:	f082 0201 	eor.w	r2, r2, #1
   dd3a0:	4310      	orrs	r0, r2
   dd3a2:	b2c0      	uxtb	r0, r0
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   dd3a4:	4242      	negs	r2, r0
   dd3a6:	4302      	orrs	r2, r0
   dd3a8:	f3c2 12c0 	ubfx	r2, r2, #7, #1
         * where PS must be at least 8 nonzero bytes. */
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count. */
        for( i = 2; i < ilen; i++ )
   dd3ac:	3401      	adds	r4, #1
        {
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   dd3ae:	f082 0201 	eor.w	r2, r2, #1
         * where PS must be at least 8 nonzero bytes. */
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count. */
        for( i = 2; i < ilen; i++ )
   dd3b2:	42a5      	cmp	r5, r4
        {
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   dd3b4:	4411      	add	r1, r2
         * where PS must be at least 8 nonzero bytes. */
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count. */
        for( i = 2; i < ilen; i++ )
   dd3b6:	d1ec      	bne.n	dd392 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x62>
   dd3b8:	e01b      	b.n	dd3f2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xc2>
    if( ret != 0 )
        goto cleanup;

    /* Check and get padding length in constant time and constant
     * memory trace. The first byte must be 0. */
    bad |= buf[0];
   dd3ba:	7832      	ldrb	r2, [r6, #0]
    }
    else
    {
        /* Decode EMSA-PKCS1-v1_5 padding: 0x00 || 0x01 || PS || 0x00
         * where PS must be at least 8 bytes with the value 0xFF. */
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;
   dd3bc:	7873      	ldrb	r3, [r6, #1]
     * to a shared memory cache), and branches (especially visible to
     * an adversary who has access to a shared code cache or to a shared
     * branch predictor). */
    size_t pad_count = 0;
    unsigned bad = 0;
    unsigned char pad_done = 0;
   dd3be:	2000      	movs	r0, #0
    }
    else
    {
        /* Decode EMSA-PKCS1-v1_5 padding: 0x00 || 0x01 || PS || 0x00
         * where PS must be at least 8 bytes with the value 0xFF. */
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;
   dd3c0:	f083 0301 	eor.w	r3, r3, #1
   dd3c4:	4313      	orrs	r3, r2
     * attack. Potential side channels include overall timing, memory
     * access patterns (especially visible to an adversary who has access
     * to a shared memory cache), and branches (especially visible to
     * an adversary who has access to a shared code cache or to a shared
     * branch predictor). */
    size_t pad_count = 0;
   dd3c6:	4601      	mov	r1, r0
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
   dd3c8:	2702      	movs	r7, #2
        {
            pad_done |= if_int( buf[i], 0, 1 );
   dd3ca:	5df2      	ldrb	r2, [r6, r7]
   dd3cc:	2a00      	cmp	r2, #0
   dd3ce:	bf08      	it	eq
   dd3d0:	f040 0001 	orreq.w	r0, r0, #1
   dd3d4:	b2c0      	uxtb	r0, r0
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   dd3d6:	4244      	negs	r4, r0
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
        {
            pad_done |= if_int( buf[i], 0, 1 );
            pad_count += if_int( pad_done, 0, 1 );
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
   dd3d8:	43d2      	mvns	r2, r2
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   dd3da:	17e4      	asrs	r4, r4, #31
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
        {
            pad_done |= if_int( buf[i], 0, 1 );
            pad_count += if_int( pad_done, 0, 1 );
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
   dd3dc:	b2d2      	uxtb	r2, r2
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
        {
            pad_done |= if_int( buf[i], 0, 1 );
            pad_count += if_int( pad_done, 0, 1 );
   dd3de:	f104 0e01 	add.w	lr, r4, #1
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
   dd3e2:	3701      	adds	r7, #1
        {
            pad_done |= if_int( buf[i], 0, 1 );
            pad_count += if_int( pad_done, 0, 1 );
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
   dd3e4:	4014      	ands	r4, r2
   dd3e6:	4062      	eors	r2, r4
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
   dd3e8:	42bd      	cmp	r5, r7
        {
            pad_done |= if_int( buf[i], 0, 1 );
            pad_count += if_int( pad_done, 0, 1 );
   dd3ea:	4471      	add	r1, lr
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
   dd3ec:	ea43 0302 	orr.w	r3, r3, r2
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
   dd3f0:	d1eb      	bne.n	dd3ca <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x9a>
    RSA_VALIDATE_RET( olen != NULL );

    ilen = ctx->len;
    plaintext_max_size = ( output_max_len > ilen - 11 ?
                           ilen - 11 :
                           output_max_len );
   dd3f2:	f8dd 4434 	ldr.w	r4, [sp, #1076]	; 0x434
   dd3f6:	f1a5 020b 	sub.w	r2, r5, #11
   dd3fa:	42a2      	cmp	r2, r4
   dd3fc:	bf28      	it	cs
   dd3fe:	4622      	movcs	r2, r4
   dd400:	f1a1 0408 	sub.w	r4, r1, #8
   dd404:	ea43 73d4 	orr.w	r3, r3, r4, lsr #31

    /* If pad_done is still zero, there's no data, only unfinished padding. */
    bad |= if_int( pad_done, 0, 1 );

    /* There must be at least 8 bytes of padding. */
    bad |= size_greater_than( 8, pad_count );
   dd408:	4244      	negs	r4, r0
   dd40a:	4320      	orrs	r0, r4
   dd40c:	2800      	cmp	r0, #0
   dd40e:	bfb4      	ite	lt
   dd410:	4618      	movlt	r0, r3
   dd412:	f043 0001 	orrge.w	r0, r3, #1
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   dd416:	4243      	negs	r3, r0
   dd418:	4303      	orrs	r3, r0
     * is invalid, avoid leaking this fact through the size of the
     * output: use the maximum message size that fits in the output
     * buffer. Do it without branches to avoid leaking the padding
     * validity through timing. RSA keys are small enough that all the
     * size_t values involved fit in unsigned int. */
    plaintext_size = if_int( bad,
   dd41a:	1eef      	subs	r7, r5, #3
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   dd41c:	17db      	asrs	r3, r3, #31
     * is invalid, avoid leaking this fact through the size of the
     * output: use the maximum message size that fits in the output
     * buffer. Do it without branches to avoid leaking the padding
     * validity through timing. RSA keys are small enough that all the
     * size_t values involved fit in unsigned int. */
    plaintext_size = if_int( bad,
   dd41e:	1a7f      	subs	r7, r7, r1
 * \return          \c if1 if \p cond is nonzero, otherwise \c if0.
 */
static unsigned if_int( unsigned cond, unsigned if1, unsigned if0 )
{
    unsigned mask = all_or_nothing_int( cond );
    return( ( mask & if1 ) | (~mask & if0 ) );
   dd420:	2b00      	cmp	r3, #0
   dd422:	bf18      	it	ne
   dd424:	4617      	movne	r7, r2
 * \return          \c 1 if `size > max`.
 */
static unsigned size_greater_than( size_t size, size_t max )
{
    /* Return the sign bit (1 for negative) of (max - size). */
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
   dd426:	1bd1      	subs	r1, r2, r7
   dd428:	0fc9      	lsrs	r1, r1, #31
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   dd42a:	f1c1 0e00 	rsb	lr, r1, #0
     * data that we're about to copy to the output buffer.
     * We need to copy the same amount of data
     * from the same buffer whether the padding is good or not to
     * avoid leaking the padding validity through overall timing or
     * through memory or cache access patterns. */
    bad = all_or_nothing_int( bad | output_too_large );
   dd42e:	4308      	orrs	r0, r1
   dd430:	f40e 4488 	and.w	r4, lr, #17408	; 0x4400
     * - OUTPUT_TOO_LARGE if the padding is good but the decrypted
     *   plaintext does not fit in the output buffer.
     * - 0 if the padding is correct. */
    ret = - (int) if_int( bad, - MBEDTLS_ERR_RSA_INVALID_PADDING,
                  if_int( output_too_large, - MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE,
                          0 ) );
   dd434:	2b00      	cmp	r3, #0
   dd436:	bf18      	it	ne
   dd438:	f44f 4482 	movne.w	r4, #16640	; 0x4100
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   dd43c:	4243      	negs	r3, r0
   dd43e:	4318      	orrs	r0, r3
   dd440:	17c0      	asrs	r0, r0, #31
     * - OUTPUT_TOO_LARGE if the padding is good but the decrypted
     *   plaintext does not fit in the output buffer.
     * - 0 if the padding is correct. */
    ret = - (int) if_int( bad, - MBEDTLS_ERR_RSA_INVALID_PADDING,
                  if_int( output_too_large, - MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE,
                          0 ) );
   dd442:	4264      	negs	r4, r4
   dd444:	f10d 0313 	add.w	r3, sp, #19
     * from the same buffer whether the padding is good or not to
     * avoid leaking the padding validity through overall timing or
     * through memory or cache access patterns. */
    bad = all_or_nothing_int( bad | output_too_large );
    for( i = 11; i < ilen; i++ )
        buf[i] &= ~bad;
   dd448:	43c0      	mvns	r0, r0
   dd44a:	7819      	ldrb	r1, [r3, #0]
   dd44c:	4001      	ands	r1, r0
   dd44e:	f803 1b01 	strb.w	r1, [r3], #1
     * We need to copy the same amount of data
     * from the same buffer whether the padding is good or not to
     * avoid leaking the padding validity through overall timing or
     * through memory or cache access patterns. */
    bad = all_or_nothing_int( bad | output_too_large );
    for( i = 11; i < ilen; i++ )
   dd452:	1b99      	subs	r1, r3, r6
   dd454:	428d      	cmp	r5, r1
   dd456:	d8f8      	bhi.n	dd44a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x11a>
     * the working buffer, i.e. make it start plaintext_max_size from
     * the end of the buffer. Do this with a memory access trace that
     * does not depend on the plaintext size. After this move, the
     * starting location of the plaintext is no longer sensitive
     * information. */
    mem_move_to_left( buf + ilen - plaintext_max_size,
   dd458:	1aa9      	subs	r1, r5, r2
 * \return          \c if1 if \p cond is nonzero, otherwise \c if0.
 */
static unsigned if_int( unsigned cond, unsigned if1, unsigned if0 )
{
    unsigned mask = all_or_nothing_int( cond );
    return( ( mask & if1 ) | (~mask & if0 ) );
   dd45a:	f1be 0f00 	cmp.w	lr, #0
   dd45e:	bf18      	it	ne
   dd460:	4617      	movne	r7, r2
     * the working buffer, i.e. make it start plaintext_max_size from
     * the end of the buffer. Do this with a memory access trace that
     * does not depend on the plaintext size. After this move, the
     * starting location of the plaintext is no longer sensitive
     * information. */
    mem_move_to_left( buf + ilen - plaintext_max_size,
   dd462:	4431      	add	r1, r6
                              size_t total,
                              size_t offset )
{
    volatile unsigned char *buf = (volatile unsigned char *)start;
    size_t i, n;
    if( total == 0 )
   dd464:	b93a      	cbnz	r2, dd476 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x146>
                      plaintext_max_size,
                      plaintext_max_size - plaintext_size );

    /* Finally copy the decrypted plaintext plus trailing zeros
     * into the output buffer. */
    memcpy( output, buf + ilen - plaintext_max_size, plaintext_max_size );
   dd466:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
   dd46a:	f00a fcfc 	bl	e7e66 <memcpy>

    /* Report the amount of data we copied to the output buffer. In case
     * of errors (bad padding or output too large), the value of *olen
     * when this function returns is not specified. Making it equivalent
     * to the good case limits the risks of leaking the padding validity. */
    *olen = plaintext_size;
   dd46e:	f8dd 3428 	ldr.w	r3, [sp, #1064]	; 0x428
   dd472:	601f      	str	r7, [r3, #0]
   dd474:	e020      	b.n	dd4b8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x188>
    {
        unsigned no_op = size_greater_than( total - offset, i );
        /* The first `total - offset` passes are a no-op. The last
         * `offset` passes shift the data one byte to the left and
         * zero out the last byte. */
        for( n = 0; n < total - 1; n++ )
   dd476:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
                              size_t total,
                              size_t offset )
{
    volatile unsigned char *buf = (volatile unsigned char *)start;
    size_t i, n;
    if( total == 0 )
   dd47a:	2500      	movs	r5, #0
        {
            unsigned char current = buf[n];
            unsigned char next = buf[n+1];
            buf[n] = if_int( no_op, current, next );
        }
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
   dd47c:	eb01 0c08 	add.w	ip, r1, r8
 * \return          \c 1 if `size > max`.
 */
static unsigned size_greater_than( size_t size, size_t max )
{
    /* Return the sign bit (1 for negative) of (max - size). */
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
   dd480:	1beb      	subs	r3, r5, r7
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   dd482:	17db      	asrs	r3, r3, #31
    {
        unsigned no_op = size_greater_than( total - offset, i );
        /* The first `total - offset` passes are a no-op. The last
         * `offset` passes shift the data one byte to the left and
         * zero out the last byte. */
        for( n = 0; n < total - 1; n++ )
   dd484:	2000      	movs	r0, #0
   dd486:	4580      	cmp	r8, r0
   dd488:	d90c      	bls.n	dd4a4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x174>
        {
            unsigned char current = buf[n];
   dd48a:	f811 e000 	ldrb.w	lr, [r1, r0]
   dd48e:	eb01 0900 	add.w	r9, r1, r0
            unsigned char next = buf[n+1];
   dd492:	3001      	adds	r0, #1
   dd494:	f811 a000 	ldrb.w	sl, [r1, r0]
            buf[n] = if_int( no_op, current, next );
   dd498:	2b00      	cmp	r3, #0
   dd49a:	bf08      	it	eq
   dd49c:	46d6      	moveq	lr, sl
   dd49e:	f889 e000 	strb.w	lr, [r9]
   dd4a2:	e7f0      	b.n	dd486 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x156>
        }
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
   dd4a4:	f89c 0000 	ldrb.w	r0, [ip]
{
    volatile unsigned char *buf = (volatile unsigned char *)start;
    size_t i, n;
    if( total == 0 )
        return;
    for( i = 0; i < total; i++ )
   dd4a8:	3501      	adds	r5, #1
        {
            unsigned char current = buf[n];
            unsigned char next = buf[n+1];
            buf[n] = if_int( no_op, current, next );
        }
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
   dd4aa:	4003      	ands	r3, r0
   dd4ac:	b2db      	uxtb	r3, r3
{
    volatile unsigned char *buf = (volatile unsigned char *)start;
    size_t i, n;
    if( total == 0 )
        return;
    for( i = 0; i < total; i++ )
   dd4ae:	42aa      	cmp	r2, r5
        {
            unsigned char current = buf[n];
            unsigned char next = buf[n+1];
            buf[n] = if_int( no_op, current, next );
        }
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
   dd4b0:	f88c 3000 	strb.w	r3, [ip]
{
    volatile unsigned char *buf = (volatile unsigned char *)start;
    size_t i, n;
    if( total == 0 )
        return;
    for( i = 0; i < total; i++ )
   dd4b4:	d1e4      	bne.n	dd480 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x150>
   dd4b6:	e7d6      	b.n	dd466 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x136>
     * when this function returns is not specified. Making it equivalent
     * to the good case limits the risks of leaking the padding validity. */
    *olen = plaintext_size;

cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
   dd4b8:	4630      	mov	r0, r6
   dd4ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
   dd4be:	f7ff f897 	bl	dc5f0 <mbedtls_platform_zeroize>

    return( ret );
   dd4c2:	4620      	mov	r0, r4
   dd4c4:	e000      	b.n	dd4c8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x198>
    plaintext_max_size = ( output_max_len > ilen - 11 ?
                           ilen - 11 :
                           output_max_len );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dd4c6:	4802      	ldr	r0, [pc, #8]	; (dd4d0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1a0>)

cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );

    return( ret );
}
   dd4c8:	f50d 6d81 	add.w	sp, sp, #1032	; 0x408
   dd4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd4d0:	ffffbf80 	.word	0xffffbf80

000dd4d4 <mbedtls_rsa_pkcs1_decrypt>:
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
   dd4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd4d6:	b087      	sub	sp, #28
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output_max_len == 0 || output != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( olen != NULL );

    switch( ctx->padding )
   dd4d8:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
   dd4dc:	ac0c      	add	r4, sp, #48	; 0x30
   dd4de:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output_max_len == 0 || output != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( olen != NULL );

    switch( ctx->padding )
   dd4e0:	f1be 0f00 	cmp.w	lr, #0
   dd4e4:	d00c      	beq.n	dd500 <mbedtls_rsa_pkcs1_decrypt+0x2c>
   dd4e6:	f1be 0f01 	cmp.w	lr, #1
   dd4ea:	d112      	bne.n	dd512 <mbedtls_rsa_pkcs1_decrypt+0x3e>

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           olen, input, output,
                                           output_max_len );
   dd4ec:	9402      	str	r4, [sp, #8]
   dd4ee:	2400      	movs	r4, #0
   dd4f0:	9705      	str	r7, [sp, #20]
   dd4f2:	9604      	str	r6, [sp, #16]
   dd4f4:	9503      	str	r5, [sp, #12]
   dd4f6:	9401      	str	r4, [sp, #4]
   dd4f8:	9400      	str	r4, [sp, #0]
   dd4fa:	f7ff fe4b 	bl	dd194 <mbedtls_rsa_rsaes_oaep_decrypt>
   dd4fe:	e009      	b.n	dd514 <mbedtls_rsa_pkcs1_decrypt+0x40>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
   dd500:	970f      	str	r7, [sp, #60]	; 0x3c
   dd502:	960e      	str	r6, [sp, #56]	; 0x38
   dd504:	950d      	str	r5, [sp, #52]	; 0x34
   dd506:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   dd508:	b007      	add	sp, #28
   dd50a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
   dd50e:	f7ff bf0f 	b.w	dd330 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
                                           olen, input, output,
                                           output_max_len );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   dd512:	4801      	ldr	r0, [pc, #4]	; (dd518 <mbedtls_rsa_pkcs1_decrypt+0x44>)
    }
}
   dd514:	b007      	add	sp, #28
   dd516:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dd518:	ffffbf00 	.word	0xffffbf00

000dd51c <mbedtls_rsa_rsassa_pss_sign>:
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
   dd51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd520:	b09f      	sub	sp, #124	; 0x7c
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   dd522:	2b01      	cmp	r3, #1
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
   dd524:	4681      	mov	r9, r0
   dd526:	468b      	mov	fp, r1
   dd528:	9205      	str	r2, [sp, #20]
   dd52a:	9306      	str	r3, [sp, #24]
   dd52c:	f89d 00a0 	ldrb.w	r0, [sp, #160]	; 0xa0
   dd530:	9d2b      	ldr	r5, [sp, #172]	; 0xac
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   dd532:	d105      	bne.n	dd540 <mbedtls_rsa_rsassa_pss_sign+0x24>
   dd534:	f8d9 30a4 	ldr.w	r3, [r9, #164]	; 0xa4
   dd538:	2b01      	cmp	r3, #1
   dd53a:	d001      	beq.n	dd540 <mbedtls_rsa_rsassa_pss_sign+0x24>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dd53c:	485c      	ldr	r0, [pc, #368]	; (dd6b0 <mbedtls_rsa_rsassa_pss_sign+0x194>)
   dd53e:	e0b4      	b.n	dd6aa <mbedtls_rsa_rsassa_pss_sign+0x18e>

    if( f_rng == NULL )
   dd540:	f1bb 0f00 	cmp.w	fp, #0
   dd544:	d0fa      	beq.n	dd53c <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
   dd546:	f8d9 4004 	ldr.w	r4, [r9, #4]

    if( md_alg != MBEDTLS_MD_NONE )
   dd54a:	b130      	cbz	r0, dd55a <mbedtls_rsa_rsassa_pss_sign+0x3e>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
   dd54c:	f7fd fa20 	bl	da990 <mbedtls_md_info_from_type>
        if( md_info == NULL )
   dd550:	2800      	cmp	r0, #0
   dd552:	d0f3      	beq.n	dd53c <mbedtls_rsa_rsassa_pss_sign+0x20>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
   dd554:	f7fd fb54 	bl	dac00 <mbedtls_md_get_size>
   dd558:	9029      	str	r0, [sp, #164]	; 0xa4
    }

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   dd55a:	f899 00a8 	ldrb.w	r0, [r9, #168]	; 0xa8
   dd55e:	f7fd fa17 	bl	da990 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   dd562:	9007      	str	r0, [sp, #28]
   dd564:	2800      	cmp	r0, #0
   dd566:	d0e9      	beq.n	dd53c <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   dd568:	f7fd fb4a 	bl	dac00 <mbedtls_md_get_size>
     * enough room, use the maximum salt length that fits. The constraint is
     * that the hash length plus the salt length plus 2 bytes must be at most
     * the key length. This complies with FIPS 186-4 §5.5 (e) and RFC 8017
     * (PKCS#1 v2.2) §9.1.1 step 3. */
    min_slen = hlen - 2;
    if( olen < hlen + min_slen + 2 )
   dd56c:	0043      	lsls	r3, r0, #1
   dd56e:	429c      	cmp	r4, r3

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   dd570:	4682      	mov	sl, r0
     * enough room, use the maximum salt length that fits. The constraint is
     * that the hash length plus the salt length plus 2 bytes must be at most
     * the key length. This complies with FIPS 186-4 §5.5 (e) and RFC 8017
     * (PKCS#1 v2.2) §9.1.1 step 3. */
    min_slen = hlen - 2;
    if( olen < hlen + min_slen + 2 )
   dd572:	d3e3      	bcc.n	dd53c <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    else if( olen >= hlen + hlen + 2 )
   dd574:	3302      	adds	r3, #2
   dd576:	429c      	cmp	r4, r3
        slen = hlen;
    else
        slen = olen - hlen - 2;
   dd578:	bf3a      	itte	cc
   dd57a:	f1a4 0802 	subcc.w	r8, r4, #2
   dd57e:	ebc0 0808 	rsbcc	r8, r0, r8
     * (PKCS#1 v2.2) §9.1.1 step 3. */
    min_slen = hlen - 2;
    if( olen < hlen + min_slen + 2 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    else if( olen >= hlen + hlen + 2 )
        slen = hlen;
   dd582:	4680      	movcs	r8, r0
    else
        slen = olen - hlen - 2;

    memset( sig, 0, olen );
   dd584:	4622      	mov	r2, r4
   dd586:	2100      	movs	r1, #0
   dd588:	4628      	mov	r0, r5
   dd58a:	f00a fc92 	bl	e7eb2 <memset>

    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
   dd58e:	4642      	mov	r2, r8
   dd590:	a90e      	add	r1, sp, #56	; 0x38
   dd592:	9805      	ldr	r0, [sp, #20]
   dd594:	47d8      	blx	fp
   dd596:	b110      	cbz	r0, dd59e <mbedtls_rsa_rsassa_pss_sign+0x82>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   dd598:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
   dd59c:	e085      	b.n	dd6aa <mbedtls_rsa_rsassa_pss_sign+0x18e>

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   dd59e:	f109 0308 	add.w	r3, r9, #8
   dd5a2:	9009      	str	r0, [sp, #36]	; 0x24
   dd5a4:	4618      	mov	r0, r3
   dd5a6:	9303      	str	r3, [sp, #12]
   dd5a8:	f7f9 f876 	bl	d6698 <mbedtls_mpi_bitlen>
    p += olen - hlen - slen - 2;
   dd5ac:	ebca 0304 	rsb	r3, sl, r4
   dd5b0:	ebc8 0203 	rsb	r2, r8, r3
    *p++ = 0x01;
   dd5b4:	1e56      	subs	r6, r2, #1
   dd5b6:	442a      	add	r2, r5
   dd5b8:	2101      	movs	r1, #1
   dd5ba:	442e      	add	r6, r5
   dd5bc:	f802 1c02 	strb.w	r1, [r2, #-2]
    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   dd5c0:	9008      	str	r0, [sp, #32]
    p += olen - hlen - slen - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
   dd5c2:	4642      	mov	r2, r8
   dd5c4:	a90e      	add	r1, sp, #56	; 0x38
    p += slen;

    mbedtls_md_init( &md_ctx );
   dd5c6:	af0b      	add	r7, sp, #44	; 0x2c

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen - slen - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
   dd5c8:	4630      	mov	r0, r6
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen - slen - 2;
   dd5ca:	9304      	str	r3, [sp, #16]
    *p++ = 0x01;
    memcpy( p, salt, slen );
   dd5cc:	f00a fc4b 	bl	e7e66 <memcpy>
    p += slen;

    mbedtls_md_init( &md_ctx );
   dd5d0:	4638      	mov	r0, r7
   dd5d2:	f7fd f9e9 	bl	da9a8 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   dd5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dd5d8:	9907      	ldr	r1, [sp, #28]
   dd5da:	461a      	mov	r2, r3
   dd5dc:	4638      	mov	r0, r7
   dd5de:	f7fd fa03 	bl	da9e8 <mbedtls_md_setup>
   dd5e2:	4602      	mov	r2, r0
   dd5e4:	2800      	cmp	r0, #0
   dd5e6:	d149      	bne.n	dd67c <mbedtls_rsa_rsassa_pss_sign+0x160>
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
   dd5e8:	4638      	mov	r0, r7
   dd5ea:	f7fd fa1f 	bl	daa2c <mbedtls_md_starts>
   dd5ee:	4602      	mov	r2, r0
   dd5f0:	2800      	cmp	r0, #0
   dd5f2:	d143      	bne.n	dd67c <mbedtls_rsa_rsassa_pss_sign+0x160>
    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen - slen - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;
   dd5f4:	4446      	add	r6, r8
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
   dd5f6:	2208      	movs	r2, #8
   dd5f8:	4631      	mov	r1, r6
   dd5fa:	4638      	mov	r0, r7
   dd5fc:	f7fd fa20 	bl	daa40 <mbedtls_md_update>
   dd600:	4602      	mov	r2, r0
   dd602:	2800      	cmp	r0, #0
   dd604:	d13a      	bne.n	dd67c <mbedtls_rsa_rsassa_pss_sign+0x160>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )
   dd606:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   dd608:	992a      	ldr	r1, [sp, #168]	; 0xa8
   dd60a:	4638      	mov	r0, r7
   dd60c:	f7fd fa18 	bl	daa40 <mbedtls_md_update>
   dd610:	4602      	mov	r2, r0
   dd612:	bb98      	cbnz	r0, dd67c <mbedtls_rsa_rsassa_pss_sign+0x160>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )
   dd614:	4642      	mov	r2, r8
   dd616:	a90e      	add	r1, sp, #56	; 0x38
   dd618:	4638      	mov	r0, r7
   dd61a:	f7fd fa11 	bl	daa40 <mbedtls_md_update>
   dd61e:	4602      	mov	r2, r0
   dd620:	bb60      	cbnz	r0, dd67c <mbedtls_rsa_rsassa_pss_sign+0x160>
        goto exit;
    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )
   dd622:	4631      	mov	r1, r6
   dd624:	4638      	mov	r0, r7
   dd626:	f7fd fa15 	bl	daa54 <mbedtls_md_finish>
   dd62a:	4602      	mov	r2, r0
   dd62c:	bb30      	cbnz	r0, dd67c <mbedtls_rsa_rsassa_pss_sign+0x160>
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    size_t slen, min_slen, hlen, offset = 0;
   dd62e:	9b08      	ldr	r3, [sp, #32]
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
   dd630:	9700      	str	r7, [sp, #0]
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    size_t slen, min_slen, hlen, offset = 0;
   dd632:	3b01      	subs	r3, #1
   dd634:	f013 0f07 	tst.w	r3, #7
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
   dd638:	9b04      	ldr	r3, [sp, #16]
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    size_t slen, min_slen, hlen, offset = 0;
   dd63a:	bf0c      	ite	eq
   dd63c:	2001      	moveq	r0, #1
   dd63e:	2000      	movne	r0, #0
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
   dd640:	1e59      	subs	r1, r3, #1
   dd642:	4632      	mov	r2, r6
   dd644:	1a09      	subs	r1, r1, r0
   dd646:	4653      	mov	r3, sl
   dd648:	4428      	add	r0, r5
   dd64a:	f7fe ffdb 	bl	dc604 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
   dd64e:	4602      	mov	r2, r0
   dd650:	b9a0      	cbnz	r0, dd67c <mbedtls_rsa_rsassa_pss_sign+0x160>
   dd652:	9004      	str	r0, [sp, #16]
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   dd654:	9803      	ldr	r0, [sp, #12]
   dd656:	f7f9 f81f 	bl	d6698 <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
   dd65a:	ebc0 00c4 	rsb	r0, r0, r4, lsl #3
   dd65e:	782b      	ldrb	r3, [r5, #0]
   dd660:	3001      	adds	r0, #1
   dd662:	24ff      	movs	r4, #255	; 0xff
   dd664:	fa44 f000 	asr.w	r0, r4, r0
   dd668:	4018      	ands	r0, r3

    p += hlen;
    *p++ = 0xBC;
   dd66a:	23bc      	movs	r3, #188	; 0xbc
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );
   dd66c:	7028      	strb	r0, [r5, #0]

    p += hlen;
    *p++ = 0xBC;

    mbedtls_platform_zeroize( salt, sizeof( salt ) );
   dd66e:	2140      	movs	r1, #64	; 0x40

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );

    p += hlen;
    *p++ = 0xBC;
   dd670:	f806 300a 	strb.w	r3, [r6, sl]

    mbedtls_platform_zeroize( salt, sizeof( salt ) );
   dd674:	a80e      	add	r0, sp, #56	; 0x38
   dd676:	f7fe ffbb 	bl	dc5f0 <mbedtls_platform_zeroize>
   dd67a:	9a04      	ldr	r2, [sp, #16]
   dd67c:	9203      	str	r2, [sp, #12]

exit:
    mbedtls_md_free( &md_ctx );
   dd67e:	a80b      	add	r0, sp, #44	; 0x2c
   dd680:	f7fd f997 	bl	da9b2 <mbedtls_md_free>

    if( ret != 0 )
   dd684:	9a03      	ldr	r2, [sp, #12]
   dd686:	b97a      	cbnz	r2, dd6a8 <mbedtls_rsa_rsassa_pss_sign+0x18c>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, sig, sig )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
   dd688:	9b06      	ldr	r3, [sp, #24]
   dd68a:	b92b      	cbnz	r3, dd698 <mbedtls_rsa_rsassa_pss_sign+0x17c>
   dd68c:	462a      	mov	r2, r5
   dd68e:	4629      	mov	r1, r5
   dd690:	4648      	mov	r0, r9
   dd692:	f7ff fa65 	bl	dcb60 <mbedtls_rsa_public>
   dd696:	e008      	b.n	dd6aa <mbedtls_rsa_rsassa_pss_sign+0x18e>
   dd698:	9500      	str	r5, [sp, #0]
   dd69a:	462b      	mov	r3, r5
   dd69c:	9a05      	ldr	r2, [sp, #20]
   dd69e:	4659      	mov	r1, fp
   dd6a0:	4648      	mov	r0, r9
   dd6a2:	f7ff fa9f 	bl	dcbe4 <mbedtls_rsa_private>
   dd6a6:	e000      	b.n	dd6aa <mbedtls_rsa_rsassa_pss_sign+0x18e>
   dd6a8:	4610      	mov	r0, r2
}
   dd6aa:	b01f      	add	sp, #124	; 0x7c
   dd6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd6b0:	ffffbf80 	.word	0xffffbf80

000dd6b4 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
   dd6b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   dd6b8:	2b01      	cmp	r3, #1
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
   dd6ba:	4689      	mov	r9, r1
   dd6bc:	a90b      	add	r1, sp, #44	; 0x2c
   dd6be:	4605      	mov	r5, r0
   dd6c0:	4692      	mov	sl, r2
   dd6c2:	461c      	mov	r4, r3
   dd6c4:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
   dd6c8:	c986      	ldmia	r1, {r1, r2, r7}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   dd6ca:	d103      	bne.n	dd6d4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x20>
   dd6cc:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   dd6d0:	2b00      	cmp	r3, #0
   dd6d2:	d14b      	bne.n	dd76c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xb8>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
   dd6d4:	9700      	str	r7, [sp, #0]
   dd6d6:	686b      	ldr	r3, [r5, #4]
   dd6d8:	f7fe ffe8 	bl	dc6ac <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
   dd6dc:	2800      	cmp	r0, #0
   dd6de:	d149      	bne.n	dd774 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
   dd6e0:	b93c      	cbnz	r4, dd6f2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
   dd6e2:	463a      	mov	r2, r7
   dd6e4:	4639      	mov	r1, r7
   dd6e6:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
   dd6e8:	b002      	add	sp, #8
   dd6ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
   dd6ee:	f7ff ba37 	b.w	dcb60 <mbedtls_rsa_public>
     *
     * In order to prevent Lenstra's attack, make the signature in a
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
   dd6f2:	686c      	ldr	r4, [r5, #4]
   dd6f4:	2001      	movs	r0, #1
   dd6f6:	4621      	mov	r1, r4
   dd6f8:	f00a fb90 	bl	e7e1c <calloc>
    if( sig_try == NULL )
   dd6fc:	4606      	mov	r6, r0
   dd6fe:	b3b8      	cbz	r0, dd770 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    verif = (unsigned char *)mbedtls_calloc( 1, ctx->len );
   dd700:	4621      	mov	r1, r4
   dd702:	2001      	movs	r0, #1
   dd704:	f00a fb8a 	bl	e7e1c <calloc>
    if( verif == NULL )
   dd708:	4680      	mov	r8, r0
   dd70a:	b918      	cbnz	r0, dd714 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x60>
    {
        mbedtls_free( sig_try );
   dd70c:	4630      	mov	r0, r6
   dd70e:	f008 fa17 	bl	e5b40 <free>
   dd712:	e02d      	b.n	dd770 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
   dd714:	9600      	str	r6, [sp, #0]
   dd716:	463b      	mov	r3, r7
   dd718:	4652      	mov	r2, sl
   dd71a:	4649      	mov	r1, r9
   dd71c:	4628      	mov	r0, r5
   dd71e:	f7ff fa61 	bl	dcbe4 <mbedtls_rsa_private>
   dd722:	4604      	mov	r4, r0
   dd724:	b9d0      	cbnz	r0, dd75c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
   dd726:	4642      	mov	r2, r8
   dd728:	4631      	mov	r1, r6
   dd72a:	4628      	mov	r0, r5
   dd72c:	f7ff fa18 	bl	dcb60 <mbedtls_rsa_public>
   dd730:	4604      	mov	r4, r0
   dd732:	b998      	cbnz	r0, dd75c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
   dd734:	686d      	ldr	r5, [r5, #4]
static inline int mbedtls_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;
   dd736:	4603      	mov	r3, r0

    for( i = 0; i < n; i++ )
   dd738:	4602      	mov	r2, r0
   dd73a:	42aa      	cmp	r2, r5
   dd73c:	d007      	beq.n	dd74e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9a>
        diff |= A[i] ^ B[i];
   dd73e:	f818 0002 	ldrb.w	r0, [r8, r2]
   dd742:	5cb9      	ldrb	r1, [r7, r2]
   dd744:	4041      	eors	r1, r0
   dd746:	430b      	orrs	r3, r1
   dd748:	b2db      	uxtb	r3, r3
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   dd74a:	3201      	adds	r2, #1
   dd74c:	e7f5      	b.n	dd73a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x86>
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
   dd74e:	b923      	cbnz	r3, dd75a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa6>
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
        goto cleanup;
    }

    memcpy( sig, sig_try, ctx->len );
   dd750:	4631      	mov	r1, r6
   dd752:	4638      	mov	r0, r7
   dd754:	f00a fb87 	bl	e7e66 <memcpy>
   dd758:	e000      	b.n	dd75c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
   dd75a:	4c08      	ldr	r4, [pc, #32]	; (dd77c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc8>)
    }

    memcpy( sig, sig_try, ctx->len );

cleanup:
    mbedtls_free( sig_try );
   dd75c:	4630      	mov	r0, r6
   dd75e:	f008 f9ef 	bl	e5b40 <free>
    mbedtls_free( verif );
   dd762:	4640      	mov	r0, r8
   dd764:	f008 f9ec 	bl	e5b40 <free>

    return( ret );
   dd768:	4620      	mov	r0, r4
   dd76a:	e003      	b.n	dd774 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dd76c:	4804      	ldr	r0, [pc, #16]	; (dd780 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xcc>)
   dd76e:	e001      	b.n	dd774 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
    if( sig_try == NULL )
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   dd770:	f06f 000f 	mvn.w	r0, #15
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
   dd774:	b002      	add	sp, #8
   dd776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd77a:	bf00      	nop
   dd77c:	ffffbd00 	.word	0xffffbd00
   dd780:	ffffbf80 	.word	0xffffbf80

000dd784 <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
   dd784:	b5f0      	push	{r4, r5, r6, r7, lr}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    switch( ctx->padding )
   dd786:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
   dd78a:	f89d 4014 	ldrb.w	r4, [sp, #20]
   dd78e:	ad06      	add	r5, sp, #24
   dd790:	cde0      	ldmia	r5, {r5, r6, r7}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    switch( ctx->padding )
   dd792:	f1be 0f00 	cmp.w	lr, #0
   dd796:	d00a      	beq.n	dd7ae <mbedtls_rsa_pkcs1_sign+0x2a>
   dd798:	f1be 0f01 	cmp.w	lr, #1
   dd79c:	d10f      	bne.n	dd7be <mbedtls_rsa_pkcs1_sign+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
   dd79e:	9708      	str	r7, [sp, #32]
   dd7a0:	9607      	str	r6, [sp, #28]
   dd7a2:	9506      	str	r5, [sp, #24]
   dd7a4:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   dd7a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
   dd7aa:	f7ff beb7 	b.w	dd51c <mbedtls_rsa_rsassa_pss_sign>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
   dd7ae:	9708      	str	r7, [sp, #32]
   dd7b0:	9607      	str	r6, [sp, #28]
   dd7b2:	9506      	str	r5, [sp, #24]
   dd7b4:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   dd7b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
   dd7ba:	f7ff bf7b 	b.w	dd6b4 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   dd7be:	4801      	ldr	r0, [pc, #4]	; (dd7c4 <mbedtls_rsa_pkcs1_sign+0x40>)
   dd7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dd7c2:	bf00      	nop
   dd7c4:	ffffbf00 	.word	0xffffbf00

000dd7c8 <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
   dd7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd7cc:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   dd7d0:	2b01      	cmp	r3, #1
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
   dd7d2:	4605      	mov	r5, r0
   dd7d4:	f89d 8488 	ldrb.w	r8, [sp, #1160]	; 0x488
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   dd7d8:	d105      	bne.n	dd7e6 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
   dd7da:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   dd7de:	2801      	cmp	r0, #1
   dd7e0:	d001      	beq.n	dd7e6 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dd7e2:	4861      	ldr	r0, [pc, #388]	; (dd968 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a0>)
   dd7e4:	e0bb      	b.n	dd95e <mbedtls_rsa_rsassa_pss_verify_ext+0x196>

    siglen = ctx->len;
   dd7e6:	686f      	ldr	r7, [r5, #4]

    if( siglen < 16 || siglen > sizeof( buf ) )
   dd7e8:	f1a7 0010 	sub.w	r0, r7, #16
   dd7ec:	f5b0 7f7c 	cmp.w	r0, #1008	; 0x3f0
   dd7f0:	d8f7      	bhi.n	dd7e2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
   dd7f2:	ae18      	add	r6, sp, #96	; 0x60
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
   dd7f4:	b933      	cbnz	r3, dd804 <mbedtls_rsa_rsassa_pss_verify_ext+0x3c>
   dd7f6:	4632      	mov	r2, r6
   dd7f8:	f8dd 149c 	ldr.w	r1, [sp, #1180]	; 0x49c
   dd7fc:	4628      	mov	r0, r5
   dd7fe:	f7ff f9af 	bl	dcb60 <mbedtls_rsa_public>
   dd802:	e005      	b.n	dd810 <mbedtls_rsa_rsassa_pss_verify_ext+0x48>
   dd804:	9600      	str	r6, [sp, #0]
   dd806:	f8dd 349c 	ldr.w	r3, [sp, #1180]	; 0x49c
   dd80a:	4628      	mov	r0, r5
   dd80c:	f7ff f9ea 	bl	dcbe4 <mbedtls_rsa_private>

    if( ret != 0 )
   dd810:	2800      	cmp	r0, #0
   dd812:	f040 80a4 	bne.w	dd95e <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
   dd816:	1e7c      	subs	r4, r7, #1
   dd818:	5d33      	ldrb	r3, [r6, r4]
   dd81a:	2bbc      	cmp	r3, #188	; 0xbc
   dd81c:	f040 809e 	bne.w	dd95c <mbedtls_rsa_rsassa_pss_verify_ext+0x194>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );

    if( md_alg != MBEDTLS_MD_NONE )
   dd820:	f1b8 0f00 	cmp.w	r8, #0
   dd824:	d008      	beq.n	dd838 <mbedtls_rsa_rsassa_pss_verify_ext+0x70>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
   dd826:	4640      	mov	r0, r8
   dd828:	f7fd f8b2 	bl	da990 <mbedtls_md_info_from_type>
        if( md_info == NULL )
   dd82c:	2800      	cmp	r0, #0
   dd82e:	d0d8      	beq.n	dd7e2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
   dd830:	f7fd f9e6 	bl	dac00 <mbedtls_md_get_size>
   dd834:	f8cd 048c 	str.w	r0, [sp, #1164]	; 0x48c
    }

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
   dd838:	f89d 0494 	ldrb.w	r0, [sp, #1172]	; 0x494
   dd83c:	f7fd f8a8 	bl	da990 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   dd840:	4681      	mov	r9, r0
   dd842:	2800      	cmp	r0, #0
   dd844:	d0cd      	beq.n	dd7e2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   dd846:	f7fd f9db 	bl	dac00 <mbedtls_md_get_size>

    memset( zeros, 0, 8 );
   dd84a:	2300      	movs	r3, #0

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   dd84c:	4682      	mov	sl, r0
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   dd84e:	f105 0008 	add.w	r0, r5, #8
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );

    memset( zeros, 0, 8 );
   dd852:	9303      	str	r3, [sp, #12]
   dd854:	9304      	str	r3, [sp, #16]

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   dd856:	f7f8 ff1f 	bl	d6698 <mbedtls_mpi_bitlen>

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
   dd85a:	00fb      	lsls	r3, r7, #3
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   dd85c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
   dd860:	7832      	ldrb	r2, [r6, #0]
   dd862:	f1c3 0308 	rsb	r3, r3, #8
   dd866:	4443      	add	r3, r8
   dd868:	fa52 f303 	asrs.w	r3, r2, r3
   dd86c:	d1b9      	bne.n	dd7e2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
   dd86e:	f018 0f07 	tst.w	r8, #7
    {
        p++;
        siglen -= 1;
   dd872:	bf08      	it	eq
   dd874:	4627      	moveq	r7, r4
    }

    if( siglen < hlen + 2 )
   dd876:	f10a 0302 	add.w	r3, sl, #2
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
    {
        p++;
   dd87a:	bf0c      	ite	eq
   dd87c:	f10d 0561 	addeq.w	r5, sp, #97	; 0x61
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );

    if( ret != 0 )
        return( ret );

    p = buf;
   dd880:	4635      	movne	r5, r6
    {
        p++;
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
   dd882:	429f      	cmp	r7, r3
   dd884:	d3ad      	bcc.n	dd7e2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;

    mbedtls_md_init( &md_ctx );
   dd886:	ac05      	add	r4, sp, #20
   dd888:	4620      	mov	r0, r4
   dd88a:	f7fd f88d 	bl	da9a8 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   dd88e:	2200      	movs	r2, #0
   dd890:	4649      	mov	r1, r9
   dd892:	4620      	mov	r0, r4
   dd894:	f7fd f8a8 	bl	da9e8 <mbedtls_md_setup>
   dd898:	4683      	mov	fp, r0
   dd89a:	2800      	cmp	r0, #0
   dd89c:	d159      	bne.n	dd952 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;
   dd89e:	ea6f 010a 	mvn.w	r1, sl
   dd8a2:	4439      	add	r1, r7
   dd8a4:	eb05 0901 	add.w	r9, r5, r1

    mbedtls_md_init( &md_ctx );
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        goto exit;

    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );
   dd8a8:	9400      	str	r4, [sp, #0]
   dd8aa:	4653      	mov	r3, sl
   dd8ac:	464a      	mov	r2, r9
   dd8ae:	4628      	mov	r0, r5
   dd8b0:	f7fe fea8 	bl	dc604 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
    if( ret != 0 )
   dd8b4:	4683      	mov	fp, r0
   dd8b6:	2800      	cmp	r0, #0
   dd8b8:	d14b      	bne.n	dd952 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    buf[0] &= 0xFF >> ( siglen * 8 - msb );
   dd8ba:	ebc8 07c7 	rsb	r7, r8, r7, lsl #3
   dd8be:	7833      	ldrb	r3, [r6, #0]
   dd8c0:	f04f 08ff 	mov.w	r8, #255	; 0xff
   dd8c4:	fa48 f707 	asr.w	r7, r8, r7
   dd8c8:	401f      	ands	r7, r3
   dd8ca:	7037      	strb	r7, [r6, #0]

    while( p < hash_start - 1 && *p == 0 )
   dd8cc:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   dd8d0:	4295      	cmp	r5, r2
   dd8d2:	4629      	mov	r1, r5
   dd8d4:	d203      	bcs.n	dd8de <mbedtls_rsa_rsassa_pss_verify_ext+0x116>
   dd8d6:	780b      	ldrb	r3, [r1, #0]
   dd8d8:	3501      	adds	r5, #1
   dd8da:	2b00      	cmp	r3, #0
   dd8dc:	d0f8      	beq.n	dd8d0 <mbedtls_rsa_rsassa_pss_verify_ext+0x108>
        p++;

    if( *p++ != 0x01 )
   dd8de:	780b      	ldrb	r3, [r1, #0]
   dd8e0:	2b01      	cmp	r3, #1
   dd8e2:	d134      	bne.n	dd94e <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
   dd8e4:	f8dd 3498 	ldr.w	r3, [sp, #1176]	; 0x498
    buf[0] &= 0xFF >> ( siglen * 8 - msb );

    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
   dd8e8:	1c4d      	adds	r5, r1, #1
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
   dd8ea:	1c5a      	adds	r2, r3, #1
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto exit;
    }

    observed_salt_len = hash_start - p;
   dd8ec:	ebc5 0609 	rsb	r6, r5, r9

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
   dd8f0:	d001      	beq.n	dd8f6 <mbedtls_rsa_rsassa_pss_verify_ext+0x12e>
   dd8f2:	429e      	cmp	r6, r3
   dd8f4:	d12b      	bne.n	dd94e <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
    }

    /*
     * Generate H = Hash( M' )
     */
    ret = mbedtls_md_starts( &md_ctx );
   dd8f6:	4620      	mov	r0, r4
   dd8f8:	f7fd f898 	bl	daa2c <mbedtls_md_starts>
    if ( ret != 0 )
   dd8fc:	4683      	mov	fp, r0
   dd8fe:	bb40      	cbnz	r0, dd952 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, zeros, 8 );
   dd900:	2208      	movs	r2, #8
   dd902:	a903      	add	r1, sp, #12
   dd904:	4620      	mov	r0, r4
   dd906:	f7fd f89b 	bl	daa40 <mbedtls_md_update>
    if ( ret != 0 )
   dd90a:	4683      	mov	fp, r0
   dd90c:	bb08      	cbnz	r0, dd952 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, hash, hashlen );
   dd90e:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
   dd912:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   dd916:	4620      	mov	r0, r4
   dd918:	f7fd f892 	bl	daa40 <mbedtls_md_update>
    if ( ret != 0 )
   dd91c:	4683      	mov	fp, r0
   dd91e:	b9c0      	cbnz	r0, dd952 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );
   dd920:	4632      	mov	r2, r6
   dd922:	4629      	mov	r1, r5
   dd924:	4620      	mov	r0, r4
   dd926:	f7fd f88b 	bl	daa40 <mbedtls_md_update>
    if ( ret != 0 )
   dd92a:	4683      	mov	fp, r0
   dd92c:	b988      	cbnz	r0, dd952 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_finish( &md_ctx, result );
   dd92e:	a908      	add	r1, sp, #32
   dd930:	4620      	mov	r0, r4
   dd932:	f7fd f88f 	bl	daa54 <mbedtls_md_finish>
    if ( ret != 0 )
   dd936:	4683      	mov	fp, r0
   dd938:	b958      	cbnz	r0, dd952 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    if( memcmp( hash_start, result, hlen ) != 0 )
   dd93a:	4652      	mov	r2, sl
   dd93c:	a908      	add	r1, sp, #32
   dd93e:	4648      	mov	r0, r9
   dd940:	f00a fa82 	bl	e7e48 <memcmp>
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   dd944:	4a09      	ldr	r2, [pc, #36]	; (dd96c <mbedtls_rsa_rsassa_pss_verify_ext+0x1a4>)
   dd946:	2800      	cmp	r0, #0
   dd948:	bf18      	it	ne
   dd94a:	4693      	movne	fp, r2
   dd94c:	e001      	b.n	dd952 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
   dd94e:	f8df b020 	ldr.w	fp, [pc, #32]	; dd970 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto exit;
    }

exit:
    mbedtls_md_free( &md_ctx );
   dd952:	4620      	mov	r0, r4
   dd954:	f7fd f82d 	bl	da9b2 <mbedtls_md_free>

    return( ret );
   dd958:	4658      	mov	r0, fp
   dd95a:	e000      	b.n	dd95e <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   dd95c:	4804      	ldr	r0, [pc, #16]	; (dd970 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>)

exit:
    mbedtls_md_free( &md_ctx );

    return( ret );
}
   dd95e:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
   dd962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd966:	bf00      	nop
   dd968:	ffffbf80 	.word	0xffffbf80
   dd96c:	ffffbc80 	.word	0xffffbc80
   dd970:	ffffbf00 	.word	0xffffbf00

000dd974 <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
   dd974:	b570      	push	{r4, r5, r6, lr}
   dd976:	b086      	sub	sp, #24
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
   dd978:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
   dd97c:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
                        hashlen == 0 ) ||
                      hash != NULL );

    mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
                             ? (mbedtls_md_type_t) ctx->hash_id
                             : md_alg;
   dd980:	b10c      	cbz	r4, dd986 <mbedtls_rsa_rsassa_pss_verify+0x12>
   dd982:	b2e4      	uxtb	r4, r4
   dd984:	e000      	b.n	dd988 <mbedtls_rsa_rsassa_pss_verify+0x14>
   dd986:	462c      	mov	r4, r5

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );
   dd988:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   dd98a:	9403      	str	r4, [sp, #12]
   dd98c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   dd98e:	9605      	str	r6, [sp, #20]
   dd990:	9402      	str	r4, [sp, #8]
   dd992:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dd996:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   dd998:	9604      	str	r6, [sp, #16]
   dd99a:	9401      	str	r4, [sp, #4]
   dd99c:	9500      	str	r5, [sp, #0]
   dd99e:	f7ff ff13 	bl	dd7c8 <mbedtls_rsa_rsassa_pss_verify_ext>

}
   dd9a2:	b006      	add	sp, #24
   dd9a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000dd9a8 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
   dd9a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                        hashlen == 0 ) ||
                      hash != NULL );

    sig_len = ctx->len;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   dd9ac:	2b01      	cmp	r3, #1
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
   dd9ae:	4680      	mov	r8, r0
   dd9b0:	468a      	mov	sl, r1
   dd9b2:	4693      	mov	fp, r2
   dd9b4:	4699      	mov	r9, r3
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    sig_len = ctx->len;
   dd9b6:	6845      	ldr	r5, [r0, #4]

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   dd9b8:	d102      	bne.n	dd9c0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x18>
   dd9ba:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   dd9be:	b9eb      	cbnz	r3, dd9fc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x54>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
   dd9c0:	4629      	mov	r1, r5
   dd9c2:	2001      	movs	r0, #1
   dd9c4:	f00a fa2a 	bl	e7e1c <calloc>
   dd9c8:	4606      	mov	r6, r0
   dd9ca:	b1c8      	cbz	r0, dda00 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x58>
   dd9cc:	4629      	mov	r1, r5
   dd9ce:	2001      	movs	r0, #1
   dd9d0:	f00a fa24 	bl	e7e1c <calloc>
   dd9d4:	4607      	mov	r7, r0
   dd9d6:	b9c0      	cbnz	r0, dda0a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
   dd9d8:	f06f 040f 	mvn.w	r4, #15

cleanup:

    if( encoded != NULL )
    {
        mbedtls_platform_zeroize( encoded, sig_len );
   dd9dc:	4630      	mov	r0, r6
   dd9de:	4629      	mov	r1, r5
   dd9e0:	f7fe fe06 	bl	dc5f0 <mbedtls_platform_zeroize>
        mbedtls_free( encoded );
   dd9e4:	4630      	mov	r0, r6
   dd9e6:	f008 f8ab 	bl	e5b40 <free>
    }

    if( encoded_expected != NULL )
   dd9ea:	b167      	cbz	r7, dda06 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    {
        mbedtls_platform_zeroize( encoded_expected, sig_len );
   dd9ec:	4638      	mov	r0, r7
   dd9ee:	4629      	mov	r1, r5
   dd9f0:	f7fe fdfe 	bl	dc5f0 <mbedtls_platform_zeroize>
        mbedtls_free( encoded_expected );
   dd9f4:	4638      	mov	r0, r7
   dd9f6:	f008 f8a3 	bl	e5b40 <free>
   dd9fa:	e004      	b.n	dda06 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
                      hash != NULL );

    sig_len = ctx->len;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dd9fc:	481b      	ldr	r0, [pc, #108]	; (dda6c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>)
   dd9fe:	e031      	b.n	dda64 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
   dda00:	f06f 000f 	mvn.w	r0, #15
   dda04:	e02e      	b.n	dda64 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
   dda06:	4620      	mov	r0, r4
   dda08:	e02c      	b.n	dda64 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
   dda0a:	9000      	str	r0, [sp, #0]
   dda0c:	462b      	mov	r3, r5
   dda0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   dda10:	990d      	ldr	r1, [sp, #52]	; 0x34
   dda12:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   dda16:	f7fe fe49 	bl	dc6ac <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
   dda1a:	4604      	mov	r4, r0
   dda1c:	2800      	cmp	r0, #0
   dda1e:	d1dd      	bne.n	dd9dc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
   dda20:	f1b9 0f00 	cmp.w	r9, #0
   dda24:	d105      	bne.n	dda32 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8a>
   dda26:	4632      	mov	r2, r6
   dda28:	990f      	ldr	r1, [sp, #60]	; 0x3c
   dda2a:	4640      	mov	r0, r8
   dda2c:	f7ff f898 	bl	dcb60 <mbedtls_rsa_public>
   dda30:	e006      	b.n	dda40 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x98>
   dda32:	9600      	str	r6, [sp, #0]
   dda34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dda36:	465a      	mov	r2, fp
   dda38:	4651      	mov	r1, sl
   dda3a:	4640      	mov	r0, r8
   dda3c:	f7ff f8d2 	bl	dcbe4 <mbedtls_rsa_private>
   dda40:	4604      	mov	r4, r0
    if( ret != 0 )
   dda42:	2800      	cmp	r0, #0
   dda44:	d1ca      	bne.n	dd9dc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
   dda46:	4603      	mov	r3, r0
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   dda48:	429d      	cmp	r5, r3
   dda4a:	d006      	beq.n	dda5a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb2>
        diff |= A[i] ^ B[i];
   dda4c:	5cf0      	ldrb	r0, [r6, r3]
   dda4e:	5cfa      	ldrb	r2, [r7, r3]
   dda50:	4050      	eors	r0, r2
   dda52:	4304      	orrs	r4, r0
   dda54:	b2e4      	uxtb	r4, r4
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   dda56:	3301      	adds	r3, #1
   dda58:	e7f6      	b.n	dda48 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa0>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   dda5a:	2c00      	cmp	r4, #0
   dda5c:	4c04      	ldr	r4, [pc, #16]	; (dda70 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>)
   dda5e:	bf08      	it	eq
   dda60:	2400      	moveq	r4, #0
   dda62:	e7bb      	b.n	dd9dc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
        mbedtls_platform_zeroize( encoded_expected, sig_len );
        mbedtls_free( encoded_expected );
    }

    return( ret );
}
   dda64:	b003      	add	sp, #12
   dda66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dda6a:	bf00      	nop
   dda6c:	ffffbf80 	.word	0xffffbf80
   dda70:	ffffbc80 	.word	0xffffbc80

000dda74 <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
   dda74:	b5f0      	push	{r4, r5, r6, r7, lr}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    switch( ctx->padding )
   dda76:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
   dda7a:	f89d 4014 	ldrb.w	r4, [sp, #20]
   dda7e:	ad06      	add	r5, sp, #24
   dda80:	cde0      	ldmia	r5, {r5, r6, r7}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    switch( ctx->padding )
   dda82:	f1be 0f00 	cmp.w	lr, #0
   dda86:	d00a      	beq.n	dda9e <mbedtls_rsa_pkcs1_verify+0x2a>
   dda88:	f1be 0f01 	cmp.w	lr, #1
   dda8c:	d10f      	bne.n	ddaae <mbedtls_rsa_pkcs1_verify+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
   dda8e:	9708      	str	r7, [sp, #32]
   dda90:	9607      	str	r6, [sp, #28]
   dda92:	9506      	str	r5, [sp, #24]
   dda94:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   dda96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
   dda9a:	f7ff bf6b 	b.w	dd974 <mbedtls_rsa_rsassa_pss_verify>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
   dda9e:	9708      	str	r7, [sp, #32]
   ddaa0:	9607      	str	r6, [sp, #28]
   ddaa2:	9506      	str	r5, [sp, #24]
   ddaa4:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   ddaa6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
   ddaaa:	f7ff bf7d 	b.w	dd9a8 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   ddaae:	4801      	ldr	r0, [pc, #4]	; (ddab4 <mbedtls_rsa_pkcs1_verify+0x40>)
   ddab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ddab2:	bf00      	nop
   ddab4:	ffffbf00 	.word	0xffffbf00

000ddab8 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
   ddab8:	b510      	push	{r4, lr}
    if( ctx == NULL )
   ddaba:	4604      	mov	r4, r0
   ddabc:	b3a0      	cbz	r0, ddb28 <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
   ddabe:	308c      	adds	r0, #140	; 0x8c
   ddac0:	f7f8 fcc9 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
   ddac4:	f104 0098 	add.w	r0, r4, #152	; 0x98
   ddac8:	f7f8 fcc5 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
   ddacc:	f104 0068 	add.w	r0, r4, #104	; 0x68
   ddad0:	f7f8 fcc1 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
   ddad4:	f104 0020 	add.w	r0, r4, #32
   ddad8:	f7f8 fcbd 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
   ddadc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   ddae0:	f7f8 fcb9 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
   ddae4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   ddae8:	f7f8 fcb5 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
   ddaec:	f104 0014 	add.w	r0, r4, #20
   ddaf0:	f7f8 fcb1 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
   ddaf4:	f104 0008 	add.w	r0, r4, #8
   ddaf8:	f7f8 fcad 	bl	d6456 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
   ddafc:	f104 0080 	add.w	r0, r4, #128	; 0x80
   ddb00:	f7f8 fca9 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
   ddb04:	f104 0074 	add.w	r0, r4, #116	; 0x74
   ddb08:	f7f8 fca5 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
   ddb0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   ddb10:	f7f8 fca1 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
   ddb14:	f104 0050 	add.w	r0, r4, #80	; 0x50
   ddb18:	f7f8 fc9d 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
   ddb1c:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
   ddb20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    mbedtls_mpi_free( &ctx->RP );
    mbedtls_mpi_free( &ctx->QP );
    mbedtls_mpi_free( &ctx->DQ );
    mbedtls_mpi_free( &ctx->DP );
   ddb24:	f7f8 bc97 	b.w	d6456 <mbedtls_mpi_free>
   ddb28:	bd10      	pop	{r4, pc}
	...

000ddb2c <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
   ddb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ddb30:	b096      	sub	sp, #88	; 0x58
   ddb32:	461f      	mov	r7, r3
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
   ddb34:	4b7a      	ldr	r3, [pc, #488]	; (ddd20 <mbedtls_rsa_deduce_primes+0x1f4>)
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
   ddb36:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
   ddb3a:	4615      	mov	r5, r2
   ddb3c:	4606      	mov	r6, r0
   ddb3e:	4688      	mov	r8, r1
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
   ddb40:	aa08      	add	r2, sp, #32
   ddb42:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   ddb46:	6818      	ldr	r0, [r3, #0]
   ddb48:	6859      	ldr	r1, [r3, #4]
   ddb4a:	4614      	mov	r4, r2
   ddb4c:	c403      	stmia	r4!, {r0, r1}
   ddb4e:	3308      	adds	r3, #8
   ddb50:	4573      	cmp	r3, lr
   ddb52:	4622      	mov	r2, r4
   ddb54:	d1f7      	bne.n	ddb46 <mbedtls_rsa_deduce_primes+0x1a>
   ddb56:	6818      	ldr	r0, [r3, #0]
   ddb58:	889b      	ldrh	r3, [r3, #4]
   ddb5a:	6020      	str	r0, [r4, #0]
   ddb5c:	80a3      	strh	r3, [r4, #4]

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
   ddb5e:	2f00      	cmp	r7, #0
   ddb60:	f000 80b8 	beq.w	ddcd4 <mbedtls_rsa_deduce_primes+0x1a8>
   ddb64:	f1b9 0f00 	cmp.w	r9, #0
   ddb68:	f000 80b4 	beq.w	ddcd4 <mbedtls_rsa_deduce_primes+0x1a8>
   ddb6c:	68bb      	ldr	r3, [r7, #8]
   ddb6e:	2b00      	cmp	r3, #0
   ddb70:	f040 80b0 	bne.w	ddcd4 <mbedtls_rsa_deduce_primes+0x1a8>
   ddb74:	f8d9 1008 	ldr.w	r1, [r9, #8]
   ddb78:	2900      	cmp	r1, #0
   ddb7a:	f040 80ab 	bne.w	ddcd4 <mbedtls_rsa_deduce_primes+0x1a8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
   ddb7e:	4630      	mov	r0, r6
   ddb80:	f7f8 ff8f 	bl	d6aa2 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   ddb84:	2800      	cmp	r0, #0
   ddb86:	f340 80a5 	ble.w	ddcd4 <mbedtls_rsa_deduce_primes+0x1a8>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   ddb8a:	2101      	movs	r1, #1
   ddb8c:	4628      	mov	r0, r5
   ddb8e:	f7f8 ff88 	bl	d6aa2 <mbedtls_mpi_cmp_int>
    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
   ddb92:	2800      	cmp	r0, #0
   ddb94:	f340 809e 	ble.w	ddcd4 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   ddb98:	4631      	mov	r1, r6
   ddb9a:	4628      	mov	r0, r5
   ddb9c:	f7f8 ff3c 	bl	d6a18 <mbedtls_mpi_cmp_mpi>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   ddba0:	2800      	cmp	r0, #0
   ddba2:	f280 8097 	bge.w	ddcd4 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   ddba6:	2101      	movs	r1, #1
   ddba8:	4640      	mov	r0, r8
   ddbaa:	f7f8 ff7a 	bl	d6aa2 <mbedtls_mpi_cmp_int>
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   ddbae:	2800      	cmp	r0, #0
   ddbb0:	f340 8090 	ble.w	ddcd4 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
   ddbb4:	4631      	mov	r1, r6
   ddbb6:	4640      	mov	r0, r8
   ddbb8:	f7f8 ff2e 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   ddbbc:	2800      	cmp	r0, #0
   ddbbe:	f280 8089 	bge.w	ddcd4 <mbedtls_rsa_deduce_primes+0x1a8>

    /*
     * Initializations and temporary changes
     */

    mbedtls_mpi_init( &K );
   ddbc2:	a805      	add	r0, sp, #20
   ddbc4:	f7f8 fc41 	bl	d644a <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
   ddbc8:	a802      	add	r0, sp, #8
   ddbca:	f7f8 fc3e 	bl	d644a <mbedtls_mpi_init>

    /* T := DE - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
   ddbce:	4642      	mov	r2, r8
   ddbd0:	4629      	mov	r1, r5
   ddbd2:	a802      	add	r0, sp, #8
   ddbd4:	f7f9 f884 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   ddbd8:	4604      	mov	r4, r0
   ddbda:	2800      	cmp	r0, #0
   ddbdc:	d172      	bne.n	ddcc4 <mbedtls_rsa_deduce_primes+0x198>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
   ddbde:	a902      	add	r1, sp, #8
   ddbe0:	2201      	movs	r2, #1
   ddbe2:	4608      	mov	r0, r1
   ddbe4:	f7f9 f866 	bl	d6cb4 <mbedtls_mpi_sub_int>
   ddbe8:	4604      	mov	r4, r0
   ddbea:	2800      	cmp	r0, #0
   ddbec:	d16a      	bne.n	ddcc4 <mbedtls_rsa_deduce_primes+0x198>

    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
   ddbee:	a802      	add	r0, sp, #8
   ddbf0:	f7f8 fd39 	bl	d6666 <mbedtls_mpi_lsb>
   ddbf4:	fa1f fa80 	uxth.w	sl, r0
   ddbf8:	f1ba 0f00 	cmp.w	sl, #0
   ddbfc:	d102      	bne.n	ddc04 <mbedtls_rsa_deduce_primes+0xd8>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   ddbfe:	f06f 0403 	mvn.w	r4, #3
   ddc02:	e05f      	b.n	ddcc4 <mbedtls_rsa_deduce_primes+0x198>
        goto cleanup;
    }

    /* After this operation, T holds the largest odd divisor of DE - 1. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
   ddc04:	4651      	mov	r1, sl
   ddc06:	a802      	add	r0, sp, #8
   ddc08:	f7f8 fe27 	bl	d685a <mbedtls_mpi_shift_r>
   ddc0c:	4604      	mov	r4, r0
   ddc0e:	2800      	cmp	r0, #0
   ddc10:	d158      	bne.n	ddcc4 <mbedtls_rsa_deduce_primes+0x198>
     * Actual work
     */

    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
   ddc12:	68b3      	ldr	r3, [r6, #8]
        attempt = 1;
   ddc14:	681d      	ldr	r5, [r3, #0]
   ddc16:	f005 0507 	and.w	r5, r5, #7
   ddc1a:	1e6b      	subs	r3, r5, #1
   ddc1c:	425d      	negs	r5, r3
   ddc1e:	415d      	adcs	r5, r3

    for( ; attempt < num_primes; ++attempt )
    {
        mbedtls_mpi_lset( &K, primes[attempt] );
   ddc20:	ab16      	add	r3, sp, #88	; 0x58
   ddc22:	442b      	add	r3, r5
   ddc24:	a805      	add	r0, sp, #20
   ddc26:	f813 1c38 	ldrb.w	r1, [r3, #-56]
   ddc2a:	f7f8 fcef 	bl	d660c <mbedtls_mpi_lset>

        /* Check if gcd(K,N) = 1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
   ddc2e:	4632      	mov	r2, r6
   ddc30:	a905      	add	r1, sp, #20
   ddc32:	4638      	mov	r0, r7
   ddc34:	f7f9 fce1 	bl	d75fa <mbedtls_mpi_gcd>
   ddc38:	4604      	mov	r4, r0
   ddc3a:	2800      	cmp	r0, #0
   ddc3c:	d142      	bne.n	ddcc4 <mbedtls_rsa_deduce_primes+0x198>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
   ddc3e:	2101      	movs	r1, #1
   ddc40:	4638      	mov	r0, r7
   ddc42:	f7f8 ff2e 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   ddc46:	b120      	cbz	r0, ddc52 <mbedtls_rsa_deduce_primes+0x126>
    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
        attempt = 1;

    for( ; attempt < num_primes; ++attempt )
   ddc48:	3501      	adds	r5, #1
   ddc4a:	b2ad      	uxth	r5, r5
   ddc4c:	2d36      	cmp	r5, #54	; 0x36
   ddc4e:	d1e7      	bne.n	ddc20 <mbedtls_rsa_deduce_primes+0xf4>
   ddc50:	e7d5      	b.n	ddbfe <mbedtls_rsa_deduce_primes+0xd2>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
            continue;

        /* Go through K^T + 1, K^(2T) + 1, K^(4T) + 1, ...
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
   ddc52:	a905      	add	r1, sp, #20
   ddc54:	f8cd 9000 	str.w	r9, [sp]
   ddc58:	4633      	mov	r3, r6
   ddc5a:	aa02      	add	r2, sp, #8
   ddc5c:	4608      	mov	r0, r1
   ddc5e:	f7f9 faad 	bl	d71bc <mbedtls_mpi_exp_mod>
   ddc62:	4604      	mov	r4, r0
   ddc64:	bb70      	cbnz	r0, ddcc4 <mbedtls_rsa_deduce_primes+0x198>
   ddc66:	f04f 0801 	mov.w	r8, #1

        for( iter = 1; iter <= order; ++iter )
        {
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
   ddc6a:	2101      	movs	r1, #1
   ddc6c:	a805      	add	r0, sp, #20
   ddc6e:	f7f8 ff18 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   ddc72:	b930      	cbnz	r0, ddc82 <mbedtls_rsa_deduce_primes+0x156>
         * we reached 1, or K holds primes[attempt]^(DE - 1) mod N, which must
         * be 1 if D,E,N were consistent.
         * Check if that's the case and abort if not, to avoid very long,
         * yet eventually failing, computations if N,D,E were not sane.
         */
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
   ddc74:	2101      	movs	r1, #1
   ddc76:	a805      	add	r0, sp, #20
   ddc78:	f7f8 ff13 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   ddc7c:	2800      	cmp	r0, #0
   ddc7e:	d0e3      	beq.n	ddc48 <mbedtls_rsa_deduce_primes+0x11c>
   ddc80:	e7bd      	b.n	ddbfe <mbedtls_rsa_deduce_primes+0xd2>
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
   ddc82:	a905      	add	r1, sp, #20
   ddc84:	2201      	movs	r2, #1
   ddc86:	4608      	mov	r0, r1
   ddc88:	f7f8 fffe 	bl	d6c88 <mbedtls_mpi_add_int>
   ddc8c:	4604      	mov	r4, r0
   ddc8e:	b9c8      	cbnz	r0, ddcc4 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
   ddc90:	4632      	mov	r2, r6
   ddc92:	a905      	add	r1, sp, #20
   ddc94:	4638      	mov	r0, r7
   ddc96:	f7f9 fcb0 	bl	d75fa <mbedtls_mpi_gcd>
   ddc9a:	4604      	mov	r4, r0
   ddc9c:	b990      	cbnz	r0, ddcc4 <mbedtls_rsa_deduce_primes+0x198>

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
   ddc9e:	2101      	movs	r1, #1
   ddca0:	4638      	mov	r0, r7
   ddca2:	f7f8 fefe 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   ddca6:	2801      	cmp	r0, #1
   ddca8:	d117      	bne.n	ddcda <mbedtls_rsa_deduce_primes+0x1ae>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
   ddcaa:	4631      	mov	r1, r6
   ddcac:	4638      	mov	r0, r7
   ddcae:	f7f8 feb3 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
   ddcb2:	3001      	adds	r0, #1
   ddcb4:	d111      	bne.n	ddcda <mbedtls_rsa_deduce_primes+0x1ae>
                /*
                 * Have found a nontrivial divisor P of N.
                 * Set Q := N / P.
                 */

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
   ddcb6:	4621      	mov	r1, r4
   ddcb8:	463b      	mov	r3, r7
   ddcba:	4632      	mov	r2, r6
   ddcbc:	4648      	mov	r0, r9
   ddcbe:	f7f9 f88b 	bl	d6dd8 <mbedtls_mpi_div_mpi>
   ddcc2:	4604      	mov	r4, r0

    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;

cleanup:

    mbedtls_mpi_free( &K );
   ddcc4:	a805      	add	r0, sp, #20
   ddcc6:	f7f8 fbc6 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
   ddcca:	a802      	add	r0, sp, #8
   ddccc:	f7f8 fbc3 	bl	d6456 <mbedtls_mpi_free>
    return( ret );
   ddcd0:	4620      	mov	r0, r4
   ddcd2:	e021      	b.n	ddd18 <mbedtls_rsa_deduce_primes+0x1ec>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   ddcd4:	f06f 0003 	mvn.w	r0, #3
   ddcd8:	e01e      	b.n	ddd18 <mbedtls_rsa_deduce_primes+0x1ec>

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
                goto cleanup;
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   ddcda:	a905      	add	r1, sp, #20
   ddcdc:	2201      	movs	r2, #1
   ddcde:	4608      	mov	r0, r1
   ddce0:	f7f8 ffe8 	bl	d6cb4 <mbedtls_mpi_sub_int>
   ddce4:	4604      	mov	r4, r0
   ddce6:	2800      	cmp	r0, #0
   ddce8:	d1ec      	bne.n	ddcc4 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
   ddcea:	aa05      	add	r2, sp, #20
   ddcec:	4611      	mov	r1, r2
   ddcee:	4610      	mov	r0, r2
   ddcf0:	f7f8 fff6 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   ddcf4:	4604      	mov	r4, r0
   ddcf6:	2800      	cmp	r0, #0
   ddcf8:	d1e4      	bne.n	ddcc4 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
   ddcfa:	a905      	add	r1, sp, #20
   ddcfc:	4632      	mov	r2, r6
   ddcfe:	4608      	mov	r0, r1
   ddd00:	f7f9 fa2a 	bl	d7158 <mbedtls_mpi_mod_mpi>
   ddd04:	4604      	mov	r4, r0
   ddd06:	2800      	cmp	r0, #0
   ddd08:	d1dc      	bne.n	ddcc4 <mbedtls_rsa_deduce_primes+0x198>
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
                             Q /* temporarily use Q for storing Montgomery
                                * multiplication helper values */ ) );

        for( iter = 1; iter <= order; ++iter )
   ddd0a:	f108 0801 	add.w	r8, r8, #1
   ddd0e:	fa1f f888 	uxth.w	r8, r8
   ddd12:	45c2      	cmp	sl, r8
   ddd14:	d2a9      	bcs.n	ddc6a <mbedtls_rsa_deduce_primes+0x13e>
   ddd16:	e7ad      	b.n	ddc74 <mbedtls_rsa_deduce_primes+0x148>
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
   ddd18:	b016      	add	sp, #88	; 0x58
   ddd1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddd1e:	bf00      	nop
   ddd20:	000e9739 	.word	0x000e9739

000ddd24 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
   ddd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ddd28:	4604      	mov	r4, r0
   ddd2a:	b086      	sub	sp, #24
   ddd2c:	460e      	mov	r6, r1
   ddd2e:	4617      	mov	r7, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
   ddd30:	461d      	mov	r5, r3
   ddd32:	b18b      	cbz	r3, ddd58 <mbedtls_rsa_deduce_private_exponent+0x34>
   ddd34:	2100      	movs	r1, #0
   ddd36:	4618      	mov	r0, r3
   ddd38:	f7f8 feb3 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   ddd3c:	4680      	mov	r8, r0
   ddd3e:	b958      	cbnz	r0, ddd58 <mbedtls_rsa_deduce_private_exponent+0x34>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   ddd40:	2101      	movs	r1, #1
   ddd42:	4620      	mov	r0, r4
   ddd44:	f7f8 fead 	bl	d6aa2 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
   ddd48:	2800      	cmp	r0, #0
   ddd4a:	dd05      	ble.n	ddd58 <mbedtls_rsa_deduce_private_exponent+0x34>
   ddd4c:	2101      	movs	r1, #1
   ddd4e:	4630      	mov	r0, r6
   ddd50:	f7f8 fea7 	bl	d6aa2 <mbedtls_mpi_cmp_int>
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   ddd54:	2800      	cmp	r0, #0
   ddd56:	dc02      	bgt.n	ddd5e <mbedtls_rsa_deduce_private_exponent+0x3a>
{
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   ddd58:	f06f 0003 	mvn.w	r0, #3
   ddd5c:	e03c      	b.n	dddd8 <mbedtls_rsa_deduce_private_exponent+0xb4>

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
   ddd5e:	4641      	mov	r1, r8
   ddd60:	4638      	mov	r0, r7
   ddd62:	f7f8 fe9e 	bl	d6aa2 <mbedtls_mpi_cmp_int>

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
   ddd66:	2800      	cmp	r0, #0
   ddd68:	d0f6      	beq.n	ddd58 <mbedtls_rsa_deduce_private_exponent+0x34>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    }

    mbedtls_mpi_init( &K );
   ddd6a:	4668      	mov	r0, sp
   ddd6c:	f7f8 fb6d 	bl	d644a <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
   ddd70:	a803      	add	r0, sp, #12
   ddd72:	f7f8 fb6a 	bl	d644a <mbedtls_mpi_init>

    /* Temporarily put K := P-1 and L := Q-1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
   ddd76:	4621      	mov	r1, r4
   ddd78:	2201      	movs	r2, #1
   ddd7a:	4668      	mov	r0, sp
   ddd7c:	f7f8 ff9a 	bl	d6cb4 <mbedtls_mpi_sub_int>
   ddd80:	4604      	mov	r4, r0
   ddd82:	bb10      	cbnz	r0, dddca <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
   ddd84:	2201      	movs	r2, #1
   ddd86:	4631      	mov	r1, r6
   ddd88:	a803      	add	r0, sp, #12
   ddd8a:	f7f8 ff93 	bl	d6cb4 <mbedtls_mpi_sub_int>
   ddd8e:	4604      	mov	r4, r0
   ddd90:	b9d8      	cbnz	r0, dddca <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Temporarily put D := gcd(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
   ddd92:	aa03      	add	r2, sp, #12
   ddd94:	4669      	mov	r1, sp
   ddd96:	4628      	mov	r0, r5
   ddd98:	f7f9 fc2f 	bl	d75fa <mbedtls_mpi_gcd>
   ddd9c:	4604      	mov	r4, r0
   ddd9e:	b9a0      	cbnz	r0, dddca <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* K := LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
   ddda0:	aa03      	add	r2, sp, #12
   ddda2:	4669      	mov	r1, sp
   ddda4:	4668      	mov	r0, sp
   ddda6:	f7f8 ff9b 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   dddaa:	4604      	mov	r4, r0
   dddac:	b968      	cbnz	r0, dddca <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
   dddae:	4601      	mov	r1, r0
   dddb0:	462b      	mov	r3, r5
   dddb2:	466a      	mov	r2, sp
   dddb4:	4668      	mov	r0, sp
   dddb6:	f7f9 f80f 	bl	d6dd8 <mbedtls_mpi_div_mpi>
   dddba:	4604      	mov	r4, r0
   dddbc:	b928      	cbnz	r0, dddca <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Compute modular inverse of E in LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
   dddbe:	466a      	mov	r2, sp
   dddc0:	4639      	mov	r1, r7
   dddc2:	4628      	mov	r0, r5
   dddc4:	f7f9 fcd2 	bl	d776c <mbedtls_mpi_inv_mod>
   dddc8:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &K );
   dddca:	4668      	mov	r0, sp
   dddcc:	f7f8 fb43 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
   dddd0:	a803      	add	r0, sp, #12
   dddd2:	f7f8 fb40 	bl	d6456 <mbedtls_mpi_free>

    return( ret );
   dddd6:	4620      	mov	r0, r4
}
   dddd8:	b006      	add	sp, #24
   dddda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000ddde0 <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
   ddde0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ddde4:	b087      	sub	sp, #28
   ddde6:	4604      	mov	r4, r0
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
   ddde8:	4668      	mov	r0, sp
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
   dddea:	4699      	mov	r9, r3
   dddec:	460d      	mov	r5, r1
   dddee:	4690      	mov	r8, r2
   dddf0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   dddf2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
   dddf4:	f7f8 fb29 	bl	d644a <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
   dddf8:	a803      	add	r0, sp, #12
   dddfa:	f7f8 fb26 	bl	d644a <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
   dddfe:	f1b9 0f00 	cmp.w	r9, #0
   dde02:	d101      	bne.n	dde08 <mbedtls_rsa_validate_crt+0x28>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
   dde04:	b9f7      	cbnz	r7, dde44 <mbedtls_rsa_validate_crt+0x64>
   dde06:	e035      	b.n	dde74 <mbedtls_rsa_validate_crt+0x94>
    mbedtls_mpi_init( &L );

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
    {
        if( P == NULL )
   dde08:	2c00      	cmp	r4, #0
   dde0a:	d058      	beq.n	ddebe <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
   dde0c:	2201      	movs	r2, #1
   dde0e:	4621      	mov	r1, r4
   dde10:	4668      	mov	r0, sp
   dde12:	f7f8 ff4f 	bl	d6cb4 <mbedtls_mpi_sub_int>
   dde16:	2800      	cmp	r0, #0
   dde18:	d148      	bne.n	ddeac <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
   dde1a:	4642      	mov	r2, r8
   dde1c:	4649      	mov	r1, r9
   dde1e:	a803      	add	r0, sp, #12
   dde20:	f7f8 ff10 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   dde24:	2800      	cmp	r0, #0
   dde26:	d141      	bne.n	ddeac <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
   dde28:	a903      	add	r1, sp, #12
   dde2a:	466a      	mov	r2, sp
   dde2c:	4608      	mov	r0, r1
   dde2e:	f7f9 f993 	bl	d7158 <mbedtls_mpi_mod_mpi>
   dde32:	2800      	cmp	r0, #0
   dde34:	d13a      	bne.n	ddeac <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
   dde36:	4601      	mov	r1, r0
   dde38:	a803      	add	r0, sp, #12
   dde3a:	f7f8 fe32 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   dde3e:	2800      	cmp	r0, #0
   dde40:	d13f      	bne.n	ddec2 <mbedtls_rsa_validate_crt+0xe2>
   dde42:	e7df      	b.n	dde04 <mbedtls_rsa_validate_crt+0x24>
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
    {
        if( Q == NULL )
   dde44:	b3dd      	cbz	r5, ddebe <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
   dde46:	2201      	movs	r2, #1
   dde48:	4629      	mov	r1, r5
   dde4a:	4668      	mov	r0, sp
   dde4c:	f7f8 ff32 	bl	d6cb4 <mbedtls_mpi_sub_int>
   dde50:	bb60      	cbnz	r0, ddeac <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
   dde52:	4642      	mov	r2, r8
   dde54:	4639      	mov	r1, r7
   dde56:	a803      	add	r0, sp, #12
   dde58:	f7f8 fef4 	bl	d6c44 <mbedtls_mpi_sub_mpi>
   dde5c:	bb30      	cbnz	r0, ddeac <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
   dde5e:	a903      	add	r1, sp, #12
   dde60:	466a      	mov	r2, sp
   dde62:	4608      	mov	r0, r1
   dde64:	f7f9 f978 	bl	d7158 <mbedtls_mpi_mod_mpi>
   dde68:	bb00      	cbnz	r0, ddeac <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
   dde6a:	4601      	mov	r1, r0
   dde6c:	a803      	add	r0, sp, #12
   dde6e:	f7f8 fe18 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   dde72:	bb30      	cbnz	r0, ddec2 <mbedtls_rsa_validate_crt+0xe2>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
   dde74:	b1c6      	cbz	r6, ddea8 <mbedtls_rsa_validate_crt+0xc8>
    {
        if( P == NULL || Q == NULL )
   dde76:	b314      	cbz	r4, ddebe <mbedtls_rsa_validate_crt+0xde>
   dde78:	b30d      	cbz	r5, ddebe <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
   dde7a:	462a      	mov	r2, r5
   dde7c:	4631      	mov	r1, r6
   dde7e:	4668      	mov	r0, sp
   dde80:	f7f8 ff2e 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   dde84:	b990      	cbnz	r0, ddeac <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   dde86:	2201      	movs	r2, #1
   dde88:	4669      	mov	r1, sp
   dde8a:	4668      	mov	r0, sp
   dde8c:	f7f8 ff12 	bl	d6cb4 <mbedtls_mpi_sub_int>
   dde90:	b960      	cbnz	r0, ddeac <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
   dde92:	4622      	mov	r2, r4
   dde94:	4669      	mov	r1, sp
   dde96:	4668      	mov	r0, sp
   dde98:	f7f9 f95e 	bl	d7158 <mbedtls_mpi_mod_mpi>
   dde9c:	b930      	cbnz	r0, ddeac <mbedtls_rsa_validate_crt+0xcc>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   dde9e:	4601      	mov	r1, r0
   ddea0:	4668      	mov	r0, sp
   ddea2:	f7f8 fdfe 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   ddea6:	b960      	cbnz	r0, ddec2 <mbedtls_rsa_validate_crt+0xe2>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
   ddea8:	2400      	movs	r4, #0
   ddeaa:	e00b      	b.n	ddec4 <mbedtls_rsa_validate_crt+0xe4>
    }

cleanup:

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 &&
   ddeac:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
   ddeb0:	d007      	beq.n	ddec2 <mbedtls_rsa_validate_crt+0xe2>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
   ddeb2:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
   ddeb6:	d002      	beq.n	ddebe <mbedtls_rsa_validate_crt+0xde>
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   ddeb8:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
   ddebc:	e002      	b.n	ddec4 <mbedtls_rsa_validate_crt+0xe4>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
   ddebe:	4c06      	ldr	r4, [pc, #24]	; (dded8 <mbedtls_rsa_validate_crt+0xf8>)
   ddec0:	e000      	b.n	ddec4 <mbedtls_rsa_validate_crt+0xe4>
   ddec2:	4c06      	ldr	r4, [pc, #24]	; (ddedc <mbedtls_rsa_validate_crt+0xfc>)
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
   ddec4:	4668      	mov	r0, sp
   ddec6:	f7f8 fac6 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
   ddeca:	a803      	add	r0, sp, #12
   ddecc:	f7f8 fac3 	bl	d6456 <mbedtls_mpi_free>

    return( ret );
}
   dded0:	4620      	mov	r0, r4
   dded2:	b007      	add	sp, #28
   dded4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dded8:	ffffbf80 	.word	0xffffbf80
   ddedc:	ffffbe00 	.word	0xffffbe00

000ddee0 <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
   ddee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ddee4:	b087      	sub	sp, #28
   ddee6:	4605      	mov	r5, r0
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
   ddee8:	4668      	mov	r0, sp
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
   ddeea:	4688      	mov	r8, r1
   ddeec:	4691      	mov	r9, r2
   ddeee:	461e      	mov	r6, r3
   ddef0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
   ddef2:	f7f8 faaa 	bl	d644a <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
   ddef6:	a803      	add	r0, sp, #12
   ddef8:	f7f8 faa7 	bl	d644a <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
   ddefc:	f1b8 0f00 	cmp.w	r8, #0
   ddf00:	d018      	beq.n	ddf34 <mbedtls_rsa_validate_params+0x54>
   ddf02:	f1b9 0f00 	cmp.w	r9, #0
   ddf06:	d015      	beq.n	ddf34 <mbedtls_rsa_validate_params+0x54>
   ddf08:	b90d      	cbnz	r5, ddf0e <mbedtls_rsa_validate_params+0x2e>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
   ddf0a:	b9de      	cbnz	r6, ddf44 <mbedtls_rsa_validate_params+0x64>
   ddf0c:	e018      	b.n	ddf40 <mbedtls_rsa_validate_params+0x60>
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
   ddf0e:	464a      	mov	r2, r9
   ddf10:	4641      	mov	r1, r8
   ddf12:	4668      	mov	r0, sp
   ddf14:	f7f8 fee4 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   ddf18:	4604      	mov	r4, r0
   ddf1a:	bb68      	cbnz	r0, ddf78 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
   ddf1c:	2101      	movs	r1, #1
   ddf1e:	4628      	mov	r0, r5
   ddf20:	f7f8 fdbf 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   ddf24:	2800      	cmp	r0, #0
   ddf26:	dd26      	ble.n	ddf76 <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
   ddf28:	4629      	mov	r1, r5
   ddf2a:	4668      	mov	r0, sp
   ddf2c:	f7f8 fd74 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
   ddf30:	bb08      	cbnz	r0, ddf76 <mbedtls_rsa_validate_params+0x96>
   ddf32:	e016      	b.n	ddf62 <mbedtls_rsa_validate_params+0x82>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
   ddf34:	b125      	cbz	r5, ddf40 <mbedtls_rsa_validate_params+0x60>
   ddf36:	b9b6      	cbnz	r6, ddf66 <mbedtls_rsa_validate_params+0x86>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
   ddf38:	f1b8 0f00 	cmp.w	r8, #0
   ddf3c:	f040 808a 	bne.w	de054 <mbedtls_rsa_validate_params+0x174>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   ddf40:	2400      	movs	r4, #0
   ddf42:	e019      	b.n	ddf78 <mbedtls_rsa_validate_params+0x98>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
   ddf44:	2f00      	cmp	r7, #0
   ddf46:	d0fb      	beq.n	ddf40 <mbedtls_rsa_validate_params+0x60>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   ddf48:	2101      	movs	r1, #1
   ddf4a:	4640      	mov	r0, r8
   ddf4c:	f7f8 fda9 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   ddf50:	2800      	cmp	r0, #0
   ddf52:	dd10      	ble.n	ddf76 <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
   ddf54:	2101      	movs	r1, #1
   ddf56:	4648      	mov	r0, r9
   ddf58:	f7f8 fda3 	bl	d6aa2 <mbedtls_mpi_cmp_int>
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   ddf5c:	2800      	cmp	r0, #0
   ddf5e:	dc19      	bgt.n	ddf94 <mbedtls_rsa_validate_params+0xb4>
   ddf60:	e009      	b.n	ddf76 <mbedtls_rsa_validate_params+0x96>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
   ddf62:	2e00      	cmp	r6, #0
   ddf64:	d0ec      	beq.n	ddf40 <mbedtls_rsa_validate_params+0x60>
   ddf66:	2f00      	cmp	r7, #0
   ddf68:	d0e6      	beq.n	ddf38 <mbedtls_rsa_validate_params+0x58>
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   ddf6a:	2101      	movs	r1, #1
   ddf6c:	4630      	mov	r0, r6
   ddf6e:	f7f8 fd98 	bl	d6aa2 <mbedtls_mpi_cmp_int>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   ddf72:	2800      	cmp	r0, #0
   ddf74:	dc5b      	bgt.n	de02e <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   ddf76:	4c3c      	ldr	r4, [pc, #240]	; (de068 <mbedtls_rsa_validate_params+0x188>)
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
   ddf78:	4668      	mov	r0, sp
   ddf7a:	f7f8 fa6c 	bl	d6456 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
   ddf7e:	a803      	add	r0, sp, #12
   ddf80:	f7f8 fa69 	bl	d6456 <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
   ddf84:	2c00      	cmp	r4, #0
   ddf86:	d06a      	beq.n	de05e <mbedtls_rsa_validate_params+0x17e>
   ddf88:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
   ddf8c:	d067      	beq.n	de05e <mbedtls_rsa_validate_params+0x17e>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   ddf8e:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
   ddf92:	e064      	b.n	de05e <mbedtls_rsa_validate_params+0x17e>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
   ddf94:	463a      	mov	r2, r7
   ddf96:	4631      	mov	r1, r6
   ddf98:	4668      	mov	r0, sp
   ddf9a:	f7f8 fea1 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   ddf9e:	4604      	mov	r4, r0
   ddfa0:	2800      	cmp	r0, #0
   ddfa2:	d1e9      	bne.n	ddf78 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   ddfa4:	2201      	movs	r2, #1
   ddfa6:	4669      	mov	r1, sp
   ddfa8:	4668      	mov	r0, sp
   ddfaa:	f7f8 fe83 	bl	d6cb4 <mbedtls_mpi_sub_int>
   ddfae:	4604      	mov	r4, r0
   ddfb0:	2800      	cmp	r0, #0
   ddfb2:	d1e1      	bne.n	ddf78 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
   ddfb4:	2201      	movs	r2, #1
   ddfb6:	4641      	mov	r1, r8
   ddfb8:	a803      	add	r0, sp, #12
   ddfba:	f7f8 fe7b 	bl	d6cb4 <mbedtls_mpi_sub_int>
   ddfbe:	4604      	mov	r4, r0
   ddfc0:	2800      	cmp	r0, #0
   ddfc2:	d1d9      	bne.n	ddf78 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
   ddfc4:	aa03      	add	r2, sp, #12
   ddfc6:	4669      	mov	r1, sp
   ddfc8:	4668      	mov	r0, sp
   ddfca:	f7f9 f8c5 	bl	d7158 <mbedtls_mpi_mod_mpi>
   ddfce:	4604      	mov	r4, r0
   ddfd0:	2800      	cmp	r0, #0
   ddfd2:	d1d1      	bne.n	ddf78 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   ddfd4:	4601      	mov	r1, r0
   ddfd6:	4668      	mov	r0, sp
   ddfd8:	f7f8 fd63 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   ddfdc:	2800      	cmp	r0, #0
   ddfde:	d1ca      	bne.n	ddf76 <mbedtls_rsa_validate_params+0x96>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
   ddfe0:	463a      	mov	r2, r7
   ddfe2:	4631      	mov	r1, r6
   ddfe4:	4668      	mov	r0, sp
   ddfe6:	f7f8 fe7b 	bl	d6ce0 <mbedtls_mpi_mul_mpi>
   ddfea:	4604      	mov	r4, r0
   ddfec:	2800      	cmp	r0, #0
   ddfee:	d1c3      	bne.n	ddf78 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   ddff0:	2201      	movs	r2, #1
   ddff2:	4669      	mov	r1, sp
   ddff4:	4668      	mov	r0, sp
   ddff6:	f7f8 fe5d 	bl	d6cb4 <mbedtls_mpi_sub_int>
   ddffa:	4604      	mov	r4, r0
   ddffc:	2800      	cmp	r0, #0
   ddffe:	d1bb      	bne.n	ddf78 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
   de000:	2201      	movs	r2, #1
   de002:	4649      	mov	r1, r9
   de004:	a803      	add	r0, sp, #12
   de006:	f7f8 fe55 	bl	d6cb4 <mbedtls_mpi_sub_int>
   de00a:	4604      	mov	r4, r0
   de00c:	2800      	cmp	r0, #0
   de00e:	d1b3      	bne.n	ddf78 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
   de010:	aa03      	add	r2, sp, #12
   de012:	4669      	mov	r1, sp
   de014:	4668      	mov	r0, sp
   de016:	f7f9 f89f 	bl	d7158 <mbedtls_mpi_mod_mpi>
   de01a:	4604      	mov	r4, r0
   de01c:	2800      	cmp	r0, #0
   de01e:	d1ab      	bne.n	ddf78 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   de020:	4601      	mov	r1, r0
   de022:	4668      	mov	r0, sp
   de024:	f7f8 fd3d 	bl	d6aa2 <mbedtls_mpi_cmp_int>
   de028:	2800      	cmp	r0, #0
   de02a:	d089      	beq.n	ddf40 <mbedtls_rsa_validate_params+0x60>
   de02c:	e7a3      	b.n	ddf76 <mbedtls_rsa_validate_params+0x96>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   de02e:	2101      	movs	r1, #1
   de030:	4638      	mov	r0, r7
   de032:	f7f8 fd36 	bl	d6aa2 <mbedtls_mpi_cmp_int>
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   de036:	2800      	cmp	r0, #0
   de038:	dd9d      	ble.n	ddf76 <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   de03a:	4629      	mov	r1, r5
   de03c:	4630      	mov	r0, r6
   de03e:	f7f8 fceb 	bl	d6a18 <mbedtls_mpi_cmp_mpi>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   de042:	2800      	cmp	r0, #0
   de044:	da97      	bge.n	ddf76 <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
   de046:	4629      	mov	r1, r5
   de048:	4638      	mov	r0, r7
   de04a:	f7f8 fce5 	bl	d6a18 <mbedtls_mpi_cmp_mpi>

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   de04e:	2800      	cmp	r0, #0
   de050:	da91      	bge.n	ddf76 <mbedtls_rsa_validate_params+0x96>
   de052:	e771      	b.n	ddf38 <mbedtls_rsa_validate_params+0x58>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
   de054:	f1b9 0f00 	cmp.w	r9, #0
   de058:	f47f af57 	bne.w	ddf0a <mbedtls_rsa_validate_params+0x2a>
   de05c:	e770      	b.n	ddf40 <mbedtls_rsa_validate_params+0x60>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    return( ret );
}
   de05e:	4620      	mov	r0, r4
   de060:	b007      	add	sp, #28
   de062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de066:	bf00      	nop
   de068:	ffffbe00 	.word	0xffffbe00

000de06c <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
   de06c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   de070:	4607      	mov	r7, r0
   de072:	469a      	mov	sl, r3
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
   de074:	a801      	add	r0, sp, #4
}

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
   de076:	460e      	mov	r6, r1
   de078:	4691      	mov	r9, r2
   de07a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   de07e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
   de080:	f7f8 f9e3 	bl	d644a <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
   de084:	f1ba 0f00 	cmp.w	sl, #0
   de088:	d103      	bne.n	de092 <mbedtls_rsa_deduce_crt+0x26>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
   de08a:	f1b8 0f00 	cmp.w	r8, #0
   de08e:	d110      	bne.n	de0b2 <mbedtls_rsa_deduce_crt+0x46>
   de090:	e01d      	b.n	de0ce <mbedtls_rsa_deduce_crt+0x62>
    mbedtls_mpi_init( &K );

    /* DP = D mod P-1 */
    if( DP != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
   de092:	2201      	movs	r2, #1
   de094:	4639      	mov	r1, r7
   de096:	a801      	add	r0, sp, #4
   de098:	f7f8 fe0c 	bl	d6cb4 <mbedtls_mpi_sub_int>
   de09c:	4604      	mov	r4, r0
   de09e:	b9f8      	cbnz	r0, de0e0 <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
   de0a0:	aa01      	add	r2, sp, #4
   de0a2:	4649      	mov	r1, r9
   de0a4:	4650      	mov	r0, sl
   de0a6:	f7f9 f857 	bl	d7158 <mbedtls_mpi_mod_mpi>
   de0aa:	4604      	mov	r4, r0
   de0ac:	2800      	cmp	r0, #0
   de0ae:	d0ec      	beq.n	de08a <mbedtls_rsa_deduce_crt+0x1e>
   de0b0:	e016      	b.n	de0e0 <mbedtls_rsa_deduce_crt+0x74>
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
   de0b2:	2201      	movs	r2, #1
   de0b4:	4631      	mov	r1, r6
   de0b6:	a801      	add	r0, sp, #4
   de0b8:	f7f8 fdfc 	bl	d6cb4 <mbedtls_mpi_sub_int>
   de0bc:	4604      	mov	r4, r0
   de0be:	b978      	cbnz	r0, de0e0 <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
   de0c0:	aa01      	add	r2, sp, #4
   de0c2:	4649      	mov	r1, r9
   de0c4:	4640      	mov	r0, r8
   de0c6:	f7f9 f847 	bl	d7158 <mbedtls_mpi_mod_mpi>
   de0ca:	4604      	mov	r4, r0
   de0cc:	b940      	cbnz	r0, de0e0 <mbedtls_rsa_deduce_crt+0x74>
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
   de0ce:	b90d      	cbnz	r5, de0d4 <mbedtls_rsa_deduce_crt+0x68>
   de0d0:	462c      	mov	r4, r5
   de0d2:	e005      	b.n	de0e0 <mbedtls_rsa_deduce_crt+0x74>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
   de0d4:	463a      	mov	r2, r7
   de0d6:	4631      	mov	r1, r6
   de0d8:	4628      	mov	r0, r5
   de0da:	f7f9 fb47 	bl	d776c <mbedtls_mpi_inv_mod>
   de0de:	4604      	mov	r4, r0
    }

cleanup:
    mbedtls_mpi_free( &K );
   de0e0:	a801      	add	r0, sp, #4
   de0e2:	f7f8 f9b8 	bl	d6456 <mbedtls_mpi_free>

    return( ret );
}
   de0e6:	4620      	mov	r0, r4
   de0e8:	b004      	add	sp, #16
   de0ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000de0ee <mbedtls_sha1_init>:

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    SHA1_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
   de0ee:	225c      	movs	r2, #92	; 0x5c
   de0f0:	2100      	movs	r1, #0
   de0f2:	f009 bede 	b.w	e7eb2 <memset>

000de0f6 <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
   de0f6:	b110      	cbz	r0, de0fe <mbedtls_sha1_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
   de0f8:	215c      	movs	r1, #92	; 0x5c
   de0fa:	f7fe ba79 	b.w	dc5f0 <mbedtls_platform_zeroize>
   de0fe:	4770      	bx	lr

000de100 <mbedtls_sha1_clone>:
}

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
   de100:	b508      	push	{r3, lr}
    SHA1_VALIDATE( dst != NULL );
    SHA1_VALIDATE( src != NULL );

    *dst = *src;
   de102:	225c      	movs	r2, #92	; 0x5c
   de104:	f009 feaf 	bl	e7e66 <memcpy>
   de108:	bd08      	pop	{r3, pc}
	...

000de10c <mbedtls_sha1_starts_ret>:

/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
   de10c:	4603      	mov	r3, r0
    SHA1_VALIDATE_RET( ctx != NULL );

    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
   de10e:	4a0a      	ldr	r2, [pc, #40]	; (de138 <mbedtls_sha1_starts_ret+0x2c>)
   de110:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
   de112:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
   de116:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
   de118:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
   de11c:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
   de120:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
   de124:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
   de126:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    SHA1_VALIDATE_RET( ctx != NULL );

    ctx->total[0] = 0;
   de12a:	2000      	movs	r0, #0
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
   de12c:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0xC3D2E1F0;
   de12e:	4a03      	ldr	r2, [pc, #12]	; (de13c <mbedtls_sha1_starts_ret+0x30>)
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    SHA1_VALIDATE_RET( ctx != NULL );

    ctx->total[0] = 0;
   de130:	6018      	str	r0, [r3, #0]
    ctx->total[1] = 0;
   de132:	6058      	str	r0, [r3, #4]

    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
    ctx->state[4] = 0xC3D2E1F0;
   de134:	619a      	str	r2, [r3, #24]

    return( 0 );
}
   de136:	4770      	bx	lr
   de138:	67452301 	.word	0x67452301
   de13c:	c3d2e1f0 	.word	0xc3d2e1f0

000de140 <mbedtls_internal_sha1_process>:
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
   de140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t temp, W[16], A, B, C, D, E;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
   de144:	784b      	ldrb	r3, [r1, #1]
   de146:	780c      	ldrb	r4, [r1, #0]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
   de148:	f891 9008 	ldrb.w	r9, [r1, #8]
    GET_UINT32_BE( W[ 3], data, 12 );
   de14c:	f891 a00c 	ldrb.w	sl, [r1, #12]
    GET_UINT32_BE( W[ 4], data, 16 );
   de150:	7c0a      	ldrb	r2, [r1, #16]
    GET_UINT32_BE( W[ 5], data, 20 );
   de152:	f891 8014 	ldrb.w	r8, [r1, #20]
    GET_UINT32_BE( W[ 6], data, 24 );
   de156:	f891 c018 	ldrb.w	ip, [r1, #24]
    uint32_t temp, W[16], A, B, C, D, E;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
   de15a:	041b      	lsls	r3, r3, #16
   de15c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   de160:	78cc      	ldrb	r4, [r1, #3]
   de162:	4323      	orrs	r3, r4
   de164:	788c      	ldrb	r4, [r1, #2]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
   de166:	b097      	sub	sp, #92	; 0x5c
    uint32_t temp, W[16], A, B, C, D, E;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
   de168:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   de16c:	9306      	str	r3, [sp, #24]
    GET_UINT32_BE( W[ 1], data,  4 );
   de16e:	794b      	ldrb	r3, [r1, #5]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
   de170:	9001      	str	r0, [sp, #4]

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
   de172:	7908      	ldrb	r0, [r1, #4]
   de174:	041b      	lsls	r3, r3, #16
   de176:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   de17a:	79c8      	ldrb	r0, [r1, #7]
   de17c:	4303      	orrs	r3, r0
   de17e:	7988      	ldrb	r0, [r1, #6]
   de180:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   de184:	9307      	str	r3, [sp, #28]
    GET_UINT32_BE( W[ 2], data,  8 );
   de186:	7a4b      	ldrb	r3, [r1, #9]
   de188:	041b      	lsls	r3, r3, #16
   de18a:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
   de18e:	f891 900b 	ldrb.w	r9, [r1, #11]
   de192:	ea43 0309 	orr.w	r3, r3, r9
   de196:	f891 900a 	ldrb.w	r9, [r1, #10]
   de19a:	ea43 2909 	orr.w	r9, r3, r9, lsl #8
    GET_UINT32_BE( W[ 3], data, 12 );
   de19e:	7b4b      	ldrb	r3, [r1, #13]
   de1a0:	041b      	lsls	r3, r3, #16
   de1a2:	ea43 630a 	orr.w	r3, r3, sl, lsl #24
   de1a6:	f891 a00f 	ldrb.w	sl, [r1, #15]
   de1aa:	ea43 030a 	orr.w	r3, r3, sl
   de1ae:	f891 a00e 	ldrb.w	sl, [r1, #14]
   de1b2:	ea43 2a0a 	orr.w	sl, r3, sl, lsl #8
    GET_UINT32_BE( W[ 4], data, 16 );
   de1b6:	7c4b      	ldrb	r3, [r1, #17]
   de1b8:	041b      	lsls	r3, r3, #16
   de1ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   de1be:	7cca      	ldrb	r2, [r1, #19]
   de1c0:	4313      	orrs	r3, r2
   de1c2:	7c8a      	ldrb	r2, [r1, #18]
   de1c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   de1c8:	930e      	str	r3, [sp, #56]	; 0x38
    GET_UINT32_BE( W[ 5], data, 20 );
   de1ca:	7d4b      	ldrb	r3, [r1, #21]
   de1cc:	041b      	lsls	r3, r3, #16
   de1ce:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
   de1d2:	f891 8017 	ldrb.w	r8, [r1, #23]
   de1d6:	ea43 0308 	orr.w	r3, r3, r8
   de1da:	f891 8016 	ldrb.w	r8, [r1, #22]
   de1de:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
   de1e2:	930f      	str	r3, [sp, #60]	; 0x3c
    GET_UINT32_BE( W[ 6], data, 24 );
   de1e4:	7e4b      	ldrb	r3, [r1, #25]
   de1e6:	041b      	lsls	r3, r3, #16
   de1e8:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   de1ec:	f891 c01b 	ldrb.w	ip, [r1, #27]
    GET_UINT32_BE( W[ 7], data, 28 );
   de1f0:	f891 e01c 	ldrb.w	lr, [r1, #28]
    GET_UINT32_BE( W[ 8], data, 32 );
   de1f4:	f891 6020 	ldrb.w	r6, [r1, #32]
    GET_UINT32_BE( W[ 9], data, 36 );
   de1f8:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
    GET_UINT32_BE( W[10], data, 40 );
   de1fc:	f891 0028 	ldrb.w	r0, [r1, #40]	; 0x28
    GET_UINT32_BE( W[11], data, 44 );
    GET_UINT32_BE( W[12], data, 48 );
   de200:	f891 4030 	ldrb.w	r4, [r1, #48]	; 0x30
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
   de204:	ea43 030c 	orr.w	r3, r3, ip
   de208:	f891 c01a 	ldrb.w	ip, [r1, #26]
   de20c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   de210:	9310      	str	r3, [sp, #64]	; 0x40
    GET_UINT32_BE( W[ 7], data, 28 );
   de212:	7f4b      	ldrb	r3, [r1, #29]
   de214:	041b      	lsls	r3, r3, #16
   de216:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
   de21a:	f891 e01f 	ldrb.w	lr, [r1, #31]
   de21e:	ea43 030e 	orr.w	r3, r3, lr
   de222:	f891 e01e 	ldrb.w	lr, [r1, #30]
   de226:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
   de22a:	9313      	str	r3, [sp, #76]	; 0x4c
    GET_UINT32_BE( W[ 8], data, 32 );
   de22c:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
   de230:	041b      	lsls	r3, r3, #16
   de232:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   de236:	f891 6023 	ldrb.w	r6, [r1, #35]	; 0x23
   de23a:	4333      	orrs	r3, r6
   de23c:	f891 6022 	ldrb.w	r6, [r1, #34]	; 0x22
   de240:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
   de244:	9309      	str	r3, [sp, #36]	; 0x24
    GET_UINT32_BE( W[ 9], data, 36 );
   de246:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
   de24a:	041b      	lsls	r3, r3, #16
   de24c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   de250:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
   de254:	4313      	orrs	r3, r2
   de256:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
   de25a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   de25e:	930a      	str	r3, [sp, #40]	; 0x28
    GET_UINT32_BE( W[10], data, 40 );
   de260:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    GET_UINT32_BE( W[11], data, 44 );
   de264:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
   de268:	041b      	lsls	r3, r3, #16
   de26a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   de26e:	f891 002b 	ldrb.w	r0, [r1, #43]	; 0x2b
   de272:	4303      	orrs	r3, r0
   de274:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
   de278:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   de27c:	930b      	str	r3, [sp, #44]	; 0x2c
    GET_UINT32_BE( W[11], data, 44 );
   de27e:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
   de282:	041b      	lsls	r3, r3, #16
   de284:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   de288:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
   de28c:	4313      	orrs	r3, r2
   de28e:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
   de292:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   de296:	930c      	str	r3, [sp, #48]	; 0x30
    GET_UINT32_BE( W[12], data, 48 );
   de298:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
   de29c:	041b      	lsls	r3, r3, #16
   de29e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   de2a2:	f891 4033 	ldrb.w	r4, [r1, #51]	; 0x33
   de2a6:	4323      	orrs	r3, r4
   de2a8:	f891 4032 	ldrb.w	r4, [r1, #50]	; 0x32
   de2ac:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   de2b0:	930d      	str	r3, [sp, #52]	; 0x34
    GET_UINT32_BE( W[13], data, 52 );
   de2b2:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
   de2b6:	f891 2034 	ldrb.w	r2, [r1, #52]	; 0x34
   de2ba:	041b      	lsls	r3, r3, #16
   de2bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   de2c0:	f891 2037 	ldrb.w	r2, [r1, #55]	; 0x37
   de2c4:	4313      	orrs	r3, r2
   de2c6:	f891 2036 	ldrb.w	r2, [r1, #54]	; 0x36
   de2ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   de2ce:	9302      	str	r3, [sp, #8]
    GET_UINT32_BE( W[14], data, 56 );
   de2d0:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
   de2d4:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
   de2d8:	041b      	lsls	r3, r3, #16
   de2da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   de2de:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
   de2e2:	4313      	orrs	r3, r2
   de2e4:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
   de2e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   de2ec:	9303      	str	r3, [sp, #12]
    GET_UINT32_BE( W[15], data, 60 );
   de2ee:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
   de2f2:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
   de2f6:	041b      	lsls	r3, r3, #16
   de2f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   de2fc:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
   de300:	f891 103e 	ldrb.w	r1, [r1, #62]	; 0x3e
   de304:	4313      	orrs	r3, r2
   de306:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   de30a:	9304      	str	r3, [sp, #16]
    {                                                           \
        (e) += S((a),5) + F((b),(c),(d)) + K + (x);             \
        (b) = S((b),30);                                        \
    } while( 0 )

    A = ctx->state[0];
   de30c:	9b01      	ldr	r3, [sp, #4]
   de30e:	689b      	ldr	r3, [r3, #8]
   de310:	9311      	str	r3, [sp, #68]	; 0x44
    B = ctx->state[1];
   de312:	9b01      	ldr	r3, [sp, #4]
   de314:	68db      	ldr	r3, [r3, #12]
   de316:	9314      	str	r3, [sp, #80]	; 0x50
    C = ctx->state[2];
   de318:	9b01      	ldr	r3, [sp, #4]
   de31a:	691b      	ldr	r3, [r3, #16]
   de31c:	9305      	str	r3, [sp, #20]
    D = ctx->state[3];
   de31e:	9b01      	ldr	r3, [sp, #4]
   de320:	695b      	ldr	r3, [r3, #20]
   de322:	9312      	str	r3, [sp, #72]	; 0x48
    E = ctx->state[4];
   de324:	9b01      	ldr	r3, [sp, #4]

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
   de326:	9a12      	ldr	r2, [sp, #72]	; 0x48

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
   de328:	699b      	ldr	r3, [r3, #24]
   de32a:	9315      	str	r3, [sp, #84]	; 0x54

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
   de32c:	9b05      	ldr	r3, [sp, #20]
   de32e:	ea83 0002 	eor.w	r0, r3, r2
   de332:	9b14      	ldr	r3, [sp, #80]	; 0x50
   de334:	9911      	ldr	r1, [sp, #68]	; 0x44
   de336:	4018      	ands	r0, r3
   de338:	4050      	eors	r0, r2
   de33a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   de33c:	4ade      	ldr	r2, [pc, #888]	; (de6b8 <mbedtls_internal_sha1_process+0x578>)
   de33e:	4413      	add	r3, r2
   de340:	eb03 63f1 	add.w	r3, r3, r1, ror #27
   de344:	4418      	add	r0, r3
   de346:	9b06      	ldr	r3, [sp, #24]
   de348:	4418      	add	r0, r3
   de34a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   de34c:	ea4f 05b3 	mov.w	r5, r3, ror #2
    P( E, A, B, C, D, W[1]  );
   de350:	9b05      	ldr	r3, [sp, #20]
   de352:	ea83 0c05 	eor.w	ip, r3, r5
   de356:	9b05      	ldr	r3, [sp, #20]
   de358:	ea0c 0c01 	and.w	ip, ip, r1
   de35c:	ea8c 0c03 	eor.w	ip, ip, r3
   de360:	9b12      	ldr	r3, [sp, #72]	; 0x48
   de362:	4413      	add	r3, r2
   de364:	449c      	add	ip, r3
   de366:	9b07      	ldr	r3, [sp, #28]
   de368:	ea4f 04b1 	mov.w	r4, r1, ror #2
   de36c:	449c      	add	ip, r3
    P( D, E, A, B, C, W[2]  );
   de36e:	9b05      	ldr	r3, [sp, #20]
   de370:	ea85 0804 	eor.w	r8, r5, r4

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
   de374:	eb0c 6cf0 	add.w	ip, ip, r0, ror #27
    P( D, E, A, B, C, W[2]  );
   de378:	ea08 0800 	and.w	r8, r8, r0
   de37c:	4413      	add	r3, r2
   de37e:	ea4f 00b0 	mov.w	r0, r0, ror #2
   de382:	444b      	add	r3, r9
    P( C, D, E, A, B, W[3]  );
   de384:	ea84 0100 	eor.w	r1, r4, r0
#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
   de388:	ea88 0805 	eor.w	r8, r8, r5
   de38c:	4498      	add	r8, r3
    P( C, D, E, A, B, W[3]  );
   de38e:	ea01 010c 	and.w	r1, r1, ip
   de392:	18ab      	adds	r3, r5, r2
#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
   de394:	eb08 68fc 	add.w	r8, r8, ip, ror #27
    P( C, D, E, A, B, W[3]  );
   de398:	4061      	eors	r1, r4
   de39a:	ea4f 0cbc 	mov.w	ip, ip, ror #2
   de39e:	4453      	add	r3, sl
    P( B, C, D, E, A, W[4]  );
   de3a0:	18a7      	adds	r7, r4, r2
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
   de3a2:	440b      	add	r3, r1
    P( B, C, D, E, A, W[4]  );
   de3a4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   de3a6:	ea80 010c 	eor.w	r1, r0, ip
   de3aa:	ea01 0108 	and.w	r1, r1, r8
   de3ae:	4041      	eors	r1, r0
   de3b0:	4427      	add	r7, r4
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
   de3b2:	eb03 63f8 	add.w	r3, r3, r8, ror #27
    P( B, C, D, E, A, W[4]  );
   de3b6:	440f      	add	r7, r1
   de3b8:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( A, B, C, D, E, W[5]  );
   de3bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   de3be:	ea8c 0408 	eor.w	r4, ip, r8
   de3c2:	401c      	ands	r4, r3
   de3c4:	4411      	add	r1, r2
   de3c6:	ea84 040c 	eor.w	r4, r4, ip
   de3ca:	4401      	add	r1, r0

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
   de3cc:	eb07 67f3 	add.w	r7, r7, r3, ror #27
    P( A, B, C, D, E, W[5]  );
   de3d0:	4421      	add	r1, r4
   de3d2:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( E, A, B, C, D, W[6]  );
   de3d6:	9c10      	ldr	r4, [sp, #64]	; 0x40
   de3d8:	ea88 0003 	eor.w	r0, r8, r3
   de3dc:	18a6      	adds	r6, r4, r2
   de3de:	4038      	ands	r0, r7
    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
   de3e0:	eb01 61f7 	add.w	r1, r1, r7, ror #27
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
   de3e4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
   de3e6:	ea4f 07b7 	mov.w	r7, r7, ror #2
   de3ea:	ea80 0008 	eor.w	r0, r0, r8
   de3ee:	4466      	add	r6, ip
   de3f0:	4406      	add	r6, r0
    P( D, E, A, B, C, W[7]  );
   de3f2:	ea83 0007 	eor.w	r0, r3, r7
   de3f6:	eb04 0e02 	add.w	lr, r4, r2
   de3fa:	4008      	ands	r0, r1
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
   de3fc:	eb06 66f1 	add.w	r6, r6, r1, ror #27
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
   de400:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
   de402:	ea4f 01b1 	mov.w	r1, r1, ror #2
   de406:	4058      	eors	r0, r3
   de408:	44c6      	add	lr, r8
   de40a:	4486      	add	lr, r0
    P( C, D, E, A, B, W[8]  );
   de40c:	ea87 0001 	eor.w	r0, r7, r1
   de410:	18a5      	adds	r5, r4, r2
   de412:	4030      	ands	r0, r6
   de414:	4078      	eors	r0, r7
   de416:	441d      	add	r5, r3
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
   de418:	eb0e 6ef6 	add.w	lr, lr, r6, ror #27
    P( C, D, E, A, B, W[8]  );
   de41c:	4405      	add	r5, r0
   de41e:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( B, C, D, E, A, W[9]  );
   de422:	980a      	ldr	r0, [sp, #40]	; 0x28
   de424:	ea81 0306 	eor.w	r3, r1, r6
   de428:	1884      	adds	r4, r0, r2
   de42a:	ea03 030e 	and.w	r3, r3, lr
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
   de42e:	eb05 65fe 	add.w	r5, r5, lr, ror #27
    P( B, C, D, E, A, W[9]  );
   de432:	404b      	eors	r3, r1
   de434:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( A, B, C, D, E, W[10] );
   de438:	980b      	ldr	r0, [sp, #44]	; 0x2c
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
   de43a:	443c      	add	r4, r7
   de43c:	441c      	add	r4, r3
    P( A, B, C, D, E, W[10] );
   de43e:	ea86 030e 	eor.w	r3, r6, lr
   de442:	402b      	ands	r3, r5
   de444:	4410      	add	r0, r2
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
   de446:	eb04 64f5 	add.w	r4, r4, r5, ror #27
    P( A, B, C, D, E, W[10] );
   de44a:	4073      	eors	r3, r6
   de44c:	ea4f 05b5 	mov.w	r5, r5, ror #2
   de450:	4408      	add	r0, r1
    P( E, A, B, C, D, W[11] );
   de452:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
   de454:	4418      	add	r0, r3
    P( E, A, B, C, D, W[11] );
   de456:	ea8e 0305 	eor.w	r3, lr, r5
   de45a:	eb01 0b02 	add.w	fp, r1, r2
   de45e:	4023      	ands	r3, r4
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
   de460:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
   de464:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
   de466:	ea4f 04b4 	mov.w	r4, r4, ror #2
   de46a:	ea83 030e 	eor.w	r3, r3, lr
   de46e:	44b3      	add	fp, r6
   de470:	449b      	add	fp, r3
    P( D, E, A, B, C, W[12] );
   de472:	ea85 0304 	eor.w	r3, r5, r4
   de476:	eb01 0802 	add.w	r8, r1, r2
   de47a:	4003      	ands	r3, r0
   de47c:	406b      	eors	r3, r5
   de47e:	44f0      	add	r8, lr
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
   de480:	eb0b 6bf0 	add.w	fp, fp, r0, ror #27
    P( D, E, A, B, C, W[12] );
   de484:	4498      	add	r8, r3
   de486:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, W[13] );
   de48a:	9b02      	ldr	r3, [sp, #8]
   de48c:	ea84 0100 	eor.w	r1, r4, r0
   de490:	ea01 010b 	and.w	r1, r1, fp
   de494:	4413      	add	r3, r2
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
   de496:	eb08 68fb 	add.w	r8, r8, fp, ror #27
    P( C, D, E, A, B, W[13] );
   de49a:	4061      	eors	r1, r4
   de49c:	ea4f 0bbb 	mov.w	fp, fp, ror #2
   de4a0:	442b      	add	r3, r5
    P( B, C, D, E, A, W[14] );
   de4a2:	9d03      	ldr	r5, [sp, #12]
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
   de4a4:	440b      	add	r3, r1
    P( B, C, D, E, A, W[14] );
   de4a6:	ea80 010b 	eor.w	r1, r0, fp
   de4aa:	18af      	adds	r7, r5, r2
   de4ac:	ea01 0108 	and.w	r1, r1, r8
   de4b0:	4041      	eors	r1, r0
   de4b2:	4427      	add	r7, r4
   de4b4:	440f      	add	r7, r1
    P( A, B, C, D, E, W[15] );
   de4b6:	9904      	ldr	r1, [sp, #16]
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
   de4b8:	eb03 63f8 	add.w	r3, r3, r8, ror #27
    P( B, C, D, E, A, W[14] );
   de4bc:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( A, B, C, D, E, W[15] );
   de4c0:	ea8b 0408 	eor.w	r4, fp, r8
   de4c4:	4411      	add	r1, r2
   de4c6:	401c      	ands	r4, r3
   de4c8:	4401      	add	r1, r0
    P( E, A, B, C, D, R(16) );
   de4ca:	9806      	ldr	r0, [sp, #24]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
   de4cc:	ea84 040b 	eor.w	r4, r4, fp
   de4d0:	4421      	add	r1, r4
    P( E, A, B, C, D, R(16) );
   de4d2:	ea80 0409 	eor.w	r4, r0, r9
   de4d6:	9809      	ldr	r0, [sp, #36]	; 0x24
   de4d8:	4044      	eors	r4, r0
   de4da:	9802      	ldr	r0, [sp, #8]
   de4dc:	4044      	eors	r4, r0
   de4de:	ea4f 70f4 	mov.w	r0, r4, ror #31
   de4e2:	9006      	str	r0, [sp, #24]
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
   de4e4:	eb07 67f3 	add.w	r7, r7, r3, ror #27
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
   de4e8:	9c06      	ldr	r4, [sp, #24]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
   de4ea:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( E, A, B, C, D, R(16) );
   de4ee:	ea88 0003 	eor.w	r0, r8, r3
   de4f2:	eb04 0c02 	add.w	ip, r4, r2
   de4f6:	4038      	ands	r0, r7
   de4f8:	ea80 0008 	eor.w	r0, r0, r8
   de4fc:	44dc      	add	ip, fp
   de4fe:	4484      	add	ip, r0
    P( D, E, A, B, C, R(17) );
   de500:	9807      	ldr	r0, [sp, #28]
   de502:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   de504:	ea80 000a 	eor.w	r0, r0, sl
   de508:	4060      	eors	r0, r4
   de50a:	4068      	eors	r0, r5
   de50c:	ea4f 70f0 	mov.w	r0, r0, ror #31
   de510:	9007      	str	r0, [sp, #28]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
   de512:	eb01 61f7 	add.w	r1, r1, r7, ror #27
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
   de516:	9c07      	ldr	r4, [sp, #28]
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
   de518:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( D, E, A, B, C, R(17) );
   de51c:	ea83 0007 	eor.w	r0, r3, r7
   de520:	eb04 0e02 	add.w	lr, r4, r2
   de524:	4008      	ands	r0, r1
   de526:	4058      	eors	r0, r3
   de528:	44c6      	add	lr, r8
   de52a:	4486      	add	lr, r0
    P( C, D, E, A, B, R(18) );
   de52c:	980e      	ldr	r0, [sp, #56]	; 0x38
   de52e:	ea89 0900 	eor.w	r9, r9, r0
   de532:	980b      	ldr	r0, [sp, #44]	; 0x2c
   de534:	ea89 0900 	eor.w	r9, r9, r0
   de538:	9804      	ldr	r0, [sp, #16]
   de53a:	ea89 0900 	eor.w	r9, r9, r0
   de53e:	ea4f 70f9 	mov.w	r0, r9, ror #31
   de542:	9008      	str	r0, [sp, #32]
   de544:	9c08      	ldr	r4, [sp, #32]
   de546:	18a6      	adds	r6, r4, r2
   de548:	441e      	add	r6, r3
    P( B, C, D, E, A, R(19) );
   de54a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   de54c:	ea8a 0a03 	eor.w	sl, sl, r3
   de550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
   de552:	eb0c 6cf1 	add.w	ip, ip, r1, ror #27
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
   de556:	ea8a 0a03 	eor.w	sl, sl, r3
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
   de55a:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
   de55e:	9b06      	ldr	r3, [sp, #24]
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
   de560:	ea87 0001 	eor.w	r0, r7, r1
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
   de564:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
    P( C, D, E, A, B, R(18) );
   de568:	ea00 000c 	and.w	r0, r0, ip
    P( B, C, D, E, A, R(19) );
   de56c:	ea8a 0a03 	eor.w	sl, sl, r3
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
   de570:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( B, C, D, E, A, R(19) );
   de574:	ea4f 7afa 	mov.w	sl, sl, ror #31
   de578:	ea81 030c 	eor.w	r3, r1, ip
   de57c:	ea03 030e 	and.w	r3, r3, lr
   de580:	4452      	add	r2, sl
   de582:	404b      	eors	r3, r1
   de584:	443a      	add	r2, r7
   de586:	189d      	adds	r5, r3, r2
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   de588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   de58a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   de58c:	ea83 0902 	eor.w	r9, r3, r2
   de590:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(21) );
   de592:	9a13      	ldr	r2, [sp, #76]	; 0x4c
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   de594:	ea89 0903 	eor.w	r9, r9, r3
   de598:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
   de59a:	4078      	eors	r0, r7
   de59c:	4406      	add	r6, r0
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   de59e:	4f47      	ldr	r7, [pc, #284]	; (de6bc <mbedtls_internal_sha1_process+0x57c>)
   de5a0:	ea89 0903 	eor.w	r9, r9, r3
   de5a4:	ea4f 79f9 	mov.w	r9, r9, ror #31
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
   de5a8:	eb06 66fe 	add.w	r6, r6, lr, ror #27
    P( B, C, D, E, A, R(19) );
   de5ac:	ea4f 0ebe 	mov.w	lr, lr, ror #2
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   de5b0:	ea8c 030e 	eor.w	r3, ip, lr
   de5b4:	eb09 0007 	add.w	r0, r9, r7
   de5b8:	4073      	eors	r3, r6
   de5ba:	4408      	add	r0, r1
   de5bc:	4418      	add	r0, r3
    P( E, A, B, C, D, R(21) );
   de5be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(22) );
   de5c0:	9909      	ldr	r1, [sp, #36]	; 0x24

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
   de5c2:	ea83 0802 	eor.w	r8, r3, r2
   de5c6:	9b02      	ldr	r3, [sp, #8]
   de5c8:	ea88 0803 	eor.w	r8, r8, r3
   de5cc:	ea88 0804 	eor.w	r8, r8, r4
   de5d0:	ea4f 78f8 	mov.w	r8, r8, ror #31
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
   de5d4:	eb05 65f6 	add.w	r5, r5, r6, ror #27
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   de5d8:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( E, A, B, C, D, R(21) );
   de5dc:	ea8e 0306 	eor.w	r3, lr, r6
   de5e0:	eb08 0207 	add.w	r2, r8, r7
   de5e4:	406b      	eors	r3, r5
   de5e6:	4462      	add	r2, ip
   de5e8:	441a      	add	r2, r3
    P( D, E, A, B, C, R(22) );
   de5ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
   de5ec:	ea83 0c01 	eor.w	ip, r3, r1
   de5f0:	9b03      	ldr	r3, [sp, #12]
    P( C, D, E, A, B, R(23) );
   de5f2:	990a      	ldr	r1, [sp, #40]	; 0x28
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
   de5f4:	ea8c 0c03 	eor.w	ip, ip, r3
   de5f8:	ea8c 0c0a 	eor.w	ip, ip, sl
   de5fc:	ea4f 7cfc 	mov.w	ip, ip, ror #31
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   de600:	eb00 60f5 	add.w	r0, r0, r5, ror #27
    P( E, A, B, C, D, R(21) );
   de604:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( D, E, A, B, C, R(22) );
   de608:	ea86 0305 	eor.w	r3, r6, r5
   de60c:	eb0c 0407 	add.w	r4, ip, r7
   de610:	4043      	eors	r3, r0
   de612:	4474      	add	r4, lr
   de614:	441c      	add	r4, r3
    P( C, D, E, A, B, R(23) );
   de616:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   de618:	ea83 0e01 	eor.w	lr, r3, r1
   de61c:	9b04      	ldr	r3, [sp, #16]
   de61e:	ea8e 0e03 	eor.w	lr, lr, r3
   de622:	ea8e 0e09 	eor.w	lr, lr, r9
   de626:	ea4f 7efe 	mov.w	lr, lr, ror #31

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
   de62a:	eb02 62f0 	add.w	r2, r2, r0, ror #27
    P( D, E, A, B, C, R(22) );
   de62e:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, R(23) );
   de632:	ea85 0100 	eor.w	r1, r5, r0
   de636:	eb0e 0307 	add.w	r3, lr, r7
   de63a:	4051      	eors	r1, r2
   de63c:	4433      	add	r3, r6
   de63e:	440b      	add	r3, r1
    P( B, C, D, E, A, R(24) );
   de640:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   de642:	9909      	ldr	r1, [sp, #36]	; 0x24
   de644:	404e      	eors	r6, r1
   de646:	9906      	ldr	r1, [sp, #24]
   de648:	404e      	eors	r6, r1
   de64a:	ea86 0608 	eor.w	r6, r6, r8
   de64e:	ea4f 71f6 	mov.w	r1, r6, ror #31
   de652:	9109      	str	r1, [sp, #36]	; 0x24
   de654:	9e09      	ldr	r6, [sp, #36]	; 0x24
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
   de656:	eb04 64f2 	add.w	r4, r4, r2, ror #27
    P( C, D, E, A, B, R(23) );
   de65a:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(24) );
   de65e:	ea80 0102 	eor.w	r1, r0, r2
   de662:	eb06 0b07 	add.w	fp, r6, r7
   de666:	4061      	eors	r1, r4
   de668:	44ab      	add	fp, r5
   de66a:	448b      	add	fp, r1
    P( A, B, C, D, E, R(25) );
   de66c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   de66e:	990a      	ldr	r1, [sp, #40]	; 0x28
   de670:	4069      	eors	r1, r5
   de672:	9d07      	ldr	r5, [sp, #28]
   de674:	4069      	eors	r1, r5
   de676:	ea81 010c 	eor.w	r1, r1, ip
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
   de67a:	eb03 63f4 	add.w	r3, r3, r4, ror #27
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
   de67e:	ea4f 71f1 	mov.w	r1, r1, ror #31

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
   de682:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(25) );
   de686:	910a      	str	r1, [sp, #40]	; 0x28
   de688:	ea82 0504 	eor.w	r5, r2, r4
   de68c:	4439      	add	r1, r7
   de68e:	405d      	eors	r5, r3
   de690:	4401      	add	r1, r0
   de692:	4429      	add	r1, r5
    P( E, A, B, C, D, R(26) );
   de694:	980b      	ldr	r0, [sp, #44]	; 0x2c
   de696:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   de698:	4068      	eors	r0, r5
   de69a:	9d08      	ldr	r5, [sp, #32]
   de69c:	4068      	eors	r0, r5
   de69e:	ea80 000e 	eor.w	r0, r0, lr

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
   de6a2:	eb0b 6bf3 	add.w	fp, fp, r3, ror #27
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
   de6a6:	ea4f 70f0 	mov.w	r0, r0, ror #31
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
   de6aa:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( E, A, B, C, D, R(26) );
   de6ae:	900b      	str	r0, [sp, #44]	; 0x2c
   de6b0:	ea84 0503 	eor.w	r5, r4, r3
   de6b4:	e004      	b.n	de6c0 <mbedtls_internal_sha1_process+0x580>
   de6b6:	bf00      	nop
   de6b8:	5a827999 	.word	0x5a827999
   de6bc:	6ed9eba1 	.word	0x6ed9eba1
   de6c0:	4438      	add	r0, r7
   de6c2:	ea85 050b 	eor.w	r5, r5, fp
   de6c6:	4410      	add	r0, r2
   de6c8:	4428      	add	r0, r5
    P( D, E, A, B, C, R(27) );
   de6ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   de6cc:	9d02      	ldr	r5, [sp, #8]
   de6ce:	406a      	eors	r2, r5
   de6d0:	ea82 020a 	eor.w	r2, r2, sl
   de6d4:	4072      	eors	r2, r6
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
   de6d6:	eb01 61fb 	add.w	r1, r1, fp, ror #27
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
   de6da:	ea4f 72f2 	mov.w	r2, r2, ror #31
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
   de6de:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( D, E, A, B, C, R(27) );
   de6e2:	920c      	str	r2, [sp, #48]	; 0x30
   de6e4:	ea83 050b 	eor.w	r5, r3, fp
   de6e8:	443a      	add	r2, r7
   de6ea:	404d      	eors	r5, r1
   de6ec:	4422      	add	r2, r4
   de6ee:	442a      	add	r2, r5
    P( C, D, E, A, B, R(28) );
   de6f0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   de6f2:	9d03      	ldr	r5, [sp, #12]
   de6f4:	406c      	eors	r4, r5
   de6f6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   de6f8:	ea84 0409 	eor.w	r4, r4, r9
   de6fc:	406c      	eors	r4, r5
   de6fe:	ea4f 74f4 	mov.w	r4, r4, ror #31
   de702:	940d      	str	r4, [sp, #52]	; 0x34
   de704:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
   de706:	eb00 60f1 	add.w	r0, r0, r1, ror #27
    P( D, E, A, B, C, R(27) );
   de70a:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(28) );
   de70e:	ea8b 0401 	eor.w	r4, fp, r1
   de712:	443d      	add	r5, r7
   de714:	4044      	eors	r4, r0
   de716:	441d      	add	r5, r3
   de718:	4425      	add	r5, r4
    P( B, C, D, E, A, R(29) );
   de71a:	9b02      	ldr	r3, [sp, #8]
   de71c:	9c04      	ldr	r4, [sp, #16]
   de71e:	4063      	eors	r3, r4
   de720:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   de722:	ea83 0308 	eor.w	r3, r3, r8
   de726:	4063      	eors	r3, r4
   de728:	ea4f 73f3 	mov.w	r3, r3, ror #31
   de72c:	9302      	str	r3, [sp, #8]
   de72e:	9c02      	ldr	r4, [sp, #8]
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
   de730:	eb02 62f0 	add.w	r2, r2, r0, ror #27
    P( C, D, E, A, B, R(28) );
   de734:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( B, C, D, E, A, R(29) );
   de738:	ea81 0300 	eor.w	r3, r1, r0
   de73c:	443c      	add	r4, r7
   de73e:	4053      	eors	r3, r2
   de740:	445c      	add	r4, fp
   de742:	441c      	add	r4, r3
    P( A, B, C, D, E, R(30) );
   de744:	9b03      	ldr	r3, [sp, #12]
   de746:	461e      	mov	r6, r3
   de748:	9b06      	ldr	r3, [sp, #24]
   de74a:	4073      	eors	r3, r6
   de74c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   de74e:	ea83 030c 	eor.w	r3, r3, ip
   de752:	4073      	eors	r3, r6
   de754:	ea4f 73f3 	mov.w	r3, r3, ror #31
   de758:	9303      	str	r3, [sp, #12]
   de75a:	443b      	add	r3, r7
    P( E, A, B, C, D, R(31) );
   de75c:	9e07      	ldr	r6, [sp, #28]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
   de75e:	440b      	add	r3, r1
    P( E, A, B, C, D, R(31) );
   de760:	9904      	ldr	r1, [sp, #16]
   de762:	4071      	eors	r1, r6
   de764:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
   de766:	eb05 65f2 	add.w	r5, r5, r2, ror #27
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
   de76a:	ea81 010e 	eor.w	r1, r1, lr
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
   de76e:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( A, B, C, D, E, R(30) );
   de772:	ea80 0b02 	eor.w	fp, r0, r2
    P( E, A, B, C, D, R(31) );
   de776:	4071      	eors	r1, r6
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
   de778:	eb04 64f5 	add.w	r4, r4, r5, ror #27
    P( A, B, C, D, E, R(30) );
   de77c:	ea8b 0b05 	eor.w	fp, fp, r5
    P( E, A, B, C, D, R(31) );
   de780:	ea4f 71f1 	mov.w	r1, r1, ror #31
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
   de784:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( E, A, B, C, D, R(31) );
   de788:	9104      	str	r1, [sp, #16]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
   de78a:	445b      	add	r3, fp
    P( E, A, B, C, D, R(31) );
   de78c:	4439      	add	r1, r7
   de78e:	ea82 0b05 	eor.w	fp, r2, r5
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
   de792:	eb03 63f4 	add.w	r3, r3, r4, ror #27
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
   de796:	9e08      	ldr	r6, [sp, #32]
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
   de798:	ea8b 0b04 	eor.w	fp, fp, r4
   de79c:	4401      	add	r1, r0
   de79e:	ea4f 00b4 	mov.w	r0, r4, ror #2
    P( D, E, A, B, C, R(32) );
   de7a2:	9c06      	ldr	r4, [sp, #24]
   de7a4:	4074      	eors	r4, r6
   de7a6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   de7a8:	4074      	eors	r4, r6
   de7aa:	9e02      	ldr	r6, [sp, #8]
   de7ac:	4074      	eors	r4, r6
   de7ae:	ea4f 74f4 	mov.w	r4, r4, ror #31
   de7b2:	9406      	str	r4, [sp, #24]
   de7b4:	9e06      	ldr	r6, [sp, #24]
   de7b6:	ea85 0400 	eor.w	r4, r5, r0
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
   de7ba:	4459      	add	r1, fp
    P( D, E, A, B, C, R(32) );
   de7bc:	eb06 0b07 	add.w	fp, r6, r7
   de7c0:	445a      	add	r2, fp
   de7c2:	405c      	eors	r4, r3
   de7c4:	4414      	add	r4, r2
    P( C, D, E, A, B, R(33) );
   de7c6:	9a07      	ldr	r2, [sp, #28]
   de7c8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   de7ca:	ea82 020a 	eor.w	r2, r2, sl
   de7ce:	4072      	eors	r2, r6
   de7d0:	9e03      	ldr	r6, [sp, #12]
   de7d2:	4072      	eors	r2, r6
   de7d4:	ea4f 72f2 	mov.w	r2, r2, ror #31
   de7d8:	9207      	str	r2, [sp, #28]
   de7da:	9e07      	ldr	r6, [sp, #28]
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
   de7dc:	eb01 61f3 	add.w	r1, r1, r3, ror #27
    P( D, E, A, B, C, R(32) );
   de7e0:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( C, D, E, A, B, R(33) );
   de7e4:	eb06 0b07 	add.w	fp, r6, r7
   de7e8:	ea80 0203 	eor.w	r2, r0, r3
   de7ec:	445d      	add	r5, fp
   de7ee:	404a      	eors	r2, r1
   de7f0:	442a      	add	r2, r5
    P( B, C, D, E, A, R(34) );
   de7f2:	9d08      	ldr	r5, [sp, #32]
   de7f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   de7f6:	ea85 0509 	eor.w	r5, r5, r9
   de7fa:	4075      	eors	r5, r6
   de7fc:	9e04      	ldr	r6, [sp, #16]
   de7fe:	4075      	eors	r5, r6
   de800:	ea4f 75f5 	mov.w	r5, r5, ror #31
   de804:	9508      	str	r5, [sp, #32]
   de806:	9e08      	ldr	r6, [sp, #32]
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
   de808:	eb04 64f1 	add.w	r4, r4, r1, ror #27
    P( C, D, E, A, B, R(33) );
   de80c:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(34) );
   de810:	eb06 0b07 	add.w	fp, r6, r7
   de814:	ea83 0501 	eor.w	r5, r3, r1
   de818:	4458      	add	r0, fp
   de81a:	4065      	eors	r5, r4
   de81c:	4405      	add	r5, r0
    P( A, B, C, D, E, R(35) );
   de81e:	980c      	ldr	r0, [sp, #48]	; 0x30
   de820:	ea8a 0a08 	eor.w	sl, sl, r8
   de824:	ea8a 0a00 	eor.w	sl, sl, r0
   de828:	9806      	ldr	r0, [sp, #24]
   de82a:	ea8a 0a00 	eor.w	sl, sl, r0
   de82e:	ea4f 7bfa 	mov.w	fp, sl, ror #31
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
   de832:	eb02 62f4 	add.w	r2, r2, r4, ror #27
    P( B, C, D, E, A, R(34) );
   de836:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(35) );
   de83a:	eb0b 0a07 	add.w	sl, fp, r7
   de83e:	ea81 0004 	eor.w	r0, r1, r4
   de842:	4050      	eors	r0, r2
   de844:	4453      	add	r3, sl
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
   de846:	eb05 65f2 	add.w	r5, r5, r2, ror #27
    P( A, B, C, D, E, R(35) );
   de84a:	4403      	add	r3, r0
   de84c:	eb03 60f5 	add.w	r0, r3, r5, ror #27
    P( E, A, B, C, D, R(36) );
   de850:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   de852:	ea89 090c 	eor.w	r9, r9, ip
   de856:	ea89 0903 	eor.w	r9, r9, r3
   de85a:	9b07      	ldr	r3, [sp, #28]
   de85c:	ea89 0903 	eor.w	r9, r9, r3
   de860:	ea4f 7af9 	mov.w	sl, r9, ror #31
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
   de864:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(36) );
   de868:	eb0a 0907 	add.w	r9, sl, r7
   de86c:	ea84 0302 	eor.w	r3, r4, r2
   de870:	406b      	eors	r3, r5
   de872:	4449      	add	r1, r9
   de874:	4419      	add	r1, r3
   de876:	eb01 63f0 	add.w	r3, r1, r0, ror #27
    P( D, E, A, B, C, R(37) );
   de87a:	9902      	ldr	r1, [sp, #8]
   de87c:	ea88 080e 	eor.w	r8, r8, lr
   de880:	ea88 0801 	eor.w	r8, r8, r1
   de884:	ea88 0806 	eor.w	r8, r8, r6
   de888:	ea4f 71f8 	mov.w	r1, r8, ror #31
   de88c:	910e      	str	r1, [sp, #56]	; 0x38
   de88e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
   de890:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( D, E, A, B, C, R(37) );
   de894:	eb06 0807 	add.w	r8, r6, r7
   de898:	ea82 0105 	eor.w	r1, r2, r5
   de89c:	4041      	eors	r1, r0
   de89e:	4444      	add	r4, r8
   de8a0:	440c      	add	r4, r1
   de8a2:	eb04 61f3 	add.w	r1, r4, r3, ror #27
    P( C, D, E, A, B, R(38) );
   de8a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   de8a8:	ea8c 0c04 	eor.w	ip, ip, r4
   de8ac:	9c03      	ldr	r4, [sp, #12]
   de8ae:	ea8c 0c04 	eor.w	ip, ip, r4
   de8b2:	ea8c 0c0b 	eor.w	ip, ip, fp
   de8b6:	ea4f 74fc 	mov.w	r4, ip, ror #31
   de8ba:	940f      	str	r4, [sp, #60]	; 0x3c
   de8bc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
   de8be:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, R(38) );
   de8c2:	eb06 0c07 	add.w	ip, r6, r7
   de8c6:	ea85 0400 	eor.w	r4, r5, r0
   de8ca:	405c      	eors	r4, r3
   de8cc:	4462      	add	r2, ip
   de8ce:	4422      	add	r2, r4
   de8d0:	eb02 64f1 	add.w	r4, r2, r1, ror #27
    P( B, C, D, E, A, R(39) );
   de8d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   de8d6:	ea8e 0e02 	eor.w	lr, lr, r2
   de8da:	9a04      	ldr	r2, [sp, #16]
   de8dc:	ea8e 0e02 	eor.w	lr, lr, r2
   de8e0:	ea8e 0e0a 	eor.w	lr, lr, sl
   de8e4:	ea4f 72fe 	mov.w	r2, lr, ror #31
   de8e8:	9210      	str	r2, [sp, #64]	; 0x40
   de8ea:	9e10      	ldr	r6, [sp, #64]	; 0x40
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
   de8ec:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(39) );
   de8f0:	ea80 0203 	eor.w	r2, r0, r3
   de8f4:	4437      	add	r7, r6
   de8f6:	404a      	eors	r2, r1
   de8f8:	443d      	add	r5, r7
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   de8fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
   de8fc:	4fd2      	ldr	r7, [pc, #840]	; (dec48 <mbedtls_internal_sha1_process+0xb08>)
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
   de8fe:	4415      	add	r5, r2
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   de900:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   de902:	4056      	eors	r6, r2
   de904:	9a06      	ldr	r2, [sp, #24]
   de906:	4056      	eors	r6, r2
   de908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   de90a:	4056      	eors	r6, r2
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
   de90c:	ea4f 08b1 	mov.w	r8, r1, ror #2
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   de910:	ea4f 72f6 	mov.w	r2, r6, ror #31
   de914:	9209      	str	r2, [sp, #36]	; 0x24
   de916:	ea44 0208 	orr.w	r2, r4, r8
   de91a:	ea04 0108 	and.w	r1, r4, r8
   de91e:	401a      	ands	r2, r3
   de920:	430a      	orrs	r2, r1
   de922:	9909      	ldr	r1, [sp, #36]	; 0x24
   de924:	4439      	add	r1, r7
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
   de926:	eb05 65f4 	add.w	r5, r5, r4, ror #27
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   de92a:	4408      	add	r0, r1
   de92c:	eb00 60f5 	add.w	r0, r0, r5, ror #27
   de930:	4402      	add	r2, r0
    P( E, A, B, C, D, R(41) );
   de932:	990a      	ldr	r1, [sp, #40]	; 0x28
   de934:	980c      	ldr	r0, [sp, #48]	; 0x30
   de936:	4041      	eors	r1, r0
   de938:	9807      	ldr	r0, [sp, #28]
   de93a:	4041      	eors	r1, r0
   de93c:	980f      	ldr	r0, [sp, #60]	; 0x3c
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   de93e:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(41) );
   de942:	4041      	eors	r1, r0
   de944:	ea4f 71f1 	mov.w	r1, r1, ror #31
   de948:	ea45 0004 	orr.w	r0, r5, r4
   de94c:	910a      	str	r1, [sp, #40]	; 0x28
   de94e:	ea00 0008 	and.w	r0, r0, r8
   de952:	ea05 0104 	and.w	r1, r5, r4
   de956:	4308      	orrs	r0, r1
   de958:	990a      	ldr	r1, [sp, #40]	; 0x28
   de95a:	4439      	add	r1, r7
   de95c:	440b      	add	r3, r1
   de95e:	4403      	add	r3, r0
    P( D, E, A, B, C, R(42) );
   de960:	990b      	ldr	r1, [sp, #44]	; 0x2c
   de962:	980d      	ldr	r0, [sp, #52]	; 0x34
   de964:	4048      	eors	r0, r1
   de966:	9908      	ldr	r1, [sp, #32]
   de968:	4048      	eors	r0, r1
   de96a:	9910      	ldr	r1, [sp, #64]	; 0x40

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
   de96c:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( D, E, A, B, C, R(42) );
   de970:	4048      	eors	r0, r1
   de972:	ea4f 71f0 	mov.w	r1, r0, ror #31
   de976:	ea42 0005 	orr.w	r0, r2, r5
   de97a:	910b      	str	r1, [sp, #44]	; 0x2c
   de97c:	4020      	ands	r0, r4
   de97e:	ea02 0105 	and.w	r1, r2, r5
   de982:	4308      	orrs	r0, r1
   de984:	990b      	ldr	r1, [sp, #44]	; 0x2c
   de986:	4439      	add	r1, r7

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
   de988:	eb03 63f2 	add.w	r3, r3, r2, ror #27
    P( D, E, A, B, C, R(42) );
   de98c:	4441      	add	r1, r8
   de98e:	eb01 61f3 	add.w	r1, r1, r3, ror #27
   de992:	ea4f 06b2 	mov.w	r6, r2, ror #2
   de996:	4408      	add	r0, r1
    P( C, D, E, A, B, R(43) );
   de998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   de99a:	9902      	ldr	r1, [sp, #8]
   de99c:	4051      	eors	r1, r2
   de99e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   de9a0:	ea81 010b 	eor.w	r1, r1, fp
   de9a4:	4051      	eors	r1, r2
   de9a6:	ea4f 72f1 	mov.w	r2, r1, ror #31
   de9aa:	ea43 0106 	orr.w	r1, r3, r6
   de9ae:	920c      	str	r2, [sp, #48]	; 0x30
   de9b0:	4029      	ands	r1, r5
   de9b2:	ea03 0206 	and.w	r2, r3, r6
   de9b6:	4311      	orrs	r1, r2
   de9b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   de9ba:	443a      	add	r2, r7
   de9bc:	ea4f 0eb3 	mov.w	lr, r3, ror #2
   de9c0:	4414      	add	r4, r2
    P( B, C, D, E, A, R(44) );
   de9c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   de9c4:	9a03      	ldr	r2, [sp, #12]
   de9c6:	4053      	eors	r3, r2
   de9c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   de9ca:	ea83 030a 	eor.w	r3, r3, sl
   de9ce:	4053      	eors	r3, r2
   de9d0:	ea4f 73f3 	mov.w	r3, r3, ror #31
   de9d4:	930d      	str	r3, [sp, #52]	; 0x34
   de9d6:	ea40 030e 	orr.w	r3, r0, lr
   de9da:	ea03 0206 	and.w	r2, r3, r6
   de9de:	ea00 030e 	and.w	r3, r0, lr
   de9e2:	4313      	orrs	r3, r2
   de9e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
   de9e6:	440c      	add	r4, r1
    P( B, C, D, E, A, R(44) );
   de9e8:	443a      	add	r2, r7
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
   de9ea:	eb04 61f0 	add.w	r1, r4, r0, ror #27
    P( B, C, D, E, A, R(44) );
   de9ee:	4415      	add	r5, r2
   de9f0:	eb05 65f1 	add.w	r5, r5, r1, ror #27
   de9f4:	441d      	add	r5, r3
    P( A, B, C, D, E, R(45) );
   de9f6:	9a04      	ldr	r2, [sp, #16]
   de9f8:	9b02      	ldr	r3, [sp, #8]
   de9fa:	405a      	eors	r2, r3
   de9fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   de9fe:	405a      	eors	r2, r3
   dea00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dea02:	405a      	eors	r2, r3
   dea04:	ea4f 73f2 	mov.w	r3, r2, ror #31
   dea08:	9302      	str	r3, [sp, #8]

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
   dea0a:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( A, B, C, D, E, R(45) );
   dea0e:	9a02      	ldr	r2, [sp, #8]
   dea10:	ea41 0300 	orr.w	r3, r1, r0
   dea14:	ea03 0c0e 	and.w	ip, r3, lr
   dea18:	443a      	add	r2, r7
   dea1a:	ea01 0300 	and.w	r3, r1, r0
   dea1e:	ea4c 0303 	orr.w	r3, ip, r3
   dea22:	4432      	add	r2, r6
   dea24:	441a      	add	r2, r3
   dea26:	eb02 6cf5 	add.w	ip, r2, r5, ror #27
    P( E, A, B, C, D, R(46) );
   dea2a:	9b03      	ldr	r3, [sp, #12]
    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
   dea2c:	ea4f 02b1 	mov.w	r2, r1, ror #2
    P( E, A, B, C, D, R(46) );
   dea30:	9906      	ldr	r1, [sp, #24]
   dea32:	ea83 0901 	eor.w	r9, r3, r1
   dea36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(47) );
   dea38:	9904      	ldr	r1, [sp, #16]
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
   dea3a:	ea89 0903 	eor.w	r9, r9, r3
   dea3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dea40:	ea89 0903 	eor.w	r9, r9, r3
   dea44:	ea4f 73f9 	mov.w	r3, r9, ror #31
   dea48:	ea45 0402 	orr.w	r4, r5, r2
   dea4c:	9303      	str	r3, [sp, #12]
   dea4e:	4004      	ands	r4, r0
   dea50:	ea05 0302 	and.w	r3, r5, r2
   dea54:	431c      	orrs	r4, r3
   dea56:	9b03      	ldr	r3, [sp, #12]
   dea58:	443b      	add	r3, r7
   dea5a:	449e      	add	lr, r3
   dea5c:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
   dea60:	44a6      	add	lr, r4
    P( D, E, A, B, C, R(47) );
   dea62:	9c07      	ldr	r4, [sp, #28]
   dea64:	ea81 0804 	eor.w	r8, r1, r4
   dea68:	9910      	ldr	r1, [sp, #64]	; 0x40
   dea6a:	ea88 0801 	eor.w	r8, r8, r1
   dea6e:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
   dea70:	ea4f 03b5 	mov.w	r3, r5, ror #2
    P( D, E, A, B, C, R(47) );
   dea74:	ea88 0801 	eor.w	r8, r8, r1
   dea78:	ea4f 71f8 	mov.w	r1, r8, ror #31
   dea7c:	ea4c 0403 	orr.w	r4, ip, r3
   dea80:	9104      	str	r1, [sp, #16]
   dea82:	4014      	ands	r4, r2
   dea84:	ea0c 0103 	and.w	r1, ip, r3
   dea88:	430c      	orrs	r4, r1
   dea8a:	9904      	ldr	r1, [sp, #16]
   dea8c:	eb01 0807 	add.w	r8, r1, r7
   dea90:	4440      	add	r0, r8
    P( C, D, E, A, B, R(48) );
   dea92:	9906      	ldr	r1, [sp, #24]
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
   dea94:	eb04 0800 	add.w	r8, r4, r0
    P( C, D, E, A, B, R(48) );
   dea98:	9808      	ldr	r0, [sp, #32]
   dea9a:	ea81 0900 	eor.w	r9, r1, r0
   dea9e:	9909      	ldr	r1, [sp, #36]	; 0x24
   deaa0:	ea89 0901 	eor.w	r9, r9, r1
   deaa4:	9902      	ldr	r1, [sp, #8]
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
   deaa6:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(48) );
   deaaa:	ea89 0901 	eor.w	r9, r9, r1
   deaae:	ea4f 71f9 	mov.w	r1, r9, ror #31
   deab2:	ea4e 040c 	orr.w	r4, lr, ip
   deab6:	9106      	str	r1, [sp, #24]
   deab8:	401c      	ands	r4, r3
   deaba:	ea0e 010c 	and.w	r1, lr, ip
   deabe:	ea44 0001 	orr.w	r0, r4, r1
   deac2:	9906      	ldr	r1, [sp, #24]
   deac4:	4439      	add	r1, r7
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
   deac6:	eb08 68fe 	add.w	r8, r8, lr, ror #27
    P( C, D, E, A, B, R(48) );
   deaca:	4411      	add	r1, r2
   deacc:	eb01 65f8 	add.w	r5, r1, r8, ror #27
    P( B, C, D, E, A, R(49) );
   dead0:	9a07      	ldr	r2, [sp, #28]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
   dead2:	1944      	adds	r4, r0, r5
    P( B, C, D, E, A, R(49) );
   dead4:	980a      	ldr	r0, [sp, #40]	; 0x28
   dead6:	ea82 020b 	eor.w	r2, r2, fp
   deada:	4042      	eors	r2, r0
   deadc:	9803      	ldr	r0, [sp, #12]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
   deade:	ea4f 01be 	mov.w	r1, lr, ror #2
    P( B, C, D, E, A, R(49) );
   deae2:	4042      	eors	r2, r0
   deae4:	ea4f 72f2 	mov.w	r2, r2, ror #31
   deae8:	ea48 0001 	orr.w	r0, r8, r1
   deaec:	9207      	str	r2, [sp, #28]
   deaee:	ea00 000c 	and.w	r0, r0, ip
   deaf2:	ea08 0201 	and.w	r2, r8, r1
   deaf6:	4310      	orrs	r0, r2
   deaf8:	9a07      	ldr	r2, [sp, #28]
   deafa:	19d6      	adds	r6, r2, r7
   deafc:	4433      	add	r3, r6
   deafe:	18c6      	adds	r6, r0, r3
    P( A, B, C, D, E, R(50) );
   deb00:	9b08      	ldr	r3, [sp, #32]
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
   deb02:	eb06 69f4 	add.w	r9, r6, r4, ror #27
    P( A, B, C, D, E, R(50) );
   deb06:	ea83 060a 	eor.w	r6, r3, sl
   deb0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   deb0c:	405e      	eors	r6, r3
   deb0e:	9b04      	ldr	r3, [sp, #16]
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
   deb10:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( A, B, C, D, E, R(50) );
   deb14:	405e      	eors	r6, r3
   deb16:	ea44 0208 	orr.w	r2, r4, r8
   deb1a:	ea4f 7ef6 	mov.w	lr, r6, ror #31
   deb1e:	400a      	ands	r2, r1
   deb20:	ea04 0308 	and.w	r3, r4, r8
   deb24:	4313      	orrs	r3, r2
   deb26:	eb0e 0207 	add.w	r2, lr, r7
   deb2a:	4462      	add	r2, ip
   deb2c:	eb02 62f9 	add.w	r2, r2, r9, ror #27
   deb30:	441a      	add	r2, r3
    P( E, A, B, C, D, R(51) );
   deb32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   deb34:	ea8b 0c03 	eor.w	ip, fp, r3
   deb38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   deb3a:	ea8c 0c03 	eor.w	ip, ip, r3
   deb3e:	9b06      	ldr	r3, [sp, #24]
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
   deb40:	ea4f 05b4 	mov.w	r5, r4, ror #2
    P( E, A, B, C, D, R(51) );
   deb44:	ea8c 0c03 	eor.w	ip, ip, r3
   deb48:	ea49 0305 	orr.w	r3, r9, r5
   deb4c:	ea4f 7cfc 	mov.w	ip, ip, ror #31
   deb50:	ea03 0b08 	and.w	fp, r3, r8
   deb54:	ea09 0305 	and.w	r3, r9, r5
   deb58:	ea4b 0303 	orr.w	r3, fp, r3
   deb5c:	eb0c 0b07 	add.w	fp, ip, r7
   deb60:	448b      	add	fp, r1
   deb62:	449b      	add	fp, r3
    P( D, E, A, B, C, R(52) );
   deb64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   deb66:	990d      	ldr	r1, [sp, #52]	; 0x34
   deb68:	ea8a 0303 	eor.w	r3, sl, r3
   deb6c:	404b      	eors	r3, r1
   deb6e:	9907      	ldr	r1, [sp, #28]
   deb70:	404b      	eors	r3, r1
   deb72:	ea4f 73f3 	mov.w	r3, r3, ror #31
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
   deb76:	ea4f 06b9 	mov.w	r6, r9, ror #2
    P( D, E, A, B, C, R(52) );
   deb7a:	9308      	str	r3, [sp, #32]
   deb7c:	9908      	ldr	r1, [sp, #32]
   deb7e:	ea42 0006 	orr.w	r0, r2, r6
   deb82:	4028      	ands	r0, r5
   deb84:	ea02 0306 	and.w	r3, r2, r6
   deb88:	4303      	orrs	r3, r0
   deb8a:	19c8      	adds	r0, r1, r7
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
   deb8c:	eb0b 6bf2 	add.w	fp, fp, r2, ror #27
    P( D, E, A, B, C, R(52) );
   deb90:	4440      	add	r0, r8
   deb92:	eb00 60fb 	add.w	r0, r0, fp, ror #27
   deb96:	4418      	add	r0, r3
    P( C, D, E, A, B, R(53) );
   deb98:	9910      	ldr	r1, [sp, #64]	; 0x40
   deb9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   deb9c:	404b      	eors	r3, r1
   deb9e:	9902      	ldr	r1, [sp, #8]
   deba0:	404b      	eors	r3, r1
   deba2:	ea83 030e 	eor.w	r3, r3, lr
   deba6:	ea4f 73f3 	mov.w	r3, r3, ror #31
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
   debaa:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( C, D, E, A, B, R(53) );
   debae:	930e      	str	r3, [sp, #56]	; 0x38
   debb0:	990e      	ldr	r1, [sp, #56]	; 0x38
   debb2:	ea4b 0302 	orr.w	r3, fp, r2
   debb6:	ea03 0406 	and.w	r4, r3, r6
   debba:	ea0b 0302 	and.w	r3, fp, r2
   debbe:	4323      	orrs	r3, r4
   debc0:	19cc      	adds	r4, r1, r7
   debc2:	442c      	add	r4, r5
    P( B, C, D, E, A, R(54) );
   debc4:	9909      	ldr	r1, [sp, #36]	; 0x24
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
   debc6:	441c      	add	r4, r3
    P( B, C, D, E, A, R(54) );
   debc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   debca:	ea83 0901 	eor.w	r9, r3, r1
   debce:	9b03      	ldr	r3, [sp, #12]
   debd0:	ea89 0903 	eor.w	r9, r9, r3
   debd4:	ea89 090c 	eor.w	r9, r9, ip
   debd8:	ea4f 73f9 	mov.w	r3, r9, ror #31
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
   debdc:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( B, C, D, E, A, R(54) );
   debe0:	930f      	str	r3, [sp, #60]	; 0x3c
   debe2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   debe4:	ea40 090b 	orr.w	r9, r0, fp
   debe8:	ea09 0902 	and.w	r9, r9, r2
   debec:	ea00 030b 	and.w	r3, r0, fp
   debf0:	ea49 0303 	orr.w	r3, r9, r3
   debf4:	eb01 0907 	add.w	r9, r1, r7
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
   debf8:	eb04 64f0 	add.w	r4, r4, r0, ror #27
    P( B, C, D, E, A, R(54) );
   debfc:	44b1      	add	r9, r6
   debfe:	eb09 69f4 	add.w	r9, r9, r4, ror #27
   dec02:	4499      	add	r9, r3
    P( A, B, C, D, E, R(55) );
   dec04:	990a      	ldr	r1, [sp, #40]	; 0x28
   dec06:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dec08:	ea83 0801 	eor.w	r8, r3, r1
   dec0c:	9b04      	ldr	r3, [sp, #16]
   dec0e:	ea88 0803 	eor.w	r8, r8, r3
   dec12:	9b08      	ldr	r3, [sp, #32]
   dec14:	ea88 0803 	eor.w	r8, r8, r3
   dec18:	ea4f 73f8 	mov.w	r3, r8, ror #31
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
   dec1c:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( A, B, C, D, E, R(55) );
   dec20:	9310      	str	r3, [sp, #64]	; 0x40
   dec22:	9910      	ldr	r1, [sp, #64]	; 0x40
   dec24:	ea44 0300 	orr.w	r3, r4, r0
   dec28:	ea03 080b 	and.w	r8, r3, fp
   dec2c:	ea04 0300 	and.w	r3, r4, r0
   dec30:	ea48 0303 	orr.w	r3, r8, r3
   dec34:	eb01 0807 	add.w	r8, r1, r7
   dec38:	4490      	add	r8, r2
   dec3a:	4498      	add	r8, r3
    P( E, A, B, C, D, R(56) );
   dec3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   dec3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dec40:	ea83 0602 	eor.w	r6, r3, r2
   dec44:	9b06      	ldr	r3, [sp, #24]
   dec46:	e001      	b.n	dec4c <mbedtls_internal_sha1_process+0xb0c>
   dec48:	8f1bbcdc 	.word	0x8f1bbcdc
   dec4c:	405e      	eors	r6, r3
   dec4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dec50:	405e      	eors	r6, r3
   dec52:	ea4f 73f6 	mov.w	r3, r6, ror #31
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
   dec56:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(56) );
   dec5a:	9309      	str	r3, [sp, #36]	; 0x24
   dec5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   dec5e:	ea49 0604 	orr.w	r6, r9, r4
   dec62:	4006      	ands	r6, r0
   dec64:	ea09 0304 	and.w	r3, r9, r4
   dec68:	4333      	orrs	r3, r6
   dec6a:	19d6      	adds	r6, r2, r7
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
   dec6c:	eb08 68f9 	add.w	r8, r8, r9, ror #27
    P( E, A, B, C, D, R(56) );
   dec70:	445e      	add	r6, fp
   dec72:	eb06 66f8 	add.w	r6, r6, r8, ror #27
   dec76:	441e      	add	r6, r3
    P( D, E, A, B, C, R(57) );
   dec78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   dec7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dec7c:	ea83 0b02 	eor.w	fp, r3, r2
   dec80:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, R(58) );
   dec82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
   dec84:	ea8b 0b03 	eor.w	fp, fp, r3
   dec88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
   dec8a:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( D, E, A, B, C, R(57) );
   dec8e:	ea8b 0b03 	eor.w	fp, fp, r3
   dec92:	ea48 0309 	orr.w	r3, r8, r9
   dec96:	ea4f 7bfb 	mov.w	fp, fp, ror #31
   dec9a:	ea03 0a04 	and.w	sl, r3, r4
   dec9e:	ea08 0309 	and.w	r3, r8, r9
   deca2:	ea4a 0303 	orr.w	r3, sl, r3
   deca6:	eb0b 0a07 	add.w	sl, fp, r7
   decaa:	4482      	add	sl, r0
   decac:	449a      	add	sl, r3
    P( C, D, E, A, B, R(58) );
   decae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
   decb0:	9804      	ldr	r0, [sp, #16]
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
   decb2:	ea83 0502 	eor.w	r5, r3, r2
   decb6:	ea85 050e 	eor.w	r5, r5, lr
   decba:	404d      	eors	r5, r1
   decbc:	ea4f 73f5 	mov.w	r3, r5, ror #31
   decc0:	19dd      	adds	r5, r3, r7
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
   decc2:	eb0a 6af6 	add.w	sl, sl, r6, ror #27
   decc6:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(58) );
   decca:	4425      	add	r5, r4
   deccc:	930a      	str	r3, [sp, #40]	; 0x28
   decce:	eb05 63fa 	add.w	r3, r5, sl, ror #27
   decd2:	ea46 0508 	orr.w	r5, r6, r8
   decd6:	ea06 0208 	and.w	r2, r6, r8
   decda:	ea05 0509 	and.w	r5, r5, r9
   decde:	4315      	orrs	r5, r2
   dece0:	441d      	add	r5, r3
    P( B, C, D, E, A, R(59) );
   dece2:	9a02      	ldr	r2, [sp, #8]
   dece4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dece6:	ea83 0102 	eor.w	r1, r3, r2
   decea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   decec:	ea81 010c 	eor.w	r1, r1, ip
   decf0:	4059      	eors	r1, r3
   decf2:	ea4f 73f1 	mov.w	r3, r1, ror #31
   decf6:	930b      	str	r3, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
   decf8:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( B, C, D, E, A, R(59) );
   decfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   decfe:	ea4a 0106 	orr.w	r1, sl, r6
   ded02:	ea01 0108 	and.w	r1, r1, r8
   ded06:	ea0a 0306 	and.w	r3, sl, r6
   ded0a:	4417      	add	r7, r2
   ded0c:	444f      	add	r7, r9
   ded0e:	430b      	orrs	r3, r1
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
   ded10:	9a03      	ldr	r2, [sp, #12]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
   ded12:	19d9      	adds	r1, r3, r7
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
   ded14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ded16:	4fd9      	ldr	r7, [pc, #868]	; (df07c <mbedtls_internal_sha1_process+0xf3c>)
   ded18:	4053      	eors	r3, r2
   ded1a:	9a08      	ldr	r2, [sp, #32]
   ded1c:	4053      	eors	r3, r2
   ded1e:	ea83 030b 	eor.w	r3, r3, fp
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
   ded22:	ea4f 0aba 	mov.w	sl, sl, ror #2
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
   ded26:	ea4f 73f3 	mov.w	r3, r3, ror #31
   ded2a:	930c      	str	r3, [sp, #48]	; 0x30
   ded2c:	ea86 020a 	eor.w	r2, r6, sl
   ded30:	443b      	add	r3, r7
   ded32:	406a      	eors	r2, r5
   ded34:	4443      	add	r3, r8
   ded36:	4413      	add	r3, r2
    P( E, A, B, C, D, R(61) );
   ded38:	9a02      	ldr	r2, [sp, #8]
   ded3a:	4042      	eors	r2, r0
   ded3c:	980e      	ldr	r0, [sp, #56]	; 0x38
   ded3e:	4042      	eors	r2, r0
   ded40:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(62) );
   ded42:	9c06      	ldr	r4, [sp, #24]

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
   ded44:	4042      	eors	r2, r0
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
   ded46:	eb01 61f5 	add.w	r1, r1, r5, ror #27

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
   ded4a:	ea4f 72f2 	mov.w	r2, r2, ror #31
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
   ded4e:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( E, A, B, C, D, R(61) );
   ded52:	9202      	str	r2, [sp, #8]
   ded54:	ea8a 0005 	eor.w	r0, sl, r5
   ded58:	443a      	add	r2, r7
   ded5a:	4048      	eors	r0, r1
   ded5c:	4432      	add	r2, r6
   ded5e:	4402      	add	r2, r0
    P( D, E, A, B, C, R(62) );
   ded60:	9803      	ldr	r0, [sp, #12]
    P( C, D, E, A, B, R(63) );
   ded62:	9e07      	ldr	r6, [sp, #28]
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
   ded64:	ea80 0904 	eor.w	r9, r0, r4
   ded68:	980f      	ldr	r0, [sp, #60]	; 0x3c
   ded6a:	ea89 0900 	eor.w	r9, r9, r0
   ded6e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   ded70:	ea89 0900 	eor.w	r9, r9, r0
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
   ded74:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
   ded78:	ea4f 70f9 	mov.w	r0, r9, ror #31

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
   ded7c:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(62) );
   ded80:	9003      	str	r0, [sp, #12]
   ded82:	ea85 0401 	eor.w	r4, r5, r1
   ded86:	4438      	add	r0, r7
   ded88:	405c      	eors	r4, r3
   ded8a:	4450      	add	r0, sl
   ded8c:	4420      	add	r0, r4
    P( C, D, E, A, B, R(63) );
   ded8e:	9c04      	ldr	r4, [sp, #16]
   ded90:	ea84 0806 	eor.w	r8, r4, r6
   ded94:	9c10      	ldr	r4, [sp, #64]	; 0x40
   ded96:	ea88 0804 	eor.w	r8, r8, r4
   ded9a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   ded9c:	ea88 0804 	eor.w	r8, r8, r4
   deda0:	ea4f 74f8 	mov.w	r4, r8, ror #31
   deda4:	9404      	str	r4, [sp, #16]
   deda6:	443c      	add	r4, r7
   deda8:	442c      	add	r4, r5
    P( B, C, D, E, A, R(64) );
   dedaa:	9d06      	ldr	r5, [sp, #24]
   dedac:	ea85 090e 	eor.w	r9, r5, lr
   dedb0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   dedb2:	ea89 0905 	eor.w	r9, r9, r5
   dedb6:	9d02      	ldr	r5, [sp, #8]

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
   dedb8:	eb02 62f3 	add.w	r2, r2, r3, ror #27
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
   dedbc:	ea89 0905 	eor.w	r9, r9, r5
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
   dedc0:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( C, D, E, A, B, R(63) );
   dedc4:	ea81 0603 	eor.w	r6, r1, r3
    P( B, C, D, E, A, R(64) );
   dedc8:	ea4f 75f9 	mov.w	r5, r9, ror #31
   dedcc:	9506      	str	r5, [sp, #24]
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
   dedce:	4056      	eors	r6, r2
   dedd0:	4434      	add	r4, r6
    P( B, C, D, E, A, R(64) );
   dedd2:	9e06      	ldr	r6, [sp, #24]
   dedd4:	eb06 0907 	add.w	r9, r6, r7
   dedd8:	4489      	add	r9, r1
    P( A, B, C, D, E, R(65) );
   dedda:	9907      	ldr	r1, [sp, #28]
   deddc:	ea81 080c 	eor.w	r8, r1, ip
   dede0:	9903      	ldr	r1, [sp, #12]
   dede2:	ea88 080b 	eor.w	r8, r8, fp
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
   dede6:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
   dedea:	ea88 0801 	eor.w	r8, r8, r1
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
   dedee:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(64) );
   dedf2:	ea83 0502 	eor.w	r5, r3, r2
    P( A, B, C, D, E, R(65) );
   dedf6:	ea4f 71f8 	mov.w	r1, r8, ror #31
   dedfa:	9107      	str	r1, [sp, #28]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
   dedfc:	4045      	eors	r5, r0
   dedfe:	44a9      	add	r9, r5
    P( A, B, C, D, E, R(65) );
   dee00:	9d07      	ldr	r5, [sp, #28]
   dee02:	eb05 0807 	add.w	r8, r5, r7
   dee06:	4498      	add	r8, r3
    P( E, A, B, C, D, R(66) );
   dee08:	9b08      	ldr	r3, [sp, #32]
   dee0a:	ea8e 0603 	eor.w	r6, lr, r3
   dee0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dee10:	405e      	eors	r6, r3
   dee12:	9b04      	ldr	r3, [sp, #16]
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
   dee14:	eb04 64f0 	add.w	r4, r4, r0, ror #27
    P( B, C, D, E, A, R(64) );
   dee18:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( A, B, C, D, E, R(65) );
   dee1c:	ea82 0100 	eor.w	r1, r2, r0
    P( E, A, B, C, D, R(66) );
   dee20:	405e      	eors	r6, r3

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
   dee22:	eb09 69f4 	add.w	r9, r9, r4, ror #27
    P( A, B, C, D, E, R(65) );
   dee26:	4061      	eors	r1, r4
    P( E, A, B, C, D, R(66) );
   dee28:	ea4f 76f6 	mov.w	r6, r6, ror #31
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
   dee2c:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(66) );
   dee30:	ea80 0304 	eor.w	r3, r0, r4
   dee34:	eb06 0e07 	add.w	lr, r6, r7
   dee38:	ea83 0309 	eor.w	r3, r3, r9
   dee3c:	4496      	add	lr, r2
   dee3e:	449e      	add	lr, r3
    P( D, E, A, B, C, R(67) );
   dee40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( C, D, E, A, B, R(68) );
   dee42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
   dee44:	ea8c 0a03 	eor.w	sl, ip, r3
   dee48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dee4a:	ea8a 0a03 	eor.w	sl, sl, r3
   dee4e:	9b06      	ldr	r3, [sp, #24]
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
   dee50:	4488      	add	r8, r1
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
   dee52:	ea8a 0a03 	eor.w	sl, sl, r3
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
   dee56:	eb08 68f9 	add.w	r8, r8, r9, ror #27
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
   dee5a:	ea4f 7afa 	mov.w	sl, sl, ror #31
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
   dee5e:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( D, E, A, B, C, R(67) );
   dee62:	ea84 0309 	eor.w	r3, r4, r9
   dee66:	eb0a 0c07 	add.w	ip, sl, r7
   dee6a:	ea83 0308 	eor.w	r3, r3, r8
   dee6e:	4484      	add	ip, r0
   dee70:	449c      	add	ip, r3
    P( C, D, E, A, B, R(68) );
   dee72:	9b08      	ldr	r3, [sp, #32]
   dee74:	4053      	eors	r3, r2
   dee76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   dee78:	4053      	eors	r3, r2
   dee7a:	406b      	eors	r3, r5
   dee7c:	ea4f 73f3 	mov.w	r3, r3, ror #31
   dee80:	9308      	str	r3, [sp, #32]
   dee82:	9a08      	ldr	r2, [sp, #32]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
   dee84:	eb0e 6ef8 	add.w	lr, lr, r8, ror #27
    P( D, E, A, B, C, R(67) );
   dee88:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(68) );
   dee8c:	ea89 0308 	eor.w	r3, r9, r8
   dee90:	19d5      	adds	r5, r2, r7
   dee92:	ea83 030e 	eor.w	r3, r3, lr
   dee96:	4425      	add	r5, r4
   dee98:	441d      	add	r5, r3
    P( B, C, D, E, A, R(69) );
   dee9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dee9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
   dee9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
   deea0:	4053      	eors	r3, r2
   deea2:	9a02      	ldr	r2, [sp, #8]
   deea4:	4053      	eors	r3, r2
   deea6:	4073      	eors	r3, r6
   deea8:	ea4f 73f3 	mov.w	r3, r3, ror #31
   deeac:	930d      	str	r3, [sp, #52]	; 0x34
   deeae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
   deeb0:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
    P( C, D, E, A, B, R(68) );
   deeb4:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( B, C, D, E, A, R(69) );
   deeb8:	ea88 030e 	eor.w	r3, r8, lr
   deebc:	19d1      	adds	r1, r2, r7
   deebe:	ea83 030c 	eor.w	r3, r3, ip
   deec2:	4449      	add	r1, r9
    P( A, B, C, D, E, R(70) );
   deec4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
   deec6:	4419      	add	r1, r3
    P( A, B, C, D, E, R(70) );
   deec8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   deeca:	ea83 0902 	eor.w	r9, r3, r2
   deece:	9b03      	ldr	r3, [sp, #12]
   deed0:	ea89 0903 	eor.w	r9, r9, r3
   deed4:	ea89 090a 	eor.w	r9, r9, sl
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
   deed8:	eb05 65fc 	add.w	r5, r5, ip, ror #27
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
   deedc:	ea4f 79f9 	mov.w	r9, r9, ror #31
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
   deee0:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( A, B, C, D, E, R(70) );
   deee4:	ea8e 020c 	eor.w	r2, lr, ip
   deee8:	eb09 0307 	add.w	r3, r9, r7
   deeec:	406a      	eors	r2, r5
   deeee:	4443      	add	r3, r8
   deef0:	4413      	add	r3, r2
    P( E, A, B, C, D, R(71) );
   deef2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   deef4:	ea82 080b 	eor.w	r8, r2, fp
   deef8:	9a04      	ldr	r2, [sp, #16]
   deefa:	ea88 0802 	eor.w	r8, r8, r2
   deefe:	9a08      	ldr	r2, [sp, #32]
   def00:	ea88 0802 	eor.w	r8, r8, r2
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
   def04:	eb01 61f5 	add.w	r1, r1, r5, ror #27
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
   def08:	ea4f 78f8 	mov.w	r8, r8, ror #31
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
   def0c:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( E, A, B, C, D, R(71) );
   def10:	ea8c 0005 	eor.w	r0, ip, r5
   def14:	eb08 0207 	add.w	r2, r8, r7
   def18:	4048      	eors	r0, r1
   def1a:	4472      	add	r2, lr
   def1c:	4402      	add	r2, r0
    P( D, E, A, B, C, R(72) );
   def1e:	9809      	ldr	r0, [sp, #36]	; 0x24
   def20:	ea80 0e04 	eor.w	lr, r0, r4
   def24:	9806      	ldr	r0, [sp, #24]
   def26:	ea8e 0e00 	eor.w	lr, lr, r0
   def2a:	980d      	ldr	r0, [sp, #52]	; 0x34
   def2c:	ea8e 0e00 	eor.w	lr, lr, r0
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
   def30:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
   def34:	ea4f 7efe 	mov.w	lr, lr, ror #31
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
   def38:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(72) );
   def3c:	ea85 0401 	eor.w	r4, r5, r1
   def40:	eb0e 0007 	add.w	r0, lr, r7
   def44:	405c      	eors	r4, r3
   def46:	4460      	add	r0, ip
   def48:	4420      	add	r0, r4
    P( C, D, E, A, B, R(73) );
   def4a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   def4c:	ea8b 0c04 	eor.w	ip, fp, r4
   def50:	9c07      	ldr	r4, [sp, #28]
   def52:	ea8c 0c04 	eor.w	ip, ip, r4
   def56:	ea8c 0c09 	eor.w	ip, ip, r9
   def5a:	ea4f 7cfc 	mov.w	ip, ip, ror #31
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
   def5e:	eb02 62f3 	add.w	r2, r2, r3, ror #27
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
   def62:	eb0c 0407 	add.w	r4, ip, r7
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
   def66:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( C, D, E, A, B, R(73) );
   def6a:	ea81 0b03 	eor.w	fp, r1, r3
   def6e:	442c      	add	r4, r5
    P( B, C, D, E, A, R(74) );
   def70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
   def72:	ea8b 0b02 	eor.w	fp, fp, r2
   def76:	445c      	add	r4, fp
    P( B, C, D, E, A, R(74) );
   def78:	46ab      	mov	fp, r5
   def7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   def7c:	ea8b 0505 	eor.w	r5, fp, r5
   def80:	406e      	eors	r6, r5
   def82:	ea86 0608 	eor.w	r6, r6, r8
   def86:	ea4f 75f6 	mov.w	r5, r6, ror #31
   def8a:	9509      	str	r5, [sp, #36]	; 0x24
   def8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
   def8e:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( C, D, E, A, B, R(73) );
   def92:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(74) );
   def96:	eb06 0b07 	add.w	fp, r6, r7
   def9a:	ea83 0502 	eor.w	r5, r3, r2
   def9e:	4459      	add	r1, fp
   defa0:	4045      	eors	r5, r0
   defa2:	440d      	add	r5, r1
    P( A, B, C, D, E, R(75) );
   defa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   defa6:	460e      	mov	r6, r1
   defa8:	9902      	ldr	r1, [sp, #8]
   defaa:	4071      	eors	r1, r6
   defac:	ea81 0a0a 	eor.w	sl, r1, sl
   defb0:	ea8a 0e0e 	eor.w	lr, sl, lr
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
   defb4:	eb04 64f0 	add.w	r4, r4, r0, ror #27
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
   defb8:	ea4f 7efe 	mov.w	lr, lr, ror #31
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
   defbc:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( A, B, C, D, E, R(75) );
   defc0:	eb0e 0a07 	add.w	sl, lr, r7
   defc4:	ea82 0100 	eor.w	r1, r2, r0
   defc8:	4453      	add	r3, sl
   defca:	4061      	eors	r1, r4
   defcc:	4419      	add	r1, r3
    P( E, A, B, C, D, R(76) );
   defce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   defd0:	461e      	mov	r6, r3
   defd2:	9b03      	ldr	r3, [sp, #12]
   defd4:	4073      	eors	r3, r6
   defd6:	9e08      	ldr	r6, [sp, #32]
   defd8:	4073      	eors	r3, r6
   defda:	ea83 0c0c 	eor.w	ip, r3, ip
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
   defde:	eb05 65f4 	add.w	r5, r5, r4, ror #27
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
   defe2:	ea4f 7cfc 	mov.w	ip, ip, ror #31
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
   defe6:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(76) );
   defea:	eb0c 0a07 	add.w	sl, ip, r7
   defee:	ea80 0304 	eor.w	r3, r0, r4
   deff2:	4452      	add	r2, sl
   deff4:	406b      	eors	r3, r5
    P( D, E, A, B, C, R(77) );
   deff6:	9e04      	ldr	r6, [sp, #16]
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
   deff8:	4413      	add	r3, r2
    P( D, E, A, B, C, R(77) );
   deffa:	9a02      	ldr	r2, [sp, #8]
   deffc:	4072      	eors	r2, r6
   deffe:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   df000:	4072      	eors	r2, r6
   df002:	9e09      	ldr	r6, [sp, #36]	; 0x24
   df004:	4072      	eors	r2, r6
   df006:	eb07 72f2 	add.w	r2, r7, r2, ror #31
    P( C, D, E, A, B, R(78) );
   df00a:	9e06      	ldr	r6, [sp, #24]
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
   df00c:	4410      	add	r0, r2
    P( C, D, E, A, B, R(78) );
   df00e:	9a03      	ldr	r2, [sp, #12]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
   df010:	eb01 61f5 	add.w	r1, r1, r5, ror #27
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
   df014:	4072      	eors	r2, r6
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
   df016:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( D, E, A, B, C, R(77) );
   df01a:	ea84 0a05 	eor.w	sl, r4, r5
    P( C, D, E, A, B, R(78) );
   df01e:	ea82 0909 	eor.w	r9, r2, r9
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
   df022:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(77) );
   df026:	ea8a 0a01 	eor.w	sl, sl, r1
    P( C, D, E, A, B, R(78) );
   df02a:	ea89 090e 	eor.w	r9, r9, lr
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
   df02e:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(78) );
   df032:	eb07 79f9 	add.w	r9, r7, r9, ror #31
   df036:	ea85 0601 	eor.w	r6, r5, r1
   df03a:	405e      	eors	r6, r3
   df03c:	444c      	add	r4, r9
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
   df03e:	9a04      	ldr	r2, [sp, #16]
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
   df040:	4434      	add	r4, r6
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
   df042:	9e07      	ldr	r6, [sp, #28]
   df044:	4072      	eors	r2, r6
   df046:	ea82 0808 	eor.w	r8, r2, r8
   df04a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
   df04c:	4450      	add	r0, sl
   df04e:	eb00 60f3 	add.w	r0, r0, r3, ror #27
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
   df052:	4417      	add	r7, r2
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
   df054:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
   df058:	ea88 0c0c 	eor.w	ip, r8, ip
   df05c:	ea81 0603 	eor.w	r6, r1, r3
   df060:	eb07 7cfc 	add.w	ip, r7, ip, ror #31
   df064:	4046      	eors	r6, r0
   df066:	4465      	add	r5, ip
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
   df068:	eb04 64f0 	add.w	r4, r4, r0, ror #27
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
   df06c:	9a01      	ldr	r2, [sp, #4]
   df06e:	4435      	add	r5, r6
   df070:	eb05 65f4 	add.w	r5, r5, r4, ror #27
   df074:	6095      	str	r5, [r2, #8]
    ctx->state[1] += B;
   df076:	9a14      	ldr	r2, [sp, #80]	; 0x50
   df078:	e002      	b.n	df080 <mbedtls_internal_sha1_process+0xf40>
   df07a:	bf00      	nop
   df07c:	ca62c1d6 	.word	0xca62c1d6
   df080:	4414      	add	r4, r2
   df082:	9a01      	ldr	r2, [sp, #4]
   df084:	60d4      	str	r4, [r2, #12]
    ctx->state[2] += C;
   df086:	9a05      	ldr	r2, [sp, #20]
   df088:	eb02 00b0 	add.w	r0, r2, r0, ror #2
   df08c:	9a01      	ldr	r2, [sp, #4]
   df08e:	6110      	str	r0, [r2, #16]
    ctx->state[3] += D;
   df090:	9a12      	ldr	r2, [sp, #72]	; 0x48
   df092:	4413      	add	r3, r2
   df094:	9a01      	ldr	r2, [sp, #4]
   df096:	6153      	str	r3, [r2, #20]
    ctx->state[4] += E;
   df098:	9b15      	ldr	r3, [sp, #84]	; 0x54

    return( 0 );
}
   df09a:	2000      	movs	r0, #0

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
   df09c:	4419      	add	r1, r3
   df09e:	6191      	str	r1, [r2, #24]

    return( 0 );
}
   df0a0:	b017      	add	sp, #92	; 0x5c
   df0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df0a6:	bf00      	nop

000df0a8 <mbedtls_sha1_update_ret>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
   df0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   df0ac:	4604      	mov	r4, r0
   df0ae:	460e      	mov	r6, r1
    uint32_t left;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
   df0b0:	4615      	mov	r5, r2
   df0b2:	b382      	cbz	r2, df116 <mbedtls_sha1_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
   df0b4:	6803      	ldr	r3, [r0, #0]
   df0b6:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
   df0ba:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
   df0bc:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
   df0be:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
   df0c0:	bf82      	ittt	hi
   df0c2:	6863      	ldrhi	r3, [r4, #4]
   df0c4:	3301      	addhi	r3, #1
   df0c6:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
   df0c8:	b180      	cbz	r0, df0ec <mbedtls_sha1_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
   df0ca:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
   df0ce:	42ba      	cmp	r2, r7
   df0d0:	d31b      	bcc.n	df10a <mbedtls_sha1_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
   df0d2:	f104 081c 	add.w	r8, r4, #28
   df0d6:	463a      	mov	r2, r7
   df0d8:	4440      	add	r0, r8
   df0da:	f008 fec4 	bl	e7e66 <memcpy>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   df0de:	4641      	mov	r1, r8
   df0e0:	4620      	mov	r0, r4
   df0e2:	f7ff f82d 	bl	de140 <mbedtls_internal_sha1_process>
   df0e6:	b9b8      	cbnz	r0, df118 <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += fill;
   df0e8:	443e      	add	r6, r7
        ilen  -= fill;
   df0ea:	1bed      	subs	r5, r5, r7
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
   df0ec:	462f      	mov	r7, r5
   df0ee:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
   df0f0:	2f3f      	cmp	r7, #63	; 0x3f
   df0f2:	4431      	add	r1, r6
   df0f4:	d905      	bls.n	df102 <mbedtls_sha1_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
   df0f6:	4620      	mov	r0, r4
   df0f8:	f7ff f822 	bl	de140 <mbedtls_internal_sha1_process>
   df0fc:	b960      	cbnz	r0, df118 <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
   df0fe:	3f40      	subs	r7, #64	; 0x40
   df100:	e7f5      	b.n	df0ee <mbedtls_sha1_update_ret+0x46>
    }

    if( ilen > 0 )
   df102:	b147      	cbz	r7, df116 <mbedtls_sha1_update_ret+0x6e>
   df104:	463d      	mov	r5, r7
   df106:	460e      	mov	r6, r1
   df108:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   df10a:	341c      	adds	r4, #28
   df10c:	462a      	mov	r2, r5
   df10e:	4631      	mov	r1, r6
   df110:	4420      	add	r0, r4
   df112:	f008 fea8 	bl	e7e66 <memcpy>

    return( 0 );
   df116:	2000      	movs	r0, #0
}
   df118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000df11c <mbedtls_sha1_finish_ret>:
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
   df11c:	b570      	push	{r4, r5, r6, lr}
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   df11e:	6803      	ldr	r3, [r0, #0]
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
   df120:	4604      	mov	r4, r0
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   df122:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   df126:	1c58      	adds	r0, r3, #1
   df128:	4423      	add	r3, r4
   df12a:	2280      	movs	r2, #128	; 0x80

    if( used <= 56 )
   df12c:	2838      	cmp	r0, #56	; 0x38
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
   df12e:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
   df130:	771a      	strb	r2, [r3, #28]
   df132:	f104 061c 	add.w	r6, r4, #28

    if( used <= 56 )
   df136:	d804      	bhi.n	df142 <mbedtls_sha1_finish_ret+0x26>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   df138:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   df13c:	2100      	movs	r1, #0
   df13e:	4430      	add	r0, r6
   df140:	e00e      	b.n	df160 <mbedtls_sha1_finish_ret+0x44>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
   df142:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   df146:	2100      	movs	r1, #0
   df148:	4430      	add	r0, r6
   df14a:	f008 feb2 	bl	e7eb2 <memset>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   df14e:	4631      	mov	r1, r6
   df150:	4620      	mov	r0, r4
   df152:	f7fe fff5 	bl	de140 <mbedtls_internal_sha1_process>
   df156:	2800      	cmp	r0, #0
   df158:	d153      	bne.n	df202 <mbedtls_sha1_finish_ret+0xe6>
            return( ret );

        memset( ctx->buffer, 0, 56 );
   df15a:	4601      	mov	r1, r0
   df15c:	2238      	movs	r2, #56	; 0x38
   df15e:	4630      	mov	r0, r6
   df160:	f008 fea7 	bl	e7eb2 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
   df164:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
   df166:	6861      	ldr	r1, [r4, #4]
   df168:	0f5a      	lsrs	r2, r3, #29
   df16a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   df16e:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
   df170:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   df172:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
   df176:	0c11      	lsrs	r1, r2, #16
   df178:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
   df17c:	f884 2057 	strb.w	r2, [r4, #87]	; 0x57
   df180:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   df182:	0e1a      	lsrs	r2, r3, #24
   df184:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
   df188:	0c1a      	lsrs	r2, r3, #16
   df18a:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
   df18e:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   df190:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   df194:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
   df198:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b

    if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   df19c:	4631      	mov	r1, r6
   df19e:	4620      	mov	r0, r4
   df1a0:	f7fe ffce 	bl	de140 <mbedtls_internal_sha1_process>
   df1a4:	2800      	cmp	r0, #0
   df1a6:	d12c      	bne.n	df202 <mbedtls_sha1_finish_ret+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
   df1a8:	7ae3      	ldrb	r3, [r4, #11]
   df1aa:	702b      	strb	r3, [r5, #0]
   df1ac:	8963      	ldrh	r3, [r4, #10]
   df1ae:	706b      	strb	r3, [r5, #1]
   df1b0:	68a3      	ldr	r3, [r4, #8]
   df1b2:	0a1b      	lsrs	r3, r3, #8
   df1b4:	70ab      	strb	r3, [r5, #2]
   df1b6:	68a3      	ldr	r3, [r4, #8]
   df1b8:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
   df1ba:	7be3      	ldrb	r3, [r4, #15]
   df1bc:	712b      	strb	r3, [r5, #4]
   df1be:	89e3      	ldrh	r3, [r4, #14]
   df1c0:	716b      	strb	r3, [r5, #5]
   df1c2:	68e3      	ldr	r3, [r4, #12]
   df1c4:	0a1b      	lsrs	r3, r3, #8
   df1c6:	71ab      	strb	r3, [r5, #6]
   df1c8:	68e3      	ldr	r3, [r4, #12]
   df1ca:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
   df1cc:	7ce3      	ldrb	r3, [r4, #19]
   df1ce:	722b      	strb	r3, [r5, #8]
   df1d0:	8a63      	ldrh	r3, [r4, #18]
   df1d2:	726b      	strb	r3, [r5, #9]
   df1d4:	6923      	ldr	r3, [r4, #16]
   df1d6:	0a1b      	lsrs	r3, r3, #8
   df1d8:	72ab      	strb	r3, [r5, #10]
   df1da:	6923      	ldr	r3, [r4, #16]
   df1dc:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
   df1de:	7de3      	ldrb	r3, [r4, #23]
   df1e0:	732b      	strb	r3, [r5, #12]
   df1e2:	8ae3      	ldrh	r3, [r4, #22]
   df1e4:	736b      	strb	r3, [r5, #13]
   df1e6:	6963      	ldr	r3, [r4, #20]
   df1e8:	0a1b      	lsrs	r3, r3, #8
   df1ea:	73ab      	strb	r3, [r5, #14]
   df1ec:	6963      	ldr	r3, [r4, #20]
   df1ee:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
   df1f0:	7ee3      	ldrb	r3, [r4, #27]
   df1f2:	742b      	strb	r3, [r5, #16]
   df1f4:	8b63      	ldrh	r3, [r4, #26]
   df1f6:	746b      	strb	r3, [r5, #17]
   df1f8:	69a3      	ldr	r3, [r4, #24]
   df1fa:	0a1b      	lsrs	r3, r3, #8
   df1fc:	74ab      	strb	r3, [r5, #18]
   df1fe:	69a3      	ldr	r3, [r4, #24]
   df200:	74eb      	strb	r3, [r5, #19]

    return( 0 );
}
   df202:	bd70      	pop	{r4, r5, r6, pc}

000df204 <mbedtls_sha1_ret>:
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
   df204:	b5f0      	push	{r4, r5, r6, r7, lr}
   df206:	b099      	sub	sp, #100	; 0x64
   df208:	4606      	mov	r6, r0
    mbedtls_sha1_context ctx;

    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha1_init( &ctx );
   df20a:	a801      	add	r0, sp, #4
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
   df20c:	460f      	mov	r7, r1
   df20e:	4615      	mov	r5, r2
    mbedtls_sha1_context ctx;

    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha1_init( &ctx );
   df210:	f7fe ff6d 	bl	de0ee <mbedtls_sha1_init>

    if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
   df214:	a801      	add	r0, sp, #4
   df216:	f7fe ff79 	bl	de10c <mbedtls_sha1_starts_ret>
   df21a:	4604      	mov	r4, r0
   df21c:	b958      	cbnz	r0, df236 <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
   df21e:	463a      	mov	r2, r7
   df220:	4631      	mov	r1, r6
   df222:	a801      	add	r0, sp, #4
   df224:	f7ff ff40 	bl	df0a8 <mbedtls_sha1_update_ret>
   df228:	4604      	mov	r4, r0
   df22a:	b920      	cbnz	r0, df236 <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
   df22c:	4629      	mov	r1, r5
   df22e:	a801      	add	r0, sp, #4
   df230:	f7ff ff74 	bl	df11c <mbedtls_sha1_finish_ret>
   df234:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha1_free( &ctx );
   df236:	a801      	add	r0, sp, #4
   df238:	f7fe ff5d 	bl	de0f6 <mbedtls_sha1_free>

    return( ret );
}
   df23c:	4620      	mov	r0, r4
   df23e:	b019      	add	sp, #100	; 0x64
   df240:	bdf0      	pop	{r4, r5, r6, r7, pc}

000df242 <mbedtls_sha256_init>:

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
   df242:	226c      	movs	r2, #108	; 0x6c
   df244:	2100      	movs	r1, #0
   df246:	f008 be34 	b.w	e7eb2 <memset>

000df24a <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
   df24a:	b110      	cbz	r0, df252 <mbedtls_sha256_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
   df24c:	216c      	movs	r1, #108	; 0x6c
   df24e:	f7fd b9cf 	b.w	dc5f0 <mbedtls_platform_zeroize>
   df252:	4770      	bx	lr

000df254 <mbedtls_sha256_clone>:
}

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
   df254:	b508      	push	{r3, lr}
    SHA256_VALIDATE( dst != NULL );
    SHA256_VALIDATE( src != NULL );

    *dst = *src;
   df256:	226c      	movs	r2, #108	; 0x6c
   df258:	f008 fe05 	bl	e7e66 <memcpy>
   df25c:	bd08      	pop	{r3, pc}
	...

000df260 <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
   df260:	2300      	movs	r3, #0
   df262:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
   df264:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
   df266:	b9a1      	cbnz	r1, df292 <mbedtls_sha256_starts_ret+0x32>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
   df268:	4b18      	ldr	r3, [pc, #96]	; (df2cc <mbedtls_sha256_starts_ret+0x6c>)
   df26a:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
   df26c:	4b18      	ldr	r3, [pc, #96]	; (df2d0 <mbedtls_sha256_starts_ret+0x70>)
   df26e:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
   df270:	4b18      	ldr	r3, [pc, #96]	; (df2d4 <mbedtls_sha256_starts_ret+0x74>)
   df272:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
   df274:	4b18      	ldr	r3, [pc, #96]	; (df2d8 <mbedtls_sha256_starts_ret+0x78>)
   df276:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0x510E527F;
   df278:	4b18      	ldr	r3, [pc, #96]	; (df2dc <mbedtls_sha256_starts_ret+0x7c>)
   df27a:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x9B05688C;
   df27c:	4b18      	ldr	r3, [pc, #96]	; (df2e0 <mbedtls_sha256_starts_ret+0x80>)
   df27e:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
   df280:	4b18      	ldr	r3, [pc, #96]	; (df2e4 <mbedtls_sha256_starts_ret+0x84>)
   df282:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
   df284:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   df288:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   df28c:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   df290:	e018      	b.n	df2c4 <mbedtls_sha256_starts_ret+0x64>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
   df292:	4b15      	ldr	r3, [pc, #84]	; (df2e8 <mbedtls_sha256_starts_ret+0x88>)
   df294:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0x367CD507;
   df296:	4b15      	ldr	r3, [pc, #84]	; (df2ec <mbedtls_sha256_starts_ret+0x8c>)
   df298:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3070DD17;
   df29a:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
   df29e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
   df2a2:	f503 6301 	add.w	r3, r3, #2064	; 0x810
   df2a6:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xF70E5939;
   df2a8:	4b11      	ldr	r3, [pc, #68]	; (df2f0 <mbedtls_sha256_starts_ret+0x90>)
   df2aa:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
   df2ac:	4b11      	ldr	r3, [pc, #68]	; (df2f4 <mbedtls_sha256_starts_ret+0x94>)
   df2ae:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x68581511;
   df2b0:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
   df2b4:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
   df2b8:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
   df2bc:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
   df2be:	4b0e      	ldr	r3, [pc, #56]	; (df2f8 <mbedtls_sha256_starts_ret+0x98>)
   df2c0:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
   df2c2:	4b0e      	ldr	r3, [pc, #56]	; (df2fc <mbedtls_sha256_starts_ret+0x9c>)
   df2c4:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
   df2c6:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
   df2c8:	2000      	movs	r0, #0
   df2ca:	4770      	bx	lr
   df2cc:	6a09e667 	.word	0x6a09e667
   df2d0:	bb67ae85 	.word	0xbb67ae85
   df2d4:	3c6ef372 	.word	0x3c6ef372
   df2d8:	a54ff53a 	.word	0xa54ff53a
   df2dc:	510e527f 	.word	0x510e527f
   df2e0:	9b05688c 	.word	0x9b05688c
   df2e4:	1f83d9ab 	.word	0x1f83d9ab
   df2e8:	c1059ed8 	.word	0xc1059ed8
   df2ec:	367cd507 	.word	0x367cd507
   df2f0:	f70e5939 	.word	0xf70e5939
   df2f4:	ffc00b31 	.word	0xffc00b31
   df2f8:	64f98fa7 	.word	0x64f98fa7
   df2fc:	befa4fa4 	.word	0xbefa4fa4

000df300 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
   df300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df304:	b0cf      	sub	sp, #316	; 0x13c
   df306:	1d03      	adds	r3, r0, #4
   df308:	9305      	str	r3, [sp, #20]
   df30a:	461a      	mov	r2, r3
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
   df30c:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
   df30e:	ac06      	add	r4, sp, #24
   df310:	f852 0f04 	ldr.w	r0, [r2, #4]!
   df314:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
   df318:	3301      	adds	r3, #1
   df31a:	2b08      	cmp	r3, #8
   df31c:	d1f7      	bne.n	df30e <mbedtls_internal_sha256_process+0xe>
   df31e:	4608      	mov	r0, r1
   df320:	2200      	movs	r2, #0
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
   df322:	ac0e      	add	r4, sp, #56	; 0x38
   df324:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
   df328:	78c3      	ldrb	r3, [r0, #3]
   df32a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   df32e:	7845      	ldrb	r5, [r0, #1]
   df330:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   df334:	7885      	ldrb	r5, [r0, #2]
   df336:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   df33a:	f844 3022 	str.w	r3, [r4, r2, lsl #2]

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
   df33e:	3201      	adds	r2, #1
   df340:	2a10      	cmp	r2, #16
   df342:	f100 0004 	add.w	r0, r0, #4
   df346:	d1ed      	bne.n	df324 <mbedtls_internal_sha256_process+0x24>
   df348:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   df34a:	4c9f      	ldr	r4, [pc, #636]	; (df5c8 <mbedtls_internal_sha256_process+0x2c8>)
   df34c:	9300      	str	r3, [sp, #0]
   df34e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   df352:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   df356:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   df358:	f8dd 9018 	ldr.w	r9, [sp, #24]
   df35c:	f8dd e01c 	ldr.w	lr, [sp, #28]
   df360:	9f08      	ldr	r7, [sp, #32]
   df362:	9b09      	ldr	r3, [sp, #36]	; 0x24
   df364:	ad0f      	add	r5, sp, #60	; 0x3c
   df366:	f104 0a40 	add.w	sl, r4, #64	; 0x40
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
   df36a:	f854 0c04 	ldr.w	r0, [r4, #-4]
   df36e:	f855 1c04 	ldr.w	r1, [r5, #-4]
   df372:	ea4f 22f8 	mov.w	r2, r8, ror #11
   df376:	ea86 0c0b 	eor.w	ip, r6, fp
   df37a:	ea82 12b8 	eor.w	r2, r2, r8, ror #6
   df37e:	4401      	add	r1, r0
   df380:	ea82 6278 	eor.w	r2, r2, r8, ror #25
   df384:	ea0c 0c08 	and.w	ip, ip, r8
   df388:	ea8c 0c06 	eor.w	ip, ip, r6
   df38c:	440a      	add	r2, r1
   df38e:	9900      	ldr	r1, [sp, #0]
   df390:	4462      	add	r2, ip
   df392:	ea4f 3079 	mov.w	r0, r9, ror #13
   df396:	ea4e 0c09 	orr.w	ip, lr, r9
   df39a:	440a      	add	r2, r1
   df39c:	ea0c 0c07 	and.w	ip, ip, r7
   df3a0:	ea0e 0109 	and.w	r1, lr, r9
   df3a4:	ea80 00b9 	eor.w	r0, r0, r9, ror #2
   df3a8:	ea4c 0101 	orr.w	r1, ip, r1
   df3ac:	ea80 50b9 	eor.w	r0, r0, r9, ror #22
   df3b0:	4408      	add	r0, r1
   df3b2:	4413      	add	r3, r2
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   df3b4:	6829      	ldr	r1, [r5, #0]
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
   df3b6:	4402      	add	r2, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   df3b8:	6820      	ldr	r0, [r4, #0]
   df3ba:	ea8b 0c08 	eor.w	ip, fp, r8
   df3be:	4401      	add	r1, r0
   df3c0:	ea0c 0c03 	and.w	ip, ip, r3
   df3c4:	ea4f 20f3 	mov.w	r0, r3, ror #11
   df3c8:	ea8c 0c0b 	eor.w	ip, ip, fp
   df3cc:	440e      	add	r6, r1
   df3ce:	ea80 10b3 	eor.w	r0, r0, r3, ror #6
   df3d2:	eb06 010c 	add.w	r1, r6, ip
   df3d6:	ea80 6073 	eor.w	r0, r0, r3, ror #25
   df3da:	180e      	adds	r6, r1, r0
   df3dc:	eb06 0c07 	add.w	ip, r6, r7
   df3e0:	ea42 0009 	orr.w	r0, r2, r9
   df3e4:	ea4f 3772 	mov.w	r7, r2, ror #13
   df3e8:	ea02 0109 	and.w	r1, r2, r9
   df3ec:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
   df3f0:	ea00 000e 	and.w	r0, r0, lr
   df3f4:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
   df3f8:	4308      	orrs	r0, r1
   df3fa:	4438      	add	r0, r7
   df3fc:	4430      	add	r0, r6
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
   df3fe:	6869      	ldr	r1, [r5, #4]
   df400:	6866      	ldr	r6, [r4, #4]
   df402:	ea83 0708 	eor.w	r7, r3, r8
   df406:	440e      	add	r6, r1
   df408:	ea07 070c 	and.w	r7, r7, ip
   df40c:	ea4f 21fc 	mov.w	r1, ip, ror #11
   df410:	ea87 0708 	eor.w	r7, r7, r8
   df414:	44b3      	add	fp, r6
   df416:	ea81 11bc 	eor.w	r1, r1, ip, ror #6
   df41a:	eb0b 0607 	add.w	r6, fp, r7
   df41e:	ea81 617c 	eor.w	r1, r1, ip, ror #25
   df422:	eb06 0b01 	add.w	fp, r6, r1
   df426:	ea4f 3770 	mov.w	r7, r0, ror #13
   df42a:	ea42 0100 	orr.w	r1, r2, r0
   df42e:	ea02 0600 	and.w	r6, r2, r0
   df432:	ea87 07b0 	eor.w	r7, r7, r0, ror #2
   df436:	ea01 0109 	and.w	r1, r1, r9
   df43a:	ea87 57b0 	eor.w	r7, r7, r0, ror #22
   df43e:	4331      	orrs	r1, r6
   df440:	4439      	add	r1, r7
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
   df442:	68ae      	ldr	r6, [r5, #8]
   df444:	68a7      	ldr	r7, [r4, #8]

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
   df446:	4459      	add	r1, fp
   df448:	44de      	add	lr, fp
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
   df44a:	443e      	add	r6, r7
   df44c:	ea83 0b0c 	eor.w	fp, r3, ip
   df450:	44b0      	add	r8, r6
   df452:	ea0b 0b0e 	and.w	fp, fp, lr
   df456:	ea4f 26fe 	mov.w	r6, lr, ror #11
   df45a:	ea8b 0b03 	eor.w	fp, fp, r3
   df45e:	ea86 16be 	eor.w	r6, r6, lr, ror #6
   df462:	44d8      	add	r8, fp
   df464:	ea86 667e 	eor.w	r6, r6, lr, ror #25
   df468:	4446      	add	r6, r8
   df46a:	ea4f 3b71 	mov.w	fp, r1, ror #13
   df46e:	ea40 0801 	orr.w	r8, r0, r1
   df472:	ea00 0701 	and.w	r7, r0, r1
   df476:	ea8b 0bb1 	eor.w	fp, fp, r1, ror #2
   df47a:	ea08 0802 	and.w	r8, r8, r2
   df47e:	ea8b 5bb1 	eor.w	fp, fp, r1, ror #22
   df482:	ea48 0807 	orr.w	r8, r8, r7
   df486:	44d8      	add	r8, fp
   df488:	44b0      	add	r8, r6
   df48a:	44b1      	add	r9, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
   df48c:	68e7      	ldr	r7, [r4, #12]
   df48e:	68ee      	ldr	r6, [r5, #12]
   df490:	ea8c 0b0e 	eor.w	fp, ip, lr
   df494:	4437      	add	r7, r6
   df496:	ea0b 0b09 	and.w	fp, fp, r9
   df49a:	ea8b 0b0c 	eor.w	fp, fp, ip
   df49e:	443b      	add	r3, r7
   df4a0:	eb03 070b 	add.w	r7, r3, fp
   df4a4:	ea4f 23f9 	mov.w	r3, r9, ror #11
   df4a8:	ea83 13b9 	eor.w	r3, r3, r9, ror #6
   df4ac:	ea83 6379 	eor.w	r3, r3, r9, ror #25
   df4b0:	18fe      	adds	r6, r7, r3
   df4b2:	1993      	adds	r3, r2, r6
   df4b4:	9300      	str	r3, [sp, #0]
   df4b6:	ea4f 3778 	mov.w	r7, r8, ror #13
   df4ba:	ea41 0308 	orr.w	r3, r1, r8
   df4be:	ea01 0208 	and.w	r2, r1, r8
   df4c2:	ea87 07b8 	eor.w	r7, r7, r8, ror #2
   df4c6:	4003      	ands	r3, r0
   df4c8:	ea87 57b8 	eor.w	r7, r7, r8, ror #22
   df4cc:	4313      	orrs	r3, r2
   df4ce:	443b      	add	r3, r7
   df4d0:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
   df4d2:	692a      	ldr	r2, [r5, #16]
   df4d4:	6926      	ldr	r6, [r4, #16]
   df4d6:	4432      	add	r2, r6
   df4d8:	4494      	add	ip, r2
   df4da:	9a00      	ldr	r2, [sp, #0]
   df4dc:	ea8e 0609 	eor.w	r6, lr, r9
   df4e0:	4016      	ands	r6, r2
   df4e2:	ea4f 27f2 	mov.w	r7, r2, ror #11
   df4e6:	ea86 060e 	eor.w	r6, r6, lr
   df4ea:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
   df4ee:	44b4      	add	ip, r6
   df4f0:	ea87 6772 	eor.w	r7, r7, r2, ror #25
   df4f4:	eb0c 0207 	add.w	r2, ip, r7
   df4f8:	ea4f 3b73 	mov.w	fp, r3, ror #13
   df4fc:	ea48 0703 	orr.w	r7, r8, r3
   df500:	1886      	adds	r6, r0, r2
   df502:	400f      	ands	r7, r1
   df504:	ea08 0003 	and.w	r0, r8, r3
   df508:	ea8b 0bb3 	eor.w	fp, fp, r3, ror #2
   df50c:	ea8b 5bb3 	eor.w	fp, fp, r3, ror #22
   df510:	4307      	orrs	r7, r0
   df512:	445f      	add	r7, fp
   df514:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
   df516:	6960      	ldr	r0, [r4, #20]
   df518:	696a      	ldr	r2, [r5, #20]
   df51a:	4410      	add	r0, r2
   df51c:	9a00      	ldr	r2, [sp, #0]
   df51e:	ea89 0c02 	eor.w	ip, r9, r2
   df522:	ea0c 0c06 	and.w	ip, ip, r6
   df526:	4486      	add	lr, r0
   df528:	ea8c 0c09 	eor.w	ip, ip, r9
   df52c:	eb0e 000c 	add.w	r0, lr, ip
   df530:	ea4f 2ef6 	mov.w	lr, r6, ror #11
   df534:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
   df538:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
   df53c:	eb00 020e 	add.w	r2, r0, lr
   df540:	ea4f 3077 	mov.w	r0, r7, ror #13
   df544:	ea43 0e07 	orr.w	lr, r3, r7
   df548:	eb01 0b02 	add.w	fp, r1, r2
   df54c:	ea0e 0e08 	and.w	lr, lr, r8
   df550:	ea03 0107 	and.w	r1, r3, r7
   df554:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
   df558:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
   df55c:	ea4e 0e01 	orr.w	lr, lr, r1
   df560:	4486      	add	lr, r0
   df562:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
   df564:	69a1      	ldr	r1, [r4, #24]
   df566:	69aa      	ldr	r2, [r5, #24]
   df568:	4411      	add	r1, r2
   df56a:	9a00      	ldr	r2, [sp, #0]
   df56c:	ea82 0006 	eor.w	r0, r2, r6
   df570:	ea00 000b 	and.w	r0, r0, fp
   df574:	4050      	eors	r0, r2
   df576:	4489      	add	r9, r1
   df578:	eb09 0100 	add.w	r1, r9, r0
   df57c:	ea4f 29fb 	mov.w	r9, fp, ror #11
   df580:	ea89 19bb 	eor.w	r9, r9, fp, ror #6
   df584:	ea89 697b 	eor.w	r9, r9, fp, ror #25
   df588:	eb01 0209 	add.w	r2, r1, r9
   df58c:	ea4f 307e 	mov.w	r0, lr, ror #13
   df590:	ea47 090e 	orr.w	r9, r7, lr
   df594:	ea80 00be 	eor.w	r0, r0, lr, ror #2
   df598:	ea09 0903 	and.w	r9, r9, r3
   df59c:	ea07 010e 	and.w	r1, r7, lr
   df5a0:	ea80 50be 	eor.w	r0, r0, lr, ror #22
   df5a4:	ea49 0901 	orr.w	r9, r9, r1
   df5a8:	3420      	adds	r4, #32
   df5aa:	4481      	add	r9, r0
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
   df5ac:	45a2      	cmp	sl, r4
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
   df5ae:	4490      	add	r8, r2
   df5b0:	4491      	add	r9, r2
   df5b2:	f105 0520 	add.w	r5, r5, #32
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
   df5b6:	f47f aed8 	bne.w	df36a <mbedtls_internal_sha256_process+0x6a>
   df5ba:	2200      	movs	r2, #0
   df5bc:	f8df a00c 	ldr.w	sl, [pc, #12]	; df5cc <mbedtls_internal_sha256_process+0x2cc>
   df5c0:	9204      	str	r2, [sp, #16]
   df5c2:	ac0e      	add	r4, sp, #56	; 0x38
   df5c4:	e004      	b.n	df5d0 <mbedtls_internal_sha256_process+0x2d0>
   df5c6:	bf00      	nop
   df5c8:	000e9774 	.word	0x000e9774
   df5cc:	000e9770 	.word	0x000e9770
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
   df5d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   df5d2:	6860      	ldr	r0, [r4, #4]
   df5d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   df5d6:	ea4f 45f2 	mov.w	r5, r2, ror #19
   df5da:	ea85 4572 	eor.w	r5, r5, r2, ror #17
   df5de:	ea85 2592 	eor.w	r5, r5, r2, lsr #10
   df5e2:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   df5e6:	9a04      	ldr	r2, [sp, #16]
   df5e8:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
   df5ec:	ea4f 4cb0 	mov.w	ip, r0, ror #18
   df5f0:	440a      	add	r2, r1
   df5f2:	ea8c 1cf0 	eor.w	ip, ip, r0, ror #7
   df5f6:	ea4f 21f8 	mov.w	r1, r8, ror #11
   df5fa:	ea8c 0cd0 	eor.w	ip, ip, r0, lsr #3
   df5fe:	ea81 11b8 	eor.w	r1, r1, r8, ror #6
   df602:	4415      	add	r5, r2
   df604:	eb05 020c 	add.w	r2, r5, ip
   df608:	ea81 6578 	eor.w	r5, r1, r8, ror #25
   df60c:	ea86 010b 	eor.w	r1, r6, fp
   df610:	ea01 0108 	and.w	r1, r1, r8
   df614:	9203      	str	r2, [sp, #12]
   df616:	ea81 0206 	eor.w	r2, r1, r6
   df61a:	18a9      	adds	r1, r5, r2
   df61c:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
   df620:	440a      	add	r2, r1
   df622:	9903      	ldr	r1, [sp, #12]
   df624:	6421      	str	r1, [r4, #64]	; 0x40
   df626:	440a      	add	r2, r1
   df628:	9900      	ldr	r1, [sp, #0]
   df62a:	440a      	add	r2, r1
   df62c:	18d3      	adds	r3, r2, r3
   df62e:	ea4e 0509 	orr.w	r5, lr, r9
   df632:	ea4f 3179 	mov.w	r1, r9, ror #13
   df636:	9300      	str	r3, [sp, #0]
   df638:	403d      	ands	r5, r7
   df63a:	ea0e 0309 	and.w	r3, lr, r9
   df63e:	ea81 01b9 	eor.w	r1, r1, r9, ror #2
   df642:	ea81 51b9 	eor.w	r1, r1, r9, ror #22
   df646:	432b      	orrs	r3, r5
   df648:	440b      	add	r3, r1
   df64a:	441a      	add	r2, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
   df64c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   df64e:	68a5      	ldr	r5, [r4, #8]
   df650:	ea4f 41f3 	mov.w	r1, r3, ror #19
   df654:	ea81 4173 	eor.w	r1, r1, r3, ror #17
   df658:	ea81 2193 	eor.w	r1, r1, r3, lsr #10
   df65c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   df65e:	4403      	add	r3, r0
   df660:	4419      	add	r1, r3
   df662:	ea4f 43b5 	mov.w	r3, r5, ror #18
   df666:	ea83 13f5 	eor.w	r3, r3, r5, ror #7
   df66a:	ea83 0cd5 	eor.w	ip, r3, r5, lsr #3
   df66e:	eb01 030c 	add.w	r3, r1, ip
   df672:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
   df676:	9900      	ldr	r1, [sp, #0]
   df678:	6463      	str	r3, [r4, #68]	; 0x44
   df67a:	ea8b 0c08 	eor.w	ip, fp, r8
   df67e:	4430      	add	r0, r6
   df680:	ea0c 0c01 	and.w	ip, ip, r1
   df684:	ea8c 0c0b 	eor.w	ip, ip, fp
   df688:	18c1      	adds	r1, r0, r3
   df68a:	448c      	add	ip, r1
   df68c:	9900      	ldr	r1, [sp, #0]
   df68e:	ea4f 20f1 	mov.w	r0, r1, ror #11
   df692:	ea80 10b1 	eor.w	r0, r0, r1, ror #6
   df696:	ea80 6071 	eor.w	r0, r0, r1, ror #25
   df69a:	eb00 010c 	add.w	r1, r0, ip
   df69e:	19c8      	adds	r0, r1, r7
   df6a0:	9001      	str	r0, [sp, #4]
   df6a2:	ea4f 3c72 	mov.w	ip, r2, ror #13
   df6a6:	ea42 0009 	orr.w	r0, r2, r9
   df6aa:	ea02 0709 	and.w	r7, r2, r9
   df6ae:	ea8c 0cb2 	eor.w	ip, ip, r2, ror #2
   df6b2:	ea00 000e 	and.w	r0, r0, lr
   df6b6:	ea8c 5cb2 	eor.w	ip, ip, r2, ror #22
   df6ba:	4338      	orrs	r0, r7
   df6bc:	4460      	add	r0, ip
   df6be:	4408      	add	r0, r1
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
   df6c0:	9903      	ldr	r1, [sp, #12]
   df6c2:	68e7      	ldr	r7, [r4, #12]
   df6c4:	ea4f 46f1 	mov.w	r6, r1, ror #19
   df6c8:	ea86 4671 	eor.w	r6, r6, r1, ror #17
   df6cc:	ea86 2691 	eor.w	r6, r6, r1, lsr #10
   df6d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   df6d2:	ea4f 4cb7 	mov.w	ip, r7, ror #18
   df6d6:	4429      	add	r1, r5
   df6d8:	440e      	add	r6, r1
   df6da:	ea8c 1cf7 	eor.w	ip, ip, r7, ror #7
   df6de:	9900      	ldr	r1, [sp, #0]
   df6e0:	ea8c 0cd7 	eor.w	ip, ip, r7, lsr #3
   df6e4:	4466      	add	r6, ip
   df6e6:	ea81 0c08 	eor.w	ip, r1, r8
   df6ea:	9901      	ldr	r1, [sp, #4]
   df6ec:	64a6      	str	r6, [r4, #72]	; 0x48
   df6ee:	ea0c 0c01 	and.w	ip, ip, r1
   df6f2:	f8da 1048 	ldr.w	r1, [sl, #72]	; 0x48
   df6f6:	4459      	add	r1, fp
   df6f8:	198d      	adds	r5, r1, r6
   df6fa:	ea8c 0c08 	eor.w	ip, ip, r8
   df6fe:	9901      	ldr	r1, [sp, #4]
   df700:	44ac      	add	ip, r5
   df702:	9d01      	ldr	r5, [sp, #4]
   df704:	ea4f 21f1 	mov.w	r1, r1, ror #11
   df708:	ea81 11b5 	eor.w	r1, r1, r5, ror #6
   df70c:	ea81 6175 	eor.w	r1, r1, r5, ror #25
   df710:	eb01 050c 	add.w	r5, r1, ip
   df714:	ea42 0100 	orr.w	r1, r2, r0
   df718:	ea4f 3c70 	mov.w	ip, r0, ror #13
   df71c:	eb05 0b0e 	add.w	fp, r5, lr
   df720:	ea8c 0cb0 	eor.w	ip, ip, r0, ror #2
   df724:	ea02 0e00 	and.w	lr, r2, r0
   df728:	ea01 0109 	and.w	r1, r1, r9
   df72c:	ea8c 5cb0 	eor.w	ip, ip, r0, ror #22
   df730:	ea41 010e 	orr.w	r1, r1, lr
   df734:	4461      	add	r1, ip
   df736:	4429      	add	r1, r5
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
   df738:	ea4f 45f3 	mov.w	r5, r3, ror #19
   df73c:	ea85 4573 	eor.w	r5, r5, r3, ror #17
   df740:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
   df744:	6b25      	ldr	r5, [r4, #48]	; 0x30
   df746:	f8d4 c010 	ldr.w	ip, [r4, #16]
   df74a:	442f      	add	r7, r5
   df74c:	443b      	add	r3, r7
   df74e:	ea4f 47bc 	mov.w	r7, ip, ror #18
   df752:	ea87 17fc 	eor.w	r7, r7, ip, ror #7
   df756:	ea87 0edc 	eor.w	lr, r7, ip, lsr #3
   df75a:	eb03 070e 	add.w	r7, r3, lr
   df75e:	e89d 0028 	ldmia.w	sp, {r3, r5}
   df762:	405d      	eors	r5, r3
   df764:	ea05 050b 	and.w	r5, r5, fp
   df768:	405d      	eors	r5, r3
   df76a:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
   df76e:	64e7      	str	r7, [r4, #76]	; 0x4c
   df770:	4498      	add	r8, r3
   df772:	44b8      	add	r8, r7
   df774:	4445      	add	r5, r8
   df776:	ea4f 28fb 	mov.w	r8, fp, ror #11
   df77a:	ea88 18bb 	eor.w	r8, r8, fp, ror #6
   df77e:	ea88 687b 	eor.w	r8, r8, fp, ror #25
   df782:	eb08 0305 	add.w	r3, r8, r5
   df786:	eb03 0509 	add.w	r5, r3, r9
   df78a:	ea40 0801 	orr.w	r8, r0, r1
   df78e:	ea4f 3e71 	mov.w	lr, r1, ror #13
   df792:	9502      	str	r5, [sp, #8]
   df794:	ea8e 0eb1 	eor.w	lr, lr, r1, ror #2
   df798:	ea00 0501 	and.w	r5, r0, r1
   df79c:	ea08 0802 	and.w	r8, r8, r2
   df7a0:	ea8e 5eb1 	eor.w	lr, lr, r1, ror #22
   df7a4:	ea48 0805 	orr.w	r8, r8, r5
   df7a8:	44f0      	add	r8, lr
   df7aa:	4498      	add	r8, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   df7ac:	ea4f 4ef6 	mov.w	lr, r6, ror #19
   df7b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   df7b2:	6965      	ldr	r5, [r4, #20]
   df7b4:	ea8e 4e76 	eor.w	lr, lr, r6, ror #17
   df7b8:	ea8e 2696 	eor.w	r6, lr, r6, lsr #10
   df7bc:	eb0c 0e03 	add.w	lr, ip, r3
   df7c0:	9b01      	ldr	r3, [sp, #4]
   df7c2:	4476      	add	r6, lr
   df7c4:	ea83 0c0b 	eor.w	ip, r3, fp
   df7c8:	ea4f 4eb5 	mov.w	lr, r5, ror #18
   df7cc:	9b02      	ldr	r3, [sp, #8]
   df7ce:	ea8e 1ef5 	eor.w	lr, lr, r5, ror #7
   df7d2:	ea8e 09d5 	eor.w	r9, lr, r5, lsr #3
   df7d6:	ea0c 0c03 	and.w	ip, ip, r3
   df7da:	9b01      	ldr	r3, [sp, #4]
   df7dc:	eb06 0e09 	add.w	lr, r6, r9
   df7e0:	f8da 6050 	ldr.w	r6, [sl, #80]	; 0x50
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   df7e4:	f8d4 9018 	ldr.w	r9, [r4, #24]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   df7e8:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
   df7ec:	ea8c 0c03 	eor.w	ip, ip, r3
   df7f0:	9b00      	ldr	r3, [sp, #0]
   df7f2:	4476      	add	r6, lr
   df7f4:	441e      	add	r6, r3
   df7f6:	9b02      	ldr	r3, [sp, #8]
   df7f8:	44b4      	add	ip, r6
   df7fa:	9e02      	ldr	r6, [sp, #8]
   df7fc:	ea4f 23f3 	mov.w	r3, r3, ror #11
   df800:	ea83 13b6 	eor.w	r3, r3, r6, ror #6
   df804:	ea83 6376 	eor.w	r3, r3, r6, ror #25
   df808:	eb03 060c 	add.w	r6, r3, ip
   df80c:	1993      	adds	r3, r2, r6
   df80e:	9300      	str	r3, [sp, #0]
   df810:	ea41 0308 	orr.w	r3, r1, r8
   df814:	ea01 0208 	and.w	r2, r1, r8
   df818:	4003      	ands	r3, r0
   df81a:	4313      	orrs	r3, r2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   df81c:	ea4f 42f7 	mov.w	r2, r7, ror #19
   df820:	ea82 4277 	eor.w	r2, r2, r7, ror #17
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   df824:	ea4f 3c78 	mov.w	ip, r8, ror #13
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   df828:	ea82 2797 	eor.w	r7, r2, r7, lsr #10
   df82c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   df82e:	ea8c 0cb8 	eor.w	ip, ip, r8, ror #2
   df832:	ea8c 5cb8 	eor.w	ip, ip, r8, ror #22
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   df836:	4415      	add	r5, r2
   df838:	9a02      	ldr	r2, [sp, #8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   df83a:	4463      	add	r3, ip
   df83c:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   df83e:	442f      	add	r7, r5
   df840:	ea8b 0602 	eor.w	r6, fp, r2
   df844:	ea4f 45b9 	mov.w	r5, r9, ror #18
   df848:	9a00      	ldr	r2, [sp, #0]
   df84a:	ea85 15f9 	eor.w	r5, r5, r9, ror #7
   df84e:	ea85 05d9 	eor.w	r5, r5, r9, lsr #3
   df852:	4016      	ands	r6, r2
   df854:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
   df858:	443d      	add	r5, r7
   df85a:	9f01      	ldr	r7, [sp, #4]
   df85c:	6565      	str	r5, [r4, #84]	; 0x54
   df85e:	442a      	add	r2, r5
   df860:	443a      	add	r2, r7
   df862:	ea86 060b 	eor.w	r6, r6, fp
   df866:	4416      	add	r6, r2
   df868:	9a00      	ldr	r2, [sp, #0]
   df86a:	ea4f 27f2 	mov.w	r7, r2, ror #11
   df86e:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
   df872:	ea87 6772 	eor.w	r7, r7, r2, ror #25
   df876:	19ba      	adds	r2, r7, r6
   df878:	1886      	adds	r6, r0, r2
   df87a:	ea4f 3073 	mov.w	r0, r3, ror #13
   df87e:	ea80 00b3 	eor.w	r0, r0, r3, ror #2
   df882:	ea48 0703 	orr.w	r7, r8, r3
   df886:	ea80 5cb3 	eor.w	ip, r0, r3, ror #22
   df88a:	400f      	ands	r7, r1
   df88c:	ea08 0003 	and.w	r0, r8, r3
   df890:	4307      	orrs	r7, r0
   df892:	4467      	add	r7, ip
   df894:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
   df896:	ea4f 42fe 	mov.w	r2, lr, ror #19
   df89a:	ea82 427e 	eor.w	r2, r2, lr, ror #17
   df89e:	ea82 2e9e 	eor.w	lr, r2, lr, lsr #10
   df8a2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   df8a4:	69e0      	ldr	r0, [r4, #28]
   df8a6:	4491      	add	r9, r2
   df8a8:	eb0e 0209 	add.w	r2, lr, r9
   df8ac:	ea4f 49b0 	mov.w	r9, r0, ror #18
   df8b0:	ea89 19f0 	eor.w	r9, r9, r0, ror #7
   df8b4:	ea89 09d0 	eor.w	r9, r9, r0, lsr #3
   df8b8:	4491      	add	r9, r2
   df8ba:	9a02      	ldr	r2, [sp, #8]
   df8bc:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
   df8c0:	4696      	mov	lr, r2
   df8c2:	9a00      	ldr	r2, [sp, #0]
   df8c4:	ea8e 0c02 	eor.w	ip, lr, r2
   df8c8:	f8da 2058 	ldr.w	r2, [sl, #88]	; 0x58
   df8cc:	ea0c 0c06 	and.w	ip, ip, r6
   df8d0:	ea8c 0c0e 	eor.w	ip, ip, lr
   df8d4:	444a      	add	r2, r9
   df8d6:	ea4f 2ef6 	mov.w	lr, r6, ror #11
   df8da:	445a      	add	r2, fp
   df8dc:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
   df8e0:	4462      	add	r2, ip
   df8e2:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
   df8e6:	4472      	add	r2, lr
   df8e8:	ea4f 3c77 	mov.w	ip, r7, ror #13
   df8ec:	ea43 0e07 	orr.w	lr, r3, r7
   df8f0:	eb01 0b02 	add.w	fp, r1, r2
   df8f4:	ea0e 0e08 	and.w	lr, lr, r8
   df8f8:	ea03 0107 	and.w	r1, r3, r7
   df8fc:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
   df900:	ea8c 5cb7 	eor.w	ip, ip, r7, ror #22
   df904:	ea4e 0e01 	orr.w	lr, lr, r1
   df908:	44e6      	add	lr, ip
   df90a:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
   df90c:	ea4f 42f5 	mov.w	r2, r5, ror #19
   df910:	6a21      	ldr	r1, [r4, #32]
   df912:	ea82 4275 	eor.w	r2, r2, r5, ror #17
   df916:	ea82 2595 	eor.w	r5, r2, r5, lsr #10
   df91a:	9a03      	ldr	r2, [sp, #12]
   df91c:	ea4f 4cb1 	mov.w	ip, r1, ror #18
   df920:	4410      	add	r0, r2
   df922:	ea8c 1cf1 	eor.w	ip, ip, r1, ror #7
   df926:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
   df92a:	4405      	add	r5, r0
   df92c:	ea8c 01d1 	eor.w	r1, ip, r1, lsr #3
   df930:	440d      	add	r5, r1
   df932:	9902      	ldr	r1, [sp, #8]
   df934:	442a      	add	r2, r5
   df936:	eb02 0901 	add.w	r9, r2, r1
   df93a:	9a00      	ldr	r2, [sp, #0]
   df93c:	65e5      	str	r5, [r4, #92]	; 0x5c
   df93e:	ea82 0106 	eor.w	r1, r2, r6
   df942:	ea01 010b 	and.w	r1, r1, fp
   df946:	4051      	eors	r1, r2
   df948:	ea4f 22fb 	mov.w	r2, fp, ror #11
   df94c:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
   df950:	4489      	add	r9, r1
   df952:	ea82 627b 	eor.w	r2, r2, fp, ror #25
   df956:	444a      	add	r2, r9
   df958:	ea4f 307e 	mov.w	r0, lr, ror #13
   df95c:	ea47 090e 	orr.w	r9, r7, lr
   df960:	ea80 00be 	eor.w	r0, r0, lr, ror #2
   df964:	ea09 0903 	and.w	r9, r9, r3
   df968:	ea07 010e 	and.w	r1, r7, lr
   df96c:	ea80 50be 	eor.w	r0, r0, lr, ror #22
   df970:	ea49 0901 	orr.w	r9, r9, r1
   df974:	4481      	add	r9, r0
   df976:	4490      	add	r8, r2
   df978:	4491      	add	r9, r2
   df97a:	9a04      	ldr	r2, [sp, #16]
   df97c:	3208      	adds	r2, #8
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
   df97e:	2a30      	cmp	r2, #48	; 0x30
   df980:	9204      	str	r2, [sp, #16]
   df982:	f10a 0a20 	add.w	sl, sl, #32
   df986:	f104 0420 	add.w	r4, r4, #32
   df98a:	f47f ae21 	bne.w	df5d0 <mbedtls_internal_sha256_process+0x2d0>
   df98e:	9a00      	ldr	r2, [sp, #0]
   df990:	9309      	str	r3, [sp, #36]	; 0x24
   df992:	920d      	str	r2, [sp, #52]	; 0x34
   df994:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   df998:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   df99c:	960c      	str	r6, [sp, #48]	; 0x30
   df99e:	f8cd 9018 	str.w	r9, [sp, #24]
   df9a2:	f8cd e01c 	str.w	lr, [sp, #28]
   df9a6:	9708      	str	r7, [sp, #32]
   df9a8:	2300      	movs	r3, #0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
   df9aa:	9a05      	ldr	r2, [sp, #20]
   df9ac:	f852 1f04 	ldr.w	r1, [r2, #4]!
   df9b0:	9205      	str	r2, [sp, #20]
   df9b2:	aa06      	add	r2, sp, #24
   df9b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
   df9b8:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
   df9ba:	440a      	add	r2, r1
   df9bc:	9905      	ldr	r1, [sp, #20]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
   df9be:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
   df9c0:	600a      	str	r2, [r1, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
   df9c2:	d1f2      	bne.n	df9aa <mbedtls_internal_sha256_process+0x6aa>
        ctx->state[i] += A[i];

    return( 0 );
}
   df9c4:	2000      	movs	r0, #0
   df9c6:	b04f      	add	sp, #316	; 0x13c
   df9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000df9cc <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   df9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   df9d0:	4604      	mov	r4, r0
   df9d2:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
   df9d4:	4615      	mov	r5, r2
   df9d6:	b382      	cbz	r2, dfa3a <mbedtls_sha256_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
   df9d8:	6803      	ldr	r3, [r0, #0]
   df9da:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
   df9de:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
   df9e0:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
   df9e2:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
   df9e4:	bf82      	ittt	hi
   df9e6:	6863      	ldrhi	r3, [r4, #4]
   df9e8:	3301      	addhi	r3, #1
   df9ea:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
   df9ec:	b180      	cbz	r0, dfa10 <mbedtls_sha256_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
   df9ee:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
   df9f2:	42ba      	cmp	r2, r7
   df9f4:	d31b      	bcc.n	dfa2e <mbedtls_sha256_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
   df9f6:	f104 0828 	add.w	r8, r4, #40	; 0x28
   df9fa:	463a      	mov	r2, r7
   df9fc:	4440      	add	r0, r8
   df9fe:	f008 fa32 	bl	e7e66 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   dfa02:	4641      	mov	r1, r8
   dfa04:	4620      	mov	r0, r4
   dfa06:	f7ff fc7b 	bl	df300 <mbedtls_internal_sha256_process>
   dfa0a:	b9b8      	cbnz	r0, dfa3c <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += fill;
   dfa0c:	443e      	add	r6, r7
        ilen  -= fill;
   dfa0e:	1bed      	subs	r5, r5, r7
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   dfa10:	462f      	mov	r7, r5
   dfa12:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
   dfa14:	2f3f      	cmp	r7, #63	; 0x3f
   dfa16:	4431      	add	r1, r6
   dfa18:	d905      	bls.n	dfa26 <mbedtls_sha256_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
   dfa1a:	4620      	mov	r0, r4
   dfa1c:	f7ff fc70 	bl	df300 <mbedtls_internal_sha256_process>
   dfa20:	b960      	cbnz	r0, dfa3c <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
   dfa22:	3f40      	subs	r7, #64	; 0x40
   dfa24:	e7f5      	b.n	dfa12 <mbedtls_sha256_update_ret+0x46>
    }

    if( ilen > 0 )
   dfa26:	b147      	cbz	r7, dfa3a <mbedtls_sha256_update_ret+0x6e>
   dfa28:	463d      	mov	r5, r7
   dfa2a:	460e      	mov	r6, r1
   dfa2c:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   dfa2e:	3428      	adds	r4, #40	; 0x28
   dfa30:	462a      	mov	r2, r5
   dfa32:	4631      	mov	r1, r6
   dfa34:	4420      	add	r0, r4
   dfa36:	f008 fa16 	bl	e7e66 <memcpy>

    return( 0 );
   dfa3a:	2000      	movs	r0, #0
}
   dfa3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dfa40 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
   dfa40:	b570      	push	{r4, r5, r6, lr}
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   dfa42:	6803      	ldr	r3, [r0, #0]
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
   dfa44:	4604      	mov	r4, r0
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   dfa46:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   dfa4a:	1c58      	adds	r0, r3, #1
   dfa4c:	4423      	add	r3, r4
   dfa4e:	2280      	movs	r2, #128	; 0x80

    if( used <= 56 )
   dfa50:	2838      	cmp	r0, #56	; 0x38
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
   dfa52:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
   dfa54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   dfa58:	f104 0628 	add.w	r6, r4, #40	; 0x28

    if( used <= 56 )
   dfa5c:	d804      	bhi.n	dfa68 <mbedtls_sha256_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   dfa5e:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   dfa62:	2100      	movs	r1, #0
   dfa64:	4430      	add	r0, r6
   dfa66:	e00e      	b.n	dfa86 <mbedtls_sha256_finish_ret+0x46>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
   dfa68:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   dfa6c:	2100      	movs	r1, #0
   dfa6e:	4430      	add	r0, r6
   dfa70:	f008 fa1f 	bl	e7eb2 <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   dfa74:	4631      	mov	r1, r6
   dfa76:	4620      	mov	r0, r4
   dfa78:	f7ff fc42 	bl	df300 <mbedtls_internal_sha256_process>
   dfa7c:	2800      	cmp	r0, #0
   dfa7e:	d172      	bne.n	dfb66 <mbedtls_sha256_finish_ret+0x126>
            return( ret );

        memset( ctx->buffer, 0, 56 );
   dfa80:	4601      	mov	r1, r0
   dfa82:	2238      	movs	r2, #56	; 0x38
   dfa84:	4630      	mov	r0, r6
   dfa86:	f008 fa14 	bl	e7eb2 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
   dfa8a:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
   dfa8c:	6861      	ldr	r1, [r4, #4]
   dfa8e:	0f5a      	lsrs	r2, r3, #29
   dfa90:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   dfa94:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
   dfa96:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   dfa98:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
   dfa9c:	0c11      	lsrs	r1, r2, #16
   dfa9e:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
   dfaa2:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
   dfaa6:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   dfaa8:	0e1a      	lsrs	r2, r3, #24
   dfaaa:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
   dfaae:	0c1a      	lsrs	r2, r3, #16
   dfab0:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
   dfab4:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   dfab6:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   dfaba:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
   dfabe:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   dfac2:	4631      	mov	r1, r6
   dfac4:	4620      	mov	r0, r4
   dfac6:	f7ff fc1b 	bl	df300 <mbedtls_internal_sha256_process>
   dfaca:	2800      	cmp	r0, #0
   dfacc:	d14b      	bne.n	dfb66 <mbedtls_sha256_finish_ret+0x126>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
   dface:	7ae3      	ldrb	r3, [r4, #11]
   dfad0:	702b      	strb	r3, [r5, #0]
   dfad2:	8963      	ldrh	r3, [r4, #10]
   dfad4:	706b      	strb	r3, [r5, #1]
   dfad6:	68a3      	ldr	r3, [r4, #8]
   dfad8:	0a1b      	lsrs	r3, r3, #8
   dfada:	70ab      	strb	r3, [r5, #2]
   dfadc:	68a3      	ldr	r3, [r4, #8]
   dfade:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
   dfae0:	7be3      	ldrb	r3, [r4, #15]
   dfae2:	712b      	strb	r3, [r5, #4]
   dfae4:	89e3      	ldrh	r3, [r4, #14]
   dfae6:	716b      	strb	r3, [r5, #5]
   dfae8:	68e3      	ldr	r3, [r4, #12]
   dfaea:	0a1b      	lsrs	r3, r3, #8
   dfaec:	71ab      	strb	r3, [r5, #6]
   dfaee:	68e3      	ldr	r3, [r4, #12]
   dfaf0:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
   dfaf2:	7ce3      	ldrb	r3, [r4, #19]
   dfaf4:	722b      	strb	r3, [r5, #8]
   dfaf6:	8a63      	ldrh	r3, [r4, #18]
   dfaf8:	726b      	strb	r3, [r5, #9]
   dfafa:	6923      	ldr	r3, [r4, #16]
   dfafc:	0a1b      	lsrs	r3, r3, #8
   dfafe:	72ab      	strb	r3, [r5, #10]
   dfb00:	6923      	ldr	r3, [r4, #16]
   dfb02:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
   dfb04:	7de3      	ldrb	r3, [r4, #23]
   dfb06:	732b      	strb	r3, [r5, #12]
   dfb08:	8ae3      	ldrh	r3, [r4, #22]
   dfb0a:	736b      	strb	r3, [r5, #13]
   dfb0c:	6963      	ldr	r3, [r4, #20]
   dfb0e:	0a1b      	lsrs	r3, r3, #8
   dfb10:	73ab      	strb	r3, [r5, #14]
   dfb12:	6963      	ldr	r3, [r4, #20]
   dfb14:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
   dfb16:	7ee3      	ldrb	r3, [r4, #27]
   dfb18:	742b      	strb	r3, [r5, #16]
   dfb1a:	8b63      	ldrh	r3, [r4, #26]
   dfb1c:	746b      	strb	r3, [r5, #17]
   dfb1e:	69a3      	ldr	r3, [r4, #24]
   dfb20:	0a1b      	lsrs	r3, r3, #8
   dfb22:	74ab      	strb	r3, [r5, #18]
   dfb24:	69a3      	ldr	r3, [r4, #24]
   dfb26:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
   dfb28:	7fe3      	ldrb	r3, [r4, #31]
   dfb2a:	752b      	strb	r3, [r5, #20]
   dfb2c:	8be3      	ldrh	r3, [r4, #30]
   dfb2e:	756b      	strb	r3, [r5, #21]
   dfb30:	69e3      	ldr	r3, [r4, #28]
   dfb32:	0a1b      	lsrs	r3, r3, #8
   dfb34:	75ab      	strb	r3, [r5, #22]
   dfb36:	69e3      	ldr	r3, [r4, #28]
   dfb38:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
   dfb3a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   dfb3e:	762b      	strb	r3, [r5, #24]
   dfb40:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   dfb42:	766b      	strb	r3, [r5, #25]
   dfb44:	6a23      	ldr	r3, [r4, #32]
   dfb46:	0a1b      	lsrs	r3, r3, #8
   dfb48:	76ab      	strb	r3, [r5, #26]
   dfb4a:	6a23      	ldr	r3, [r4, #32]
   dfb4c:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
   dfb4e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   dfb50:	b94b      	cbnz	r3, dfb66 <mbedtls_sha256_finish_ret+0x126>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
   dfb52:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   dfb56:	772b      	strb	r3, [r5, #28]
   dfb58:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   dfb5a:	776b      	strb	r3, [r5, #29]
   dfb5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dfb5e:	0a1b      	lsrs	r3, r3, #8
   dfb60:	77ab      	strb	r3, [r5, #30]
   dfb62:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dfb64:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
   dfb66:	bd70      	pop	{r4, r5, r6, pc}

000dfb68 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
   dfb68:	b5f0      	push	{r4, r5, r6, r7, lr}
   dfb6a:	b09d      	sub	sp, #116	; 0x74
   dfb6c:	461c      	mov	r4, r3
   dfb6e:	4606      	mov	r6, r0

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
   dfb70:	a801      	add	r0, sp, #4
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
   dfb72:	460f      	mov	r7, r1
   dfb74:	4615      	mov	r5, r2

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
   dfb76:	f7ff fb64 	bl	df242 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
   dfb7a:	4621      	mov	r1, r4
   dfb7c:	a801      	add	r0, sp, #4
   dfb7e:	f7ff fb6f 	bl	df260 <mbedtls_sha256_starts_ret>
   dfb82:	4604      	mov	r4, r0
   dfb84:	b958      	cbnz	r0, dfb9e <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
   dfb86:	463a      	mov	r2, r7
   dfb88:	4631      	mov	r1, r6
   dfb8a:	a801      	add	r0, sp, #4
   dfb8c:	f7ff ff1e 	bl	df9cc <mbedtls_sha256_update_ret>
   dfb90:	4604      	mov	r4, r0
   dfb92:	b920      	cbnz	r0, dfb9e <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
   dfb94:	4629      	mov	r1, r5
   dfb96:	a801      	add	r0, sp, #4
   dfb98:	f7ff ff52 	bl	dfa40 <mbedtls_sha256_finish_ret>
   dfb9c:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
   dfb9e:	a801      	add	r0, sp, #4
   dfba0:	f7ff fb53 	bl	df24a <mbedtls_sha256_free>

    return( ret );
}
   dfba4:	4620      	mov	r0, r4
   dfba6:	b01d      	add	sp, #116	; 0x74
   dfba8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dfbaa <mbedtls_sha512_init>:

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    SHA512_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
   dfbaa:	22d8      	movs	r2, #216	; 0xd8
   dfbac:	2100      	movs	r1, #0
   dfbae:	f008 b980 	b.w	e7eb2 <memset>

000dfbb2 <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
   dfbb2:	b110      	cbz	r0, dfbba <mbedtls_sha512_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
   dfbb4:	21d8      	movs	r1, #216	; 0xd8
   dfbb6:	f7fc bd1b 	b.w	dc5f0 <mbedtls_platform_zeroize>
   dfbba:	4770      	bx	lr

000dfbbc <mbedtls_sha512_clone>:
}

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
   dfbbc:	b508      	push	{r3, lr}
    SHA512_VALIDATE( dst != NULL );
    SHA512_VALIDATE( src != NULL );

    *dst = *src;
   dfbbe:	22d8      	movs	r2, #216	; 0xd8
   dfbc0:	f008 f951 	bl	e7e66 <memcpy>
   dfbc4:	bd08      	pop	{r3, pc}
	...

000dfbc8 <mbedtls_sha512_starts_ret>:
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );

    ctx->total[0] = 0;
   dfbc8:	2200      	movs	r2, #0
   dfbca:	2300      	movs	r3, #0
   dfbcc:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
   dfbd0:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
   dfbd4:	bb31      	cbnz	r1, dfc24 <mbedtls_sha512_starts_ret+0x5c>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
   dfbd6:	a32a      	add	r3, pc, #168	; (adr r3, dfc80 <mbedtls_sha512_starts_ret+0xb8>)
   dfbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfbdc:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
   dfbe0:	a329      	add	r3, pc, #164	; (adr r3, dfc88 <mbedtls_sha512_starts_ret+0xc0>)
   dfbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfbe6:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
   dfbea:	a329      	add	r3, pc, #164	; (adr r3, dfc90 <mbedtls_sha512_starts_ret+0xc8>)
   dfbec:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfbf0:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
   dfbf4:	a328      	add	r3, pc, #160	; (adr r3, dfc98 <mbedtls_sha512_starts_ret+0xd0>)
   dfbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfbfa:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
   dfbfe:	a328      	add	r3, pc, #160	; (adr r3, dfca0 <mbedtls_sha512_starts_ret+0xd8>)
   dfc00:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc04:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
   dfc08:	a327      	add	r3, pc, #156	; (adr r3, dfca8 <mbedtls_sha512_starts_ret+0xe0>)
   dfc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc0e:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
   dfc12:	a327      	add	r3, pc, #156	; (adr r3, dfcb0 <mbedtls_sha512_starts_ret+0xe8>)
   dfc14:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc18:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
   dfc1c:	a326      	add	r3, pc, #152	; (adr r3, dfcb8 <mbedtls_sha512_starts_ret+0xf0>)
   dfc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc22:	e025      	b.n	dfc70 <mbedtls_sha512_starts_ret+0xa8>
    }
    else
    {
        /* SHA-384 */
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
   dfc24:	a326      	add	r3, pc, #152	; (adr r3, dfcc0 <mbedtls_sha512_starts_ret+0xf8>)
   dfc26:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc2a:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
   dfc2e:	a326      	add	r3, pc, #152	; (adr r3, dfcc8 <mbedtls_sha512_starts_ret+0x100>)
   dfc30:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc34:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
   dfc38:	a325      	add	r3, pc, #148	; (adr r3, dfcd0 <mbedtls_sha512_starts_ret+0x108>)
   dfc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc3e:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
   dfc42:	a325      	add	r3, pc, #148	; (adr r3, dfcd8 <mbedtls_sha512_starts_ret+0x110>)
   dfc44:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc48:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
   dfc4c:	a324      	add	r3, pc, #144	; (adr r3, dfce0 <mbedtls_sha512_starts_ret+0x118>)
   dfc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc52:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
   dfc56:	a324      	add	r3, pc, #144	; (adr r3, dfce8 <mbedtls_sha512_starts_ret+0x120>)
   dfc58:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc5c:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
   dfc60:	a323      	add	r3, pc, #140	; (adr r3, dfcf0 <mbedtls_sha512_starts_ret+0x128>)
   dfc62:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc66:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
   dfc6a:	a323      	add	r3, pc, #140	; (adr r3, dfcf8 <mbedtls_sha512_starts_ret+0x130>)
   dfc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc70:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
   dfc74:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0

    return( 0 );
}
   dfc78:	2000      	movs	r0, #0
   dfc7a:	4770      	bx	lr
   dfc7c:	f3af 8000 	nop.w
   dfc80:	f3bcc908 	.word	0xf3bcc908
   dfc84:	6a09e667 	.word	0x6a09e667
   dfc88:	84caa73b 	.word	0x84caa73b
   dfc8c:	bb67ae85 	.word	0xbb67ae85
   dfc90:	fe94f82b 	.word	0xfe94f82b
   dfc94:	3c6ef372 	.word	0x3c6ef372
   dfc98:	5f1d36f1 	.word	0x5f1d36f1
   dfc9c:	a54ff53a 	.word	0xa54ff53a
   dfca0:	ade682d1 	.word	0xade682d1
   dfca4:	510e527f 	.word	0x510e527f
   dfca8:	2b3e6c1f 	.word	0x2b3e6c1f
   dfcac:	9b05688c 	.word	0x9b05688c
   dfcb0:	fb41bd6b 	.word	0xfb41bd6b
   dfcb4:	1f83d9ab 	.word	0x1f83d9ab
   dfcb8:	137e2179 	.word	0x137e2179
   dfcbc:	5be0cd19 	.word	0x5be0cd19
   dfcc0:	c1059ed8 	.word	0xc1059ed8
   dfcc4:	cbbb9d5d 	.word	0xcbbb9d5d
   dfcc8:	367cd507 	.word	0x367cd507
   dfccc:	629a292a 	.word	0x629a292a
   dfcd0:	3070dd17 	.word	0x3070dd17
   dfcd4:	9159015a 	.word	0x9159015a
   dfcd8:	f70e5939 	.word	0xf70e5939
   dfcdc:	152fecd8 	.word	0x152fecd8
   dfce0:	ffc00b31 	.word	0xffc00b31
   dfce4:	67332667 	.word	0x67332667
   dfce8:	68581511 	.word	0x68581511
   dfcec:	8eb44a87 	.word	0x8eb44a87
   dfcf0:	64f98fa7 	.word	0x64f98fa7
   dfcf4:	db0c2e0d 	.word	0xdb0c2e0d
   dfcf8:	befa4fa4 	.word	0xbefa4fa4
   dfcfc:	47b5481d 	.word	0x47b5481d

000dfd00 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
   dfd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dfd04:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
   dfd08:	4686      	mov	lr, r0
   dfd0a:	f50d 7cf8 	add.w	ip, sp, #496	; 0x1f0
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
   dfd0e:	2000      	movs	r0, #0
    {
        GET_UINT64_BE( W[i], data, i << 3 );
   dfd10:	eb01 04c0 	add.w	r4, r1, r0, lsl #3
   dfd14:	f04f 0a00 	mov.w	sl, #0
   dfd18:	7866      	ldrb	r6, [r4, #1]
   dfd1a:	f811 2030 	ldrb.w	r2, [r1, r0, lsl #3]
   dfd1e:	f8cd a020 	str.w	sl, [sp, #32]
   dfd22:	0436      	lsls	r6, r6, #16
   dfd24:	9609      	str	r6, [sp, #36]	; 0x24
   dfd26:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   dfd2a:	ea4f 6b02 	mov.w	fp, r2, lsl #24
   dfd2e:	2300      	movs	r3, #0
   dfd30:	ea43 030b 	orr.w	r3, r3, fp
   dfd34:	431e      	orrs	r6, r3
   dfd36:	4633      	mov	r3, r6
   dfd38:	79e2      	ldrb	r2, [r4, #7]
   dfd3a:	78a6      	ldrb	r6, [r4, #2]
   dfd3c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   dfd40:	ea42 020a 	orr.w	r2, r2, sl
   dfd44:	0236      	lsls	r6, r6, #8
   dfd46:	4315      	orrs	r5, r2
   dfd48:	960b      	str	r6, [sp, #44]	; 0x2c
   dfd4a:	462a      	mov	r2, r5
   dfd4c:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
   dfd50:	431e      	orrs	r6, r3
   dfd52:	4633      	mov	r3, r6
   dfd54:	78e6      	ldrb	r6, [r4, #3]
   dfd56:	960d      	str	r6, [sp, #52]	; 0x34
   dfd58:	4315      	orrs	r5, r2
   dfd5a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
   dfd5e:	462a      	mov	r2, r5
   dfd60:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
   dfd64:	431e      	orrs	r6, r3
   dfd66:	4633      	mov	r3, r6
   dfd68:	7926      	ldrb	r6, [r4, #4]
   dfd6a:	f8cd a014 	str.w	sl, [sp, #20]
   dfd6e:	4315      	orrs	r5, r2
   dfd70:	462a      	mov	r2, r5
   dfd72:	0635      	lsls	r5, r6, #24
   dfd74:	9504      	str	r5, [sp, #16]
   dfd76:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
   dfd7a:	431e      	orrs	r6, r3
   dfd7c:	4633      	mov	r3, r6
   dfd7e:	7966      	ldrb	r6, [r4, #5]
   dfd80:	f8cd a01c 	str.w	sl, [sp, #28]
   dfd84:	4315      	orrs	r5, r2
   dfd86:	462a      	mov	r2, r5
   dfd88:	0435      	lsls	r5, r6, #16
   dfd8a:	9506      	str	r5, [sp, #24]
   dfd8c:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
   dfd90:	431e      	orrs	r6, r3
   dfd92:	4633      	mov	r3, r6
   dfd94:	79a6      	ldrb	r6, [r4, #6]
   dfd96:	4315      	orrs	r5, r2
   dfd98:	ea4f 2806 	mov.w	r8, r6, lsl #8
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
   dfd9c:	3001      	adds	r0, #1
    {
        GET_UINT64_BE( W[i], data, i << 3 );
   dfd9e:	ea45 0208 	orr.w	r2, r5, r8
   dfda2:	ea43 030a 	orr.w	r3, r3, sl
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
   dfda6:	2810      	cmp	r0, #16
    {
        GET_UINT64_BE( W[i], data, i << 3 );
   dfda8:	e9ec 2302 	strd	r2, r3, [ip, #8]!
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
   dfdac:	d1b0      	bne.n	dfd10 <mbedtls_internal_sha512_process+0x10>
   dfdae:	a97e      	add	r1, sp, #504	; 0x1f8
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
   dfdb0:	6f0a      	ldr	r2, [r1, #112]	; 0x70
   dfdb2:	6f4b      	ldr	r3, [r1, #116]	; 0x74
               S0(W[i - 15]) + W[i - 16];
   dfdb4:	f8d1 8008 	ldr.w	r8, [r1, #8]
   dfdb8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   dfdbc:	0cd4      	lsrs	r4, r2, #19
   dfdbe:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
   dfdc2:	940e      	str	r4, [sp, #56]	; 0x38
   dfdc4:	0cdc      	lsrs	r4, r3, #19
   dfdc6:	ea44 3442 	orr.w	r4, r4, r2, lsl #13
   dfdca:	940f      	str	r4, [sp, #60]	; 0x3c
   dfdcc:	00dc      	lsls	r4, r3, #3
   dfdce:	ea44 7452 	orr.w	r4, r4, r2, lsr #29
   dfdd2:	9411      	str	r4, [sp, #68]	; 0x44
   dfdd4:	00d4      	lsls	r4, r2, #3
   dfdd6:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
   dfdda:	9410      	str	r4, [sp, #64]	; 0x40
   dfddc:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
   dfde0:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   dfde4:	0992      	lsrs	r2, r2, #6
   dfde6:	ea42 6283 	orr.w	r2, r2, r3, lsl #26
   dfdea:	099b      	lsrs	r3, r3, #6
   dfdec:	9200      	str	r2, [sp, #0]
   dfdee:	9301      	str	r3, [sp, #4]
   dfdf0:	4066      	eors	r6, r4
   dfdf2:	e9dd 3400 	ldrd	r3, r4, [sp]
   dfdf6:	406f      	eors	r7, r5
   dfdf8:	4073      	eors	r3, r6
   dfdfa:	407c      	eors	r4, r7
   dfdfc:	461e      	mov	r6, r3
   dfdfe:	4627      	mov	r7, r4
   dfe00:	e9d1 2300 	ldrd	r2, r3, [r1]
   dfe04:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
   dfe08:	1912      	adds	r2, r2, r4
   dfe0a:	416b      	adcs	r3, r5
   dfe0c:	18b4      	adds	r4, r6, r2
   dfe0e:	eb47 0503 	adc.w	r5, r7, r3
   dfe12:	ea4f 0358 	mov.w	r3, r8, lsr #1
   dfe16:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
   dfe1a:	9312      	str	r3, [sp, #72]	; 0x48
   dfe1c:	ea4f 035c 	mov.w	r3, ip, lsr #1
   dfe20:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
   dfe24:	9313      	str	r3, [sp, #76]	; 0x4c
   dfe26:	ea4f 2318 	mov.w	r3, r8, lsr #8
   dfe2a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   dfe2e:	9314      	str	r3, [sp, #80]	; 0x50
   dfe30:	ea4f 231c 	mov.w	r3, ip, lsr #8
   dfe34:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
   dfe38:	9315      	str	r3, [sp, #84]	; 0x54
   dfe3a:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   dfe3e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   dfe42:	4072      	eors	r2, r6
   dfe44:	ea4f 16d8 	mov.w	r6, r8, lsr #7
   dfe48:	ea46 664c 	orr.w	r6, r6, ip, lsl #25
   dfe4c:	9602      	str	r6, [sp, #8]
   dfe4e:	ea4f 16dc 	mov.w	r6, ip, lsr #7
   dfe52:	9603      	str	r6, [sp, #12]
   dfe54:	407b      	eors	r3, r7
   dfe56:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   dfe5a:	4056      	eors	r6, r2
   dfe5c:	1932      	adds	r2, r6, r4
   dfe5e:	ea87 0703 	eor.w	r7, r7, r3
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
   dfe62:	f100 0001 	add.w	r0, r0, #1
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
   dfe66:	eb47 0305 	adc.w	r3, r7, r5
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
   dfe6a:	2850      	cmp	r0, #80	; 0x50
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
   dfe6c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
   dfe70:	f101 0108 	add.w	r1, r1, #8
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
   dfe74:	d19c      	bne.n	dfdb0 <mbedtls_internal_sha512_process+0xb0>
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
   dfe76:	e9de 3404 	ldrd	r3, r4, [lr, #16]
   dfe7a:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
    B = ctx->state[1];
   dfe7e:	e9de 3406 	ldrd	r3, r4, [lr, #24]
   dfe82:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    C = ctx->state[2];
   dfe86:	e9de 3408 	ldrd	r3, r4, [lr, #32]
   dfe8a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
    D = ctx->state[3];
   dfe8e:	e9de 340a 	ldrd	r3, r4, [lr, #40]	; 0x28
   dfe92:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    E = ctx->state[4];
   dfe96:	e9de 340c 	ldrd	r3, r4, [lr, #48]	; 0x30
   dfe9a:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
    F = ctx->state[5];
   dfe9e:	e9de 340e 	ldrd	r3, r4, [lr, #56]	; 0x38
   dfea2:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
    G = ctx->state[6];
   dfea6:	e9de 3410 	ldrd	r3, r4, [lr, #64]	; 0x40
   dfeaa:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
   dfeae:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   dfeb2:	e9cd 0106 	strd	r0, r1, [sp, #24]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
   dfeb6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   dfeba:	e9cd 0108 	strd	r0, r1, [sp, #32]

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
   dfebe:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   dfec2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
   dfec6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   dfeca:	e9cd 0100 	strd	r0, r1, [sp]
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
   dfece:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];
   dfed2:	e9de 3412 	ldrd	r3, r4, [lr, #72]	; 0x48
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
   dfed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
   dfeda:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];
   dfede:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
   dfee2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
   dfee6:	4b04      	ldr	r3, [pc, #16]	; (dfef8 <mbedtls_internal_sha512_process+0x1f8>)
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
   dfee8:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
   dfeec:	e9cd 0104 	strd	r0, r1, [sp, #16]
   dfef0:	aa80      	add	r2, sp, #512	; 0x200
   dfef2:	f503 7c20 	add.w	ip, r3, #640	; 0x280
   dfef6:	e001      	b.n	dfefc <mbedtls_internal_sha512_process+0x1fc>
   dfef8:	000e9878 	.word	0x000e9878
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
   dfefc:	990a      	ldr	r1, [sp, #40]	; 0x28
   dfefe:	980b      	ldr	r0, [sp, #44]	; 0x2c
   dff00:	0b89      	lsrs	r1, r1, #14
   dff02:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
   dff06:	911e      	str	r1, [sp, #120]	; 0x78
   dff08:	0b81      	lsrs	r1, r0, #14
   dff0a:	980a      	ldr	r0, [sp, #40]	; 0x28
   dff0c:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
   dff10:	911f      	str	r1, [sp, #124]	; 0x7c
   dff12:	0c81      	lsrs	r1, r0, #18
   dff14:	980b      	ldr	r0, [sp, #44]	; 0x2c
   dff16:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
   dff1a:	9120      	str	r1, [sp, #128]	; 0x80
   dff1c:	0c81      	lsrs	r1, r0, #18
   dff1e:	980a      	ldr	r0, [sp, #40]	; 0x28
   dff20:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
   dff24:	9121      	str	r1, [sp, #132]	; 0x84
   dff26:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
   dff2a:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
   dff2e:	404f      	eors	r7, r1
   dff30:	990b      	ldr	r1, [sp, #44]	; 0x2c
   dff32:	4046      	eors	r6, r0
   dff34:	980a      	ldr	r0, [sp, #40]	; 0x28
   dff36:	05c9      	lsls	r1, r1, #23
   dff38:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
   dff3c:	9123      	str	r1, [sp, #140]	; 0x8c
   dff3e:	05c1      	lsls	r1, r0, #23
   dff40:	980b      	ldr	r0, [sp, #44]	; 0x2c
   dff42:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
   dff46:	9122      	str	r1, [sp, #136]	; 0x88
   dff48:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
   dff4c:	4070      	eors	r0, r6
   dff4e:	4079      	eors	r1, r7
   dff50:	e953 4502 	ldrd	r4, r5, [r3, #-8]
   dff54:	4606      	mov	r6, r0
   dff56:	460f      	mov	r7, r1
   dff58:	e952 0102 	ldrd	r0, r1, [r2, #-8]
   dff5c:	1900      	adds	r0, r0, r4
   dff5e:	4169      	adcs	r1, r5
   dff60:	1836      	adds	r6, r6, r0
   dff62:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   dff66:	414f      	adcs	r7, r1
   dff68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   dff6c:	4060      	eors	r0, r4
   dff6e:	4069      	eors	r1, r5
   dff70:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
   dff74:	4004      	ands	r4, r0
   dff76:	400d      	ands	r5, r1
   dff78:	4620      	mov	r0, r4
   dff7a:	4629      	mov	r1, r5
   dff7c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
   dff80:	4044      	eors	r4, r0
   dff82:	404d      	eors	r5, r1
   dff84:	e9dd 0100 	ldrd	r0, r1, [sp]
   dff88:	1936      	adds	r6, r6, r4
   dff8a:	416f      	adcs	r7, r5
   dff8c:	eb18 0806 	adds.w	r8, r8, r6
   dff90:	eb49 0907 	adc.w	r9, r9, r7
   dff94:	eb10 0008 	adds.w	r0, r0, r8
   dff98:	eb41 0109 	adc.w	r1, r1, r9
   dff9c:	e9cd 0100 	strd	r0, r1, [sp]
   dffa0:	9904      	ldr	r1, [sp, #16]
   dffa2:	9805      	ldr	r0, [sp, #20]
   dffa4:	0f09      	lsrs	r1, r1, #28
   dffa6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   dffaa:	9124      	str	r1, [sp, #144]	; 0x90
   dffac:	0f01      	lsrs	r1, r0, #28
   dffae:	9804      	ldr	r0, [sp, #16]
   dffb0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   dffb4:	9125      	str	r1, [sp, #148]	; 0x94
   dffb6:	9905      	ldr	r1, [sp, #20]
   dffb8:	0789      	lsls	r1, r1, #30
   dffba:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   dffbe:	9127      	str	r1, [sp, #156]	; 0x9c
   dffc0:	0781      	lsls	r1, r0, #30
   dffc2:	9805      	ldr	r0, [sp, #20]
   dffc4:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   dffc8:	9126      	str	r1, [sp, #152]	; 0x98
   dffca:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
   dffce:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
   dffd2:	404d      	eors	r5, r1
   dffd4:	9905      	ldr	r1, [sp, #20]
   dffd6:	4044      	eors	r4, r0
   dffd8:	9804      	ldr	r0, [sp, #16]
   dffda:	0649      	lsls	r1, r1, #25
   dffdc:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   dffe0:	9129      	str	r1, [sp, #164]	; 0xa4
   dffe2:	0641      	lsls	r1, r0, #25
   dffe4:	9805      	ldr	r0, [sp, #20]
   dffe6:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   dffea:	9128      	str	r1, [sp, #160]	; 0xa0
   dffec:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
   dfff0:	4060      	eors	r0, r4
   dfff2:	4069      	eors	r1, r5
   dfff4:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   dfff8:	4604      	mov	r4, r0
   dfffa:	460d      	mov	r5, r1
   dfffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e0000:	4330      	orrs	r0, r6
   e0002:	4339      	orrs	r1, r7
   e0004:	ea00 060a 	and.w	r6, r0, sl
   e0008:	ea01 070b 	and.w	r7, r1, fp
   e000c:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
   e0010:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0014:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   e0018:	4006      	ands	r6, r0
   e001a:	400f      	ands	r7, r1
   e001c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e0020:	4330      	orrs	r0, r6
   e0022:	1900      	adds	r0, r0, r4
   e0024:	ea41 0107 	orr.w	r1, r1, r7
   e0028:	4169      	adcs	r1, r5
   e002a:	eb18 0800 	adds.w	r8, r8, r0
   e002e:	eb49 0901 	adc.w	r9, r9, r1
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
   e0032:	e9d3 4500 	ldrd	r4, r5, [r3]
   e0036:	e9d2 0100 	ldrd	r0, r1, [r2]
   e003a:	1900      	adds	r0, r0, r4
   e003c:	4169      	adcs	r1, r5
   e003e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
   e0042:	1824      	adds	r4, r4, r0
   e0044:	414d      	adcs	r5, r1
   e0046:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   e004a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e004e:	4070      	eors	r0, r6
   e0050:	4079      	eors	r1, r7
   e0052:	e9dd 6700 	ldrd	r6, r7, [sp]
   e0056:	4006      	ands	r6, r0
   e0058:	400f      	ands	r7, r1
   e005a:	4630      	mov	r0, r6
   e005c:	4639      	mov	r1, r7
   e005e:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   e0062:	4046      	eors	r6, r0
   e0064:	19a0      	adds	r0, r4, r6
   e0066:	ea87 0701 	eor.w	r7, r7, r1
   e006a:	9c00      	ldr	r4, [sp, #0]
   e006c:	eb45 0107 	adc.w	r1, r5, r7
   e0070:	9d01      	ldr	r5, [sp, #4]
   e0072:	0ba4      	lsrs	r4, r4, #14
   e0074:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e0078:	942a      	str	r4, [sp, #168]	; 0xa8
   e007a:	0bac      	lsrs	r4, r5, #14
   e007c:	9d00      	ldr	r5, [sp, #0]
   e007e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e0082:	942b      	str	r4, [sp, #172]	; 0xac
   e0084:	0cac      	lsrs	r4, r5, #18
   e0086:	9d01      	ldr	r5, [sp, #4]
   e0088:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e008c:	942c      	str	r4, [sp, #176]	; 0xb0
   e008e:	0cac      	lsrs	r4, r5, #18
   e0090:	9d00      	ldr	r5, [sp, #0]
   e0092:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e0096:	942d      	str	r4, [sp, #180]	; 0xb4
   e0098:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
   e009c:	e9dd 672c 	ldrd	r6, r7, [sp, #176]	; 0xb0
   e00a0:	4074      	eors	r4, r6
   e00a2:	9e01      	ldr	r6, [sp, #4]
   e00a4:	407d      	eors	r5, r7
   e00a6:	9f00      	ldr	r7, [sp, #0]
   e00a8:	05f6      	lsls	r6, r6, #23
   e00aa:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e00ae:	962f      	str	r6, [sp, #188]	; 0xbc
   e00b0:	05fe      	lsls	r6, r7, #23
   e00b2:	9f01      	ldr	r7, [sp, #4]
   e00b4:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e00b8:	962e      	str	r6, [sp, #184]	; 0xb8
   e00ba:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
   e00be:	4066      	eors	r6, r4
   e00c0:	1986      	adds	r6, r0, r6
   e00c2:	ea87 0705 	eor.w	r7, r7, r5
   e00c6:	eb41 0707 	adc.w	r7, r1, r7
   e00ca:	eb1a 0006 	adds.w	r0, sl, r6
   e00ce:	eb4b 0107 	adc.w	r1, fp, r7
   e00d2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   e00d6:	ea4f 7118 	mov.w	r1, r8, lsr #28
   e00da:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
   e00de:	9130      	str	r1, [sp, #192]	; 0xc0
   e00e0:	ea4f 7119 	mov.w	r1, r9, lsr #28
   e00e4:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
   e00e8:	9131      	str	r1, [sp, #196]	; 0xc4
   e00ea:	ea4f 7189 	mov.w	r1, r9, lsl #30
   e00ee:	ea41 0198 	orr.w	r1, r1, r8, lsr #2
   e00f2:	9133      	str	r1, [sp, #204]	; 0xcc
   e00f4:	ea4f 7188 	mov.w	r1, r8, lsl #30
   e00f8:	ea41 0199 	orr.w	r1, r1, r9, lsr #2
   e00fc:	9132      	str	r1, [sp, #200]	; 0xc8
   e00fe:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
   e0102:	e9dd 4530 	ldrd	r4, r5, [sp, #192]	; 0xc0
   e0106:	404d      	eors	r5, r1
   e0108:	ea4f 6149 	mov.w	r1, r9, lsl #25
   e010c:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
   e0110:	9135      	str	r1, [sp, #212]	; 0xd4
   e0112:	ea4f 6148 	mov.w	r1, r8, lsl #25
   e0116:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
   e011a:	9134      	str	r1, [sp, #208]	; 0xd0
   e011c:	4044      	eors	r4, r0
   e011e:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
   e0122:	4060      	eors	r0, r4
   e0124:	4069      	eors	r1, r5
   e0126:	4604      	mov	r4, r0
   e0128:	460d      	mov	r5, r1
   e012a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e012e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   e0132:	ea40 0008 	orr.w	r0, r0, r8
   e0136:	ea41 0109 	orr.w	r1, r1, r9
   e013a:	ea0a 0a00 	and.w	sl, sl, r0
   e013e:	ea0b 0b01 	and.w	fp, fp, r1
   e0142:	4650      	mov	r0, sl
   e0144:	4659      	mov	r1, fp
   e0146:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   e014a:	ea0a 0a08 	and.w	sl, sl, r8
   e014e:	ea0b 0b09 	and.w	fp, fp, r9
   e0152:	ea4a 0a00 	orr.w	sl, sl, r0
   e0156:	eb1a 0004 	adds.w	r0, sl, r4
   e015a:	ea4b 0b01 	orr.w	fp, fp, r1
   e015e:	eb4b 0105 	adc.w	r1, fp, r5
   e0162:	1984      	adds	r4, r0, r6
   e0164:	eb41 0507 	adc.w	r5, r1, r7
   e0168:	e9cd 4506 	strd	r4, r5, [sp, #24]
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
   e016c:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
   e0170:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
   e0174:	1900      	adds	r0, r0, r4
   e0176:	4169      	adcs	r1, r5
   e0178:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   e017c:	1824      	adds	r4, r4, r0
   e017e:	414d      	adcs	r5, r1
   e0180:	e9dd 6700 	ldrd	r6, r7, [sp]
   e0184:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e0188:	4070      	eors	r0, r6
   e018a:	4079      	eors	r1, r7
   e018c:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
   e0190:	4006      	ands	r6, r0
   e0192:	400f      	ands	r7, r1
   e0194:	4630      	mov	r0, r6
   e0196:	4639      	mov	r1, r7
   e0198:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   e019c:	4046      	eors	r6, r0
   e019e:	1930      	adds	r0, r6, r4
   e01a0:	ea87 0701 	eor.w	r7, r7, r1
   e01a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   e01a6:	eb47 0105 	adc.w	r1, r7, r5
   e01aa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   e01ac:	0ba4      	lsrs	r4, r4, #14
   e01ae:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e01b2:	9436      	str	r4, [sp, #216]	; 0xd8
   e01b4:	0bac      	lsrs	r4, r5, #14
   e01b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   e01b8:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e01bc:	9437      	str	r4, [sp, #220]	; 0xdc
   e01be:	0cac      	lsrs	r4, r5, #18
   e01c0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   e01c2:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e01c6:	9438      	str	r4, [sp, #224]	; 0xe0
   e01c8:	0cac      	lsrs	r4, r5, #18
   e01ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   e01cc:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e01d0:	9439      	str	r4, [sp, #228]	; 0xe4
   e01d2:	e9dd 6738 	ldrd	r6, r7, [sp, #224]	; 0xe0
   e01d6:	e9dd 4536 	ldrd	r4, r5, [sp, #216]	; 0xd8
   e01da:	4074      	eors	r4, r6
   e01dc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   e01de:	407d      	eors	r5, r7
   e01e0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   e01e2:	05f6      	lsls	r6, r6, #23
   e01e4:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e01e8:	963b      	str	r6, [sp, #236]	; 0xec
   e01ea:	05fe      	lsls	r6, r7, #23
   e01ec:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   e01ee:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e01f2:	963a      	str	r6, [sp, #232]	; 0xe8
   e01f4:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
   e01f8:	4066      	eors	r6, r4
   e01fa:	1986      	adds	r6, r0, r6
   e01fc:	ea87 0705 	eor.w	r7, r7, r5
   e0200:	eb41 0707 	adc.w	r7, r1, r7
   e0204:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e0208:	1980      	adds	r0, r0, r6
   e020a:	4179      	adcs	r1, r7
   e020c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   e0210:	9906      	ldr	r1, [sp, #24]
   e0212:	9807      	ldr	r0, [sp, #28]
   e0214:	0f09      	lsrs	r1, r1, #28
   e0216:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e021a:	913c      	str	r1, [sp, #240]	; 0xf0
   e021c:	0f01      	lsrs	r1, r0, #28
   e021e:	9806      	ldr	r0, [sp, #24]
   e0220:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e0224:	913d      	str	r1, [sp, #244]	; 0xf4
   e0226:	9907      	ldr	r1, [sp, #28]
   e0228:	0789      	lsls	r1, r1, #30
   e022a:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e022e:	913f      	str	r1, [sp, #252]	; 0xfc
   e0230:	0781      	lsls	r1, r0, #30
   e0232:	9807      	ldr	r0, [sp, #28]
   e0234:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e0238:	913e      	str	r1, [sp, #248]	; 0xf8
   e023a:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
   e023e:	e9dd 453c 	ldrd	r4, r5, [sp, #240]	; 0xf0
   e0242:	404d      	eors	r5, r1
   e0244:	9907      	ldr	r1, [sp, #28]
   e0246:	4044      	eors	r4, r0
   e0248:	9806      	ldr	r0, [sp, #24]
   e024a:	0649      	lsls	r1, r1, #25
   e024c:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e0250:	9141      	str	r1, [sp, #260]	; 0x104
   e0252:	0641      	lsls	r1, r0, #25
   e0254:	9807      	ldr	r0, [sp, #28]
   e0256:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e025a:	9140      	str	r1, [sp, #256]	; 0x100
   e025c:	a940      	add	r1, sp, #256	; 0x100
   e025e:	e9d1 0100 	ldrd	r0, r1, [r1]
   e0262:	4060      	eors	r0, r4
   e0264:	4069      	eors	r1, r5
   e0266:	4604      	mov	r4, r0
   e0268:	460d      	mov	r5, r1
   e026a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e026e:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   e0272:	ea40 0008 	orr.w	r0, r0, r8
   e0276:	ea41 0109 	orr.w	r1, r1, r9
   e027a:	ea0a 0a00 	and.w	sl, sl, r0
   e027e:	ea0b 0b01 	and.w	fp, fp, r1
   e0282:	4650      	mov	r0, sl
   e0284:	4659      	mov	r1, fp
   e0286:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   e028a:	ea0a 0a08 	and.w	sl, sl, r8
   e028e:	ea0b 0b09 	and.w	fp, fp, r9
   e0292:	ea4a 0a00 	orr.w	sl, sl, r0
   e0296:	eb1a 0004 	adds.w	r0, sl, r4
   e029a:	ea4b 0b01 	orr.w	fp, fp, r1
   e029e:	eb4b 0105 	adc.w	r1, fp, r5
   e02a2:	1984      	adds	r4, r0, r6
   e02a4:	eb41 0507 	adc.w	r5, r1, r7
   e02a8:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
   e02ac:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
   e02b0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
   e02b4:	1900      	adds	r0, r0, r4
   e02b6:	4169      	adcs	r1, r5
   e02b8:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
   e02bc:	1824      	adds	r4, r4, r0
   e02be:	414d      	adcs	r5, r1
   e02c0:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
   e02c4:	e9dd 0100 	ldrd	r0, r1, [sp]
   e02c8:	4046      	eors	r6, r0
   e02ca:	404f      	eors	r7, r1
   e02cc:	4630      	mov	r0, r6
   e02ce:	4639      	mov	r1, r7
   e02d0:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   e02d4:	4006      	ands	r6, r0
   e02d6:	400f      	ands	r7, r1
   e02d8:	4630      	mov	r0, r6
   e02da:	4639      	mov	r1, r7
   e02dc:	e9dd 6700 	ldrd	r6, r7, [sp]
   e02e0:	4046      	eors	r6, r0
   e02e2:	1930      	adds	r0, r6, r4
   e02e4:	ea87 0701 	eor.w	r7, r7, r1
   e02e8:	9c08      	ldr	r4, [sp, #32]
   e02ea:	eb47 0105 	adc.w	r1, r7, r5
   e02ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
   e02f0:	0ba4      	lsrs	r4, r4, #14
   e02f2:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e02f6:	9442      	str	r4, [sp, #264]	; 0x108
   e02f8:	0bac      	lsrs	r4, r5, #14
   e02fa:	9d08      	ldr	r5, [sp, #32]
   e02fc:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e0300:	9443      	str	r4, [sp, #268]	; 0x10c
   e0302:	0cac      	lsrs	r4, r5, #18
   e0304:	9d09      	ldr	r5, [sp, #36]	; 0x24
   e0306:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e030a:	9444      	str	r4, [sp, #272]	; 0x110
   e030c:	0cac      	lsrs	r4, r5, #18
   e030e:	9d08      	ldr	r5, [sp, #32]
   e0310:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e0314:	9445      	str	r4, [sp, #276]	; 0x114
   e0316:	ae44      	add	r6, sp, #272	; 0x110
   e0318:	ac42      	add	r4, sp, #264	; 0x108
   e031a:	e9d6 6700 	ldrd	r6, r7, [r6]
   e031e:	e9d4 4500 	ldrd	r4, r5, [r4]
   e0322:	4074      	eors	r4, r6
   e0324:	9e09      	ldr	r6, [sp, #36]	; 0x24
   e0326:	407d      	eors	r5, r7
   e0328:	9f08      	ldr	r7, [sp, #32]
   e032a:	05f6      	lsls	r6, r6, #23
   e032c:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e0330:	9647      	str	r6, [sp, #284]	; 0x11c
   e0332:	05fe      	lsls	r6, r7, #23
   e0334:	9f09      	ldr	r7, [sp, #36]	; 0x24
   e0336:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e033a:	9646      	str	r6, [sp, #280]	; 0x118
   e033c:	ae46      	add	r6, sp, #280	; 0x118
   e033e:	e9d6 6700 	ldrd	r6, r7, [r6]
   e0342:	4066      	eors	r6, r4
   e0344:	1986      	adds	r6, r0, r6
   e0346:	ea87 0705 	eor.w	r7, r7, r5
   e034a:	eb41 0707 	adc.w	r7, r1, r7
   e034e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0352:	1980      	adds	r0, r0, r6
   e0354:	4179      	adcs	r1, r7
   e0356:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   e035a:	9902      	ldr	r1, [sp, #8]
   e035c:	9803      	ldr	r0, [sp, #12]
   e035e:	0f09      	lsrs	r1, r1, #28
   e0360:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e0364:	9148      	str	r1, [sp, #288]	; 0x120
   e0366:	0f01      	lsrs	r1, r0, #28
   e0368:	9802      	ldr	r0, [sp, #8]
   e036a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e036e:	9149      	str	r1, [sp, #292]	; 0x124
   e0370:	9903      	ldr	r1, [sp, #12]
   e0372:	0789      	lsls	r1, r1, #30
   e0374:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e0378:	914b      	str	r1, [sp, #300]	; 0x12c
   e037a:	0781      	lsls	r1, r0, #30
   e037c:	9803      	ldr	r0, [sp, #12]
   e037e:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e0382:	914a      	str	r1, [sp, #296]	; 0x128
   e0384:	a948      	add	r1, sp, #288	; 0x120
   e0386:	e9d1 4500 	ldrd	r4, r5, [r1]
   e038a:	a94a      	add	r1, sp, #296	; 0x128
   e038c:	e9d1 0100 	ldrd	r0, r1, [r1]
   e0390:	404d      	eors	r5, r1
   e0392:	9903      	ldr	r1, [sp, #12]
   e0394:	4044      	eors	r4, r0
   e0396:	9802      	ldr	r0, [sp, #8]
   e0398:	0649      	lsls	r1, r1, #25
   e039a:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e039e:	914d      	str	r1, [sp, #308]	; 0x134
   e03a0:	0641      	lsls	r1, r0, #25
   e03a2:	9803      	ldr	r0, [sp, #12]
   e03a4:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e03a8:	914c      	str	r1, [sp, #304]	; 0x130
   e03aa:	a94c      	add	r1, sp, #304	; 0x130
   e03ac:	e9d1 0100 	ldrd	r0, r1, [r1]
   e03b0:	4060      	eors	r0, r4
   e03b2:	4069      	eors	r1, r5
   e03b4:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   e03b8:	4604      	mov	r4, r0
   e03ba:	460d      	mov	r5, r1
   e03bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e03c0:	ea40 000a 	orr.w	r0, r0, sl
   e03c4:	ea41 010b 	orr.w	r1, r1, fp
   e03c8:	ea00 0a08 	and.w	sl, r0, r8
   e03cc:	ea01 0b09 	and.w	fp, r1, r9
   e03d0:	e9cd ab04 	strd	sl, fp, [sp, #16]
   e03d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e03d8:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   e03dc:	ea0a 0a00 	and.w	sl, sl, r0
   e03e0:	ea0b 0b01 	and.w	fp, fp, r1
   e03e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e03e8:	ea40 000a 	orr.w	r0, r0, sl
   e03ec:	1900      	adds	r0, r0, r4
   e03ee:	ea41 010b 	orr.w	r1, r1, fp
   e03f2:	4169      	adcs	r1, r5
   e03f4:	1984      	adds	r4, r0, r6
   e03f6:	eb41 0507 	adc.w	r5, r1, r7
   e03fa:	e9cd 4504 	strd	r4, r5, [sp, #16]
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
   e03fe:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
   e0402:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   e0406:	1900      	adds	r0, r0, r4
   e0408:	4169      	adcs	r1, r5
   e040a:	e9dd 4500 	ldrd	r4, r5, [sp]
   e040e:	1824      	adds	r4, r4, r0
   e0410:	414d      	adcs	r5, r1
   e0412:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
   e0416:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e041a:	4046      	eors	r6, r0
   e041c:	404f      	eors	r7, r1
   e041e:	4630      	mov	r0, r6
   e0420:	4639      	mov	r1, r7
   e0422:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   e0426:	4006      	ands	r6, r0
   e0428:	400f      	ands	r7, r1
   e042a:	4630      	mov	r0, r6
   e042c:	4639      	mov	r1, r7
   e042e:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
   e0432:	4046      	eors	r6, r0
   e0434:	19a0      	adds	r0, r4, r6
   e0436:	ea87 0701 	eor.w	r7, r7, r1
   e043a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   e043c:	eb45 0107 	adc.w	r1, r5, r7
   e0440:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   e0442:	0ba4      	lsrs	r4, r4, #14
   e0444:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e0448:	944e      	str	r4, [sp, #312]	; 0x138
   e044a:	0bac      	lsrs	r4, r5, #14
   e044c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e044e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e0452:	944f      	str	r4, [sp, #316]	; 0x13c
   e0454:	0cac      	lsrs	r4, r5, #18
   e0456:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   e0458:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e045c:	9450      	str	r4, [sp, #320]	; 0x140
   e045e:	0cac      	lsrs	r4, r5, #18
   e0460:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e0462:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e0466:	9451      	str	r4, [sp, #324]	; 0x144
   e0468:	ae50      	add	r6, sp, #320	; 0x140
   e046a:	ac4e      	add	r4, sp, #312	; 0x138
   e046c:	e9d6 6700 	ldrd	r6, r7, [r6]
   e0470:	e9d4 4500 	ldrd	r4, r5, [r4]
   e0474:	4074      	eors	r4, r6
   e0476:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   e0478:	407d      	eors	r5, r7
   e047a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   e047c:	05f6      	lsls	r6, r6, #23
   e047e:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e0482:	9653      	str	r6, [sp, #332]	; 0x14c
   e0484:	05fe      	lsls	r6, r7, #23
   e0486:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   e0488:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e048c:	9652      	str	r6, [sp, #328]	; 0x148
   e048e:	ae52      	add	r6, sp, #328	; 0x148
   e0490:	e9d6 6700 	ldrd	r6, r7, [r6]
   e0494:	4066      	eors	r6, r4
   e0496:	1986      	adds	r6, r0, r6
   e0498:	ea87 0705 	eor.w	r7, r7, r5
   e049c:	eb41 0707 	adc.w	r7, r1, r7
   e04a0:	9904      	ldr	r1, [sp, #16]
   e04a2:	9805      	ldr	r0, [sp, #20]
   e04a4:	0f09      	lsrs	r1, r1, #28
   e04a6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e04aa:	9154      	str	r1, [sp, #336]	; 0x150
   e04ac:	0f01      	lsrs	r1, r0, #28
   e04ae:	9804      	ldr	r0, [sp, #16]
   e04b0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e04b4:	9155      	str	r1, [sp, #340]	; 0x154
   e04b6:	9905      	ldr	r1, [sp, #20]
   e04b8:	0789      	lsls	r1, r1, #30
   e04ba:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e04be:	9157      	str	r1, [sp, #348]	; 0x15c
   e04c0:	0781      	lsls	r1, r0, #30
   e04c2:	9805      	ldr	r0, [sp, #20]
   e04c4:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e04c8:	9156      	str	r1, [sp, #344]	; 0x158
   e04ca:	a954      	add	r1, sp, #336	; 0x150
   e04cc:	e9d1 4500 	ldrd	r4, r5, [r1]
   e04d0:	a956      	add	r1, sp, #344	; 0x158
   e04d2:	e9d1 0100 	ldrd	r0, r1, [r1]
   e04d6:	404d      	eors	r5, r1
   e04d8:	9905      	ldr	r1, [sp, #20]
   e04da:	4044      	eors	r4, r0
   e04dc:	9804      	ldr	r0, [sp, #16]
   e04de:	0649      	lsls	r1, r1, #25
   e04e0:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e04e4:	9159      	str	r1, [sp, #356]	; 0x164
   e04e6:	0641      	lsls	r1, r0, #25
   e04e8:	9805      	ldr	r0, [sp, #20]
   e04ea:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e04ee:	9158      	str	r1, [sp, #352]	; 0x160
   e04f0:	a958      	add	r1, sp, #352	; 0x160
   e04f2:	e9d1 0100 	ldrd	r0, r1, [r1]
   e04f6:	4060      	eors	r0, r4
   e04f8:	4069      	eors	r1, r5
   e04fa:	4604      	mov	r4, r0
   e04fc:	460d      	mov	r5, r1
   e04fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e0502:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   e0506:	ea40 000a 	orr.w	r0, r0, sl
   e050a:	ea41 010b 	orr.w	r1, r1, fp
   e050e:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   e0512:	ea0a 0a00 	and.w	sl, sl, r0
   e0516:	ea0b 0b01 	and.w	fp, fp, r1
   e051a:	e9cd ab00 	strd	sl, fp, [sp]
   e051e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0522:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   e0526:	ea0a 0a00 	and.w	sl, sl, r0
   e052a:	ea0b 0b01 	and.w	fp, fp, r1
   e052e:	e9dd 0100 	ldrd	r0, r1, [sp]
   e0532:	eb18 0806 	adds.w	r8, r8, r6
   e0536:	ea40 000a 	orr.w	r0, r0, sl
   e053a:	eb49 0907 	adc.w	r9, r9, r7
   e053e:	ea41 010b 	orr.w	r1, r1, fp
   e0542:	1824      	adds	r4, r4, r0
   e0544:	414d      	adcs	r5, r1
   e0546:	19a0      	adds	r0, r4, r6
   e0548:	eb45 0107 	adc.w	r1, r5, r7
   e054c:	e9cd 0100 	strd	r0, r1, [sp]
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
   e0550:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
   e0554:	e9d2 0108 	ldrd	r0, r1, [r2, #32]
   e0558:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
   e055c:	1900      	adds	r0, r0, r4
   e055e:	4169      	adcs	r1, r5
   e0560:	eb1a 0a00 	adds.w	sl, sl, r0
   e0564:	eb4b 0b01 	adc.w	fp, fp, r1
   e0568:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
   e056c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e0570:	4060      	eors	r0, r4
   e0572:	4069      	eors	r1, r5
   e0574:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   e0578:	ea00 0008 	and.w	r0, r0, r8
   e057c:	4044      	eors	r4, r0
   e057e:	eb14 000a 	adds.w	r0, r4, sl
   e0582:	ea4f 3498 	mov.w	r4, r8, lsr #14
   e0586:	ea44 4489 	orr.w	r4, r4, r9, lsl #18
   e058a:	945a      	str	r4, [sp, #360]	; 0x168
   e058c:	ea4f 3499 	mov.w	r4, r9, lsr #14
   e0590:	ea44 4488 	orr.w	r4, r4, r8, lsl #18
   e0594:	945b      	str	r4, [sp, #364]	; 0x16c
   e0596:	ea4f 4498 	mov.w	r4, r8, lsr #18
   e059a:	ea44 3489 	orr.w	r4, r4, r9, lsl #14
   e059e:	945c      	str	r4, [sp, #368]	; 0x170
   e05a0:	ea4f 4499 	mov.w	r4, r9, lsr #18
   e05a4:	ea01 0109 	and.w	r1, r1, r9
   e05a8:	ea44 3488 	orr.w	r4, r4, r8, lsl #14
   e05ac:	945d      	str	r4, [sp, #372]	; 0x174
   e05ae:	ea85 0501 	eor.w	r5, r5, r1
   e05b2:	ac5a      	add	r4, sp, #360	; 0x168
   e05b4:	eb45 010b 	adc.w	r1, r5, fp
   e05b8:	e9d4 ab00 	ldrd	sl, fp, [r4]
   e05bc:	ac5c      	add	r4, sp, #368	; 0x170
   e05be:	e9d4 4500 	ldrd	r4, r5, [r4]
   e05c2:	ea8a 0a04 	eor.w	sl, sl, r4
   e05c6:	ea4f 54c9 	mov.w	r4, r9, lsl #23
   e05ca:	ea44 2458 	orr.w	r4, r4, r8, lsr #9
   e05ce:	945f      	str	r4, [sp, #380]	; 0x17c
   e05d0:	ea4f 54c8 	mov.w	r4, r8, lsl #23
   e05d4:	ea44 2459 	orr.w	r4, r4, r9, lsr #9
   e05d8:	945e      	str	r4, [sp, #376]	; 0x178
   e05da:	ac5e      	add	r4, sp, #376	; 0x178
   e05dc:	ea8b 0b05 	eor.w	fp, fp, r5
   e05e0:	e9d4 4500 	ldrd	r4, r5, [r4]
   e05e4:	ea84 040a 	eor.w	r4, r4, sl
   e05e8:	eb14 0a00 	adds.w	sl, r4, r0
   e05ec:	ea85 050b 	eor.w	r5, r5, fp
   e05f0:	eb45 0b01 	adc.w	fp, r5, r1
   e05f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e05f8:	eb10 000a 	adds.w	r0, r0, sl
   e05fc:	eb41 010b 	adc.w	r1, r1, fp
   e0600:	e9cd 0106 	strd	r0, r1, [sp, #24]
   e0604:	9900      	ldr	r1, [sp, #0]
   e0606:	9801      	ldr	r0, [sp, #4]
   e0608:	0f09      	lsrs	r1, r1, #28
   e060a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e060e:	9160      	str	r1, [sp, #384]	; 0x180
   e0610:	0f01      	lsrs	r1, r0, #28
   e0612:	9800      	ldr	r0, [sp, #0]
   e0614:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e0618:	9161      	str	r1, [sp, #388]	; 0x184
   e061a:	9901      	ldr	r1, [sp, #4]
   e061c:	0789      	lsls	r1, r1, #30
   e061e:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e0622:	9163      	str	r1, [sp, #396]	; 0x18c
   e0624:	0781      	lsls	r1, r0, #30
   e0626:	9801      	ldr	r0, [sp, #4]
   e0628:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e062c:	9162      	str	r1, [sp, #392]	; 0x188
   e062e:	a960      	add	r1, sp, #384	; 0x180
   e0630:	e9d1 4500 	ldrd	r4, r5, [r1]
   e0634:	a962      	add	r1, sp, #392	; 0x188
   e0636:	e9d1 0100 	ldrd	r0, r1, [r1]
   e063a:	404d      	eors	r5, r1
   e063c:	9901      	ldr	r1, [sp, #4]
   e063e:	4044      	eors	r4, r0
   e0640:	9800      	ldr	r0, [sp, #0]
   e0642:	0649      	lsls	r1, r1, #25
   e0644:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e0648:	9165      	str	r1, [sp, #404]	; 0x194
   e064a:	0641      	lsls	r1, r0, #25
   e064c:	9801      	ldr	r0, [sp, #4]
   e064e:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e0652:	9164      	str	r1, [sp, #400]	; 0x190
   e0654:	a964      	add	r1, sp, #400	; 0x190
   e0656:	e9d1 0100 	ldrd	r0, r1, [r1]
   e065a:	4060      	eors	r0, r4
   e065c:	4069      	eors	r1, r5
   e065e:	e9dd 6700 	ldrd	r6, r7, [sp]
   e0662:	4604      	mov	r4, r0
   e0664:	460d      	mov	r5, r1
   e0666:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e066a:	4330      	orrs	r0, r6
   e066c:	4339      	orrs	r1, r7
   e066e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   e0672:	4006      	ands	r6, r0
   e0674:	400f      	ands	r7, r1
   e0676:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
   e067a:	e9dd 0100 	ldrd	r0, r1, [sp]
   e067e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   e0682:	4006      	ands	r6, r0
   e0684:	400f      	ands	r7, r1
   e0686:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e068a:	4330      	orrs	r0, r6
   e068c:	1900      	adds	r0, r0, r4
   e068e:	ea41 0107 	orr.w	r1, r1, r7
   e0692:	4169      	adcs	r1, r5
   e0694:	eb1a 0a00 	adds.w	sl, sl, r0
   e0698:	eb4b 0b01 	adc.w	fp, fp, r1
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
   e069c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
   e06a0:	e9d2 010a 	ldrd	r0, r1, [r2, #40]	; 0x28
   e06a4:	1900      	adds	r0, r0, r4
   e06a6:	4169      	adcs	r1, r5
   e06a8:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   e06ac:	1824      	adds	r4, r4, r0
   e06ae:	414d      	adcs	r5, r1
   e06b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e06b4:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   e06b8:	ea80 0008 	eor.w	r0, r0, r8
   e06bc:	ea81 0109 	eor.w	r1, r1, r9
   e06c0:	4006      	ands	r6, r0
   e06c2:	400f      	ands	r7, r1
   e06c4:	4630      	mov	r0, r6
   e06c6:	4639      	mov	r1, r7
   e06c8:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   e06cc:	4046      	eors	r6, r0
   e06ce:	19a0      	adds	r0, r4, r6
   e06d0:	ea87 0701 	eor.w	r7, r7, r1
   e06d4:	9c06      	ldr	r4, [sp, #24]
   e06d6:	eb45 0107 	adc.w	r1, r5, r7
   e06da:	9d07      	ldr	r5, [sp, #28]
   e06dc:	0ba4      	lsrs	r4, r4, #14
   e06de:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e06e2:	9466      	str	r4, [sp, #408]	; 0x198
   e06e4:	0bac      	lsrs	r4, r5, #14
   e06e6:	9d06      	ldr	r5, [sp, #24]
   e06e8:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e06ec:	9467      	str	r4, [sp, #412]	; 0x19c
   e06ee:	0cac      	lsrs	r4, r5, #18
   e06f0:	9d07      	ldr	r5, [sp, #28]
   e06f2:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e06f6:	9468      	str	r4, [sp, #416]	; 0x1a0
   e06f8:	0cac      	lsrs	r4, r5, #18
   e06fa:	9d06      	ldr	r5, [sp, #24]
   e06fc:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e0700:	9469      	str	r4, [sp, #420]	; 0x1a4
   e0702:	ae68      	add	r6, sp, #416	; 0x1a0
   e0704:	ac66      	add	r4, sp, #408	; 0x198
   e0706:	e9d6 6700 	ldrd	r6, r7, [r6]
   e070a:	e9d4 4500 	ldrd	r4, r5, [r4]
   e070e:	4074      	eors	r4, r6
   e0710:	9e07      	ldr	r6, [sp, #28]
   e0712:	407d      	eors	r5, r7
   e0714:	9f06      	ldr	r7, [sp, #24]
   e0716:	05f6      	lsls	r6, r6, #23
   e0718:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e071c:	966b      	str	r6, [sp, #428]	; 0x1ac
   e071e:	05fe      	lsls	r6, r7, #23
   e0720:	9f07      	ldr	r7, [sp, #28]
   e0722:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e0726:	966a      	str	r6, [sp, #424]	; 0x1a8
   e0728:	ae6a      	add	r6, sp, #424	; 0x1a8
   e072a:	e9d6 6700 	ldrd	r6, r7, [r6]
   e072e:	4066      	eors	r6, r4
   e0730:	1986      	adds	r6, r0, r6
   e0732:	ea87 0705 	eor.w	r7, r7, r5
   e0736:	eb41 0707 	adc.w	r7, r1, r7
   e073a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e073e:	1980      	adds	r0, r0, r6
   e0740:	4179      	adcs	r1, r7
   e0742:	e9cd 0108 	strd	r0, r1, [sp, #32]
   e0746:	ea4f 711a 	mov.w	r1, sl, lsr #28
   e074a:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
   e074e:	916c      	str	r1, [sp, #432]	; 0x1b0
   e0750:	ea4f 711b 	mov.w	r1, fp, lsr #28
   e0754:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
   e0758:	916d      	str	r1, [sp, #436]	; 0x1b4
   e075a:	ea4f 718b 	mov.w	r1, fp, lsl #30
   e075e:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
   e0762:	916f      	str	r1, [sp, #444]	; 0x1bc
   e0764:	ea4f 718a 	mov.w	r1, sl, lsl #30
   e0768:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
   e076c:	916e      	str	r1, [sp, #440]	; 0x1b8
   e076e:	a96c      	add	r1, sp, #432	; 0x1b0
   e0770:	e9d1 4500 	ldrd	r4, r5, [r1]
   e0774:	a96e      	add	r1, sp, #440	; 0x1b8
   e0776:	e9d1 0100 	ldrd	r0, r1, [r1]
   e077a:	404d      	eors	r5, r1
   e077c:	ea4f 614b 	mov.w	r1, fp, lsl #25
   e0780:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
   e0784:	9171      	str	r1, [sp, #452]	; 0x1c4
   e0786:	ea4f 614a 	mov.w	r1, sl, lsl #25
   e078a:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
   e078e:	9170      	str	r1, [sp, #448]	; 0x1c0
   e0790:	a970      	add	r1, sp, #448	; 0x1c0
   e0792:	4044      	eors	r4, r0
   e0794:	e9d1 0100 	ldrd	r0, r1, [r1]
   e0798:	4060      	eors	r0, r4
   e079a:	4069      	eors	r1, r5
   e079c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e07a0:	e9dd 0100 	ldrd	r0, r1, [sp]
   e07a4:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   e07a8:	ea40 000a 	orr.w	r0, r0, sl
   e07ac:	ea41 010b 	orr.w	r1, r1, fp
   e07b0:	4004      	ands	r4, r0
   e07b2:	400d      	ands	r5, r1
   e07b4:	4620      	mov	r0, r4
   e07b6:	4629      	mov	r1, r5
   e07b8:	e9dd 4500 	ldrd	r4, r5, [sp]
   e07bc:	ea04 040a 	and.w	r4, r4, sl
   e07c0:	ea05 050b 	and.w	r5, r5, fp
   e07c4:	4304      	orrs	r4, r0
   e07c6:	430d      	orrs	r5, r1
   e07c8:	4620      	mov	r0, r4
   e07ca:	4629      	mov	r1, r5
   e07cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   e07d0:	1824      	adds	r4, r4, r0
   e07d2:	414d      	adcs	r5, r1
   e07d4:	19a4      	adds	r4, r4, r6
   e07d6:	417d      	adcs	r5, r7
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
   e07d8:	e9d2 010c 	ldrd	r0, r1, [r2, #48]	; 0x30
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
   e07dc:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
   e07e0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
   e07e4:	1900      	adds	r0, r0, r4
   e07e6:	4169      	adcs	r1, r5
   e07e8:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
   e07ec:	1824      	adds	r4, r4, r0
   e07ee:	414d      	adcs	r5, r1
   e07f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e07f4:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   e07f8:	ea80 0008 	eor.w	r0, r0, r8
   e07fc:	ea81 0109 	eor.w	r1, r1, r9
   e0800:	4006      	ands	r6, r0
   e0802:	400f      	ands	r7, r1
   e0804:	ea86 0608 	eor.w	r6, r6, r8
   e0808:	19a0      	adds	r0, r4, r6
   e080a:	ea87 0709 	eor.w	r7, r7, r9
   e080e:	9c08      	ldr	r4, [sp, #32]
   e0810:	eb45 0107 	adc.w	r1, r5, r7
   e0814:	9d09      	ldr	r5, [sp, #36]	; 0x24
   e0816:	0ba4      	lsrs	r4, r4, #14
   e0818:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e081c:	9472      	str	r4, [sp, #456]	; 0x1c8
   e081e:	0bac      	lsrs	r4, r5, #14
   e0820:	9d08      	ldr	r5, [sp, #32]
   e0822:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e0826:	9473      	str	r4, [sp, #460]	; 0x1cc
   e0828:	0cac      	lsrs	r4, r5, #18
   e082a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   e082c:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e0830:	9474      	str	r4, [sp, #464]	; 0x1d0
   e0832:	0cac      	lsrs	r4, r5, #18
   e0834:	9d08      	ldr	r5, [sp, #32]
   e0836:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e083a:	9475      	str	r4, [sp, #468]	; 0x1d4
   e083c:	ae74      	add	r6, sp, #464	; 0x1d0
   e083e:	ac72      	add	r4, sp, #456	; 0x1c8
   e0840:	e9d6 6700 	ldrd	r6, r7, [r6]
   e0844:	e9d4 4500 	ldrd	r4, r5, [r4]
   e0848:	4074      	eors	r4, r6
   e084a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   e084c:	407d      	eors	r5, r7
   e084e:	9f08      	ldr	r7, [sp, #32]
   e0850:	05f6      	lsls	r6, r6, #23
   e0852:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e0856:	9677      	str	r6, [sp, #476]	; 0x1dc
   e0858:	05fe      	lsls	r6, r7, #23
   e085a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   e085c:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e0860:	9676      	str	r6, [sp, #472]	; 0x1d8
   e0862:	ae76      	add	r6, sp, #472	; 0x1d8
   e0864:	e9d6 6700 	ldrd	r6, r7, [r6]
   e0868:	4066      	eors	r6, r4
   e086a:	1986      	adds	r6, r0, r6
   e086c:	ea87 0705 	eor.w	r7, r7, r5
   e0870:	eb41 0707 	adc.w	r7, r1, r7
   e0874:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0878:	1980      	adds	r0, r0, r6
   e087a:	4179      	adcs	r1, r7
   e087c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   e0880:	9902      	ldr	r1, [sp, #8]
   e0882:	9803      	ldr	r0, [sp, #12]
   e0884:	0f09      	lsrs	r1, r1, #28
   e0886:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e088a:	9178      	str	r1, [sp, #480]	; 0x1e0
   e088c:	0f01      	lsrs	r1, r0, #28
   e088e:	9802      	ldr	r0, [sp, #8]
   e0890:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e0894:	9179      	str	r1, [sp, #484]	; 0x1e4
   e0896:	9903      	ldr	r1, [sp, #12]
   e0898:	0789      	lsls	r1, r1, #30
   e089a:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e089e:	917b      	str	r1, [sp, #492]	; 0x1ec
   e08a0:	0781      	lsls	r1, r0, #30
   e08a2:	9803      	ldr	r0, [sp, #12]
   e08a4:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e08a8:	917a      	str	r1, [sp, #488]	; 0x1e8
   e08aa:	a978      	add	r1, sp, #480	; 0x1e0
   e08ac:	e9d1 4500 	ldrd	r4, r5, [r1]
   e08b0:	a97a      	add	r1, sp, #488	; 0x1e8
   e08b2:	e9d1 0100 	ldrd	r0, r1, [r1]
   e08b6:	404d      	eors	r5, r1
   e08b8:	9903      	ldr	r1, [sp, #12]
   e08ba:	4044      	eors	r4, r0
   e08bc:	9802      	ldr	r0, [sp, #8]
   e08be:	0649      	lsls	r1, r1, #25
   e08c0:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e08c4:	917d      	str	r1, [sp, #500]	; 0x1f4
   e08c6:	0641      	lsls	r1, r0, #25
   e08c8:	9803      	ldr	r0, [sp, #12]
   e08ca:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e08ce:	917c      	str	r1, [sp, #496]	; 0x1f0
   e08d0:	a97c      	add	r1, sp, #496	; 0x1f0
   e08d2:	e9d1 0100 	ldrd	r0, r1, [r1]
   e08d6:	4060      	eors	r0, r4
   e08d8:	4069      	eors	r1, r5
   e08da:	e9cd 0104 	strd	r0, r1, [sp, #16]
   e08de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e08e2:	e9dd 4500 	ldrd	r4, r5, [sp]
   e08e6:	ea40 000a 	orr.w	r0, r0, sl
   e08ea:	ea41 010b 	orr.w	r1, r1, fp
   e08ee:	4004      	ands	r4, r0
   e08f0:	400d      	ands	r5, r1
   e08f2:	4620      	mov	r0, r4
   e08f4:	4629      	mov	r1, r5
   e08f6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   e08fa:	ea04 040a 	and.w	r4, r4, sl
   e08fe:	ea05 050b 	and.w	r5, r5, fp
   e0902:	4304      	orrs	r4, r0
   e0904:	430d      	orrs	r5, r1
   e0906:	4620      	mov	r0, r4
   e0908:	4629      	mov	r1, r5
   e090a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   e090e:	1824      	adds	r4, r4, r0
   e0910:	414d      	adcs	r5, r1
   e0912:	3340      	adds	r3, #64	; 0x40
   e0914:	19a4      	adds	r4, r4, r6
   e0916:	417d      	adcs	r5, r7
    }
    while( i < 80 );
   e0918:	459c      	cmp	ip, r3
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
   e091a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   e091e:	f102 0240 	add.w	r2, r2, #64	; 0x40
    }
    while( i < 80 );
   e0922:	f47f aaeb 	bne.w	dfefc <mbedtls_internal_sha512_process+0x1fc>

    ctx->state[0] += A;
   e0926:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   e092a:	4623      	mov	r3, r4
   e092c:	18c0      	adds	r0, r0, r3
   e092e:	4169      	adcs	r1, r5
    ctx->state[1] += B;
   e0930:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
    }
    while( i < 80 );

    ctx->state[0] += A;
   e0934:	e9ce 0104 	strd	r0, r1, [lr, #16]
    ctx->state[1] += B;
   e0938:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   e093c:	18c0      	adds	r0, r0, r3
   e093e:	4161      	adcs	r1, r4
    ctx->state[2] += C;
   e0940:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
   e0944:	eb13 030a 	adds.w	r3, r3, sl
   e0948:	eb44 040b 	adc.w	r4, r4, fp
   e094c:	469a      	mov	sl, r3
   e094e:	46a3      	mov	fp, r4
    ctx->state[3] += D;
   e0950:	e9dd 2300 	ldrd	r2, r3, [sp]
   e0954:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   e0958:	18a4      	adds	r4, r4, r2
   e095a:	415d      	adcs	r5, r3
   e095c:	e9ce 450a 	strd	r4, r5, [lr, #40]	; 0x28
    ctx->state[4] += E;
   e0960:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e0964:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   e0968:	18a4      	adds	r4, r4, r2
   e096a:	415d      	adcs	r5, r3
   e096c:	e9ce 450c 	strd	r4, r5, [lr, #48]	; 0x30
    ctx->state[5] += F;
   e0970:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e0974:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
   e0978:	18a4      	adds	r4, r4, r2
   e097a:	415d      	adcs	r5, r3
   e097c:	e9ce 450e 	strd	r4, r5, [lr, #56]	; 0x38
    ctx->state[6] += G;
   e0980:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e0984:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
   e0988:	e9ce 0106 	strd	r0, r1, [lr, #24]
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;
   e098c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
   e0990:	18a4      	adds	r4, r4, r2
   e0992:	415d      	adcs	r5, r3
    ctx->state[7] += H;
   e0994:	eb10 0008 	adds.w	r0, r0, r8
   e0998:	eb41 0109 	adc.w	r1, r1, r9
   e099c:	e9ce 0112 	strd	r0, r1, [lr, #72]	; 0x48

    return( 0 );
}
   e09a0:	2000      	movs	r0, #0
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
   e09a2:	e9ce ab08 	strd	sl, fp, [lr, #32]
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
   e09a6:	e9ce 4510 	strd	r4, r5, [lr, #64]	; 0x40
    ctx->state[7] += H;

    return( 0 );
}
   e09aa:	f20d 4d7c 	addw	sp, sp, #1148	; 0x47c
   e09ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e09b2:	bf00      	nop

000e09b4 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   e09b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e09b8:	4604      	mov	r4, r0
   e09ba:	460e      	mov	r6, r1
    unsigned int left;

    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
   e09bc:	4615      	mov	r5, r2
   e09be:	2a00      	cmp	r2, #0
   e09c0:	d03d      	beq.n	e0a3e <mbedtls_sha512_update_ret+0x8a>
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
   e09c2:	e9d0 2300 	ldrd	r2, r3, [r0]
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
   e09c6:	f04f 0900 	mov.w	r9, #0
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
   e09ca:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
   e09ce:	1952      	adds	r2, r2, r5
   e09d0:	eb43 0309 	adc.w	r3, r3, r9

    if( ctx->total[0] < (uint64_t) ilen )
   e09d4:	454b      	cmp	r3, r9
   e09d6:	bf08      	it	eq
   e09d8:	42aa      	cmpeq	r2, r5
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
   e09da:	e9c4 2300 	strd	r2, r3, [r4]

    if( ctx->total[0] < (uint64_t) ilen )
   e09de:	d206      	bcs.n	e09ee <mbedtls_sha512_update_ret+0x3a>
        ctx->total[1]++;
   e09e0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   e09e4:	3201      	adds	r2, #1
   e09e6:	f143 0300 	adc.w	r3, r3, #0
   e09ea:	e9c4 2302 	strd	r2, r3, [r4, #8]

    if( left && ilen >= fill )
   e09ee:	b188      	cbz	r0, e0a14 <mbedtls_sha512_update_ret+0x60>

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;
   e09f0:	f1c0 0780 	rsb	r7, r0, #128	; 0x80
    ctx->total[0] += (uint64_t) ilen;

    if( ctx->total[0] < (uint64_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
   e09f4:	42bd      	cmp	r5, r7
   e09f6:	d31c      	bcc.n	e0a32 <mbedtls_sha512_update_ret+0x7e>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
   e09f8:	f104 0850 	add.w	r8, r4, #80	; 0x50
   e09fc:	4631      	mov	r1, r6
   e09fe:	463a      	mov	r2, r7
   e0a00:	4440      	add	r0, r8
   e0a02:	f007 fa30 	bl	e7e66 <memcpy>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   e0a06:	4641      	mov	r1, r8
   e0a08:	4620      	mov	r0, r4
   e0a0a:	f7ff f979 	bl	dfd00 <mbedtls_internal_sha512_process>
   e0a0e:	b9b8      	cbnz	r0, e0a40 <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += fill;
   e0a10:	443e      	add	r6, r7
        ilen  -= fill;
   e0a12:	1bed      	subs	r5, r5, r7
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   e0a14:	462f      	mov	r7, r5
   e0a16:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 128 )
   e0a18:	2f7f      	cmp	r7, #127	; 0x7f
   e0a1a:	4431      	add	r1, r6
   e0a1c:	d905      	bls.n	e0a2a <mbedtls_sha512_update_ret+0x76>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
   e0a1e:	4620      	mov	r0, r4
   e0a20:	f7ff f96e 	bl	dfd00 <mbedtls_internal_sha512_process>
   e0a24:	b960      	cbnz	r0, e0a40 <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += 128;
        ilen  -= 128;
   e0a26:	3f80      	subs	r7, #128	; 0x80
   e0a28:	e7f5      	b.n	e0a16 <mbedtls_sha512_update_ret+0x62>
    }

    if( ilen > 0 )
   e0a2a:	b147      	cbz	r7, e0a3e <mbedtls_sha512_update_ret+0x8a>
   e0a2c:	463d      	mov	r5, r7
   e0a2e:	460e      	mov	r6, r1
   e0a30:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   e0a32:	3450      	adds	r4, #80	; 0x50
   e0a34:	462a      	mov	r2, r5
   e0a36:	4631      	mov	r1, r6
   e0a38:	4420      	add	r0, r4
   e0a3a:	f007 fa14 	bl	e7e66 <memcpy>

    return( 0 );
   e0a3e:	2000      	movs	r0, #0
}
   e0a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e0a44 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
   e0a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
   e0a46:	6803      	ldr	r3, [r0, #0]
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
   e0a48:	4604      	mov	r4, r0
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
   e0a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f

    ctx->buffer[used++] = 0x80;
   e0a4e:	1c58      	adds	r0, r3, #1
   e0a50:	4423      	add	r3, r4
   e0a52:	2280      	movs	r2, #128	; 0x80

    if( used <= 112 )
   e0a54:	2870      	cmp	r0, #112	; 0x70
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
   e0a56:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
   e0a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   e0a5c:	f104 0650 	add.w	r6, r4, #80	; 0x50

    if( used <= 112 )
   e0a60:	d804      	bhi.n	e0a6c <mbedtls_sha512_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
   e0a62:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
   e0a66:	2100      	movs	r1, #0
   e0a68:	4430      	add	r0, r6
   e0a6a:	e00f      	b.n	e0a8c <mbedtls_sha512_finish_ret+0x48>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 128 - used );
   e0a6c:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
   e0a70:	2100      	movs	r1, #0
   e0a72:	4430      	add	r0, r6
   e0a74:	f007 fa1d 	bl	e7eb2 <memset>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   e0a78:	4631      	mov	r1, r6
   e0a7a:	4620      	mov	r0, r4
   e0a7c:	f7ff f940 	bl	dfd00 <mbedtls_internal_sha512_process>
   e0a80:	2800      	cmp	r0, #0
   e0a82:	f040 810e 	bne.w	e0ca2 <mbedtls_sha512_finish_ret+0x25e>
            return( ret );

        memset( ctx->buffer, 0, 112 );
   e0a86:	4601      	mov	r1, r0
   e0a88:	2270      	movs	r2, #112	; 0x70
   e0a8a:	4630      	mov	r0, r6
   e0a8c:	f007 fa11 	bl	e7eb2 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
   e0a90:	68e3      	ldr	r3, [r4, #12]
   e0a92:	68a2      	ldr	r2, [r4, #8]
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
   e0a94:	e894 4080 	ldmia.w	r4, {r7, lr}
         | ( ctx->total[1] <<  3 );
   e0a98:	00d9      	lsls	r1, r3, #3
   e0a9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
   e0a9e:	2300      	movs	r3, #0
   e0aa0:	4319      	orrs	r1, r3
   e0aa2:	00d0      	lsls	r0, r2, #3
   e0aa4:	ea4f 725e 	mov.w	r2, lr, lsr #29
   e0aa8:	4310      	orrs	r0, r2
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
   e0aaa:	0e0a      	lsrs	r2, r1, #24
   e0aac:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
   e0ab0:	0c0a      	lsrs	r2, r1, #16
   e0ab2:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
   e0ab6:	0a0a      	lsrs	r2, r1, #8
   e0ab8:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
   e0abc:	0e02      	lsrs	r2, r0, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
   e0abe:	ea4f 03ce 	mov.w	r3, lr, lsl #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
   e0ac2:	f884 20c4 	strb.w	r2, [r4, #196]	; 0xc4
   e0ac6:	0c02      	lsrs	r2, r0, #16
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
   e0ac8:	ea43 7357 	orr.w	r3, r3, r7, lsr #29

    PUT_UINT64_BE( high, ctx->buffer, 112 );
   e0acc:	f884 20c5 	strb.w	r2, [r4, #197]	; 0xc5
   e0ad0:	0a02      	lsrs	r2, r0, #8
   e0ad2:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
   e0ad6:	0e1a      	lsrs	r2, r3, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
   e0ad8:	00ff      	lsls	r7, r7, #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
   e0ada:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
   e0ade:	0c1a      	lsrs	r2, r3, #16
   e0ae0:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
   e0ae4:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
   e0ae8:	0a1a      	lsrs	r2, r3, #8
   e0aea:	0e3b      	lsrs	r3, r7, #24
   e0aec:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
   e0af0:	0c3b      	lsrs	r3, r7, #16
   e0af2:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
   e0af6:	0a3b      	lsrs	r3, r7, #8
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
   e0af8:	f884 10c3 	strb.w	r1, [r4, #195]	; 0xc3
   e0afc:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
   e0b00:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
   e0b04:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
   e0b08:	f884 70cf 	strb.w	r7, [r4, #207]	; 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   e0b0c:	4631      	mov	r1, r6
   e0b0e:	4620      	mov	r0, r4
   e0b10:	f7ff f8f6 	bl	dfd00 <mbedtls_internal_sha512_process>
   e0b14:	2800      	cmp	r0, #0
   e0b16:	f040 80c4 	bne.w	e0ca2 <mbedtls_sha512_finish_ret+0x25e>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
   e0b1a:	7de3      	ldrb	r3, [r4, #23]
   e0b1c:	702b      	strb	r3, [r5, #0]
   e0b1e:	8ae3      	ldrh	r3, [r4, #22]
   e0b20:	706b      	strb	r3, [r5, #1]
   e0b22:	6963      	ldr	r3, [r4, #20]
   e0b24:	0a1b      	lsrs	r3, r3, #8
   e0b26:	70ab      	strb	r3, [r5, #2]
   e0b28:	6963      	ldr	r3, [r4, #20]
   e0b2a:	70eb      	strb	r3, [r5, #3]
   e0b2c:	7ce3      	ldrb	r3, [r4, #19]
   e0b2e:	712b      	strb	r3, [r5, #4]
   e0b30:	8a63      	ldrh	r3, [r4, #18]
   e0b32:	716b      	strb	r3, [r5, #5]
   e0b34:	6923      	ldr	r3, [r4, #16]
   e0b36:	0a1b      	lsrs	r3, r3, #8
   e0b38:	71ab      	strb	r3, [r5, #6]
   e0b3a:	6923      	ldr	r3, [r4, #16]
   e0b3c:	71eb      	strb	r3, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
   e0b3e:	7fe3      	ldrb	r3, [r4, #31]
   e0b40:	722b      	strb	r3, [r5, #8]
   e0b42:	8be3      	ldrh	r3, [r4, #30]
   e0b44:	726b      	strb	r3, [r5, #9]
   e0b46:	69e3      	ldr	r3, [r4, #28]
   e0b48:	0a1b      	lsrs	r3, r3, #8
   e0b4a:	72ab      	strb	r3, [r5, #10]
   e0b4c:	69e3      	ldr	r3, [r4, #28]
   e0b4e:	72eb      	strb	r3, [r5, #11]
   e0b50:	7ee3      	ldrb	r3, [r4, #27]
   e0b52:	732b      	strb	r3, [r5, #12]
   e0b54:	8b63      	ldrh	r3, [r4, #26]
   e0b56:	736b      	strb	r3, [r5, #13]
   e0b58:	69a3      	ldr	r3, [r4, #24]
   e0b5a:	0a1b      	lsrs	r3, r3, #8
   e0b5c:	73ab      	strb	r3, [r5, #14]
   e0b5e:	69a3      	ldr	r3, [r4, #24]
   e0b60:	73eb      	strb	r3, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
   e0b62:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   e0b66:	742b      	strb	r3, [r5, #16]
   e0b68:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   e0b6a:	746b      	strb	r3, [r5, #17]
   e0b6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e0b6e:	0a1b      	lsrs	r3, r3, #8
   e0b70:	74ab      	strb	r3, [r5, #18]
   e0b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e0b74:	74eb      	strb	r3, [r5, #19]
   e0b76:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   e0b7a:	752b      	strb	r3, [r5, #20]
   e0b7c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   e0b7e:	756b      	strb	r3, [r5, #21]
   e0b80:	6a23      	ldr	r3, [r4, #32]
   e0b82:	0a1b      	lsrs	r3, r3, #8
   e0b84:	75ab      	strb	r3, [r5, #22]
   e0b86:	6a23      	ldr	r3, [r4, #32]
   e0b88:	75eb      	strb	r3, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
   e0b8a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   e0b8e:	762b      	strb	r3, [r5, #24]
   e0b90:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   e0b92:	766b      	strb	r3, [r5, #25]
   e0b94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e0b96:	0a1b      	lsrs	r3, r3, #8
   e0b98:	76ab      	strb	r3, [r5, #26]
   e0b9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e0b9c:	76eb      	strb	r3, [r5, #27]
   e0b9e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   e0ba2:	772b      	strb	r3, [r5, #28]
   e0ba4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   e0ba6:	776b      	strb	r3, [r5, #29]
   e0ba8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   e0baa:	0a1b      	lsrs	r3, r3, #8
   e0bac:	77ab      	strb	r3, [r5, #30]
   e0bae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   e0bb0:	77eb      	strb	r3, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
   e0bb2:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   e0bb6:	f885 3020 	strb.w	r3, [r5, #32]
   e0bba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   e0bbc:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
   e0bc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   e0bc2:	0a1b      	lsrs	r3, r3, #8
   e0bc4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   e0bc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   e0bca:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
   e0bce:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   e0bd2:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
   e0bd6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   e0bd8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
   e0bdc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e0bde:	0a1b      	lsrs	r3, r3, #8
   e0be0:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
   e0be4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e0be6:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
   e0bea:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   e0bee:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
   e0bf2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   e0bf4:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
   e0bf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e0bfa:	0a1b      	lsrs	r3, r3, #8
   e0bfc:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
   e0c00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e0c02:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
   e0c06:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   e0c0a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
   e0c0e:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
   e0c10:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
   e0c14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e0c16:	0a1b      	lsrs	r3, r3, #8
   e0c18:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
   e0c1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e0c1e:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
   e0c22:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   e0c26:	2b00      	cmp	r3, #0
   e0c28:	d13b      	bne.n	e0ca2 <mbedtls_sha512_finish_ret+0x25e>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
   e0c2a:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   e0c2e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
   e0c32:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   e0c36:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
   e0c3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   e0c3c:	0a1b      	lsrs	r3, r3, #8
   e0c3e:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
   e0c42:	6c63      	ldr	r3, [r4, #68]	; 0x44
   e0c44:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
   e0c48:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   e0c4c:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
   e0c50:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   e0c54:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
   e0c58:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e0c5a:	0a1b      	lsrs	r3, r3, #8
   e0c5c:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
   e0c60:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e0c62:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
   e0c66:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
   e0c6a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
   e0c6e:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
   e0c72:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   e0c76:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   e0c78:	0a1b      	lsrs	r3, r3, #8
   e0c7a:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
   e0c7e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   e0c80:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
   e0c84:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
   e0c88:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   e0c8c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   e0c90:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
   e0c94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   e0c96:	0a1b      	lsrs	r3, r3, #8
   e0c98:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
   e0c9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   e0c9e:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
    }

    return( 0 );
}
   e0ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e0ca4 <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
   e0ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   e0ca6:	b0b7      	sub	sp, #220	; 0xdc
   e0ca8:	461c      	mov	r4, r3
   e0caa:	4606      	mov	r6, r0

    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
   e0cac:	4668      	mov	r0, sp
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
   e0cae:	460f      	mov	r7, r1
   e0cb0:	4615      	mov	r5, r2

    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
   e0cb2:	f7fe ff7a 	bl	dfbaa <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
   e0cb6:	4621      	mov	r1, r4
   e0cb8:	4668      	mov	r0, sp
   e0cba:	f7fe ff85 	bl	dfbc8 <mbedtls_sha512_starts_ret>
   e0cbe:	4604      	mov	r4, r0
   e0cc0:	b958      	cbnz	r0, e0cda <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
   e0cc2:	463a      	mov	r2, r7
   e0cc4:	4631      	mov	r1, r6
   e0cc6:	4668      	mov	r0, sp
   e0cc8:	f7ff fe74 	bl	e09b4 <mbedtls_sha512_update_ret>
   e0ccc:	4604      	mov	r4, r0
   e0cce:	b920      	cbnz	r0, e0cda <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
   e0cd0:	4629      	mov	r1, r5
   e0cd2:	4668      	mov	r0, sp
   e0cd4:	f7ff feb6 	bl	e0a44 <mbedtls_sha512_finish_ret>
   e0cd8:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha512_free( &ctx );
   e0cda:	4668      	mov	r0, sp
   e0cdc:	f7fe ff69 	bl	dfbb2 <mbedtls_sha512_free>

    return( ret );
}
   e0ce0:	4620      	mov	r0, r4
   e0ce2:	b037      	add	sp, #220	; 0xdc
   e0ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000e0ce8 <mbedtls_ssl_ciphersuite_from_id>:
    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
   e0ce8:	4b05      	ldr	r3, [pc, #20]	; (e0d00 <mbedtls_ssl_ciphersuite_from_id+0x18>)

    while( cur->id != 0 )
   e0cea:	681a      	ldr	r2, [r3, #0]
   e0cec:	b11a      	cbz	r2, e0cf6 <mbedtls_ssl_ciphersuite_from_id+0xe>
    {
        if( cur->id == ciphersuite )
   e0cee:	4282      	cmp	r2, r0
   e0cf0:	d003      	beq.n	e0cfa <mbedtls_ssl_ciphersuite_from_id+0x12>
            return( cur );

        cur++;
   e0cf2:	3320      	adds	r3, #32

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;

    while( cur->id != 0 )
   e0cf4:	e7f9      	b.n	e0cea <mbedtls_ssl_ciphersuite_from_id+0x2>
            return( cur );

        cur++;
    }

    return( NULL );
   e0cf6:	4610      	mov	r0, r2
   e0cf8:	4770      	bx	lr
   e0cfa:	4618      	mov	r0, r3
}
   e0cfc:	4770      	bx	lr
   e0cfe:	bf00      	nop
   e0d00:	000e9c10 	.word	0x000e9c10

000e0d04 <mbedtls_ssl_list_ciphersuites>:

    return( 0 );
}

const int *mbedtls_ssl_list_ciphersuites( void )
{
   e0d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /*
     * On initial call filter out all ciphersuites not supported by current
     * build based on presence in the ciphersuite_definitions.
     */
    if( supported_init == 0 )
   e0d06:	4b0f      	ldr	r3, [pc, #60]	; (e0d44 <mbedtls_ssl_list_ciphersuites+0x40>)
   e0d08:	681a      	ldr	r2, [r3, #0]
   e0d0a:	461c      	mov	r4, r3
   e0d0c:	b9ba      	cbnz	r2, e0d3e <mbedtls_ssl_list_ciphersuites+0x3a>
   e0d0e:	490e      	ldr	r1, [pc, #56]	; (e0d48 <mbedtls_ssl_list_ciphersuites+0x44>)
   e0d10:	4e0e      	ldr	r6, [pc, #56]	; (e0d4c <mbedtls_ssl_list_ciphersuites+0x48>)
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
   e0d12:	f101 0720 	add.w	r7, r1, #32
   e0d16:	f856 5f04 	ldr.w	r5, [r6, #4]!
   e0d1a:	b165      	cbz	r5, e0d36 <mbedtls_ssl_list_ciphersuites+0x32>
   e0d1c:	42b9      	cmp	r1, r7
   e0d1e:	d20a      	bcs.n	e0d36 <mbedtls_ssl_list_ciphersuites+0x32>
             p++ )
        {
            const mbedtls_ssl_ciphersuite_t *cs_info;
            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&
   e0d20:	4628      	mov	r0, r5
   e0d22:	f7ff ffe1 	bl	e0ce8 <mbedtls_ssl_ciphersuite_from_id>
   e0d26:	2800      	cmp	r0, #0
   e0d28:	d0f5      	beq.n	e0d16 <mbedtls_ssl_list_ciphersuites+0x12>
   e0d2a:	7a03      	ldrb	r3, [r0, #8]
   e0d2c:	2b2a      	cmp	r3, #42	; 0x2a
   e0d2e:	d0f2      	beq.n	e0d16 <mbedtls_ssl_list_ciphersuites+0x12>
                !ciphersuite_is_removed( cs_info ) )
            {
                *(q++) = *p;
   e0d30:	600d      	str	r5, [r1, #0]
   e0d32:	3104      	adds	r1, #4
    if( supported_init == 0 )
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
   e0d34:	e7ef      	b.n	e0d16 <mbedtls_ssl_list_ciphersuites+0x12>
                !ciphersuite_is_removed( cs_info ) )
            {
                *(q++) = *p;
            }
        }
        *q = 0;
   e0d36:	2300      	movs	r3, #0
   e0d38:	600b      	str	r3, [r1, #0]

        supported_init = 1;
   e0d3a:	2301      	movs	r3, #1
   e0d3c:	6023      	str	r3, [r4, #0]
    }

    return( supported_ciphersuites );
}
   e0d3e:	4802      	ldr	r0, [pc, #8]	; (e0d48 <mbedtls_ssl_list_ciphersuites+0x44>)
   e0d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e0d42:	bf00      	nop
   e0d44:	2003e3a4 	.word	0x2003e3a4
   e0d48:	2003e3a8 	.word	0x2003e3a8
   e0d4c:	000e9d2c 	.word	0x000e9d2c

000e0d50 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>:
}

#if defined(MBEDTLS_PK_C)
mbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_pk_alg( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
   e0d50:	7a83      	ldrb	r3, [r0, #10]
   e0d52:	2b0a      	cmp	r3, #10
   e0d54:	d80e      	bhi.n	e0d74 <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x24>
   e0d56:	2001      	movs	r0, #1
   e0d58:	fa00 f303 	lsl.w	r3, r0, r3
   e0d5c:	f013 0f8e 	tst.w	r3, #142	; 0x8e
   e0d60:	d10b      	bne.n	e0d7a <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x2a>
   e0d62:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   e0d66:	d107      	bne.n	e0d78 <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x28>
   e0d68:	f013 0f10 	tst.w	r3, #16
        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
        case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
            return( MBEDTLS_PK_RSA );

        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( MBEDTLS_PK_ECDSA );
   e0d6c:	bf0c      	ite	eq
   e0d6e:	2000      	moveq	r0, #0
   e0d70:	2004      	movne	r0, #4
   e0d72:	4770      	bx	lr
        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
            return( MBEDTLS_PK_ECKEY );

        default:
            return( MBEDTLS_PK_NONE );
   e0d74:	2000      	movs	r0, #0
   e0d76:	4770      	bx	lr
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( MBEDTLS_PK_ECDSA );

        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
            return( MBEDTLS_PK_ECKEY );
   e0d78:	2002      	movs	r0, #2

        default:
            return( MBEDTLS_PK_NONE );
    }
}
   e0d7a:	4770      	bx	lr

000e0d7c <mbedtls_ssl_ciphersuite_uses_ec>:

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
int mbedtls_ssl_ciphersuite_uses_ec( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
   e0d7c:	7a82      	ldrb	r2, [r0, #10]
   e0d7e:	2a0b      	cmp	r2, #11
   e0d80:	d808      	bhi.n	e0d94 <mbedtls_ssl_ciphersuite_uses_ec+0x18>
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
        case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:
        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
        case MBEDTLS_KEY_EXCHANGE_ECJPAKE:
            return( 1 );
   e0d82:	2301      	movs	r3, #1
   e0d84:	4093      	lsls	r3, r2
   e0d86:	f640 7018 	movw	r0, #3864	; 0xf18
   e0d8a:	4018      	ands	r0, r3
   e0d8c:	3000      	adds	r0, #0
   e0d8e:	bf18      	it	ne
   e0d90:	2001      	movne	r0, #1
   e0d92:	4770      	bx	lr

        default:
            return( 0 );
   e0d94:	2000      	movs	r0, #0
    }
}
   e0d96:	4770      	bx	lr

000e0d98 <mbedtls_ssl_ciphersuite_uses_psk>:
#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C || MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED*/

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
int mbedtls_ssl_ciphersuite_uses_psk( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
   e0d98:	7a80      	ldrb	r0, [r0, #10]
   e0d9a:	3805      	subs	r0, #5
            return( 1 );

        default:
            return( 0 );
    }
}
   e0d9c:	2803      	cmp	r0, #3
   e0d9e:	bf8c      	ite	hi
   e0da0:	2000      	movhi	r0, #0
   e0da2:	2001      	movls	r0, #1
   e0da4:	4770      	bx	lr

000e0da6 <mbedtls_ssl_own_key>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
   e0da6:	6b03      	ldr	r3, [r0, #48]	; 0x30
   e0da8:	b113      	cbz	r3, e0db0 <mbedtls_ssl_own_key+0xa>
   e0daa:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   e0dae:	b913      	cbnz	r3, e0db6 <mbedtls_ssl_own_key+0x10>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
   e0db0:	6803      	ldr	r3, [r0, #0]
   e0db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50

    return( key_cert == NULL ? NULL : key_cert->key );
   e0db4:	b10b      	cbz	r3, e0dba <mbedtls_ssl_own_key+0x14>
   e0db6:	6858      	ldr	r0, [r3, #4]
   e0db8:	4770      	bx	lr
   e0dba:	4618      	mov	r0, r3
}
   e0dbc:	4770      	bx	lr
	...

000e0dc0 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj>:
 * Generate a pre-master secret and encrypt it with the server's RSA key
 */
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
   e0dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e0dc4:	4617      	mov	r7, r2
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
   e0dc6:	68c2      	ldr	r2, [r0, #12]
    unsigned char *p = ssl->handshake->premaster + pms_offset;
   e0dc8:	6b05      	ldr	r5, [r0, #48]	; 0x30
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
   e0dca:	2a00      	cmp	r2, #0
   e0dcc:	bf0c      	ite	eq
   e0dce:	f04f 0800 	moveq.w	r8, #0
   e0dd2:	f04f 0802 	movne.w	r8, #2
    unsigned char *p = ssl->handshake->premaster + pms_offset;

    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e0dd6:	eb08 0901 	add.w	r9, r8, r1
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
   e0dda:	f505 753d 	add.w	r5, r5, #756	; 0x2f4

    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e0dde:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 * Generate a pre-master secret and encrypt it with the server's RSA key
 */
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
   e0de2:	b086      	sub	sp, #24
   e0de4:	4604      	mov	r4, r0
   e0de6:	460e      	mov	r6, r1
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
   e0de8:	441d      	add	r5, r3

    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e0dea:	d84d      	bhi.n	e0e88 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xc8>
     *  struct {
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
   e0dec:	6800      	ldr	r0, [r0, #0]
                       ssl->conf->transport, p );
   e0dee:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
   e0df2:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
   e0df6:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
   e0dfa:	462b      	mov	r3, r5
   e0dfc:	f3c2 0240 	ubfx	r2, r2, #1, #1
   e0e00:	f002 fc9e 	bl	e3740 <mbedtls_ssl_write_version>

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
   e0e04:	6823      	ldr	r3, [r4, #0]
   e0e06:	222e      	movs	r2, #46	; 0x2e
   e0e08:	f8d3 a018 	ldr.w	sl, [r3, #24]
   e0e0c:	69d8      	ldr	r0, [r3, #28]
   e0e0e:	1ca9      	adds	r1, r5, #2
   e0e10:	47d0      	blx	sl
   e0e12:	2800      	cmp	r0, #0
   e0e14:	d13d      	bne.n	e0e92 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
        return( ret );
    }

    ssl->handshake->pmslen = 48;
   e0e16:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e0e18:	2230      	movs	r2, #48	; 0x30
   e0e1a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0

    if( ssl->session_negotiate->peer_cert == NULL )
   e0e1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e0e20:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e0e22:	2800      	cmp	r0, #0
   e0e24:	d032      	beq.n	e0e8c <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xcc>
    }

    /*
     * Now write it out, encrypted
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
   e0e26:	2101      	movs	r1, #1
   e0e28:	30bc      	adds	r0, #188	; 0xbc
   e0e2a:	f7fa f967 	bl	db0fc <mbedtls_pk_can_do>
   e0e2e:	2800      	cmp	r0, #0
   e0e30:	d02e      	beq.n	e0e90 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd0>

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
                            p, ssl->handshake->pmslen,
                            ssl->out_msg + offset + len_bytes, olen,
                            MBEDTLS_SSL_OUT_CONTENT_LEN - offset - len_bytes,
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
   e0e32:	6822      	ldr	r2, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
    }

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
   e0e34:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e0e38:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e0e3a:	9305      	str	r3, [sp, #20]
   e0e3c:	69d3      	ldr	r3, [r2, #28]
   e0e3e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   e0e40:	9303      	str	r3, [sp, #12]
   e0e42:	6992      	ldr	r2, [r2, #24]
   e0e44:	9202      	str	r2, [sp, #8]
   e0e46:	f5c6 5200 	rsb	r2, r6, #8192	; 0x2000
   e0e4a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   e0e4c:	9b05      	ldr	r3, [sp, #20]
   e0e4e:	9700      	str	r7, [sp, #0]
   e0e50:	ebc8 0202 	rsb	r2, r8, r2
   e0e54:	9201      	str	r2, [sp, #4]
   e0e56:	f8d1 22b0 	ldr.w	r2, [r1, #688]	; 0x2b0
   e0e5a:	444b      	add	r3, r9
   e0e5c:	4629      	mov	r1, r5
   e0e5e:	30bc      	adds	r0, #188	; 0xbc
   e0e60:	f7fa f9be 	bl	db1e0 <mbedtls_pk_encrypt>
   e0e64:	b9a8      	cbnz	r0, e0e92 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
        return( ret );
    }

#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( len_bytes == 2 )
   e0e66:	f1b8 0f00 	cmp.w	r8, #0
   e0e6a:	d012      	beq.n	e0e92 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
    {
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
   e0e6c:	683b      	ldr	r3, [r7, #0]
   e0e6e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e0e72:	0a1b      	lsrs	r3, r3, #8
   e0e74:	5593      	strb	r3, [r2, r6]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
   e0e76:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e0e7a:	441e      	add	r6, r3
   e0e7c:	683b      	ldr	r3, [r7, #0]
   e0e7e:	7073      	strb	r3, [r6, #1]
        *olen += 2;
   e0e80:	683b      	ldr	r3, [r7, #0]
   e0e82:	3302      	adds	r3, #2
   e0e84:	603b      	str	r3, [r7, #0]
   e0e86:	e004      	b.n	e0e92 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
    unsigned char *p = ssl->handshake->premaster + pms_offset;

    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small for encrypted pms" ) );
        return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
   e0e88:	4803      	ldr	r0, [pc, #12]	; (e0e98 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd8>)
   e0e8a:	e002      	b.n	e0e92 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
    ssl->handshake->pmslen = 48;

    if( ssl->session_negotiate->peer_cert == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e0e8c:	4803      	ldr	r0, [pc, #12]	; (e0e9c <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xdc>)
   e0e8e:	e000      	b.n	e0e92 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
                MBEDTLS_PK_RSA ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
   e0e90:	4803      	ldr	r0, [pc, #12]	; (e0ea0 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xe0>)
        *olen += 2;
    }
#endif

    return( 0 );
}
   e0e92:	b006      	add	sp, #24
   e0e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e0e98:	ffff9600 	.word	0xffff9600
   e0e9c:	ffff8900 	.word	0xffff8900
   e0ea0:	ffff9300 	.word	0xffff9300

000e0ea4 <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
   e0ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
   e0ea8:	6843      	ldr	r3, [r0, #4]
   e0eaa:	2b10      	cmp	r3, #16

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
   e0eac:	b09f      	sub	sp, #124	; 0x7c
   e0eae:	4604      	mov	r4, r0
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
   e0eb0:	f000 808e 	beq.w	e0fd0 <mbedtls_ssl_handshake_client_step+0x12c>
   e0eb4:	6b03      	ldr	r3, [r0, #48]	; 0x30
   e0eb6:	2b00      	cmp	r3, #0
   e0eb8:	f000 808a 	beq.w	e0fd0 <mbedtls_ssl_handshake_client_step+0x12c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   e0ebc:	f001 fa6e 	bl	e239c <mbedtls_ssl_flush_output>
   e0ec0:	4605      	mov	r5, r0
   e0ec2:	2800      	cmp	r0, #0
   e0ec4:	f040 869e 	bne.w	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
   e0ec8:	6863      	ldr	r3, [r4, #4]
   e0eca:	2b0c      	cmp	r3, #12
   e0ecc:	d105      	bne.n	e0eda <mbedtls_ssl_handshake_client_step+0x36>
        ssl->handshake->new_session_ticket != 0 )
   e0ece:	6b23      	ldr	r3, [r4, #48]	; 0x30
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
   e0ed0:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
   e0ed4:	b10b      	cbz	r3, e0eda <mbedtls_ssl_handshake_client_step+0x36>
        ssl->handshake->new_session_ticket != 0 )
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
   e0ed6:	2311      	movs	r3, #17
   e0ed8:	6063      	str	r3, [r4, #4]
    }
#endif

    switch( ssl->state )
   e0eda:	6863      	ldr	r3, [r4, #4]
   e0edc:	2b11      	cmp	r3, #17
   e0ede:	d877      	bhi.n	e0fd0 <mbedtls_ssl_handshake_client_step+0x12c>
   e0ee0:	e8df f013 	tbh	[pc, r3, lsl #1]
   e0ee4:	00170012 	.word	0x00170012
   e0ee8:	00e20051 	.word	0x00e20051
   e0eec:	01bb00e8 	.word	0x01bb00e8
   e0ef0:	01ce01a2 	.word	0x01ce01a2
   e0ef4:	026101d2 	.word	0x026101d2
   e0ef8:	02e102dd 	.word	0x02e102dd
   e0efc:	030202fe 	.word	0x030202fe
   e0f00:	03080306 	.word	0x03080306
   e0f04:	02e50076 	.word	0x02e50076
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
   e0f08:	2201      	movs	r2, #1
   e0f0a:	6062      	str	r2, [r4, #4]
            break;
   e0f0c:	461d      	mov	r5, r3
   e0f0e:	f000 be79 	b.w	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
    int uses_ec = 0;
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
   e0f12:	6821      	ldr	r1, [r4, #0]
   e0f14:	698b      	ldr	r3, [r1, #24]
   e0f16:	2b00      	cmp	r3, #0
   e0f18:	f000 82f0 	beq.w	e14fc <mbedtls_ssl_handshake_client_step+0x658>

#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        ssl->major_ver = ssl->conf->min_major_ver;
   e0f1c:	f891 307a 	ldrb.w	r3, [r1, #122]	; 0x7a
   e0f20:	60a3      	str	r3, [r4, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
   e0f22:	f891 307b 	ldrb.w	r3, [r1, #123]	; 0x7b
   e0f26:	60e3      	str	r3, [r4, #12]
    }

    if( ssl->conf->max_major_ver == 0 )
   e0f28:	f891 0078 	ldrb.w	r0, [r1, #120]	; 0x78
   e0f2c:	2800      	cmp	r0, #0
   e0f2e:	d04f      	beq.n	e0fd0 <mbedtls_ssl_handshake_client_step+0x12c>
     */
    buf = ssl->out_msg;
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
   e0f30:	f891 207c 	ldrb.w	r2, [r1, #124]	; 0x7c
     *     1  .   3   handshake length
     *     4  .   5   highest version supported
     *     6  .   9   current UNIX time
     *    10  .  37   random bytes
     */
    buf = ssl->out_msg;
   e0f34:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
   e0f38:	f891 1079 	ldrb.w	r1, [r1, #121]	; 0x79
   e0f3c:	f109 0304 	add.w	r3, r9, #4
   e0f40:	f3c2 0240 	ubfx	r2, r2, #1, #1
   e0f44:	f002 fbfc 	bl	e3740 <mbedtls_ssl_write_version>
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
   e0f48:	6823      	ldr	r3, [r4, #0]
 * Generate random bytes for ClientHello
 */
static int ssl_generate_random( mbedtls_ssl_context *ssl )
{
    int ret;
    unsigned char *p = ssl->handshake->randbytes;
   e0f4a:	6b26      	ldr	r6, [r4, #48]	; 0x30
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
   e0f4c:	699d      	ldr	r5, [r3, #24]
   e0f4e:	69d8      	ldr	r0, [r3, #28]
   e0f50:	2204      	movs	r2, #4
   e0f52:	f506 712d 	add.w	r1, r6, #692	; 0x2b4
   e0f56:	47a8      	blx	r5
   e0f58:	4605      	mov	r5, r0
   e0f5a:	2800      	cmp	r0, #0
   e0f5c:	f040 8652 	bne.w	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
        return( ret );

    p += 4;
#endif /* MBEDTLS_HAVE_TIME */

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
   e0f60:	6823      	ldr	r3, [r4, #0]
   e0f62:	221c      	movs	r2, #28
   e0f64:	699d      	ldr	r5, [r3, #24]
   e0f66:	69d8      	ldr	r0, [r3, #28]
   e0f68:	f506 712e 	add.w	r1, r6, #696	; 0x2b8
   e0f6c:	47a8      	blx	r5
   e0f6e:	4605      	mov	r5, r0
   e0f70:	2800      	cmp	r0, #0
   e0f72:	f040 8647 	bne.w	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
   e0f76:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e0f78:	f109 0106 	add.w	r1, r9, #6
   e0f7c:	f503 722d 	add.w	r2, r3, #692	; 0x2b4
   e0f80:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
   e0f84:	e2c0      	b.n	e1508 <mbedtls_ssl_handshake_client_step+0x664>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e0f86:	2101      	movs	r1, #1
   e0f88:	4620      	mov	r0, r4
    int handshake_failure = 0;
    const mbedtls_ssl_ciphersuite_t *suite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;
   e0f8a:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e0f8e:	f001 fbd3 	bl	e2738 <mbedtls_ssl_read_record>
   e0f92:	2800      	cmp	r0, #0
   e0f94:	f040 808b 	bne.w	e10ae <mbedtls_ssl_handshake_client_step+0x20a>
        /* No alert on a read error. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e0f98:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e0f9a:	2b16      	cmp	r3, #22
   e0f9c:	f040 809e 	bne.w	e10dc <mbedtls_ssl_handshake_client_step+0x238>
            ssl->handshake->verify_cookie_len = 0;
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
   e0fa0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   e0fa2:	2b29      	cmp	r3, #41	; 0x29
   e0fa4:	d94e      	bls.n	e1044 <mbedtls_ssl_handshake_client_step+0x1a0>
   e0fa6:	f898 3000 	ldrb.w	r3, [r8]
   e0faa:	2b02      	cmp	r3, #2
   e0fac:	d14a      	bne.n	e1044 <mbedtls_ssl_handshake_client_step+0x1a0>
   e0fae:	e012      	b.n	e0fd6 <mbedtls_ssl_handshake_client_step+0x132>
    }

    /*
     * Initialize update checksum functions
     */
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
   e0fb0:	4648      	mov	r0, r9
   e0fb2:	f8d4 b040 	ldr.w	fp, [r4, #64]	; 0x40
   e0fb6:	f7ff fe97 	bl	e0ce8 <mbedtls_ssl_ciphersuite_from_id>
   e0fba:	f8cb 0000 	str.w	r0, [fp]

    if( ssl->transform_negotiate->ciphersuite_info == NULL )
   e0fbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e0fc0:	6819      	ldr	r1, [r3, #0]
   e0fc2:	2900      	cmp	r1, #0
   e0fc4:	d140      	bne.n	e1048 <mbedtls_ssl_handshake_client_step+0x1a4>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   e0fc6:	2250      	movs	r2, #80	; 0x50
   e0fc8:	2102      	movs	r1, #2
   e0fca:	4620      	mov	r0, r4
   e0fcc:	f001 fb98 	bl	e2700 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e0fd0:	4dc6      	ldr	r5, [pc, #792]	; (e12ec <mbedtls_ssl_handshake_client_step+0x448>)
   e0fd2:	f000 be17 	b.w	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
   e0fd6:	4621      	mov	r1, r4
     * 37+n . 37+n  compression_method
     *
     * 38+n . 39+n  extensions length (optional)
     * 40+n .  ..   extensions
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );
   e0fd8:	f108 0a04 	add.w	sl, r8, #4

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
   e0fdc:	f851 3b0c 	ldr.w	r3, [r1], #12
   e0fe0:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   e0fe4:	f104 0008 	add.w	r0, r4, #8
   e0fe8:	4653      	mov	r3, sl
   e0fea:	f3c2 0240 	ubfx	r2, r2, #1, #1
   e0fee:	f002 fbaa 	bl	e3746 <mbedtls_ssl_read_version>

    if( ssl->major_ver < ssl->conf->min_major_ver ||
   e0ff2:	6823      	ldr	r3, [r4, #0]
   e0ff4:	68a2      	ldr	r2, [r4, #8]
   e0ff6:	f893 107a 	ldrb.w	r1, [r3, #122]	; 0x7a
   e0ffa:	428a      	cmp	r2, r1
   e0ffc:	f2c0 8444 	blt.w	e1888 <mbedtls_ssl_handshake_client_step+0x9e4>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
   e1000:	68e1      	ldr	r1, [r4, #12]

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );

    if( ssl->major_ver < ssl->conf->min_major_ver ||
   e1002:	f893 007b 	ldrb.w	r0, [r3, #123]	; 0x7b
   e1006:	4281      	cmp	r1, r0
   e1008:	f2c0 843e 	blt.w	e1888 <mbedtls_ssl_handshake_client_step+0x9e4>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
   e100c:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
   e1010:	4282      	cmp	r2, r0
   e1012:	f300 8439 	bgt.w	e1888 <mbedtls_ssl_handshake_client_step+0x9e4>
        ssl->major_ver > ssl->conf->max_major_ver ||
   e1016:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   e101a:	4299      	cmp	r1, r3
   e101c:	f300 8434 	bgt.w	e1888 <mbedtls_ssl_handshake_client_step+0x9e4>
                           ( (uint32_t) buf[2] << 24 ) |
                           ( (uint32_t) buf[3] << 16 ) |
                           ( (uint32_t) buf[4] <<  8 ) |
                           ( (uint32_t) buf[5]       ) ) );

    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
   e1020:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e1022:	f108 0206 	add.w	r2, r8, #6
   e1026:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
   e102a:	f108 0126 	add.w	r1, r8, #38	; 0x26
   e102e:	f852 0b04 	ldr.w	r0, [r2], #4
   e1032:	f843 0b04 	str.w	r0, [r3], #4
   e1036:	428a      	cmp	r2, r1
   e1038:	d1f9      	bne.n	e102e <mbedtls_ssl_handshake_client_step+0x18a>

    n = buf[34];
   e103a:	f898 6026 	ldrb.w	r6, [r8, #38]	; 0x26

    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );

    if( n > 32 )
   e103e:	2e20      	cmp	r6, #32
   e1040:	f240 8429 	bls.w	e1896 <mbedtls_ssl_handshake_client_step+0x9f2>

    if( len == 0 || (size_t)( buf[0] + 1 ) != len )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e1044:	2232      	movs	r2, #50	; 0x32
   e1046:	e029      	b.n	e109c <mbedtls_ssl_handshake_client_step+0x1f8>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
   e1048:	4620      	mov	r0, r4
   e104a:	f001 fd6f 	bl	e2b2c <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
   e104e:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   e1052:	f8db 3348 	ldr.w	r3, [fp, #840]	; 0x348
   e1056:	f108 0827 	add.w	r8, r8, #39	; 0x27
   e105a:	2b00      	cmp	r3, #0
   e105c:	f040 844d 	bne.w	e18fa <mbedtls_ssl_handshake_client_step+0xa56>
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
   e1060:	6863      	ldr	r3, [r4, #4]
   e1062:	3301      	adds	r3, #1
   e1064:	6063      	str	r3, [r4, #4]
        ssl->handshake->resume = 0;
   e1066:	2300      	movs	r3, #0
   e1068:	f8cb 3348 	str.w	r3, [fp, #840]	; 0x348
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
   e106c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e106e:	f8c2 9000 	str.w	r9, [r2]
        ssl->session_negotiate->compression = comp;
   e1072:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e1074:	6053      	str	r3, [r2, #4]
        ssl->session_negotiate->id_len = n;
   e1076:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e1078:	609e      	str	r6, [r3, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
   e107a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e107c:	4632      	mov	r2, r6
   e107e:	4641      	mov	r1, r8
   e1080:	300c      	adds	r0, #12
   e1082:	f006 fef0 	bl	e7e66 <memcpy>
     * Perform cipher suite validation in same way as in ssl_write_client_hello.
     */
    i = 0;
    while( 1 )
    {
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
   e1086:	6823      	ldr	r3, [r4, #0]
   e1088:	68e2      	ldr	r2, [r4, #12]
   e108a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e108e:	3b04      	subs	r3, #4
   e1090:	f853 0f04 	ldr.w	r0, [r3, #4]!
   e1094:	2800      	cmp	r0, #0
   e1096:	f040 8458 	bne.w	e194a <mbedtls_ssl_handshake_client_step+0xaa6>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
   e109a:	222f      	movs	r2, #47	; 0x2f
        p++;
    }

    MBEDTLS_SSL_DEBUG_MSG( 1, ( "no point format in common" ) );
    mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   e109c:	2102      	movs	r1, #2
   e109e:	4620      	mov	r0, r4
   e10a0:	f001 fb2e 	bl	e2700 <mbedtls_ssl_send_alert_message>
   e10a4:	f000 bcd7 	b.w	e1a56 <mbedtls_ssl_handshake_client_step+0xbb2>
       case MBEDTLS_SSL_SERVER_HELLO:
           ret = ssl_parse_server_hello( ssl );
           break;

       case MBEDTLS_SSL_SERVER_CERTIFICATE:
           ret = mbedtls_ssl_parse_certificate( ssl );
   e10a8:	4620      	mov	r0, r4
   e10aa:	f002 fa0d 	bl	e34c8 <mbedtls_ssl_parse_certificate>
   e10ae:	4605      	mov	r5, r0
           break;
   e10b0:	f000 bda8 	b.w	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>

static int ssl_parse_server_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
   e10b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e10b6:	f8d3 8000 	ldr.w	r8, [r3]
    unsigned char *p = NULL, *end = NULL;
   e10ba:	2300      	movs	r3, #0
   e10bc:	930c      	str	r3, [sp, #48]	; 0x30

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );

#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
   e10be:	f898 300a 	ldrb.w	r3, [r8, #10]
   e10c2:	2b01      	cmp	r3, #1
   e10c4:	d101      	bne.n	e10ca <mbedtls_ssl_handshake_client_step+0x226>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
        ssl->state++;
   e10c6:	2305      	movs	r3, #5
   e10c8:	e0c4      	b.n	e1254 <mbedtls_ssl_handshake_client_step+0x3b0>
    {
        goto start_processing;
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e10ca:	2101      	movs	r1, #1
   e10cc:	4620      	mov	r0, r4
   e10ce:	f001 fb33 	bl	e2738 <mbedtls_ssl_read_record>
   e10d2:	2800      	cmp	r0, #0
   e10d4:	d1eb      	bne.n	e10ae <mbedtls_ssl_handshake_client_step+0x20a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e10d6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e10d8:	2b16      	cmp	r3, #22
   e10da:	d001      	beq.n	e10e0 <mbedtls_ssl_handshake_client_step+0x23c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   e10dc:	220a      	movs	r2, #10
   e10de:	e09e      	b.n	e121e <mbedtls_ssl_handshake_client_step+0x37a>

    /*
     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server
     * doesn't use a psk_identity_hint
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
   e10e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   e10e2:	781a      	ldrb	r2, [r3, #0]
   e10e4:	2a0c      	cmp	r2, #12
   e10e6:	f898 200a 	ldrb.w	r2, [r8, #10]
   e10ea:	d007      	beq.n	e10fc <mbedtls_ssl_handshake_client_step+0x258>
    {
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e10ec:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
   e10f0:	2a05      	cmp	r2, #5
   e10f2:	d1f3      	bne.n	e10dc <mbedtls_ssl_handshake_client_step+0x238>
            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
        {
            /* Current message is probably either
             * CertificateRequest or ServerHelloDone */
            ssl->keep_current_message = 1;
   e10f4:	2301      	movs	r3, #1
   e10f6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   e10fa:	e0a9      	b.n	e1250 <mbedtls_ssl_handshake_client_step+0x3ac>
        ssl->handshake->ecrs_state = ssl_ecrs_ske_start_processing;

start_processing:
#endif
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
    end = ssl->in_msg + ssl->in_hslen;
   e10fc:	6fa6      	ldr	r6, [r4, #120]	; 0x78
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e10fe:	1f50      	subs	r0, r2, #5
    if( ssl->handshake->ecrs_enabled )
        ssl->handshake->ecrs_state = ssl_ecrs_ske_start_processing;

start_processing:
#endif
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
   e1100:	1d19      	adds	r1, r3, #4
    end = ssl->in_msg + ssl->in_hslen;
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e1102:	2803      	cmp	r0, #3
    if( ssl->handshake->ecrs_enabled )
        ssl->handshake->ecrs_state = ssl_ecrs_ske_start_processing;

start_processing:
#endif
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
   e1104:	910c      	str	r1, [sp, #48]	; 0x30
    end = ssl->in_msg + ssl->in_hslen;
   e1106:	441e      	add	r6, r3
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e1108:	d903      	bls.n	e1112 <mbedtls_ssl_handshake_client_step+0x26e>
#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \
    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED) ||                     \
    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
   e110a:	1ed3      	subs	r3, r2, #3
   e110c:	2b01      	cmp	r3, #1
   e110e:	d816      	bhi.n	e113e <mbedtls_ssl_handshake_client_step+0x29a>
   e1110:	e018      	b.n	e1144 <mbedtls_ssl_handshake_client_step+0x2a0>
    /*
     * PSK parameters:
     *
     * opaque psk_identity_hint<0..2^16-1>;
     */
    if( end - (*p) < 2 )
   e1112:	1a71      	subs	r1, r6, r1
   e1114:	2901      	cmp	r1, #1
   e1116:	f340 84a0 	ble.w	e1a5a <mbedtls_ssl_handshake_client_step+0xbb6>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message "
                                    "(psk_identity_hint length)" ) );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
    }
    len = (*p)[0] << 8 | (*p)[1];
   e111a:	7918      	ldrb	r0, [r3, #4]
   e111c:	7959      	ldrb	r1, [r3, #5]
    *p += 2;
   e111e:	3306      	adds	r3, #6
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message "
                                    "(psk_identity_hint length)" ) );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
    }
    len = (*p)[0] << 8 | (*p)[1];
   e1120:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    *p += 2;

    if( end - (*p) < (int) len )
   e1124:	1af0      	subs	r0, r6, r3
   e1126:	4281      	cmp	r1, r0
   e1128:	dd02      	ble.n	e1130 <mbedtls_ssl_handshake_client_step+0x28c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message "
                                    "(psk_identity_hint length)" ) );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
    }
    len = (*p)[0] << 8 | (*p)[1];
    *p += 2;
   e112a:	930c      	str	r3, [sp, #48]	; 0x30
   e112c:	f000 bc95 	b.w	e1a5a <mbedtls_ssl_handshake_client_step+0xbb6>
    /*
     * Note: we currently ignore the PKS identity hint, as we only allow one
     * PSK to be provisionned on the client. This could be changed later if
     * someone needs that feature.
     */
    *p += len;
   e1130:	440b      	add	r3, r1
   e1132:	930c      	str	r3, [sp, #48]	; 0x30
    } /* FALLTROUGH */
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */

#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED) ||                       \
    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e1134:	f002 03fd 	and.w	r3, r2, #253	; 0xfd
   e1138:	2b05      	cmp	r3, #5
   e113a:	d1e6      	bne.n	e110a <mbedtls_ssl_handshake_client_step+0x266>
   e113c:	e01a      	b.n	e1174 <mbedtls_ssl_handshake_client_step+0x2d0>
#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \
    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED) ||                     \
    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
   e113e:	2a08      	cmp	r2, #8
   e1140:	f040 84b9 	bne.w	e1ab6 <mbedtls_ssl_handshake_client_step+0xc12>
     * struct {
     *     ECParameters curve_params;
     *     ECPoint      public;
     * } ServerECDHParams;
     */
    if( ( ret = mbedtls_ecdh_read_params( &ssl->handshake->ecdh_ctx,
   e1144:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e1146:	4632      	mov	r2, r6
   e1148:	a90c      	add	r1, sp, #48	; 0x30
   e114a:	3004      	adds	r0, #4
   e114c:	f7f6 fea2 	bl	d7e94 <mbedtls_ecdh_read_params>
   e1150:	2800      	cmp	r0, #0
   e1152:	f040 8482 	bne.w	e1a5a <mbedtls_ssl_handshake_client_step+0xbb6>
static int ssl_check_server_ecdh_params( const mbedtls_ssl_context *ssl )
{
    const mbedtls_ecp_curve_info *curve_info;
    mbedtls_ecp_group_id grp_id;
#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    grp_id = ssl->handshake->ecdh_ctx.grp.id;
   e1156:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e1158:	791f      	ldrb	r7, [r3, #4]
#else
    grp_id = ssl->handshake->ecdh_ctx.grp_id;
#endif

    curve_info = mbedtls_ecp_curve_info_from_grp_id( grp_id );
   e115a:	4638      	mov	r0, r7
   e115c:	f7f7 fdce 	bl	d8cfc <mbedtls_ecp_curve_info_from_grp_id>
    if( curve_info == NULL )
   e1160:	2800      	cmp	r0, #0
   e1162:	f000 847a 	beq.w	e1a5a <mbedtls_ssl_handshake_client_step+0xbb6>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "ECDH curve: %s", curve_info->name ) );

#if defined(MBEDTLS_ECP_C)
    if( mbedtls_ssl_check_curve( ssl, grp_id ) != 0 )
   e1166:	4639      	mov	r1, r7
   e1168:	4620      	mov	r0, r4
   e116a:	f002 f951 	bl	e3410 <mbedtls_ssl_check_curve>
   e116e:	2800      	cmp	r0, #0
   e1170:	f040 8473 	bne.w	e1a5a <mbedtls_ssl_handshake_client_step+0xbb6>
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED) */

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)
static inline int mbedtls_ssl_ciphersuite_uses_server_signature( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
   e1174:	f898 300a 	ldrb.w	r3, [r8, #10]
   e1178:	3b02      	subs	r3, #2
   e117a:	2b02      	cmp	r3, #2
   e117c:	d868      	bhi.n	e1250 <mbedtls_ssl_handshake_client_step+0x3ac>

        /*
         * Handle the digitally-signed structure
         */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   e117e:	68e3      	ldr	r3, [r4, #12]
   e1180:	2b03      	cmp	r3, #3
   e1182:	f040 8498 	bne.w	e1ab6 <mbedtls_ssl_handshake_client_step+0xc12>
        size_t sig_len, hashlen;
        unsigned char hash[64];
        mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
        mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
        size_t params_len = p - params;
   e1186:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    if( ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        return( 0 );
    }

    if( (*p) + 2 > end )
   e1188:	1cbb      	adds	r3, r7, #2
   e118a:	429e      	cmp	r6, r3
   e118c:	f0c0 8465 	bcc.w	e1a5a <mbedtls_ssl_handshake_client_step+0xbb6>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );

    /*
     * Get hash algorithm
     */
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
   e1190:	7838      	ldrb	r0, [r7, #0]
    {
        size_t sig_len, hashlen;
        unsigned char hash[64];
        mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
        mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
   e1192:	f8d4 a064 	ldr.w	sl, [r4, #100]	; 0x64
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );

    /*
     * Get hash algorithm
     */
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
   e1196:	f002 f927 	bl	e33e8 <mbedtls_ssl_md_alg_from_hash>
   e119a:	4681      	mov	r9, r0
   e119c:	2800      	cmp	r0, #0
   e119e:	f000 845c 	beq.w	e1a5a <mbedtls_ssl_handshake_client_step+0xbb6>
    }

    /*
     * Get signature algorithm
     */
    if( ( *pk_alg = mbedtls_ssl_pk_alg_from_sig( (*p)[1] ) ) == MBEDTLS_PK_NONE )
   e11a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e11a4:	7858      	ldrb	r0, [r3, #1]
   e11a6:	f002 f917 	bl	e33d8 <mbedtls_ssl_pk_alg_from_sig>
   e11aa:	4683      	mov	fp, r0
   e11ac:	2800      	cmp	r0, #0
   e11ae:	f000 8454 	beq.w	e1a5a <mbedtls_ssl_handshake_client_step+0xbb6>
    }

    /*
     * Check if the hash is acceptable
     */
    if( mbedtls_ssl_check_sig_hash( ssl, *md_alg ) != 0 )
   e11b2:	4649      	mov	r1, r9
   e11b4:	4620      	mov	r0, r4
   e11b6:	f002 f939 	bl	e342c <mbedtls_ssl_check_sig_hash>
   e11ba:	2800      	cmp	r0, #0
   e11bc:	f040 844d 	bne.w	e1a5a <mbedtls_ssl_handshake_client_step+0xbb6>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used SignatureAlgorithm %d", (*p)[1] ) );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used HashAlgorithm %d", (*p)[0] ) );
    *p += 2;
   e11c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                                MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
            }

            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
   e11c2:	4640      	mov	r0, r8
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used SignatureAlgorithm %d", (*p)[1] ) );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used HashAlgorithm %d", (*p)[0] ) );
    *p += 2;
   e11c4:	3302      	adds	r3, #2
   e11c6:	930c      	str	r3, [sp, #48]	; 0x30
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                                MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
            }

            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
   e11c8:	f7ff fdc2 	bl	e0d50 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>
   e11cc:	4558      	cmp	r0, fp
   e11ce:	4680      	mov	r8, r0
   e11d0:	f040 8443 	bne.w	e1a5a <mbedtls_ssl_handshake_client_step+0xbb6>

        /*
         * Read signature
         */

        if( p > end - 2 )
   e11d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e11d6:	1eb2      	subs	r2, r6, #2
   e11d8:	4293      	cmp	r3, r2
   e11da:	f200 8445 	bhi.w	e1a68 <mbedtls_ssl_handshake_client_step+0xbc4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
        }
        sig_len = ( p[0] << 8 ) | p[1];
   e11de:	f893 b000 	ldrb.w	fp, [r3]
   e11e2:	785a      	ldrb	r2, [r3, #1]
   e11e4:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8
        p += 2;
   e11e8:	3302      	adds	r3, #2

        if( p != end - sig_len )
   e11ea:	ebcb 0606 	rsb	r6, fp, r6
   e11ee:	42b3      	cmp	r3, r6
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
        }
        sig_len = ( p[0] << 8 ) | p[1];
        p += 2;
   e11f0:	930c      	str	r3, [sp, #48]	; 0x30

        if( p != end - sig_len )
   e11f2:	f040 8439 	bne.w	e1a68 <mbedtls_ssl_handshake_client_step+0xbc4>
    {
        size_t sig_len, hashlen;
        unsigned char hash[64];
        mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
        mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
   e11f6:	f10a 0304 	add.w	r3, sl, #4
          MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( md_alg != MBEDTLS_MD_NONE )
        {
            ret = mbedtls_ssl_get_key_exchange_md_tls1_2( ssl, hash, &hashlen,
   e11fa:	1aff      	subs	r7, r7, r3
   e11fc:	f8cd 9004 	str.w	r9, [sp, #4]
   e1200:	9700      	str	r7, [sp, #0]
   e1202:	aa0d      	add	r2, sp, #52	; 0x34
   e1204:	a90e      	add	r1, sp, #56	; 0x38
   e1206:	4620      	mov	r0, r4
   e1208:	f002 faa2 	bl	e3750 <mbedtls_ssl_get_key_exchange_md_tls1_2>
                                                          params, params_len,
                                                          md_alg );
            if( ret != 0 )
   e120c:	2800      	cmp	r0, #0
   e120e:	f47f af4e 	bne.w	e10ae <mbedtls_ssl_handshake_client_step+0x20a>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        MBEDTLS_SSL_DEBUG_BUF( 3, "parameters hash", hash, hashlen );

        if( ssl->session_negotiate->peer_cert == NULL )
   e1212:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e1214:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e1216:	2800      	cmp	r0, #0
   e1218:	f040 8428 	bne.w	e1a6c <mbedtls_ssl_handshake_client_step+0xbc8>
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   e121c:	2228      	movs	r2, #40	; 0x28
   e121e:	2102      	movs	r1, #2
   e1220:	4620      	mov	r0, r4
   e1222:	f001 fa6d 	bl	e2700 <mbedtls_ssl_send_alert_message>
   e1226:	e16b      	b.n	e1500 <mbedtls_ssl_handshake_client_step+0x65c>
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e1228:	2101      	movs	r1, #1
   e122a:	4620      	mov	r0, r4
   e122c:	f001 fa84 	bl	e2738 <mbedtls_ssl_read_record>
   e1230:	2800      	cmp	r0, #0
   e1232:	f47f af3c 	bne.w	e10ae <mbedtls_ssl_handshake_client_step+0x20a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e1236:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e1238:	2b16      	cmp	r3, #22
   e123a:	f040 8161 	bne.w	e1500 <mbedtls_ssl_handshake_client_step+0x65c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
   e123e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   e1240:	2b04      	cmp	r3, #4
   e1242:	f040 847d 	bne.w	e1b40 <mbedtls_ssl_handshake_client_step+0xc9c>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
   e1246:	6e63      	ldr	r3, [r4, #100]	; 0x64
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
   e1248:	781b      	ldrb	r3, [r3, #0]
   e124a:	2b0e      	cmp	r3, #14
   e124c:	f040 8478 	bne.w	e1b40 <mbedtls_ssl_handshake_client_step+0xc9c>
        }
    }
#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */

exit:
    ssl->state++;
   e1250:	6863      	ldr	r3, [r4, #4]
   e1252:	3301      	adds	r3, #1
   e1254:	6063      	str	r3, [r4, #4]
   e1256:	f000 bcd5 	b.w	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
    int ret;
    unsigned char *buf;
    size_t n = 0;
    size_t cert_type_len = 0, dn_len = 0;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
   e125a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e125c:	681b      	ldr	r3, [r3, #0]
   e125e:	7a9b      	ldrb	r3, [r3, #10]
   e1260:	3b01      	subs	r3, #1
   e1262:	b2db      	uxtb	r3, r3
   e1264:	2b09      	cmp	r3, #9
   e1266:	f200 8428 	bhi.w	e1aba <mbedtls_ssl_handshake_client_step+0xc16>
   e126a:	2601      	movs	r6, #1
   e126c:	fa06 f303 	lsl.w	r3, r6, r3
   e1270:	f240 320f 	movw	r2, #783	; 0x30f
   e1274:	401a      	ands	r2, r3
   e1276:	2a00      	cmp	r2, #0
   e1278:	f000 841f 	beq.w	e1aba <mbedtls_ssl_handshake_client_step+0xc16>
   e127c:	f000 bc20 	b.w	e1ac0 <mbedtls_ssl_handshake_client_step+0xc1c>
        *      ( CertificateVerify  )
        *        ChangeCipherSpec
        *        Finished
        */
       case MBEDTLS_SSL_CLIENT_CERTIFICATE:
           ret = mbedtls_ssl_write_certificate( ssl );
   e1280:	4620      	mov	r0, r4
   e1282:	f001 fbaf 	bl	e29e4 <mbedtls_ssl_write_certificate>
   e1286:	e712      	b.n	e10ae <mbedtls_ssl_handshake_client_step+0x20a>
static int ssl_write_client_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
   e1288:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e128a:	681f      	ldr	r7, [r3, #0]
#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \
    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) ||                   \
    defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||                      \
    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
   e128c:	7abb      	ldrb	r3, [r7, #10]
   e128e:	1eda      	subs	r2, r3, #3
   e1290:	2a01      	cmp	r2, #1
   e1292:	d902      	bls.n	e129a <mbedtls_ssl_handshake_client_step+0x3f6>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA ||
   e1294:	3b09      	subs	r3, #9
   e1296:	2b01      	cmp	r3, #1
   e1298:	d82a      	bhi.n	e12f0 <mbedtls_ssl_handshake_client_step+0x44c>
#endif

        ret = mbedtls_ecdh_make_public( &ssl->handshake->ecdh_ctx,
                                &n,
                                &ssl->out_msg[i], 1000,
                                ssl->conf->f_rng, ssl->conf->p_rng );
   e129a:	6823      	ldr	r3, [r4, #0]

            mbedtls_ecdh_enable_restart( &ssl->handshake->ecdh_ctx );
        }
#endif

        ret = mbedtls_ecdh_make_public( &ssl->handshake->ecdh_ctx,
   e129c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e12a0:	69d9      	ldr	r1, [r3, #28]
   e12a2:	9101      	str	r1, [sp, #4]
   e12a4:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e12a6:	699b      	ldr	r3, [r3, #24]
   e12a8:	9300      	str	r3, [sp, #0]
   e12aa:	3204      	adds	r2, #4
   e12ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e12b0:	a90e      	add	r1, sp, #56	; 0x38
   e12b2:	3004      	adds	r0, #4
   e12b4:	f7f6 fe0e 	bl	d7ed4 <mbedtls_ecdh_make_public>
                                &n,
                                &ssl->out_msg[i], 1000,
                                ssl->conf->f_rng, ssl->conf->p_rng );
        if( ret != 0 )
   e12b8:	4605      	mov	r5, r0
   e12ba:	2800      	cmp	r0, #0
   e12bc:	f040 84a2 	bne.w	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
#endif
        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,
                                      &ssl->handshake->pmslen,
                                       ssl->handshake->premaster,
                                       MBEDTLS_MPI_MAX_SIZE,
                                       ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
   e12c0:	6823      	ldr	r3, [r4, #0]

ecdh_calc_secret:
        if( ssl->handshake->ecrs_enabled )
            n = ssl->handshake->ecrs_n;
#endif
        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,
   e12c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e12c4:	69da      	ldr	r2, [r3, #28]
   e12c6:	9201      	str	r2, [sp, #4]
   e12c8:	699b      	ldr	r3, [r3, #24]
   e12ca:	9300      	str	r3, [sp, #0]
   e12cc:	f500 723d 	add.w	r2, r0, #756	; 0x2f4
   e12d0:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
   e12d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   e12d8:	3004      	adds	r0, #4
   e12da:	f7f6 fe23 	bl	d7f24 <mbedtls_ecdh_calc_secret>
   e12de:	4605      	mov	r5, r0
   e12e0:	2800      	cmp	r0, #0
   e12e2:	f040 848f 	bne.w	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA )
    {
        /*
         * ECDH key exchange -- send client public value
         */
        i = 4;
   e12e6:	2604      	movs	r6, #4
   e12e8:	e04f      	b.n	e138a <mbedtls_ssl_handshake_client_step+0x4e6>
   e12ea:	bf00      	nop
   e12ec:	ffff8f00 	.word	0xffff8f00
#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( mbedtls_ssl_ciphersuite_uses_psk( ciphersuite_info ) )
   e12f0:	4638      	mov	r0, r7
   e12f2:	f7ff fd51 	bl	e0d98 <mbedtls_ssl_ciphersuite_uses_psk>
   e12f6:	4603      	mov	r3, r0
   e12f8:	2800      	cmp	r0, #0
   e12fa:	d03c      	beq.n	e1376 <mbedtls_ssl_handshake_client_step+0x4d2>
    {
        /*
         * opaque psk_identity<0..2^16-1>;
         */
        if( ssl->conf->psk == NULL || ssl->conf->psk_identity == NULL )
   e12fc:	6823      	ldr	r3, [r4, #0]
   e12fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   e1300:	2a00      	cmp	r2, #0
   e1302:	f000 80ca 	beq.w	e149a <mbedtls_ssl_handshake_client_step+0x5f6>
   e1306:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   e1308:	2a00      	cmp	r2, #0
   e130a:	f000 80c6 	beq.w	e149a <mbedtls_ssl_handshake_client_step+0x5f6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for PSK" ) );
            return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
        }

        i = 4;
        n = ssl->conf->psk_identity_len;
   e130e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   e1310:	930e      	str	r3, [sp, #56]	; 0x38

        if( i + 2 + n > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e1312:	1d9a      	adds	r2, r3, #6
   e1314:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   e1318:	d842      	bhi.n	e13a0 <mbedtls_ssl_handshake_client_step+0x4fc>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "psk identity too long or "
                                        "SSL buffer too short" ) );
            return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
        }

        ssl->out_msg[i++] = (unsigned char)( n >> 8 );
   e131a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e131e:	0a19      	lsrs	r1, r3, #8
   e1320:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[i++] = (unsigned char)( n      );
   e1322:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e1326:	7153      	strb	r3, [r2, #5]

        memcpy( ssl->out_msg + i, ssl->conf->psk_identity, ssl->conf->psk_identity_len );
   e1328:	6823      	ldr	r3, [r4, #0]
   e132a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   e132e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   e1330:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   e1332:	3006      	adds	r0, #6
   e1334:	f006 fd97 	bl	e7e66 <memcpy>
        i += ssl->conf->psk_identity_len;
   e1338:	6823      	ldr	r3, [r4, #0]
   e133a:	6f1e      	ldr	r6, [r3, #112]	; 0x70

#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK )
   e133c:	7abb      	ldrb	r3, [r7, #10]
   e133e:	2b05      	cmp	r3, #5

        ssl->out_msg[i++] = (unsigned char)( n >> 8 );
        ssl->out_msg[i++] = (unsigned char)( n      );

        memcpy( ssl->out_msg + i, ssl->conf->psk_identity, ssl->conf->psk_identity_len );
        i += ssl->conf->psk_identity_len;
   e1340:	f106 0606 	add.w	r6, r6, #6

#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK )
   e1344:	d102      	bne.n	e134c <mbedtls_ssl_handshake_client_step+0x4a8>
        {
            n = 0;
   e1346:	2300      	movs	r3, #0
   e1348:	930e      	str	r3, [sp, #56]	; 0x38
   e134a:	e00c      	b.n	e1366 <mbedtls_ssl_handshake_client_step+0x4c2>
        }
        else
#endif
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
   e134c:	2b07      	cmp	r3, #7
   e134e:	f040 83b2 	bne.w	e1ab6 <mbedtls_ssl_handshake_client_step+0xc12>
        {
            if( ( ret = ssl_write_encrypted_pms( ssl, i, &n, 2 ) ) != 0 )
   e1352:	2302      	movs	r3, #2
   e1354:	aa0e      	add	r2, sp, #56	; 0x38
   e1356:	4631      	mov	r1, r6
   e1358:	4620      	mov	r0, r4
   e135a:	f7ff fd31 	bl	e0dc0 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj>
   e135e:	4605      	mov	r5, r0
   e1360:	2800      	cmp	r0, #0
   e1362:	f040 844f 	bne.w	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        if( ( ret = mbedtls_ssl_psk_derive_premaster( ssl,
   e1366:	7ab9      	ldrb	r1, [r7, #10]
   e1368:	4620      	mov	r0, r4
   e136a:	f000 ff73 	bl	e2254 <mbedtls_ssl_psk_derive_premaster>
   e136e:	4605      	mov	r5, r0
   e1370:	b158      	cbz	r0, e138a <mbedtls_ssl_handshake_client_step+0x4e6>
   e1372:	f000 bc47 	b.w	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
        }
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
   e1376:	7aba      	ldrb	r2, [r7, #10]
   e1378:	2a01      	cmp	r2, #1
   e137a:	f040 839c 	bne.w	e1ab6 <mbedtls_ssl_handshake_client_step+0xc12>
    {
        i = 4;
        if( ( ret = ssl_write_encrypted_pms( ssl, i, &n, 0 ) ) != 0 )
   e137e:	aa0e      	add	r2, sp, #56	; 0x38
   e1380:	2104      	movs	r1, #4
   e1382:	4620      	mov	r0, r4
   e1384:	f7ff fd1c 	bl	e0dc0 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj>
   e1388:	e7a9      	b.n	e12de <mbedtls_ssl_handshake_client_step+0x43a>
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
   e138a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e138c:	441e      	add	r6, r3
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e138e:	2316      	movs	r3, #22
   e1390:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
   e1394:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
   e1398:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e139c:	2210      	movs	r2, #16
   e139e:	e074      	b.n	e148a <mbedtls_ssl_handshake_client_step+0x5e6>

        if( i + 2 + n > MBEDTLS_SSL_OUT_CONTENT_LEN )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "psk identity too long or "
                                        "SSL buffer too short" ) );
            return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
   e13a0:	4da8      	ldr	r5, [pc, #672]	; (e1644 <mbedtls_ssl_handshake_client_step+0x7a0>)
           ret = mbedtls_ssl_write_certificate( ssl );
           break;

       case MBEDTLS_SSL_CLIENT_KEY_EXCHANGE:
           ret = ssl_write_client_key_exchange( ssl );
           break;
   e13a2:	f000 bc2f 	b.w	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
   e13a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    {
        goto sign;
    }
#endif

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
   e13a8:	4620      	mov	r0, r4
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
   e13aa:	681e      	ldr	r6, [r3, #0]
    size_t n = 0, offset = 0;
   e13ac:	2300      	movs	r3, #0
   e13ae:	930d      	str	r3, [sp, #52]	; 0x34
    {
        goto sign;
    }
#endif

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
   e13b0:	f000 fde6 	bl	e1f80 <mbedtls_ssl_derive_keys>
   e13b4:	4605      	mov	r5, r0
   e13b6:	2800      	cmp	r0, #0
   e13b8:	f040 8424 	bne.w	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
        return( ret );
    }

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e13bc:	7ab3      	ldrb	r3, [r6, #10]
   e13be:	1f5a      	subs	r2, r3, #5
   e13c0:	2a03      	cmp	r2, #3
   e13c2:	f67f af45 	bls.w	e1250 <mbedtls_ssl_handshake_client_step+0x3ac>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
   e13c6:	2b0b      	cmp	r3, #11
   e13c8:	f43f af42 	beq.w	e1250 <mbedtls_ssl_handshake_client_step+0x3ac>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
        return( 0 );
    }

    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
   e13cc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   e13d0:	2b00      	cmp	r3, #0
   e13d2:	f43f af3d 	beq.w	e1250 <mbedtls_ssl_handshake_client_step+0x3ac>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
   e13d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
   e13d8:	b112      	cbz	r2, e13e0 <mbedtls_ssl_handshake_client_step+0x53c>
   e13da:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
   e13de:	b923      	cbnz	r3, e13ea <mbedtls_ssl_handshake_client_step+0x546>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
   e13e0:	6823      	ldr	r3, [r4, #0]
   e13e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50

    return( key_cert == NULL ? NULL : key_cert->cert );
   e13e4:	2b00      	cmp	r3, #0
   e13e6:	f43f af33 	beq.w	e1250 <mbedtls_ssl_handshake_client_step+0x3ac>
   e13ea:	681b      	ldr	r3, [r3, #0]
   e13ec:	2b00      	cmp	r3, #0
   e13ee:	f43f af2f 	beq.w	e1250 <mbedtls_ssl_handshake_client_step+0x3ac>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
        return( 0 );
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
   e13f2:	4620      	mov	r0, r4
   e13f4:	f7ff fcd7 	bl	e0da6 <mbedtls_ssl_own_key>
   e13f8:	2800      	cmp	r0, #0
   e13fa:	d04e      	beq.n	e149a <mbedtls_ssl_handshake_client_step+0x5f6>
        ssl->handshake->ecrs_state = ssl_ecrs_crt_vrfy_sign;

sign:
#endif

    ssl->handshake->calc_verify( ssl, hash );
   e13fc:	f8d2 32a4 	ldr.w	r3, [r2, #676]	; 0x2a4
   e1400:	a90e      	add	r1, sp, #56	; 0x38
   e1402:	4620      	mov	r0, r4
   e1404:	4798      	blx	r3
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
          MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   e1406:	68e3      	ldr	r3, [r4, #12]
   e1408:	2b03      	cmp	r3, #3
   e140a:	f040 8354 	bne.w	e1ab6 <mbedtls_ssl_handshake_client_step+0xc12>
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
   e140e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e1410:	681b      	ldr	r3, [r3, #0]
   e1412:	7a5d      	ldrb	r5, [r3, #9]
   e1414:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e1418:	2d07      	cmp	r5, #7
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
   e141a:	bf0b      	itete	eq
   e141c:	2205      	moveq	r2, #5
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
   e141e:	2204      	movne	r2, #4
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
   e1420:	711a      	strbeq	r2, [r3, #4]
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
   e1422:	711a      	strbne	r2, [r3, #4]
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
   e1424:	4620      	mov	r0, r4
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
   e1426:	bf18      	it	ne
   e1428:	2506      	movne	r5, #6
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
   e142a:	f7ff fcbc 	bl	e0da6 <mbedtls_ssl_own_key>
   e142e:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   e1432:	f001 ffc0 	bl	e33b6 <mbedtls_ssl_sig_from_pk>
   e1436:	7170      	strb	r0, [r6, #5]
#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
    if( ssl->handshake->ecrs_enabled )
        rs_ctx = &ssl->handshake->ecrs_ctx.pk;
#endif

    if( ( ret = mbedtls_pk_sign_restartable( mbedtls_ssl_own_key( ssl ),
   e1438:	4620      	mov	r0, r4
   e143a:	f7ff fcb4 	bl	e0da6 <mbedtls_ssl_own_key>
                         md_alg, hash_start, hashlen,
                         ssl->out_msg + 6 + offset, &n,
                         ssl->conf->f_rng, ssl->conf->p_rng, rs_ctx ) ) != 0 )
   e143e:	6822      	ldr	r2, [r4, #0]
#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
    if( ssl->handshake->ecrs_enabled )
        rs_ctx = &ssl->handshake->ecrs_ctx.pk;
#endif

    if( ( ret = mbedtls_pk_sign_restartable( mbedtls_ssl_own_key( ssl ),
   e1440:	2300      	movs	r3, #0
   e1442:	9304      	str	r3, [sp, #16]
   e1444:	69d1      	ldr	r1, [r2, #28]
   e1446:	9103      	str	r1, [sp, #12]
   e1448:	6992      	ldr	r2, [r2, #24]
   e144a:	9202      	str	r2, [sp, #8]
   e144c:	aa0d      	add	r2, sp, #52	; 0x34
   e144e:	9201      	str	r2, [sp, #4]
   e1450:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e1454:	3208      	adds	r2, #8
   e1456:	9200      	str	r2, [sp, #0]
   e1458:	4629      	mov	r1, r5
   e145a:	aa0e      	add	r2, sp, #56	; 0x38
   e145c:	f7f9 fe8e 	bl	db17c <mbedtls_pk_sign_restartable>
   e1460:	4605      	mov	r5, r0
   e1462:	2800      	cmp	r0, #0
   e1464:	f040 83ce 	bne.w	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
            ret = MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS;
#endif
        return( ret );
    }

    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
   e1468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e146a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e146e:	0a19      	lsrs	r1, r3, #8
   e1470:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
   e1472:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e1476:	71d3      	strb	r3, [r2, #7]

    ssl->out_msglen  = 6 + n + offset;
   e1478:	3308      	adds	r3, #8
   e147a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e147e:	2316      	movs	r3, #22
   e1480:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
   e1484:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e1488:	220f      	movs	r2, #15
   e148a:	701a      	strb	r2, [r3, #0]

    ssl->state++;
   e148c:	6863      	ldr	r3, [r4, #4]
   e148e:	3301      	adds	r3, #1
   e1490:	6063      	str	r3, [r4, #4]

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   e1492:	4620      	mov	r0, r4
   e1494:	f001 f896 	bl	e25c4 <mbedtls_ssl_write_handshake_msg>
   e1498:	e609      	b.n	e10ae <mbedtls_ssl_handshake_client_step+0x20a>
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
   e149a:	4d6b      	ldr	r5, [pc, #428]	; (e1648 <mbedtls_ssl_handshake_client_step+0x7a4>)
   e149c:	e3b2      	b.n	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
       case MBEDTLS_SSL_CERTIFICATE_VERIFY:
           ret = ssl_write_certificate_verify( ssl );
           break;

       case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
   e149e:	4620      	mov	r0, r4
   e14a0:	f001 fb06 	bl	e2ab0 <mbedtls_ssl_write_change_cipher_spec>
   e14a4:	e603      	b.n	e10ae <mbedtls_ssl_handshake_client_step+0x20a>
           break;

       case MBEDTLS_SSL_CLIENT_FINISHED:
           ret = mbedtls_ssl_write_finished( ssl );
   e14a6:	4620      	mov	r0, r4
   e14a8:	f001 fb4e 	bl	e2b48 <mbedtls_ssl_write_finished>
   e14ac:	e5ff      	b.n	e10ae <mbedtls_ssl_handshake_client_step+0x20a>
    unsigned char *ticket;
    const unsigned char *msg;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e14ae:	2101      	movs	r1, #1
   e14b0:	4620      	mov	r0, r4
   e14b2:	f001 f941 	bl	e2738 <mbedtls_ssl_read_record>
   e14b6:	4681      	mov	r9, r0
   e14b8:	bb20      	cbnz	r0, e1504 <mbedtls_ssl_handshake_client_step+0x660>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e14ba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e14bc:	2b16      	cmp	r3, #22
   e14be:	f47f ae0d 	bne.w	e10dc <mbedtls_ssl_handshake_client_step+0x238>
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
   e14c2:	6e66      	ldr	r6, [r4, #100]	; 0x64
   e14c4:	7833      	ldrb	r3, [r6, #0]
   e14c6:	2b04      	cmp	r3, #4
   e14c8:	d103      	bne.n	e14d2 <mbedtls_ssl_handshake_client_step+0x62e>
        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )
   e14ca:	6fa3      	ldr	r3, [r4, #120]	; 0x78
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
   e14cc:	2b09      	cmp	r3, #9
   e14ce:	f200 834f 	bhi.w	e1b70 <mbedtls_ssl_handshake_client_step+0xccc>

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e14d2:	2232      	movs	r2, #50	; 0x32
   e14d4:	2102      	movs	r1, #2
   e14d6:	4620      	mov	r0, r4
   e14d8:	f001 f912 	bl	e2700 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
   e14dc:	4d5b      	ldr	r5, [pc, #364]	; (e164c <mbedtls_ssl_handshake_client_step+0x7a8>)
   e14de:	e391      	b.n	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
           ret = ssl_parse_new_session_ticket( ssl );
           break;
#endif

       case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
   e14e0:	4620      	mov	r0, r4
   e14e2:	f001 faf3 	bl	e2acc <mbedtls_ssl_parse_change_cipher_spec>
   e14e6:	e5e2      	b.n	e10ae <mbedtls_ssl_handshake_client_step+0x20a>
           break;

       case MBEDTLS_SSL_SERVER_FINISHED:
           ret = mbedtls_ssl_parse_finished( ssl );
   e14e8:	4620      	mov	r0, r4
   e14ea:	f001 fb69 	bl	e2bc0 <mbedtls_ssl_parse_finished>
   e14ee:	e5de      	b.n	e10ae <mbedtls_ssl_handshake_client_step+0x20a>
           break;

       case MBEDTLS_SSL_FLUSH_BUFFERS:
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
   e14f0:	230f      	movs	r3, #15
   e14f2:	e6af      	b.n	e1254 <mbedtls_ssl_handshake_client_step+0x3b0>
           break;

       case MBEDTLS_SSL_HANDSHAKE_WRAPUP:
           mbedtls_ssl_handshake_wrapup( ssl );
   e14f4:	4620      	mov	r0, r4
   e14f6:	f001 fdad 	bl	e3054 <mbedtls_ssl_handshake_wrapup>
           break;
   e14fa:	e383      	b.n	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
        return( MBEDTLS_ERR_SSL_NO_RNG );
   e14fc:	4d54      	ldr	r5, [pc, #336]	; (e1650 <mbedtls_ssl_handshake_client_step+0x7ac>)
   e14fe:	e381      	b.n	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e1500:	4d54      	ldr	r5, [pc, #336]	; (e1654 <mbedtls_ssl_handshake_client_step+0x7b0>)
   e1502:	e37f      	b.n	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
    unsigned char *ticket;
    const unsigned char *msg;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e1504:	4605      	mov	r5, r0
   e1506:	e37d      	b.n	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
   e1508:	f852 0b04 	ldr.w	r0, [r2], #4
   e150c:	f841 0b04 	str.w	r0, [r1], #4
   e1510:	429a      	cmp	r2, r3
   e1512:	d1f9      	bne.n	e1508 <mbedtls_ssl_handshake_client_step+0x664>
     *   ..   . ..    compression methods length (1 byte)
     *   ..   . ..    compression methods
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;
   e1514:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   e1516:	688b      	ldr	r3, [r1, #8]

    if( n < 16 || n > 32 ||
   e1518:	f1a3 0210 	sub.w	r2, r3, #16
   e151c:	2a10      	cmp	r2, #16
   e151e:	d806      	bhi.n	e152e <mbedtls_ssl_handshake_client_step+0x68a>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
   e1520:	6b22      	ldr	r2, [r4, #48]	; 0x30
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;

    if( n < 16 || n > 32 ||
   e1522:	f8d2 2348 	ldr.w	r2, [r2, #840]	; 0x348
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
    {
        n = 0;
   e1526:	2a00      	cmp	r2, #0
   e1528:	bf08      	it	eq
   e152a:	2300      	moveq	r3, #0
   e152c:	e000      	b.n	e1530 <mbedtls_ssl_handshake_client_step+0x68c>
   e152e:	2300      	movs	r3, #0
     */
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        if( ssl->session_negotiate->ticket != NULL &&
   e1530:	6e4a      	ldr	r2, [r1, #100]	; 0x64
   e1532:	b172      	cbz	r2, e1552 <mbedtls_ssl_handshake_client_step+0x6ae>
   e1534:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   e1536:	b162      	cbz	r2, e1552 <mbedtls_ssl_handshake_client_step+0x6ae>
                ssl->session_negotiate->ticket_len != 0 )
        {
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );
   e1538:	6823      	ldr	r3, [r4, #0]
   e153a:	2220      	movs	r2, #32
   e153c:	699d      	ldr	r5, [r3, #24]
   e153e:	69d8      	ldr	r0, [r3, #28]
   e1540:	310c      	adds	r1, #12
   e1542:	47a8      	blx	r5

            if( ret != 0 )
   e1544:	4605      	mov	r5, r0
   e1546:	2800      	cmp	r0, #0
   e1548:	f040 835c 	bne.w	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
                return( ret );

            ssl->session_negotiate->id_len = n = 32;
   e154c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e154e:	2320      	movs	r3, #32
   e1550:	6093      	str	r3, [r2, #8]
        }
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;
   e1552:	f109 0627 	add.w	r6, r9, #39	; 0x27
   e1556:	f889 3026 	strb.w	r3, [r9, #38]	; 0x26

    for( i = 0; i < n; i++ )
   e155a:	2200      	movs	r2, #0
   e155c:	4293      	cmp	r3, r2
   e155e:	d005      	beq.n	e156c <mbedtls_ssl_handshake_client_step+0x6c8>
        *p++ = ssl->session_negotiate->id[i];
   e1560:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   e1562:	4411      	add	r1, r2
   e1564:	7b09      	ldrb	r1, [r1, #12]
   e1566:	54b1      	strb	r1, [r6, r2]
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;

    for( i = 0; i < n; i++ )
   e1568:	3201      	adds	r2, #1
   e156a:	e7f7      	b.n	e155c <mbedtls_ssl_handshake_client_step+0x6b8>
   e156c:	441e      	add	r6, r3
#endif

    /*
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
   e156e:	68e2      	ldr	r2, [r4, #12]
   e1570:	6823      	ldr	r3, [r4, #0]
   e1572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    unsigned char offer_compress;
    const int *ciphersuites;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;
#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    int uses_ec = 0;
   e1576:	f04f 0a00 	mov.w	sl, #0
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];

    /* Skip writing ciphersuite length for now */
    n = 0;
    q = p;
    p += 2;
   e157a:	1cb5      	adds	r5, r6, #2
   e157c:	f1a3 0804 	sub.w	r8, r3, #4
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];

    /* Skip writing ciphersuite length for now */
    n = 0;
   e1580:	4657      	mov	r7, sl
    q = p;
    p += 2;

    for( i = 0; ciphersuites[i] != 0; i++ )
   e1582:	f858 3f04 	ldr.w	r3, [r8, #4]!
   e1586:	b1fb      	cbz	r3, e15c8 <mbedtls_ssl_handshake_client_step+0x724>
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
   e1588:	4618      	mov	r0, r3
   e158a:	f7ff fbad 	bl	e0ce8 <mbedtls_ssl_ciphersuite_from_id>

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
                                      ssl->conf->min_minor_ver,
   e158e:	6821      	ldr	r1, [r4, #0]

    for( i = 0; ciphersuites[i] != 0; i++ )
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
   e1590:	f891 e079 	ldrb.w	lr, [r1, #121]	; 0x79
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
   e1594:	2800      	cmp	r0, #0
   e1596:	d0f4      	beq.n	e1582 <mbedtls_ssl_handshake_client_step+0x6de>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
   e1598:	6903      	ldr	r3, [r0, #16]
   e159a:	459e      	cmp	lr, r3
   e159c:	dbf1      	blt.n	e1582 <mbedtls_ssl_handshake_client_step+0x6de>
   e159e:	f891 107b 	ldrb.w	r1, [r1, #123]	; 0x7b
   e15a2:	6983      	ldr	r3, [r0, #24]
   e15a4:	4299      	cmp	r1, r3
   e15a6:	dcec      	bgt.n	e1582 <mbedtls_ssl_handshake_client_step+0x6de>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
        uses_ec |= mbedtls_ssl_ciphersuite_uses_ec( ciphersuite_info );
   e15a8:	f7ff fbe8 	bl	e0d7c <mbedtls_ssl_ciphersuite_uses_ec>
#endif

        n++;
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
   e15ac:	f8d8 3000 	ldr.w	r3, [r8]
   e15b0:	462a      	mov	r2, r5
   e15b2:	121b      	asrs	r3, r3, #8
   e15b4:	f802 3b02 	strb.w	r3, [r2], #2
        *p++ = (unsigned char)( ciphersuites[i]      );
   e15b8:	f8d8 3000 	ldr.w	r3, [r8]
   e15bc:	706b      	strb	r3, [r5, #1]
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
        uses_ec |= mbedtls_ssl_ciphersuite_uses_ec( ciphersuite_info );
   e15be:	ea4a 0a00 	orr.w	sl, sl, r0
#endif

        n++;
   e15c2:	3701      	adds	r7, #1
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
        *p++ = (unsigned char)( ciphersuites[i]      );
   e15c4:	4615      	mov	r5, r2
   e15c6:	e7dc      	b.n	e1582 <mbedtls_ssl_handshake_client_step+0x6de>
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
   e15c8:	22ff      	movs	r2, #255	; 0xff
        n++;
   e15ca:	3701      	adds	r7, #1
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
   e15cc:	706a      	strb	r2, [r5, #1]
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
   e15ce:	09fa      	lsrs	r2, r7, #7
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
   e15d0:	702b      	strb	r3, [r5, #0]
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
   e15d2:	007f      	lsls	r7, r7, #1
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
   e15d4:	7032      	strb	r2, [r6, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
   e15d6:	2201      	movs	r2, #1
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
   e15d8:	7077      	strb	r7, [r6, #1]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
   e15da:	70aa      	strb	r2, [r5, #2]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
   e15dc:	70eb      	strb	r3, [r5, #3]
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e15de:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
   e15e2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
   e15e6:	9307      	str	r3, [sp, #28]
   e15e8:	f105 0804 	add.w	r8, r5, #4
    }

    // First write extensions, then the total length
    //
#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
   e15ec:	f105 0b06 	add.w	fp, r5, #6
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e15f0:	f506 5600 	add.w	r6, r6, #8192	; 0x2000
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
   e15f4:	b318      	cbz	r0, e163e <mbedtls_ssl_handshake_client_step+0x79a>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
   e15f6:	f006 fca3 	bl	e7f40 <strlen>

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
   e15fa:	45b3      	cmp	fp, r6
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
   e15fc:	4602      	mov	r2, r0

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
   e15fe:	9b07      	ldr	r3, [sp, #28]
   e1600:	d82a      	bhi.n	e1658 <mbedtls_ssl_handshake_client_step+0x7b4>
   e1602:	f100 0709 	add.w	r7, r0, #9
   e1606:	ebcb 0606 	rsb	r6, fp, r6
   e160a:	42be      	cmp	r6, r7
   e160c:	d324      	bcc.n	e1658 <mbedtls_ssl_handshake_client_step+0x7b4>
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
   e160e:	1d41      	adds	r1, r0, #5
   e1610:	0a09      	lsrs	r1, r1, #8
   e1612:	7229      	strb	r1, [r5, #8]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
   e1614:	b2c1      	uxtb	r1, r0
   e1616:	1d48      	adds	r0, r1, #5
   e1618:	7268      	strb	r0, [r5, #9]

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
   e161a:	1cd0      	adds	r0, r2, #3
   e161c:	0a00      	lsrs	r0, r0, #8
     * struct {
     *     ServerName server_name_list<1..2^16-1>
     * } ServerNameList;
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
   e161e:	71ab      	strb	r3, [r5, #6]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );
   e1620:	71eb      	strb	r3, [r5, #7]

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
   e1622:	72a8      	strb	r0, [r5, #10]
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
   e1624:	732b      	strb	r3, [r5, #12]

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
   e1626:	1cc8      	adds	r0, r1, #3

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
   e1628:	0a13      	lsrs	r3, r2, #8

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
   e162a:	72e8      	strb	r0, [r5, #11]

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
   e162c:	736b      	strb	r3, [r5, #13]
    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );
   e162e:	73a9      	strb	r1, [r5, #14]

    memcpy( p, ssl->hostname, hostname_len );
   e1630:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   e1634:	f105 000f 	add.w	r0, r5, #15
   e1638:	f006 fc15 	bl	e7e66 <memcpy>
   e163c:	e00d      	b.n	e165a <mbedtls_ssl_handshake_client_step+0x7b6>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t hostname_len;

    *olen = 0;
   e163e:	4607      	mov	r7, r0
   e1640:	e00b      	b.n	e165a <mbedtls_ssl_handshake_client_step+0x7b6>
   e1642:	bf00      	nop
   e1644:	ffff9600 	.word	0xffff9600
   e1648:	ffff8a00 	.word	0xffff8a00
   e164c:	ffff9200 	.word	0xffff9200
   e1650:	ffff8c00 	.word	0xffff8c00
   e1654:	ffff8900 	.word	0xffff8900
   e1658:	461f      	mov	r7, r3
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;

    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
   e165a:	6823      	ldr	r3, [r4, #0]
   e165c:	f893 2079 	ldrb.w	r2, [r3, #121]	; 0x79
   e1660:	2a03      	cmp	r2, #3
   e1662:	d14c      	bne.n	e16fe <mbedtls_ssl_handshake_client_step+0x85a>
   e1664:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   e1666:	460b      	mov	r3, r1
   e1668:	1a5a      	subs	r2, r3, r1
   e166a:	f853 0b04 	ldr.w	r0, [r3], #4
   e166e:	2800      	cmp	r0, #0
   e1670:	d1fa      	bne.n	e1668 <mbedtls_ssl_handshake_client_step+0x7c4>
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e1672:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
   e1676:	1cbe      	adds	r6, r7, #2
   e1678:	4446      	add	r6, r8
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e167a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
#endif
    }

    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
   e167e:	429e      	cmp	r6, r3
   e1680:	d83e      	bhi.n	e1700 <mbedtls_ssl_handshake_client_step+0x85c>
   e1682:	1b9b      	subs	r3, r3, r6
   e1684:	3206      	adds	r2, #6
   e1686:	4293      	cmp	r3, r2
   e1688:	d33a      	bcc.n	e1700 <mbedtls_ssl_handshake_client_step+0x85c>
   e168a:	1db3      	adds	r3, r6, #6
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t sig_alg_len = 0;
    const int *md;
#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
    unsigned char *sig_alg_list = buf + 6;
   e168c:	460a      	mov	r2, r1
    /*
     * Prepare signature_algorithms extension (TLS 1.2)
     */
    sig_alg_len = 0;

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   e168e:	6810      	ldr	r0, [r2, #0]
   e1690:	910b      	str	r1, [sp, #44]	; 0x2c
   e1692:	3304      	adds	r3, #4
   e1694:	ebc1 0e02 	rsb	lr, r1, r2
   e1698:	9207      	str	r2, [sp, #28]
   e169a:	920a      	str	r2, [sp, #40]	; 0x28
   e169c:	9308      	str	r3, [sp, #32]
   e169e:	9309      	str	r3, [sp, #36]	; 0x24
   e16a0:	b1d8      	cbz	r0, e16da <mbedtls_ssl_handshake_client_step+0x836>
    {
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e16a2:	f001 feab 	bl	e33fc <mbedtls_ssl_hash_from_md_alg>
   e16a6:	9b08      	ldr	r3, [sp, #32]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
   e16a8:	9309      	str	r3, [sp, #36]	; 0x24
   e16aa:	f04f 0203 	mov.w	r2, #3
    sig_alg_len = 0;

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
    {
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e16ae:	f803 0c04 	strb.w	r0, [r3, #-4]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
   e16b2:	f803 2c03 	strb.w	r2, [r3, #-3]
   e16b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e16b8:	9b07      	ldr	r3, [sp, #28]
   e16ba:	3204      	adds	r2, #4
   e16bc:	6818      	ldr	r0, [r3, #0]
   e16be:	9208      	str	r2, [sp, #32]
   e16c0:	920a      	str	r2, [sp, #40]	; 0x28
   e16c2:	f001 fe9b 	bl	e33fc <mbedtls_ssl_hash_from_md_alg>
   e16c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e16c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   e16ca:	f803 0c02 	strb.w	r0, [r3, #-2]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
   e16ce:	f04f 0201 	mov.w	r2, #1
   e16d2:	f803 2c01 	strb.w	r2, [r3, #-1]
   e16d6:	9a08      	ldr	r2, [sp, #32]
   e16d8:	e7d9      	b.n	e168e <mbedtls_ssl_handshake_client_step+0x7ea>
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
   e16da:	230d      	movs	r3, #13
   e16dc:	7073      	strb	r3, [r6, #1]

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
   e16de:	f10e 0302 	add.w	r3, lr, #2
   e16e2:	0a1b      	lsrs	r3, r3, #8
   e16e4:	70b3      	strb	r3, [r6, #2]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
   e16e6:	fa5f f38e 	uxtb.w	r3, lr
   e16ea:	1c9a      	adds	r2, r3, #2
   e16ec:	70f2      	strb	r2, [r6, #3]

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
   e16ee:	ea4f 221e 	mov.w	r2, lr, lsr #8
     * } SignatureAndHashAlgorithm;
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
   e16f2:	7030      	strb	r0, [r6, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
   e16f4:	7132      	strb	r2, [r6, #4]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
   e16f6:	7173      	strb	r3, [r6, #5]

    *olen = 6 + sig_alg_len;
   e16f8:	f10e 0006 	add.w	r0, lr, #6
   e16fc:	e000      	b.n	e1700 <mbedtls_ssl_handshake_client_step+0x85c>
    const int *md;
#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;
   e16fe:	2000      	movs	r0, #0
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
   e1700:	4407      	add	r7, r0
#endif

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    if( uses_ec )
   e1702:	f1ba 0f00 	cmp.w	sl, #0
   e1706:	d05e      	beq.n	e17c6 <mbedtls_ssl_handshake_client_step+0x922>
    *olen = 0;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_elliptic_curves extension" ) );

#if defined(MBEDTLS_ECP_C)
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e1708:	6823      	ldr	r3, [r4, #0]
static void ssl_write_supported_elliptic_curves_ext( mbedtls_ssl_context *ssl,
                                                     unsigned char *buf,
                                                     size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e170a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e170e:	6e1e      	ldr	r6, [r3, #96]	; 0x60
    unsigned char *elliptic_curve_list = p + 6;
    size_t elliptic_curve_len = 0;
   e1710:	f04f 0a00 	mov.w	sl, #0
   e1714:	3e01      	subs	r6, #1
    *olen = 0;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_elliptic_curves extension" ) );

#if defined(MBEDTLS_ECP_C)
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e1716:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   e171a:	b148      	cbz	r0, e1730 <mbedtls_ssl_handshake_client_step+0x88c>
   e171c:	9207      	str	r2, [sp, #28]
#else
    for( info = mbedtls_ecp_curve_list(); info->grp_id != MBEDTLS_ECP_DP_NONE; info++ )
#endif
    {
#if defined(MBEDTLS_ECP_C)
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
   e171e:	f7f7 faed 	bl	d8cfc <mbedtls_ecp_curve_info_from_grp_id>
#endif
        if( info == NULL )
   e1722:	9a07      	ldr	r2, [sp, #28]
   e1724:	b908      	cbnz	r0, e172a <mbedtls_ssl_handshake_client_step+0x886>
    const mbedtls_ecp_group_id *grp_id;
#else
    ((void) ssl);
#endif

    *olen = 0;
   e1726:	2300      	movs	r3, #0
   e1728:	e034      	b.n	e1794 <mbedtls_ssl_handshake_client_step+0x8f0>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid curve in ssl configuration" ) );
            return;
        }

        elliptic_curve_len += 2;
   e172a:	f10a 0a02 	add.w	sl, sl, #2
   e172e:	e7f2      	b.n	e1716 <mbedtls_ssl_handshake_client_step+0x872>

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    if( uses_ec )
    {
        ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
   e1730:	1cbe      	adds	r6, r7, #2
   e1732:	4446      	add	r6, r8
static void ssl_write_supported_elliptic_curves_ext( mbedtls_ssl_context *ssl,
                                                     unsigned char *buf,
                                                     size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e1734:	f502 5300 	add.w	r3, r2, #8192	; 0x2000
        }

        elliptic_curve_len += 2;
    }

    if( end < p || (size_t)( end - p ) < 6 + elliptic_curve_len )
   e1738:	429e      	cmp	r6, r3
   e173a:	d8f4      	bhi.n	e1726 <mbedtls_ssl_handshake_client_step+0x882>
   e173c:	1b9b      	subs	r3, r3, r6
   e173e:	f10a 0206 	add.w	r2, sl, #6
   e1742:	4293      	cmp	r3, r2
   e1744:	d3ef      	bcc.n	e1726 <mbedtls_ssl_handshake_client_step+0x882>
    }

    elliptic_curve_len = 0;

#if defined(MBEDTLS_ECP_C)
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e1746:	6823      	ldr	r3, [r4, #0]
   e1748:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   e174a:	46b2      	mov	sl, r6
   e174c:	3a01      	subs	r2, #1
   e174e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   e1752:	9207      	str	r2, [sp, #28]
   e1754:	ebc6 030a 	rsb	r3, r6, sl
   e1758:	9208      	str	r2, [sp, #32]
   e175a:	f10a 0a02 	add.w	sl, sl, #2
   e175e:	b150      	cbz	r0, e1776 <mbedtls_ssl_handshake_client_step+0x8d2>
#else
    for( info = mbedtls_ecp_curve_list(); info->grp_id != MBEDTLS_ECP_DP_NONE; info++ )
#endif
    {
#if defined(MBEDTLS_ECP_C)
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
   e1760:	f7f7 facc 	bl	d8cfc <mbedtls_ecp_curve_info_from_grp_id>
#endif
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id >> 8;
   e1764:	8843      	ldrh	r3, [r0, #2]
   e1766:	9a07      	ldr	r2, [sp, #28]
   e1768:	121b      	asrs	r3, r3, #8
   e176a:	f88a 3004 	strb.w	r3, [sl, #4]
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id & 0xFF;
   e176e:	8843      	ldrh	r3, [r0, #2]
   e1770:	f88a 3005 	strb.w	r3, [sl, #5]
   e1774:	e7eb      	b.n	e174e <mbedtls_ssl_handshake_client_step+0x8aa>
    }

    if( elliptic_curve_len == 0 )
   e1776:	2b00      	cmp	r3, #0
   e1778:	d0d5      	beq.n	e1726 <mbedtls_ssl_handshake_client_step+0x882>
        return;

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES      ) & 0xFF );
   e177a:	220a      	movs	r2, #10
   e177c:	7072      	strb	r2, [r6, #1]

    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 ) >> 8 ) & 0xFF );
   e177e:	1c9a      	adds	r2, r3, #2
   e1780:	0a12      	lsrs	r2, r2, #8
   e1782:	70b2      	strb	r2, [r6, #2]
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 )      ) & 0xFF );
   e1784:	b2da      	uxtb	r2, r3
   e1786:	1c91      	adds	r1, r2, #2
   e1788:	70f1      	strb	r1, [r6, #3]

    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
   e178a:	0a19      	lsrs	r1, r3, #8
    }

    if( elliptic_curve_len == 0 )
        return;

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES >> 8 ) & 0xFF );
   e178c:	7030      	strb	r0, [r6, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES      ) & 0xFF );

    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 ) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 )      ) & 0xFF );

    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
   e178e:	7131      	strb	r1, [r6, #4]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     )      ) & 0xFF );
   e1790:	7172      	strb	r2, [r6, #5]

    *olen = 6 + elliptic_curve_len;
   e1792:	3306      	adds	r3, #6
#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    if( uses_ec )
    {
        ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
        ext_len += olen;
   e1794:	18f8      	adds	r0, r7, r3
static void ssl_write_supported_point_formats_ext( mbedtls_ssl_context *ssl,
                                                   unsigned char *buf,
                                                   size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e1796:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    if( uses_ec )
    {
        ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
        ext_len += olen;

        ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
   e179a:	1c83      	adds	r3, r0, #2
   e179c:	4443      	add	r3, r8
static void ssl_write_supported_point_formats_ext( mbedtls_ssl_context *ssl,
                                                   unsigned char *buf,
                                                   size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e179e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000

    *olen = 0;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_point_formats extension" ) );

    if( end < p || (size_t)( end - p ) < 6 )
   e17a2:	4293      	cmp	r3, r2
   e17a4:	f04f 0700 	mov.w	r7, #0
   e17a8:	d80c      	bhi.n	e17c4 <mbedtls_ssl_handshake_client_step+0x920>
   e17aa:	1ad2      	subs	r2, r2, r3
   e17ac:	2a05      	cmp	r2, #5
   e17ae:	d909      	bls.n	e17c4 <mbedtls_ssl_handshake_client_step+0x920>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );
   e17b0:	220b      	movs	r2, #11
   e17b2:	705a      	strb	r2, [r3, #1]

    *p++ = 0x00;
    *p++ = 2;
   e17b4:	2202      	movs	r2, #2
   e17b6:	70da      	strb	r2, [r3, #3]

    *p++ = 1;
   e17b8:	2201      	movs	r2, #1
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
   e17ba:	701f      	strb	r7, [r3, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );

    *p++ = 0x00;
   e17bc:	709f      	strb	r7, [r3, #2]
    *p++ = 2;

    *p++ = 1;
    *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;
   e17be:	715f      	strb	r7, [r3, #5]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );

    *p++ = 0x00;
    *p++ = 2;

    *p++ = 1;
   e17c0:	711a      	strb	r2, [r3, #4]
    *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;

    *olen = 6;
   e17c2:	2706      	movs	r7, #6
    {
        ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
        ext_len += olen;

        ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
        ext_len += olen;
   e17c4:	4407      	add	r7, r0
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
   e17c6:	6823      	ldr	r3, [r4, #0]
   e17c8:	f8b3 007c 	ldrh.w	r0, [r3, #124]	; 0x7c
   e17cc:	f410 70e0 	ands.w	r0, r0, #448	; 0x1c0
   e17d0:	d018      	beq.n	e1804 <mbedtls_ssl_handshake_client_step+0x960>
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e17d2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    ssl_write_ecjpake_kkpp_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
   e17d6:	1cbb      	adds	r3, r7, #2
   e17d8:	4443      	add	r3, r8
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e17da:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );

    if( end < p || (size_t)( end - p ) < 5 )
   e17de:	4293      	cmp	r3, r2
   e17e0:	f04f 0000 	mov.w	r0, #0
   e17e4:	d80e      	bhi.n	e1804 <mbedtls_ssl_handshake_client_step+0x960>
   e17e6:	1ad2      	subs	r2, r2, r3
   e17e8:	2a04      	cmp	r2, #4
   e17ea:	d90b      	bls.n	e1804 <mbedtls_ssl_handshake_client_step+0x960>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
   e17ec:	2201      	movs	r2, #1
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
   e17ee:	7018      	strb	r0, [r3, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );

    *p++ = 0x00;
   e17f0:	7098      	strb	r0, [r3, #2]
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
   e17f2:	705a      	strb	r2, [r3, #1]

    *p++ = 0x00;
    *p++ = 1;
   e17f4:	70da      	strb	r2, [r3, #3]

    *p++ = ssl->conf->mfl_code;
   e17f6:	6822      	ldr	r2, [r4, #0]
   e17f8:	f8b2 207c 	ldrh.w	r2, [r2, #124]	; 0x7c
   e17fc:	f3c2 1282 	ubfx	r2, r2, #6, #3
   e1800:	711a      	strb	r2, [r3, #4]

    *olen = 5;
   e1802:	2005      	movs	r0, #5
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;

    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
   e1804:	6823      	ldr	r3, [r4, #0]
   e1806:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
   e180a:	f003 0302 	and.w	r3, r3, #2
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
   e180e:	4407      	add	r7, r0
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;

    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
   e1810:	f003 06ff 	and.w	r6, r3, #255	; 0xff
   e1814:	b313      	cbz	r3, e185c <mbedtls_ssl_handshake_client_step+0x9b8>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e1816:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
   e181a:	1cb8      	adds	r0, r7, #2
   e181c:	4440      	add	r0, r8
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e181e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
   e1822:	4298      	cmp	r0, r3
   e1824:	d815      	bhi.n	e1852 <mbedtls_ssl_handshake_client_step+0x9ae>
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
   e1826:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e1828:	6e92      	ldr	r2, [r2, #104]	; 0x68
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
   e182a:	1a1b      	subs	r3, r3, r0
   e182c:	1d16      	adds	r6, r2, #4
   e182e:	42b3      	cmp	r3, r6
   e1830:	f04f 0300 	mov.w	r3, #0
   e1834:	d30f      	bcc.n	e1856 <mbedtls_ssl_handshake_client_step+0x9b2>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );
   e1836:	7003      	strb	r3, [r0, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );
   e1838:	2323      	movs	r3, #35	; 0x23
   e183a:	7043      	strb	r3, [r0, #1]

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
   e183c:	0a13      	lsrs	r3, r2, #8
   e183e:	7083      	strb	r3, [r0, #2]
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );
   e1840:	70c2      	strb	r2, [r0, #3]

    *olen = 4;

    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )
   e1842:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e1844:	6e59      	ldr	r1, [r3, #100]	; 0x64
   e1846:	b141      	cbz	r1, e185a <mbedtls_ssl_handshake_client_step+0x9b6>
   e1848:	b13a      	cbz	r2, e185a <mbedtls_ssl_handshake_client_step+0x9b6>
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "sending session ticket of length %d", tlen ) );

    memcpy( p, ssl->session_negotiate->ticket, tlen );
   e184a:	3004      	adds	r0, #4
   e184c:	f006 fb0b 	bl	e7e66 <memcpy>
   e1850:	e004      	b.n	e185c <mbedtls_ssl_handshake_client_step+0x9b8>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;
   e1852:	2600      	movs	r6, #0
   e1854:	e002      	b.n	e185c <mbedtls_ssl_handshake_client_step+0x9b8>
   e1856:	461e      	mov	r6, r3
   e1858:	e000      	b.n	e185c <mbedtls_ssl_handshake_client_step+0x9b8>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );

    *olen = 4;
   e185a:	2604      	movs	r6, #4
    ((void) olen);

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
                   ext_len ) );

    if( ext_len > 0 )
   e185c:	19bf      	adds	r7, r7, r6
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
   e185e:	bf1e      	ittt	ne
   e1860:	0a3b      	lsrne	r3, r7, #8
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
        p += ext_len;
   e1862:	eb0b 0807 	addne.w	r8, fp, r7
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
                   ext_len ) );

    if( ext_len > 0 )
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
   e1866:	712b      	strbne	r3, [r5, #4]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
        p += ext_len;
    }

    ssl->out_msglen  = p - buf;
   e1868:	ebc9 0308 	rsb	r3, r9, r8
                   ext_len ) );

    if( ext_len > 0 )
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
   e186c:	bf18      	it	ne
   e186e:	716f      	strbne	r7, [r5, #5]
        p += ext_len;
    }

    ssl->out_msglen  = p - buf;
   e1870:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e1874:	2316      	movs	r3, #22
   e1876:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
   e187a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e187e:	2201      	movs	r2, #1
   e1880:	701a      	strb	r2, [r3, #0]

    ssl->state++;
   e1882:	6863      	ldr	r3, [r4, #4]
   e1884:	4413      	add	r3, r2
   e1886:	e603      	b.n	e1490 <mbedtls_ssl_handshake_client_step+0x5ec>
                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver,
                            ssl->major_ver, ssl->minor_ver,
                            ssl->conf->max_major_ver, ssl->conf->max_minor_ver ) );

        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );
   e1888:	2246      	movs	r2, #70	; 0x46
   e188a:	2102      	movs	r1, #2
   e188c:	4620      	mov	r0, r4
   e188e:	f000 ff37 	bl	e2700 <mbedtls_ssl_send_alert_message>

        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
   e1892:	4daf      	ldr	r5, [pc, #700]	; (e1b50 <mbedtls_ssl_handshake_client_step+0xcac>)
   e1894:	e1b6      	b.n	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
   e1896:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   e1898:	f106 022b 	add.w	r2, r6, #43	; 0x2b
   e189c:	4293      	cmp	r3, r2
   e189e:	d912      	bls.n	e18c6 <mbedtls_ssl_handshake_client_step+0xa22>
    {
        ext_len = ( ( buf[38 + n] <<  8 )
   e18a0:	eb0a 0206 	add.w	r2, sl, r6
                  | ( buf[39 + n]       ) );
   e18a4:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
   e18a8:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   e18ac:	ea42 2707 	orr.w	r7, r2, r7, lsl #8

        if( ( ext_len > 0 && ext_len < 4 ) ||
   e18b0:	1e7a      	subs	r2, r7, #1
   e18b2:	2a02      	cmp	r2, #2
   e18b4:	f67f abc6 	bls.w	e1044 <mbedtls_ssl_handshake_client_step+0x1a0>
   e18b8:	f106 022c 	add.w	r2, r6, #44	; 0x2c
   e18bc:	443a      	add	r2, r7
   e18be:	4293      	cmp	r3, r2
   e18c0:	f47f abc0 	bne.w	e1044 <mbedtls_ssl_handshake_client_step+0x1a0>
   e18c4:	e005      	b.n	e18d2 <mbedtls_ssl_handshake_client_step+0xa2e>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }
    }
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
   e18c6:	f106 022a 	add.w	r2, r6, #42	; 0x2a
   e18ca:	4293      	cmp	r3, r2
   e18cc:	f47f abba 	bne.w	e1044 <mbedtls_ssl_handshake_client_step+0x1a0>
    {
        ext_len = 0;
   e18d0:	2700      	movs	r7, #0
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
   e18d2:	eb0a 0306 	add.w	r3, sl, r6
   e18d6:	f893 9023 	ldrb.w	r9, [r3, #35]	; 0x23
   e18da:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
   e18de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
   e18e2:	ea42 2909 	orr.w	r9, r2, r9, lsl #8
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
   e18e6:	2b00      	cmp	r3, #0
   e18e8:	f43f ab62 	beq.w	e0fb0 <mbedtls_ssl_handshake_client_step+0x10c>
#endif/* MBEDTLS_ZLIB_SUPPORT */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
   e18ec:	222f      	movs	r2, #47	; 0x2f
   e18ee:	2102      	movs	r1, #2
   e18f0:	4620      	mov	r0, r4
   e18f2:	f000 ff05 	bl	e2700 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
   e18f6:	4d97      	ldr	r5, [pc, #604]	; (e1b54 <mbedtls_ssl_handshake_client_step+0xcb0>)
   e18f8:	e184      	b.n	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
   e18fa:	2e00      	cmp	r6, #0
   e18fc:	f43f abb0 	beq.w	e1060 <mbedtls_ssl_handshake_client_step+0x1bc>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
   e1900:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
   e1902:	6803      	ldr	r3, [r0, #0]
   e1904:	4599      	cmp	r9, r3
   e1906:	f47f abab 	bne.w	e1060 <mbedtls_ssl_handshake_client_step+0x1bc>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
   e190a:	6843      	ldr	r3, [r0, #4]
   e190c:	2b00      	cmp	r3, #0
   e190e:	f47f aba7 	bne.w	e1060 <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->session_negotiate->compression != comp ||
   e1912:	6883      	ldr	r3, [r0, #8]
   e1914:	429e      	cmp	r6, r3
   e1916:	f47f aba3 	bne.w	e1060 <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
   e191a:	4632      	mov	r2, r6
   e191c:	4641      	mov	r1, r8
   e191e:	300c      	adds	r0, #12
   e1920:	f006 fa92 	bl	e7e48 <memcmp>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
   e1924:	2800      	cmp	r0, #0
   e1926:	f47f ab9b 	bne.w	e1060 <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
    }
    else
    {
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
   e192a:	230c      	movs	r3, #12
   e192c:	6063      	str	r3, [r4, #4]

        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
   e192e:	4620      	mov	r0, r4
   e1930:	f000 fb26 	bl	e1f80 <mbedtls_ssl_derive_keys>
   e1934:	4680      	mov	r8, r0
   e1936:	2800      	cmp	r0, #0
   e1938:	f43f aba5 	beq.w	e1086 <mbedtls_ssl_handshake_client_step+0x1e2>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   e193c:	2250      	movs	r2, #80	; 0x50
   e193e:	2102      	movs	r1, #2
   e1940:	4620      	mov	r0, r4
   e1942:	f000 fedd 	bl	e2700 <mbedtls_ssl_send_alert_message>
   e1946:	4645      	mov	r5, r8
   e1948:	e15c      	b.n	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
            ssl->session_negotiate->ciphersuite )
   e194a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e194c:	6812      	ldr	r2, [r2, #0]
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
   e194e:	4290      	cmp	r0, r2
   e1950:	f47f ab9e 	bne.w	e1090 <mbedtls_ssl_handshake_client_step+0x1ec>
        {
            break;
        }
    }

    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
   e1954:	f7ff f9c8 	bl	e0ce8 <mbedtls_ssl_ciphersuite_from_id>
    if( ssl_validate_ciphersuite( suite_info, ssl, ssl->minor_ver, ssl->minor_ver ) != 0 )
   e1958:	68e3      	ldr	r3, [r4, #12]
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
   e195a:	2800      	cmp	r0, #0
   e195c:	f43f ab9d 	beq.w	e109a <mbedtls_ssl_handshake_client_step+0x1f6>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
   e1960:	6902      	ldr	r2, [r0, #16]
   e1962:	429a      	cmp	r2, r3
   e1964:	f73f ab99 	bgt.w	e109a <mbedtls_ssl_handshake_client_step+0x1f6>
   e1968:	6982      	ldr	r2, [r0, #24]
   e196a:	4293      	cmp	r3, r2
   e196c:	f73f ab95 	bgt.w	e109a <mbedtls_ssl_handshake_client_step+0x1f6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
   e1970:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e1972:	2200      	movs	r2, #0
   e1974:	605a      	str	r2, [r3, #4]

    ext = buf + 40 + n;
   e1976:	f106 0228 	add.w	r2, r6, #40	; 0x28
   e197a:	4452      	add	r2, sl
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
   e197c:	2601      	movs	r6, #1
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
   e197e:	f64f 7001 	movw	r0, #65281	; 0xff01

    ext = buf + 40 + n;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
   e1982:	2f00      	cmp	r7, #0
   e1984:	d051      	beq.n	e1a2a <mbedtls_ssl_handshake_client_step+0xb86>
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
   e1986:	7811      	ldrb	r1, [r2, #0]
   e1988:	7853      	ldrb	r3, [r2, #1]
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
   e198a:	f892 e002 	ldrb.w	lr, [r2, #2]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
   e198e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
   e1992:	78d1      	ldrb	r1, [r2, #3]
   e1994:	ea41 210e 	orr.w	r1, r1, lr, lsl #8

        if( ext_size + 4 > ext_len )
   e1998:	f101 0e04 	add.w	lr, r1, #4
   e199c:	4577      	cmp	r7, lr
   e199e:	f4ff ab51 	bcc.w	e1044 <mbedtls_ssl_handshake_client_step+0x1a0>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
   e19a2:	2b0b      	cmp	r3, #11
   e19a4:	d02a      	beq.n	e19fc <mbedtls_ssl_handshake_client_step+0xb58>
   e19a6:	dc02      	bgt.n	e19ae <mbedtls_ssl_handshake_client_step+0xb0a>
   e19a8:	2b01      	cmp	r3, #1
   e19aa:	d00c      	beq.n	e19c6 <mbedtls_ssl_handshake_client_step+0xb22>
   e19ac:	e04d      	b.n	e1a4a <mbedtls_ssl_handshake_client_step+0xba6>
   e19ae:	2b23      	cmp	r3, #35	; 0x23
   e19b0:	d01a      	beq.n	e19e8 <mbedtls_ssl_handshake_client_step+0xb44>
   e19b2:	4283      	cmp	r3, r0
   e19b4:	d149      	bne.n	e1a4a <mbedtls_ssl_handshake_client_step+0xba6>
        }
    }
    else
#endif /* MBEDTLS_SSL_RENEGOTIATION */
    {
        if( len != 1 || buf[0] != 0x00 )
   e19b6:	2901      	cmp	r1, #1
   e19b8:	d144      	bne.n	e1a44 <mbedtls_ssl_handshake_client_step+0xba0>
   e19ba:	7913      	ldrb	r3, [r2, #4]
   e19bc:	2b00      	cmp	r3, #0
   e19be:	d141      	bne.n	e1a44 <mbedtls_ssl_handshake_client_step+0xba0>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
   e19c0:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
   e19c4:	e041      	b.n	e1a4a <mbedtls_ssl_handshake_client_step+0xba6>
{
    /*
     * server should use the extension only if we did,
     * and if so the server's value should match ours (and len is always 1)
     */
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||
   e19c6:	6823      	ldr	r3, [r4, #0]
   e19c8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
   e19cc:	f403 7ce0 	and.w	ip, r3, #448	; 0x1c0
   e19d0:	f1bc 0f00 	cmp.w	ip, #0
   e19d4:	d036      	beq.n	e1a44 <mbedtls_ssl_handshake_client_step+0xba0>
   e19d6:	2901      	cmp	r1, #1
   e19d8:	d134      	bne.n	e1a44 <mbedtls_ssl_handshake_client_step+0xba0>
        len != 1 ||
   e19da:	f892 c004 	ldrb.w	ip, [r2, #4]
   e19de:	f3c3 1382 	ubfx	r3, r3, #6, #3
   e19e2:	459c      	cmp	ip, r3
   e19e4:	d031      	beq.n	e1a4a <mbedtls_ssl_handshake_client_step+0xba6>
   e19e6:	e02d      	b.n	e1a44 <mbedtls_ssl_handshake_client_step+0xba0>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static int ssl_parse_session_ticket_ext( mbedtls_ssl_context *ssl,
                                         const unsigned char *buf,
                                         size_t len )
{
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||
   e19e8:	6823      	ldr	r3, [r4, #0]
   e19ea:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
   e19ee:	079b      	lsls	r3, r3, #30
   e19f0:	d528      	bpl.n	e1a44 <mbedtls_ssl_handshake_client_step+0xba0>
   e19f2:	bb39      	cbnz	r1, e1a44 <mbedtls_ssl_handshake_client_step+0xba0>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
   e19f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e19f6:	f8c3 6358 	str.w	r6, [r3, #856]	; 0x358
   e19fa:	e026      	b.n	e1a4a <mbedtls_ssl_handshake_client_step+0xba6>
                                                  size_t len )
{
    size_t list_size;
    const unsigned char *p;

    if( len == 0 || (size_t)( buf[0] + 1 ) != len )
   e19fc:	2900      	cmp	r1, #0
   e19fe:	f43f ab21 	beq.w	e1044 <mbedtls_ssl_handshake_client_step+0x1a0>
   e1a02:	7913      	ldrb	r3, [r2, #4]
   e1a04:	f103 0c01 	add.w	ip, r3, #1
   e1a08:	4561      	cmp	r1, ip
   e1a0a:	f47f ab1b 	bne.w	e1044 <mbedtls_ssl_handshake_client_step+0x1a0>
   e1a0e:	f102 0c04 	add.w	ip, r2, #4
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    list_size = buf[0];

    p = buf + 1;
    while( list_size > 0 )
   e1a12:	b1bb      	cbz	r3, e1a44 <mbedtls_ssl_handshake_client_step+0xba0>
    {
        if( p[0] == MBEDTLS_ECP_PF_UNCOMPRESSED ||
   e1a14:	f81c 8f01 	ldrb.w	r8, [ip, #1]!
   e1a18:	f1b8 0f01 	cmp.w	r8, #1
   e1a1c:	d803      	bhi.n	e1a26 <mbedtls_ssl_handshake_client_step+0xb82>
            p[0] == MBEDTLS_ECP_PF_COMPRESSED )
        {
#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C)
            ssl->handshake->ecdh_ctx.point_format = p[0];
   e1a1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e1a20:	f8c3 80e0 	str.w	r8, [r3, #224]	; 0xe0
   e1a24:	e011      	b.n	e1a4a <mbedtls_ssl_handshake_client_step+0xba6>
#endif
            MBEDTLS_SSL_DEBUG_MSG( 4, ( "point format selected: %d", p[0] ) );
            return( 0 );
        }

        list_size--;
   e1a26:	3b01      	subs	r3, #1
   e1a28:	e7f3      	b.n	e1a12 <mbedtls_ssl_handshake_client_step+0xb6e>
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
   e1a2a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   e1a2e:	2b00      	cmp	r3, #0
   e1a30:	f040 80e8 	bne.w	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
   e1a34:	6823      	ldr	r3, [r4, #0]
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
   e1a36:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   e1a3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
   e1a3e:	2b20      	cmp	r3, #32
   e1a40:	f040 80e0 	bne.w	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
        p++;
    }

    MBEDTLS_SSL_DEBUG_MSG( 1, ( "no point format in common" ) );
    mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   e1a44:	2228      	movs	r2, #40	; 0x28
   e1a46:	f7ff bb29 	b.w	e109c <mbedtls_ssl_handshake_client_step+0x1f8>
        default:
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
   e1a4a:	1a79      	subs	r1, r7, r1
   e1a4c:	1f0f      	subs	r7, r1, #4
        ext += 4 + ext_size;

        if( ext_len > 0 && ext_len < 4 )
   e1a4e:	3905      	subs	r1, #5
   e1a50:	2902      	cmp	r1, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
        ext += 4 + ext_size;
   e1a52:	4472      	add	r2, lr

        if( ext_len > 0 && ext_len < 4 )
   e1a54:	d895      	bhi.n	e1982 <mbedtls_ssl_handshake_client_step+0xade>
    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e1a56:	4d40      	ldr	r5, [pc, #256]	; (e1b58 <mbedtls_ssl_handshake_client_step+0xcb4>)
   e1a58:	e0d4      	b.n	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
    {
        if( ssl_parse_server_ecdh_params( ssl, &p, end ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
   e1a5a:	222f      	movs	r2, #47	; 0x2f
   e1a5c:	2102      	movs	r1, #2
   e1a5e:	4620      	mov	r0, r4
   e1a60:	f000 fe4e 	bl	e2700 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
   e1a64:	4d3d      	ldr	r5, [pc, #244]	; (e1b5c <mbedtls_ssl_handshake_client_step+0xcb8>)
   e1a66:	e0cd      	b.n	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>

        if( p > end - 2 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e1a68:	2232      	movs	r2, #50	; 0x32
   e1a6a:	e7f7      	b.n	e1a5c <mbedtls_ssl_handshake_client_step+0xbb8>
        }

        /*
         * Verify signature
         */
        if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk, pk_alg ) )
   e1a6c:	4641      	mov	r1, r8
   e1a6e:	30bc      	adds	r0, #188	; 0xbc
   e1a70:	f7f9 fb44 	bl	db0fc <mbedtls_pk_can_do>
   e1a74:	b930      	cbnz	r0, e1a84 <mbedtls_ssl_handshake_client_step+0xbe0>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   e1a76:	2228      	movs	r2, #40	; 0x28
   e1a78:	2102      	movs	r1, #2
   e1a7a:	4620      	mov	r0, r4
   e1a7c:	f000 fe40 	bl	e2700 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
   e1a80:	4d37      	ldr	r5, [pc, #220]	; (e1b60 <mbedtls_ssl_handshake_client_step+0xcbc>)
   e1a82:	e0bf      	b.n	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
        if( ssl->handshake->ecrs_enabled )
            rs_ctx = &ssl->handshake->ecrs_ctx.pk;
#endif

        if( ( ret = mbedtls_pk_verify_restartable(
                        &ssl->session_negotiate->peer_cert->pk,
   e1a84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
        if( ssl->handshake->ecrs_enabled )
            rs_ctx = &ssl->handshake->ecrs_ctx.pk;
#endif

        if( ( ret = mbedtls_pk_verify_restartable(
   e1a86:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e1a88:	f8cd b004 	str.w	fp, [sp, #4]
   e1a8c:	2300      	movs	r3, #0
   e1a8e:	9302      	str	r3, [sp, #8]
   e1a90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e1a92:	9300      	str	r3, [sp, #0]
   e1a94:	aa0e      	add	r2, sp, #56	; 0x38
   e1a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e1a98:	4649      	mov	r1, r9
   e1a9a:	30bc      	adds	r0, #188	; 0xbc
   e1a9c:	f7f9 fb36 	bl	db10c <mbedtls_pk_verify_restartable>
   e1aa0:	4606      	mov	r6, r0
   e1aa2:	2800      	cmp	r0, #0
   e1aa4:	f43f abd4 	beq.w	e1250 <mbedtls_ssl_handshake_client_step+0x3ac>
        {
#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
            if( ret != MBEDTLS_ERR_ECP_IN_PROGRESS )
#endif
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                                MBEDTLS_SSL_ALERT_MSG_DECRYPT_ERROR );
   e1aa8:	2233      	movs	r2, #51	; 0x33
   e1aaa:	2102      	movs	r1, #2
   e1aac:	4620      	mov	r0, r4
   e1aae:	f000 fe27 	bl	e2700 <mbedtls_ssl_send_alert_message>
   e1ab2:	4635      	mov	r5, r6
   e1ab4:	e0a6      	b.n	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
        }
        else
#endif
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e1ab6:	4d2b      	ldr	r5, [pc, #172]	; (e1b64 <mbedtls_ssl_handshake_client_step+0xcc0>)
   e1ab8:	e0a4      	b.n	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );

    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
        ssl->state++;
   e1aba:	2306      	movs	r3, #6
   e1abc:	f7ff bbca 	b.w	e1254 <mbedtls_ssl_handshake_client_step+0x3b0>
        return( 0 );
    }

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e1ac0:	4631      	mov	r1, r6
   e1ac2:	4620      	mov	r0, r4
   e1ac4:	f000 fe38 	bl	e2738 <mbedtls_ssl_read_record>
   e1ac8:	2800      	cmp	r0, #0
   e1aca:	f47f aaf0 	bne.w	e10ae <mbedtls_ssl_handshake_client_step+0x20a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e1ace:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e1ad0:	2b16      	cmp	r3, #22
   e1ad2:	f47f ab03 	bne.w	e10dc <mbedtls_ssl_handshake_client_step+0x238>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
   e1ad6:	6863      	ldr	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
   e1ad8:	6e62      	ldr	r2, [r4, #100]	; 0x64
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
   e1ada:	3301      	adds	r3, #1
   e1adc:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
   e1ade:	7813      	ldrb	r3, [r2, #0]
   e1ae0:	2b0d      	cmp	r3, #13
   e1ae2:	bf0c      	ite	eq
   e1ae4:	2301      	moveq	r3, #1
   e1ae6:	2300      	movne	r3, #0
   e1ae8:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
                        ssl->client_auth ? "a" : "no" ) );

    if( ssl->client_auth == 0 )
   e1aec:	d002      	beq.n	e1af4 <mbedtls_ssl_handshake_client_step+0xc50>
    {
        /* Current message is probably the ServerHelloDone */
        ssl->keep_current_message = 1;
   e1aee:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
   e1af2:	e087      	b.n	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
     *  superficially sane.
     */
    buf = ssl->in_msg;

    /* certificate_types */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) )
   e1af4:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   e1af6:	2e04      	cmp	r6, #4
   e1af8:	d806      	bhi.n	e1b08 <mbedtls_ssl_handshake_client_step+0xc64>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e1afa:	2232      	movs	r2, #50	; 0x32
   e1afc:	2102      	movs	r1, #2
   e1afe:	4620      	mov	r0, r4
   e1b00:	f000 fdfe 	bl	e2700 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
   e1b04:	4d18      	ldr	r5, [pc, #96]	; (e1b68 <mbedtls_ssl_handshake_client_step+0xcc4>)
   e1b06:	e07d      	b.n	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
    }
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
   e1b08:	7913      	ldrb	r3, [r2, #4]
     * Both reach at most the index:
     *    ...hdr_len + 2 + n,
     * therefore the buffer length at this point must be greater than that
     * regardless of the actual code path.
     */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
   e1b0a:	1d98      	adds	r0, r3, #6
   e1b0c:	4286      	cmp	r6, r0
   e1b0e:	d9f4      	bls.n	e1afa <mbedtls_ssl_handshake_client_step+0xc56>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
    }

    /* supported_signature_algorithms */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   e1b10:	68e1      	ldr	r1, [r4, #12]
   e1b12:	2903      	cmp	r1, #3
   e1b14:	d10a      	bne.n	e1b2c <mbedtls_ssl_handshake_client_step+0xc88>
    {
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
   e1b16:	18d1      	adds	r1, r2, r3
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
   e1b18:	794f      	ldrb	r7, [r1, #5]
   e1b1a:	5c11      	ldrb	r1, [r2, r0]
         *     buf[...hdr_len + 3 + n + sig_alg_len - 1 + 1],
         * which reduces to:
         *     buf[...hdr_len + 3 + n + sig_alg_len],
         * which is one less than we need the buf to be.
         */
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
   e1b1c:	1dd8      	adds	r0, r3, #7
    /* supported_signature_algorithms */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
   e1b1e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
         *     buf[...hdr_len + 3 + n + sig_alg_len - 1 + 1],
         * which reduces to:
         *     buf[...hdr_len + 3 + n + sig_alg_len],
         * which is one less than we need the buf to be.
         */
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
   e1b22:	4408      	add	r0, r1
   e1b24:	4286      	cmp	r6, r0
   e1b26:	d9e8      	bls.n	e1afa <mbedtls_ssl_handshake_client_step+0xc56>
   e1b28:	3302      	adds	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
                                        ",%d", sig_alg[i], sig_alg[i + 1]  ) );
        }
#endif

        n += 2 + sig_alg_len;
   e1b2a:	440b      	add	r3, r1
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    /* certificate_authorities */
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
   e1b2c:	441a      	add	r2, r3
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );

    n += dn_len;
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
   e1b2e:	3307      	adds	r3, #7
   e1b30:	7951      	ldrb	r1, [r2, #5]
   e1b32:	7992      	ldrb	r2, [r2, #6]
   e1b34:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   e1b38:	4413      	add	r3, r2
   e1b3a:	429e      	cmp	r6, r3
   e1b3c:	d062      	beq.n	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
   e1b3e:	e7dc      	b.n	e1afa <mbedtls_ssl_handshake_client_step+0xc56>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e1b40:	2232      	movs	r2, #50	; 0x32
   e1b42:	2102      	movs	r1, #2
   e1b44:	4620      	mov	r0, r4
   e1b46:	f000 fddb 	bl	e2700 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
   e1b4a:	4d08      	ldr	r5, [pc, #32]	; (e1b6c <mbedtls_ssl_handshake_client_step+0xcc8>)
   e1b4c:	e05a      	b.n	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
   e1b4e:	bf00      	nop
   e1b50:	ffff9180 	.word	0xffff9180
   e1b54:	ffff8f80 	.word	0xffff8f80
   e1b58:	ffff8680 	.word	0xffff8680
   e1b5c:	ffff8500 	.word	0xffff8500
   e1b60:	ffff9300 	.word	0xffff9300
   e1b64:	ffff9400 	.word	0xffff9400
   e1b68:	ffff8580 	.word	0xffff8580
   e1b6c:	ffff8480 	.word	0xffff8480
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( ((uint32_t) msg[0]) << 24 ) | ( msg[1] << 16 ) |
               ( msg[2] << 8 ) | ( msg[3] );
   e1b70:	79f2      	ldrb	r2, [r6, #7]
   e1b72:	9207      	str	r2, [sp, #28]

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
   e1b74:	7a37      	ldrb	r7, [r6, #8]
   e1b76:	7a72      	ldrb	r2, [r6, #9]
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( ((uint32_t) msg[0]) << 24 ) | ( msg[1] << 16 ) |
   e1b78:	f896 8004 	ldrb.w	r8, [r6, #4]
   e1b7c:	f896 b005 	ldrb.w	fp, [r6, #5]
               ( msg[2] << 8 ) | ( msg[3] );
   e1b80:	f896 a006 	ldrb.w	sl, [r6, #6]

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
   e1b84:	ea42 2707 	orr.w	r7, r2, r7, lsl #8

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
   e1b88:	f107 020a 	add.w	r2, r7, #10
   e1b8c:	4293      	cmp	r3, r2
   e1b8e:	f47f aca0 	bne.w	e14d2 <mbedtls_ssl_handshake_client_step+0x62e>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket length: %d", ticket_len ) );

    /* We're not waiting for a NewSessionTicket message any more */
    ssl->handshake->new_session_ticket = 0;
   e1b92:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e1b94:	f8c3 9358 	str.w	r9, [r3, #856]	; 0x358
    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
   e1b98:	230c      	movs	r3, #12
   e1b9a:	6063      	str	r3, [r4, #4]

    /*
     * Zero-length ticket means the server changed his mind and doesn't want
     * to send a ticket after all, so just forget it
     */
    if( ticket_len == 0 )
   e1b9c:	2f00      	cmp	r7, #0
   e1b9e:	d031      	beq.n	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
        return( 0 );

    mbedtls_platform_zeroize( ssl->session_negotiate->ticket,
   e1ba0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
                              ssl->session_negotiate->ticket_len );
   e1ba2:	6e99      	ldr	r1, [r3, #104]	; 0x68
   e1ba4:	6e58      	ldr	r0, [r3, #100]	; 0x64
   e1ba6:	f7fa fd23 	bl	dc5f0 <mbedtls_platform_zeroize>
    mbedtls_free( ssl->session_negotiate->ticket );
   e1baa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e1bac:	6e58      	ldr	r0, [r3, #100]	; 0x64
   e1bae:	f003 ffc7 	bl	e5b40 <free>
    ssl->session_negotiate->ticket = NULL;
   e1bb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e1bb4:	f8c3 9064 	str.w	r9, [r3, #100]	; 0x64
    ssl->session_negotiate->ticket_len = 0;
   e1bb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
   e1bba:	4639      	mov	r1, r7

    mbedtls_platform_zeroize( ssl->session_negotiate->ticket,
                              ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
    ssl->session_negotiate->ticket_len = 0;
   e1bbc:	f8c3 9068 	str.w	r9, [r3, #104]	; 0x68

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
   e1bc0:	2001      	movs	r0, #1
   e1bc2:	f006 f92b 	bl	e7e1c <calloc>
   e1bc6:	b930      	cbnz	r0, e1bd6 <mbedtls_ssl_handshake_client_step+0xd32>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   e1bc8:	2250      	movs	r2, #80	; 0x50
   e1bca:	2102      	movs	r1, #2
   e1bcc:	4620      	mov	r0, r4
   e1bce:	f000 fd97 	bl	e2700 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e1bd2:	4d0e      	ldr	r5, [pc, #56]	; (e1c0c <mbedtls_ssl_handshake_client_step+0xd68>)
   e1bd4:	e016      	b.n	e1c04 <mbedtls_ssl_handshake_client_step+0xd60>
    }

    memcpy( ticket, msg + 6, ticket_len );
   e1bd6:	463a      	mov	r2, r7
   e1bd8:	f106 010a 	add.w	r1, r6, #10
   e1bdc:	9008      	str	r0, [sp, #32]
   e1bde:	f006 f942 	bl	e7e66 <memcpy>

    ssl->session_negotiate->ticket = ticket;
   e1be2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e1be4:	9b08      	ldr	r3, [sp, #32]
   e1be6:	6653      	str	r3, [r2, #100]	; 0x64
    ssl->session_negotiate->ticket_len = ticket_len;
   e1be8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e1bea:	669f      	str	r7, [r3, #104]	; 0x68
    ssl->session_negotiate->ticket_lifetime = lifetime;
   e1bec:	9b07      	ldr	r3, [sp, #28]
   e1bee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e1bf0:	ea43 6808 	orr.w	r8, r3, r8, lsl #24
   e1bf4:	ea48 4b0b 	orr.w	fp, r8, fp, lsl #16
   e1bf8:	ea4b 230a 	orr.w	r3, fp, sl, lsl #8
   e1bfc:	66d3      	str	r3, [r2, #108]	; 0x6c
     * RFC 5077 section 3.4:
     * "If the client receives a session ticket from the server, then it
     * discards any Session ID that was sent in the ServerHello."
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket in use, discarding session id" ) );
    ssl->session_negotiate->id_len = 0;
   e1bfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e1c00:	f8c3 9008 	str.w	r9, [r3, #8]
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
   e1c04:	4628      	mov	r0, r5
   e1c06:	b01f      	add	sp, #124	; 0x7c
   e1c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1c0c:	ffff8100 	.word	0xffff8100

000e1c10 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>:
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
    if( ssl->f_set_timer == NULL )
   e1c10:	6c83      	ldr	r3, [r0, #72]	; 0x48
/*
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
   e1c12:	460a      	mov	r2, r1
    if( ssl->f_set_timer == NULL )
   e1c14:	b113      	cbz	r3, e1c1c <_ZL13ssl_set_timerP19mbedtls_ssl_contextm+0xc>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
   e1c16:	0889      	lsrs	r1, r1, #2
   e1c18:	6c40      	ldr	r0, [r0, #68]	; 0x44
   e1c1a:	4718      	bx	r3
   e1c1c:	4770      	bx	lr

000e1c1e <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>:
        ssl->out_iv  = ssl->out_hdr + 13;
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_hdr - 8;
   e1c1e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
   e1c22:	f1a3 0208 	sub.w	r2, r3, #8
   e1c26:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
        ssl->out_len = ssl->out_hdr + 3;
   e1c2a:	1cda      	adds	r2, r3, #3
        ssl->out_iv  = ssl->out_hdr + 5;
   e1c2c:	3305      	adds	r3, #5
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_hdr - 8;
        ssl->out_len = ssl->out_hdr + 3;
   e1c2e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
        ssl->out_iv  = ssl->out_hdr + 5;
   e1c32:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    }

    /* Adjust out_msg to make space for explicit IV, if used. */
    if( transform != NULL &&
   e1c36:	b131      	cbz	r1, e1c46 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform+0x28>
   e1c38:	68c2      	ldr	r2, [r0, #12]
   e1c3a:	2a01      	cmp	r2, #1
        ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->out_msg = ssl->out_iv + transform->ivlen - transform->fixed_ivlen;
   e1c3c:	bfc1      	itttt	gt
   e1c3e:	68ca      	ldrgt	r2, [r1, #12]
   e1c40:	6909      	ldrgt	r1, [r1, #16]
   e1c42:	1a52      	subgt	r2, r2, r1
   e1c44:	189b      	addgt	r3, r3, r2
    }
    else
        ssl->out_msg = ssl->out_iv;
   e1c46:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
   e1c4a:	4770      	bx	lr

000e1c4c <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
   e1c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
   e1c4e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
   e1c50:	b0a9      	sub	sp, #164	; 0xa4
   e1c52:	4604      	mov	r4, r0
   e1c54:	460f      	mov	r7, r1
   e1c56:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
   e1c58:	b905      	cbnz	r5, e1c5c <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
   e1c5a:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha256_init( &sha256 );
   e1c5c:	a80d      	add	r0, sp, #52	; 0x34
   e1c5e:	f7fd faf0 	bl	df242 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
   e1c62:	6b21      	ldr	r1, [r4, #48]	; 0x30
   e1c64:	a80d      	add	r0, sp, #52	; 0x34
   e1c66:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   e1c6a:	f7fd faf3 	bl	df254 <mbedtls_sha256_clone>
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
   e1c6e:	4b10      	ldr	r3, [pc, #64]	; (e1cb0 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x64>)
   e1c70:	4910      	ldr	r1, [pc, #64]	; (e1cb4 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha256_finish_ret( &sha256, padbuf );
   e1c72:	a80d      	add	r0, sp, #52	; 0x34
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
   e1c74:	2e00      	cmp	r6, #0
   e1c76:	bf0c      	ite	eq
   e1c78:	461e      	moveq	r6, r3
   e1c7a:	460e      	movne	r6, r1

    mbedtls_sha256_finish_ret( &sha256, padbuf );
   e1c7c:	a905      	add	r1, sp, #20
   e1c7e:	f7fd fedf 	bl	dfa40 <mbedtls_sha256_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
   e1c82:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 32, buf, len );
   e1c84:	9701      	str	r7, [sp, #4]
   e1c86:	2420      	movs	r4, #32
   e1c88:	220c      	movs	r2, #12
   e1c8a:	9202      	str	r2, [sp, #8]
   e1c8c:	9400      	str	r4, [sp, #0]
   e1c8e:	4632      	mov	r2, r6
   e1c90:	f8d3 72ac 	ldr.w	r7, [r3, #684]	; 0x2ac
   e1c94:	2130      	movs	r1, #48	; 0x30
   e1c96:	ab05      	add	r3, sp, #20
   e1c98:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   e1c9c:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha256_free( &sha256 );
   e1c9e:	a80d      	add	r0, sp, #52	; 0x34
   e1ca0:	f7fd fad3 	bl	df24a <mbedtls_sha256_free>

    mbedtls_platform_zeroize(  padbuf, sizeof(  padbuf ) );
   e1ca4:	4621      	mov	r1, r4
   e1ca6:	a805      	add	r0, sp, #20
   e1ca8:	f7fa fca2 	bl	dc5f0 <mbedtls_platform_zeroize>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
   e1cac:	b029      	add	sp, #164	; 0xa4
   e1cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e1cb0:	000ea075 	.word	0x000ea075
   e1cb4:	000ea085 	.word	0x000ea085

000e1cb8 <_ZL26ssl_calc_verify_tls_sha256P19mbedtls_ssl_contextPh>:
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
{
   e1cb8:	b530      	push	{r4, r5, lr}
   e1cba:	4605      	mov	r5, r0
   e1cbc:	b09d      	sub	sp, #116	; 0x74
    mbedtls_sha256_context sha256;

    mbedtls_sha256_init( &sha256 );
   e1cbe:	a801      	add	r0, sp, #4
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
{
   e1cc0:	460c      	mov	r4, r1
    mbedtls_sha256_context sha256;

    mbedtls_sha256_init( &sha256 );
   e1cc2:	f7fd fabe 	bl	df242 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
   e1cc6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   e1cc8:	a801      	add	r0, sp, #4
   e1cca:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   e1cce:	f7fd fac1 	bl	df254 <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
   e1cd2:	4621      	mov	r1, r4
   e1cd4:	a801      	add	r0, sp, #4
   e1cd6:	f7fd feb3 	bl	dfa40 <mbedtls_sha256_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha256_free( &sha256 );
   e1cda:	a801      	add	r0, sp, #4
   e1cdc:	f7fd fab5 	bl	df24a <mbedtls_sha256_free>

    return;
}
   e1ce0:	b01d      	add	sp, #116	; 0x74
   e1ce2:	bd30      	pop	{r4, r5, pc}

000e1ce4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>:
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
   e1ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1ce8:	b0b7      	sub	sp, #220	; 0xdc
   e1cea:	4604      	mov	r4, r0
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
   e1cec:	a803      	add	r0, sp, #12
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
   e1cee:	468a      	mov	sl, r1
   e1cf0:	4693      	mov	fp, r2
   e1cf2:	4699      	mov	r9, r3
   e1cf4:	9e43      	ldr	r6, [sp, #268]	; 0x10c
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
   e1cf6:	f7f8 fe57 	bl	da9a8 <mbedtls_md_init>

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
   e1cfa:	4620      	mov	r0, r4
   e1cfc:	f7f8 fe48 	bl	da990 <mbedtls_md_info_from_type>
   e1d00:	4607      	mov	r7, r0
   e1d02:	2800      	cmp	r0, #0
   e1d04:	d074      	beq.n	e1df0 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10c>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );

    md_len = mbedtls_md_get_size( md_info );
   e1d06:	f7f8 ff7b 	bl	dac00 <mbedtls_md_get_size>
   e1d0a:	4604      	mov	r4, r0

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
   e1d0c:	4648      	mov	r0, r9
   e1d0e:	f006 f917 	bl	e7f40 <strlen>
   e1d12:	9a41      	ldr	r2, [sp, #260]	; 0x104
   e1d14:	1823      	adds	r3, r4, r0
   e1d16:	189a      	adds	r2, r3, r2
   e1d18:	2a80      	cmp	r2, #128	; 0x80
   e1d1a:	4605      	mov	r5, r0
   e1d1c:	9301      	str	r3, [sp, #4]
   e1d1e:	d869      	bhi.n	e1df4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
   e1d20:	ab16      	add	r3, sp, #88	; 0x58
   e1d22:	eb03 0804 	add.w	r8, r3, r4
   e1d26:	4602      	mov	r2, r0
   e1d28:	4649      	mov	r1, r9
   e1d2a:	4640      	mov	r0, r8
   e1d2c:	f006 f89b 	bl	e7e66 <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
   e1d30:	9b01      	ldr	r3, [sp, #4]
   e1d32:	9a41      	ldr	r2, [sp, #260]	; 0x104
   e1d34:	9940      	ldr	r1, [sp, #256]	; 0x100
   e1d36:	a816      	add	r0, sp, #88	; 0x58
   e1d38:	4418      	add	r0, r3
   e1d3a:	f006 f894 	bl	e7e66 <memcpy>
    nb += rlen;

    /*
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
   e1d3e:	4639      	mov	r1, r7
   e1d40:	2201      	movs	r2, #1
   e1d42:	a803      	add	r0, sp, #12
   e1d44:	f7f8 fe50 	bl	da9e8 <mbedtls_md_setup>
   e1d48:	4607      	mov	r7, r0
   e1d4a:	2800      	cmp	r0, #0
   e1d4c:	d153      	bne.n	e1df6 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x112>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
   e1d4e:	9b41      	ldr	r3, [sp, #260]	; 0x104
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
   e1d50:	4651      	mov	r1, sl
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
   e1d52:	441d      	add	r5, r3
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
   e1d54:	465a      	mov	r2, fp
   e1d56:	a803      	add	r0, sp, #12
   e1d58:	f7f8 fe96 	bl	daa88 <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
   e1d5c:	462a      	mov	r2, r5
   e1d5e:	4641      	mov	r1, r8
   e1d60:	a803      	add	r0, sp, #12
   e1d62:	f7f8 fef1 	bl	dab48 <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
   e1d66:	a916      	add	r1, sp, #88	; 0x58
   e1d68:	a803      	add	r0, sp, #12
   e1d6a:	f7f8 feff 	bl	dab6c <mbedtls_md_hmac_finish>

    for( i = 0; i < dlen; i += md_len )
   e1d6e:	46b8      	mov	r8, r7
   e1d70:	f10d 0a18 	add.w	sl, sp, #24
    {
        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
   e1d74:	4425      	add	r5, r4

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
   e1d76:	45b0      	cmp	r8, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
   e1d78:	a803      	add	r0, sp, #12

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
   e1d7a:	d22e      	bcs.n	e1dda <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xf6>
    {
        mbedtls_md_hmac_reset ( &md_ctx );
   e1d7c:	f7f8 ff28 	bl	dabd0 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
   e1d80:	462a      	mov	r2, r5
   e1d82:	a916      	add	r1, sp, #88	; 0x58
   e1d84:	a803      	add	r0, sp, #12
   e1d86:	f7f8 fedf 	bl	dab48 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
   e1d8a:	4651      	mov	r1, sl
   e1d8c:	a803      	add	r0, sp, #12
   e1d8e:	f7f8 feed 	bl	dab6c <mbedtls_md_hmac_finish>

        mbedtls_md_hmac_reset ( &md_ctx );
   e1d92:	a803      	add	r0, sp, #12
   e1d94:	f7f8 ff1c 	bl	dabd0 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
   e1d98:	4622      	mov	r2, r4
   e1d9a:	a916      	add	r1, sp, #88	; 0x58
   e1d9c:	a803      	add	r0, sp, #12
   e1d9e:	f7f8 fed3 	bl	dab48 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
   e1da2:	a916      	add	r1, sp, #88	; 0x58
   e1da4:	a803      	add	r0, sp, #12
   e1da6:	f7f8 fee1 	bl	dab6c <mbedtls_md_hmac_finish>

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
   e1daa:	eb08 0104 	add.w	r1, r8, r4

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
   e1dae:	9842      	ldr	r0, [sp, #264]	; 0x108

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
   e1db0:	428e      	cmp	r6, r1
   e1db2:	bf2c      	ite	cs
   e1db4:	4622      	movcs	r2, r4
   e1db6:	fbb6 f2f4 	udivcc	r2, r6, r4

        for( j = 0; j < k; j++ )
   e1dba:	f04f 0300 	mov.w	r3, #0

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
   e1dbe:	bf38      	it	cc
   e1dc0:	fb04 6212 	mlscc	r2, r4, r2, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
   e1dc4:	4480      	add	r8, r0
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
   e1dc6:	4293      	cmp	r3, r2
   e1dc8:	d101      	bne.n	e1dce <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xea>

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
   e1dca:	4688      	mov	r8, r1
   e1dcc:	e7d3      	b.n	e1d76 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x92>

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
   e1dce:	f81a 0003 	ldrb.w	r0, [sl, r3]
   e1dd2:	f808 0003 	strb.w	r0, [r8, r3]
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
   e1dd6:	3301      	adds	r3, #1
   e1dd8:	e7f5      	b.n	e1dc6 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xe2>
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
   e1dda:	f7f8 fdea 	bl	da9b2 <mbedtls_md_free>

    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
   e1dde:	a816      	add	r0, sp, #88	; 0x58
   e1de0:	2180      	movs	r1, #128	; 0x80
   e1de2:	f7fa fc05 	bl	dc5f0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( h_i, sizeof( h_i ) );
   e1de6:	2140      	movs	r1, #64	; 0x40
   e1de8:	4650      	mov	r0, sl
   e1dea:	f7fa fc01 	bl	dc5f0 <mbedtls_platform_zeroize>

    return( 0 );
   e1dee:	e002      	b.n	e1df6 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x112>
    int ret;

    mbedtls_md_init( &md_ctx );

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e1df0:	4f03      	ldr	r7, [pc, #12]	; (e1e00 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x11c>)
   e1df2:	e000      	b.n	e1df6 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x112>

    md_len = mbedtls_md_get_size( md_info );

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e1df4:	4f03      	ldr	r7, [pc, #12]	; (e1e04 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x120>)

    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
    mbedtls_platform_zeroize( h_i, sizeof( h_i ) );

    return( 0 );
}
   e1df6:	4638      	mov	r0, r7
   e1df8:	b037      	add	sp, #220	; 0xdc
   e1dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1dfe:	bf00      	nop
   e1e00:	ffff9400 	.word	0xffff9400
   e1e04:	ffff8f00 	.word	0xffff8f00

000e1e08 <_ZL14tls_prf_sha256PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA256_C)
static int tls_prf_sha256( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
   e1e08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
   e1e0a:	9c08      	ldr	r4, [sp, #32]
   e1e0c:	9403      	str	r4, [sp, #12]
   e1e0e:	9c07      	ldr	r4, [sp, #28]
   e1e10:	9402      	str	r4, [sp, #8]
   e1e12:	9c06      	ldr	r4, [sp, #24]
   e1e14:	e88d 0018 	stmia.w	sp, {r3, r4}
   e1e18:	4613      	mov	r3, r2
   e1e1a:	460a      	mov	r2, r1
   e1e1c:	4601      	mov	r1, r0
   e1e1e:	2006      	movs	r0, #6
   e1e20:	f7ff ff60 	bl	e1ce4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
   e1e24:	b004      	add	sp, #16
   e1e26:	bd10      	pop	{r4, pc}

000e1e28 <_ZL14tls_prf_sha384PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA512_C)
static int tls_prf_sha384( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
   e1e28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
   e1e2a:	9c08      	ldr	r4, [sp, #32]
   e1e2c:	9403      	str	r4, [sp, #12]
   e1e2e:	9c07      	ldr	r4, [sp, #28]
   e1e30:	9402      	str	r4, [sp, #8]
   e1e32:	9c06      	ldr	r4, [sp, #24]
   e1e34:	e88d 0018 	stmia.w	sp, {r3, r4}
   e1e38:	4613      	mov	r3, r2
   e1e3a:	460a      	mov	r2, r1
   e1e3c:	4601      	mov	r1, r0
   e1e3e:	2007      	movs	r0, #7
   e1e40:	f7ff ff50 	bl	e1ce4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
   e1e44:	b004      	add	sp, #16
   e1e46:	bd10      	pop	{r4, pc}

000e1e48 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi>:
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
   e1e48:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
   e1e4a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
   e1e4c:	b0c7      	sub	sp, #284	; 0x11c
   e1e4e:	4604      	mov	r4, r0
   e1e50:	460f      	mov	r7, r1
   e1e52:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
   e1e54:	b905      	cbnz	r5, e1e58 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
   e1e56:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha512_init( &sha512 );
   e1e58:	a810      	add	r0, sp, #64	; 0x40
   e1e5a:	f7fd fea6 	bl	dfbaa <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
   e1e5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   e1e60:	a810      	add	r0, sp, #64	; 0x40
   e1e62:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
   e1e66:	f7fd fea9 	bl	dfbbc <mbedtls_sha512_clone>
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
   e1e6a:	4b10      	ldr	r3, [pc, #64]	; (e1eac <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x64>)
   e1e6c:	4910      	ldr	r1, [pc, #64]	; (e1eb0 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha512_finish_ret( &sha512, padbuf );
   e1e6e:	a810      	add	r0, sp, #64	; 0x40
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
   e1e70:	2e00      	cmp	r6, #0
   e1e72:	bf0c      	ite	eq
   e1e74:	461e      	moveq	r6, r3
   e1e76:	460e      	movne	r6, r1

    mbedtls_sha512_finish_ret( &sha512, padbuf );
   e1e78:	a904      	add	r1, sp, #16
   e1e7a:	f7fe fde3 	bl	e0a44 <mbedtls_sha512_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
   e1e7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 48, buf, len );
   e1e80:	9701      	str	r7, [sp, #4]
   e1e82:	2430      	movs	r4, #48	; 0x30
   e1e84:	220c      	movs	r2, #12
   e1e86:	9202      	str	r2, [sp, #8]
   e1e88:	9400      	str	r4, [sp, #0]
   e1e8a:	4632      	mov	r2, r6
   e1e8c:	4621      	mov	r1, r4
   e1e8e:	f8d3 72ac 	ldr.w	r7, [r3, #684]	; 0x2ac
   e1e92:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   e1e96:	ab04      	add	r3, sp, #16
   e1e98:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha512_free( &sha512 );
   e1e9a:	a810      	add	r0, sp, #64	; 0x40
   e1e9c:	f7fd fe89 	bl	dfbb2 <mbedtls_sha512_free>

    mbedtls_platform_zeroize(  padbuf, sizeof( padbuf ) );
   e1ea0:	4621      	mov	r1, r4
   e1ea2:	a804      	add	r0, sp, #16
   e1ea4:	f7fa fba4 	bl	dc5f0 <mbedtls_platform_zeroize>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
   e1ea8:	b047      	add	sp, #284	; 0x11c
   e1eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e1eac:	000ea075 	.word	0x000ea075
   e1eb0:	000ea085 	.word	0x000ea085

000e1eb4 <_ZL26ssl_calc_verify_tls_sha384P19mbedtls_ssl_contextPh>:
}
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )
{
   e1eb4:	b530      	push	{r4, r5, lr}
   e1eb6:	4605      	mov	r5, r0
   e1eb8:	b0b7      	sub	sp, #220	; 0xdc
    mbedtls_sha512_context sha512;

    mbedtls_sha512_init( &sha512 );
   e1eba:	4668      	mov	r0, sp
}
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )
{
   e1ebc:	460c      	mov	r4, r1
    mbedtls_sha512_context sha512;

    mbedtls_sha512_init( &sha512 );
   e1ebe:	f7fd fe74 	bl	dfbaa <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
   e1ec2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   e1ec4:	4668      	mov	r0, sp
   e1ec6:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
   e1eca:	f7fd fe77 	bl	dfbbc <mbedtls_sha512_clone>
    mbedtls_sha512_finish_ret( &sha512, hash );
   e1ece:	4621      	mov	r1, r4
   e1ed0:	4668      	mov	r0, sp
   e1ed2:	f7fe fdb7 	bl	e0a44 <mbedtls_sha512_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha512_free( &sha512 );
   e1ed6:	4668      	mov	r0, sp
   e1ed8:	f7fd fe6b 	bl	dfbb2 <mbedtls_sha512_free>

    return;
}
   e1edc:	b037      	add	sp, #220	; 0xdc
   e1ede:	bd30      	pop	{r4, r5, pc}

000e1ee0 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>:

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
   e1ee0:	b570      	push	{r4, r5, r6, lr}
   e1ee2:	4604      	mov	r4, r0
   e1ee4:	460e      	mov	r6, r1
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
   e1ee6:	2001      	movs	r0, #1
   e1ee8:	210c      	movs	r1, #12

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
   e1eea:	4615      	mov	r5, r2
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
   e1eec:	f005 ff96 	bl	e7e1c <calloc>
    if( new_cert == NULL )
   e1ef0:	b178      	cbz	r0, e1f12 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x32>
    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
   e1ef2:	6822      	ldr	r2, [r4, #0]

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
   e1ef4:	6006      	str	r6, [r0, #0]
    new_cert->key  = key;
    new_cert->next = NULL;
   e1ef6:	2300      	movs	r3, #0
    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
    new_cert->key  = key;
   e1ef8:	6045      	str	r5, [r0, #4]
    new_cert->next = NULL;
   e1efa:	6083      	str	r3, [r0, #8]

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
   e1efc:	b912      	cbnz	r2, e1f04 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
    {
        *head = new_cert;
   e1efe:	6020      	str	r0, [r4, #0]
        while( cur->next != NULL )
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
   e1f00:	4610      	mov	r0, r2
   e1f02:	bd70      	pop	{r4, r5, r6, pc}
        *head = new_cert;
    }
    else
    {
        mbedtls_ssl_key_cert *cur = *head;
        while( cur->next != NULL )
   e1f04:	6893      	ldr	r3, [r2, #8]
   e1f06:	b10b      	cbz	r3, e1f0c <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x2c>
   e1f08:	461a      	mov	r2, r3
   e1f0a:	e7fb      	b.n	e1f04 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
            cur = cur->next;
        cur->next = new_cert;
   e1f0c:	6090      	str	r0, [r2, #8]
    }

    return( 0 );
   e1f0e:	4618      	mov	r0, r3
   e1f10:	bd70      	pop	{r4, r5, r6, pc}
{
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e1f12:	4801      	ldr	r0, [pc, #4]	; (e1f18 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x38>)
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
}
   e1f14:	bd70      	pop	{r4, r5, r6, pc}
   e1f16:	bf00      	nop
   e1f18:	ffff8100 	.word	0xffff8100

000e1f1c <_ZL26ssl_update_checksum_sha256P19mbedtls_ssl_contextPKhj>:
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_update_checksum_sha256( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
   e1f1c:	6b00      	ldr	r0, [r0, #48]	; 0x30
   e1f1e:	f500 70ac 	add.w	r0, r0, #344	; 0x158
   e1f22:	f7fd bd53 	b.w	df9cc <mbedtls_sha256_update_ret>

000e1f26 <_ZL26ssl_update_checksum_sha384P19mbedtls_ssl_contextPKhj>:

#if defined(MBEDTLS_SHA512_C)
static void ssl_update_checksum_sha384( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
   e1f26:	6b00      	ldr	r0, [r0, #48]	; 0x30
   e1f28:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
   e1f2c:	f7fe bd42 	b.w	e09b4 <mbedtls_sha512_update_ret>

000e1f30 <_ZL25ssl_update_checksum_startP19mbedtls_ssl_contextPKhj>:
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}

static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
                                       const unsigned char *buf, size_t len )
{
   e1f30:	b570      	push	{r4, r5, r6, lr}
   e1f32:	4604      	mov	r4, r0
     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
   e1f34:	6b00      	ldr	r0, [r0, #48]	; 0x30
   e1f36:	f500 70ac 	add.w	r0, r0, #344	; 0x158
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}

static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
                                       const unsigned char *buf, size_t len )
{
   e1f3a:	460d      	mov	r5, r1
   e1f3c:	4616      	mov	r6, r2
     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
   e1f3e:	f7fd fd45 	bl	df9cc <mbedtls_sha256_update_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
   e1f42:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e1f44:	4632      	mov	r2, r6
   e1f46:	4629      	mov	r1, r5
   e1f48:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}
   e1f4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
   e1f50:	f7fe bd30 	b.w	e09b4 <mbedtls_sha512_update_ret>

000e1f54 <_ZL25ssl_reset_in_out_pointersP19mbedtls_ssl_context>:
        ssl->in_hdr  = ssl->in_buf;
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    {
        ssl->out_hdr = ssl->out_buf + 8;
   e1f54:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   e1f58:	3308      	adds	r3, #8
   e1f5a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
        ssl->in_hdr  = ssl->in_buf  + 8;
   e1f5e:	6d03      	ldr	r3, [r0, #80]	; 0x50
   e1f60:	3308      	adds	r3, #8
   e1f62:	6583      	str	r3, [r0, #88]	; 0x58
/*
 * Setup an SSL context
 */

static void ssl_reset_in_out_pointers( mbedtls_ssl_context *ssl )
{
   e1f64:	b510      	push	{r4, lr}
        ssl->out_hdr = ssl->out_buf + 8;
        ssl->in_hdr  = ssl->in_buf  + 8;
    }

    /* Derive other internal pointers. */
    ssl_update_out_pointers( ssl, NULL /* no transform enabled */ );
   e1f66:	2100      	movs	r1, #0
   e1f68:	f7ff fe59 	bl	e1c1e <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>
        ssl->in_iv  = ssl->in_hdr + 13;
    }
    else
#endif
    {
        ssl->in_ctr = ssl->in_hdr - 8;
   e1f6c:	6d83      	ldr	r3, [r0, #88]	; 0x58
   e1f6e:	f1a3 0208 	sub.w	r2, r3, #8
   e1f72:	6542      	str	r2, [r0, #84]	; 0x54
        ssl->in_len = ssl->in_hdr + 3;
   e1f74:	1cda      	adds	r2, r3, #3
        ssl->in_iv  = ssl->in_hdr + 5;
   e1f76:	3305      	adds	r3, #5
    }
    else
#endif
    {
        ssl->in_ctr = ssl->in_hdr - 8;
        ssl->in_len = ssl->in_hdr + 3;
   e1f78:	65c2      	str	r2, [r0, #92]	; 0x5c
        ssl->in_iv  = ssl->in_hdr + 5;
   e1f7a:	6603      	str	r3, [r0, #96]	; 0x60
        ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + transform->ivlen - transform->fixed_ivlen;
    }
    else
        ssl->in_msg = ssl->in_iv;
   e1f7c:	6643      	str	r3, [r0, #100]	; 0x64
   e1f7e:	bd10      	pop	{r4, pc}

000e1f80 <mbedtls_ssl_derive_keys>:
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
   e1f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
   e1f84:	6c04      	ldr	r4, [r0, #64]	; 0x40
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
   e1f86:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
   e1f88:	6b05      	ldr	r5, [r0, #48]	; 0x30
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
   e1f8a:	b0d7      	sub	sp, #348	; 0x15c
   e1f8c:	4680      	mov	r8, r0
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
   e1f8e:	9305      	str	r3, [sp, #20]
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
   e1f90:	6823      	ldr	r3, [r4, #0]
   e1f92:	7a18      	ldrb	r0, [r3, #8]
   e1f94:	f7f5 fd48 	bl	d7a28 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
   e1f98:	4606      	mov	r6, r0
   e1f9a:	b908      	cbnz	r0, e1fa0 <mbedtls_ssl_derive_keys+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
                            transform->ciphersuite_info->cipher ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e1f9c:	4ba3      	ldr	r3, [pc, #652]	; (e222c <mbedtls_ssl_derive_keys+0x2ac>)
   e1f9e:	e140      	b.n	e2222 <mbedtls_ssl_derive_keys+0x2a2>
    }

    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
   e1fa0:	6823      	ldr	r3, [r4, #0]
   e1fa2:	7a58      	ldrb	r0, [r3, #9]
   e1fa4:	f7f8 fcf4 	bl	da990 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   e1fa8:	4682      	mov	sl, r0
   e1faa:	2800      	cmp	r0, #0
   e1fac:	d0f6      	beq.n	e1f9c <mbedtls_ssl_derive_keys+0x1c>
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
   e1fae:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e1fb2:	2b03      	cmp	r3, #3
   e1fb4:	d001      	beq.n	e1fba <mbedtls_ssl_derive_keys+0x3a>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e1fb6:	4b9e      	ldr	r3, [pc, #632]	; (e2230 <mbedtls_ssl_derive_keys+0x2b0>)
   e1fb8:	e133      	b.n	e2222 <mbedtls_ssl_derive_keys+0x2a2>
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
   e1fba:	6823      	ldr	r3, [r4, #0]
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
   e1fbc:	7a5b      	ldrb	r3, [r3, #9]
   e1fbe:	2b07      	cmp	r3, #7
   e1fc0:	d107      	bne.n	e1fd2 <mbedtls_ssl_derive_keys+0x52>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
    {
        handshake->tls_prf = tls_prf_sha384;
   e1fc2:	4b9c      	ldr	r3, [pc, #624]	; (e2234 <mbedtls_ssl_derive_keys+0x2b4>)
   e1fc4:	f8c5 32ac 	str.w	r3, [r5, #684]	; 0x2ac
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
   e1fc8:	4b9b      	ldr	r3, [pc, #620]	; (e2238 <mbedtls_ssl_derive_keys+0x2b8>)
   e1fca:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
   e1fce:	4b9b      	ldr	r3, [pc, #620]	; (e223c <mbedtls_ssl_derive_keys+0x2bc>)
   e1fd0:	e006      	b.n	e1fe0 <mbedtls_ssl_derive_keys+0x60>
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        handshake->tls_prf = tls_prf_sha256;
   e1fd2:	4b9b      	ldr	r3, [pc, #620]	; (e2240 <mbedtls_ssl_derive_keys+0x2c0>)
   e1fd4:	f8c5 32ac 	str.w	r3, [r5, #684]	; 0x2ac
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
   e1fd8:	4b9a      	ldr	r3, [pc, #616]	; (e2244 <mbedtls_ssl_derive_keys+0x2c4>)
   e1fda:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
   e1fde:	4b9a      	ldr	r3, [pc, #616]	; (e2248 <mbedtls_ssl_derive_keys+0x2c8>)
   e1fe0:	f8c5 32a8 	str.w	r3, [r5, #680]	; 0x2a8
     *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )
     *
     * TLSv1+:
     *   master = PRF( premaster, "master secret", randbytes )[0..47]
     */
    if( handshake->resume == 0 )
   e1fe4:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
   e1fe8:	f505 7b3d 	add.w	fp, r5, #756	; 0x2f4
   e1fec:	f505 792d 	add.w	r9, r5, #692	; 0x2b4
   e1ff0:	b9b3      	cbnz	r3, e2020 <mbedtls_ssl_derive_keys+0xa0>
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
   e1ff2:	2330      	movs	r3, #48	; 0x30
   e1ff4:	9302      	str	r3, [sp, #8]
   e1ff6:	9b05      	ldr	r3, [sp, #20]
   e1ff8:	4a94      	ldr	r2, [pc, #592]	; (e224c <mbedtls_ssl_derive_keys+0x2cc>)
   e1ffa:	332c      	adds	r3, #44	; 0x2c
   e1ffc:	9301      	str	r3, [sp, #4]
   e1ffe:	2340      	movs	r3, #64	; 0x40
   e2000:	9300      	str	r3, [sp, #0]
   e2002:	f8d5 72ac 	ldr.w	r7, [r5, #684]	; 0x2ac
   e2006:	f8d5 12b0 	ldr.w	r1, [r5, #688]	; 0x2b0
   e200a:	464b      	mov	r3, r9
   e200c:	4658      	mov	r0, fp
   e200e:	47b8      	blx	r7
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
        if( ret != 0 )
   e2010:	4603      	mov	r3, r0
   e2012:	2800      	cmp	r0, #0
   e2014:	f040 8105 	bne.w	e2222 <mbedtls_ssl_derive_keys+0x2a2>
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
            return( ret );
        }

        mbedtls_platform_zeroize( handshake->premaster,
                                  sizeof(handshake->premaster) );
   e2018:	2154      	movs	r1, #84	; 0x54
   e201a:	4658      	mov	r0, fp
   e201c:	f7fa fae8 	bl	dc5f0 <mbedtls_platform_zeroize>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );

    /*
     * Swap the client and server random values.
     */
    memcpy( tmp, handshake->randbytes, 64 );
   e2020:	464b      	mov	r3, r9
   e2022:	af06      	add	r7, sp, #24
   e2024:	6818      	ldr	r0, [r3, #0]
   e2026:	6859      	ldr	r1, [r3, #4]
   e2028:	463a      	mov	r2, r7
   e202a:	c203      	stmia	r2!, {r0, r1}
   e202c:	3308      	adds	r3, #8
   e202e:	455b      	cmp	r3, fp
   e2030:	4617      	mov	r7, r2
   e2032:	d1f7      	bne.n	e2024 <mbedtls_ssl_derive_keys+0xa4>
    memcpy( handshake->randbytes, tmp + 32, 32 );
   e2034:	af0e      	add	r7, sp, #56	; 0x38
   e2036:	464a      	mov	r2, r9
   e2038:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
   e203c:	463b      	mov	r3, r7
   e203e:	cb03      	ldmia	r3!, {r0, r1}
   e2040:	455b      	cmp	r3, fp
   e2042:	6010      	str	r0, [r2, #0]
   e2044:	6051      	str	r1, [r2, #4]
   e2046:	461f      	mov	r7, r3
   e2048:	f102 0208 	add.w	r2, r2, #8
   e204c:	d1f6      	bne.n	e203c <mbedtls_ssl_derive_keys+0xbc>
    memcpy( handshake->randbytes + 32, tmp, 32 );
   e204e:	af06      	add	r7, sp, #24
   e2050:	f505 7235 	add.w	r2, r5, #724	; 0x2d4
   e2054:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
   e2058:	463b      	mov	r3, r7
   e205a:	cb03      	ldmia	r3!, {r0, r1}
   e205c:	4573      	cmp	r3, lr
   e205e:	6010      	str	r0, [r2, #0]
   e2060:	6051      	str	r1, [r2, #4]
   e2062:	461f      	mov	r7, r3
   e2064:	f102 0208 	add.w	r2, r2, #8
   e2068:	d1f6      	bne.n	e2058 <mbedtls_ssl_derive_keys+0xd8>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
   e206a:	2140      	movs	r1, #64	; 0x40
   e206c:	a806      	add	r0, sp, #24
   e206e:	f7fa fabf 	bl	dc5f0 <mbedtls_platform_zeroize>
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
   e2072:	9f05      	ldr	r7, [sp, #20]
   e2074:	f8cd b004 	str.w	fp, [sp, #4]
   e2078:	f44f 7380 	mov.w	r3, #256	; 0x100
   e207c:	f04f 0b40 	mov.w	fp, #64	; 0x40
   e2080:	9302      	str	r3, [sp, #8]
   e2082:	f8cd b000 	str.w	fp, [sp]
   e2086:	372c      	adds	r7, #44	; 0x2c
   e2088:	464b      	mov	r3, r9
   e208a:	f8d5 52ac 	ldr.w	r5, [r5, #684]	; 0x2ac
   e208e:	4a70      	ldr	r2, [pc, #448]	; (e2250 <mbedtls_ssl_derive_keys+0x2d0>)
   e2090:	2130      	movs	r1, #48	; 0x30
   e2092:	4638      	mov	r0, r7
   e2094:	47a8      	blx	r5
                              handshake->randbytes, 64, keyblk, 256 );
    if( ret != 0 )
   e2096:	4603      	mov	r3, r0
   e2098:	2800      	cmp	r0, #0
   e209a:	f040 80c2 	bne.w	e2222 <mbedtls_ssl_derive_keys+0x2a2>
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );

    mbedtls_platform_zeroize( handshake->randbytes,
                              sizeof( handshake->randbytes ) );
   e209e:	4659      	mov	r1, fp
   e20a0:	4648      	mov	r0, r9
   e20a2:	f7fa faa5 	bl	dc5f0 <mbedtls_platform_zeroize>

    /*
     * Determine the appropriate key, IV and MAC length.
     */

    transform->keylen = cipher_info->key_bitlen / 8;
   e20a6:	6873      	ldr	r3, [r6, #4]
   e20a8:	08db      	lsrs	r3, r3, #3
   e20aa:	6063      	str	r3, [r4, #4]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
   e20ac:	7873      	ldrb	r3, [r6, #1]
   e20ae:	2b06      	cmp	r3, #6
   e20b0:	d003      	beq.n	e20ba <mbedtls_ssl_derive_keys+0x13a>
   e20b2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   e20b6:	2b08      	cmp	r3, #8
   e20b8:	d116      	bne.n	e20e8 <mbedtls_ssl_derive_keys+0x168>
        cipher_info->mode == MBEDTLS_MODE_CCM ||
        cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
    {
        size_t taglen, explicit_ivlen;

        transform->maclen = 0;
   e20ba:	2300      	movs	r3, #0
   e20bc:	6163      	str	r3, [r4, #20]

        /* All modes haves 96-bit IVs;
         * GCM and CCM has 4 implicit and 8 explicit bytes
         * ChachaPoly has all 12 bytes implicit
         */
        transform->ivlen = 12;
   e20be:	230c      	movs	r3, #12
   e20c0:	60e3      	str	r3, [r4, #12]
        if( cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
   e20c2:	7872      	ldrb	r2, [r6, #1]
   e20c4:	2a0a      	cmp	r2, #10
            transform->fixed_ivlen = 12;
        else
            transform->fixed_ivlen = 4;
   e20c6:	bf18      	it	ne
   e20c8:	2304      	movne	r3, #4
   e20ca:	6123      	str	r3, [r4, #16]

        /* All modes have 128-bit tags, except CCM_8 (ciphersuite flag) */
        taglen = transform->ciphersuite_info->flags &
   e20cc:	6823      	ldr	r3, [r4, #0]
                  MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   e20ce:	7f1b      	ldrb	r3, [r3, #28]
   e20d0:	f013 0f02 	tst.w	r3, #2


        /* Minimum length of encrypted record */
        explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
        transform->minlen = explicit_ivlen + taglen;
   e20d4:	6923      	ldr	r3, [r4, #16]
        else
            transform->fixed_ivlen = 4;

        /* All modes have 128-bit tags, except CCM_8 (ciphersuite flag) */
        taglen = transform->ciphersuite_info->flags &
                  MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   e20d6:	bf14      	ite	ne
   e20d8:	2208      	movne	r2, #8
   e20da:	2210      	moveq	r2, #16


        /* Minimum length of encrypted record */
        explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
        transform->minlen = explicit_ivlen + taglen;
   e20dc:	f1c3 030c 	rsb	r3, r3, #12
   e20e0:	4413      	add	r3, r2
   e20e2:	60a3      	str	r3, [r4, #8]
        cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
    {
        size_t taglen, explicit_ivlen;

        transform->maclen = 0;
        mac_key_len = 0;
   e20e4:	2500      	movs	r5, #0
                  MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;


        /* Minimum length of encrypted record */
        explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
        transform->minlen = explicit_ivlen + taglen;
   e20e6:	e01b      	b.n	e2120 <mbedtls_ssl_derive_keys+0x1a0>
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
   e20e8:	2201      	movs	r2, #1
   e20ea:	4651      	mov	r1, sl
   e20ec:	f104 0038 	add.w	r0, r4, #56	; 0x38
   e20f0:	f7f8 fc7a 	bl	da9e8 <mbedtls_md_setup>
   e20f4:	2800      	cmp	r0, #0
   e20f6:	f040 8083 	bne.w	e2200 <mbedtls_ssl_derive_keys+0x280>
            ( ret = mbedtls_md_setup( &transform->md_ctx_dec, md_info, 1 ) ) != 0 )
   e20fa:	2201      	movs	r2, #1
   e20fc:	4651      	mov	r1, sl
   e20fe:	f104 0044 	add.w	r0, r4, #68	; 0x44
   e2102:	f7f8 fc71 	bl	da9e8 <mbedtls_md_setup>
        transform->minlen = explicit_ivlen + taglen;
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
   e2106:	2800      	cmp	r0, #0
   e2108:	d17a      	bne.n	e2200 <mbedtls_ssl_derive_keys+0x280>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
   e210a:	4650      	mov	r0, sl
   e210c:	f7f8 fd78 	bl	dac00 <mbedtls_md_get_size>
        transform->maclen = mac_key_len;
   e2110:	6160      	str	r0, [r4, #20]
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
   e2112:	68f1      	ldr	r1, [r6, #12]
   e2114:	60e1      	str	r1, [r4, #12]

        /* Minimum length */
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
   e2116:	7873      	ldrb	r3, [r6, #1]
   e2118:	2b07      	cmp	r3, #7
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
   e211a:	4605      	mov	r5, r0

        /* IV length */
        transform->ivlen = cipher_info->iv_size;

        /* Minimum length */
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
   e211c:	d172      	bne.n	e2204 <mbedtls_ssl_derive_keys+0x284>
            transform->minlen = transform->maclen;
   e211e:	60a5      	str	r5, [r4, #8]

    /*
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   e2120:	f8d8 3000 	ldr.w	r3, [r8]
   e2124:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   e2128:	07db      	lsls	r3, r3, #31
   e212a:	f53f af44 	bmi.w	e1fb6 <mbedtls_ssl_derive_keys+0x36>
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
   e212e:	6863      	ldr	r3, [r4, #4]
        mac_dec = keyblk + mac_key_len;

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
   e2130:	f8d4 b010 	ldr.w	fp, [r4, #16]
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
   e2134:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
   e2138:	eb0a 0903 	add.w	r9, sl, r3
   e213c:	aa16      	add	r2, sp, #88	; 0x58
   e213e:	4491      	add	r9, r2

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
                            transform->fixed_ivlen : transform->ivlen;
   e2140:	f1bb 0f00 	cmp.w	fp, #0
   e2144:	d101      	bne.n	e214a <mbedtls_ssl_derive_keys+0x1ca>
   e2146:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
   e214a:	9305      	str	r3, [sp, #20]
   e214c:	eb09 0103 	add.w	r1, r9, r3
   e2150:	465a      	mov	r2, fp
   e2152:	f104 0018 	add.w	r0, r4, #24
   e2156:	f005 fe86 	bl	e7e66 <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
                iv_copy_len );
   e215a:	9b05      	ldr	r3, [sp, #20]
   e215c:	eb0b 0103 	add.w	r1, fp, r3
   e2160:	465a      	mov	r2, fp
   e2162:	4449      	add	r1, r9
   e2164:	f104 0028 	add.w	r0, r4, #40	; 0x28
   e2168:	f005 fe7d 	bl	e7e66 <memcpy>
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
   e216c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e2170:	2b00      	cmp	r3, #0
   e2172:	f77f af20 	ble.w	e1fb6 <mbedtls_ssl_derive_keys+0x36>
    {
        /* For HMAC-based ciphersuites, initialize the HMAC transforms.
           For AEAD-based ciphersuites, there is nothing to do here. */
        if( mac_key_len != 0 )
   e2176:	b165      	cbz	r5, e2192 <mbedtls_ssl_derive_keys+0x212>
        {
            mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
   e2178:	462a      	mov	r2, r5
   e217a:	a916      	add	r1, sp, #88	; 0x58
   e217c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   e2180:	f7f8 fc82 	bl	daa88 <mbedtls_md_hmac_starts>
            mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
   e2184:	ab16      	add	r3, sp, #88	; 0x58
   e2186:	462a      	mov	r2, r5
   e2188:	1959      	adds	r1, r3, r5
   e218a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   e218e:	f7f8 fc7b 	bl	daa88 <mbedtls_md_hmac_starts>
        }
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */

#if defined(MBEDTLS_SSL_EXPORT_KEYS)
    if( ssl->conf->f_export_keys != NULL )
   e2192:	f8d8 0000 	ldr.w	r0, [r8]
   e2196:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
   e219a:	f1b8 0f00 	cmp.w	r8, #0
   e219e:	d008      	beq.n	e21b2 <mbedtls_ssl_derive_keys+0x232>
    {
        ssl->conf->f_export_keys( ssl->conf->p_export_keys,
                                  session->master, keyblk,
                                  mac_key_len, transform->keylen,
                                  iv_copy_len );
   e21a0:	f8cd b004 	str.w	fp, [sp, #4]
   e21a4:	6863      	ldr	r3, [r4, #4]
   e21a6:	9300      	str	r3, [sp, #0]
   e21a8:	aa16      	add	r2, sp, #88	; 0x58
   e21aa:	462b      	mov	r3, r5
   e21ac:	4639      	mov	r1, r7
   e21ae:	6c80      	ldr	r0, [r0, #72]	; 0x48
   e21b0:	47c0      	blx	r8
    }
#endif

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
   e21b2:	f104 0550 	add.w	r5, r4, #80	; 0x50
   e21b6:	4631      	mov	r1, r6
   e21b8:	4628      	mov	r0, r5
   e21ba:	f7f5 fc6b 	bl	d7a94 <mbedtls_cipher_setup>
   e21be:	4603      	mov	r3, r0
   e21c0:	bb78      	cbnz	r0, e2222 <mbedtls_ssl_derive_keys+0x2a2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
   e21c2:	3488      	adds	r4, #136	; 0x88
   e21c4:	4631      	mov	r1, r6
   e21c6:	4620      	mov	r0, r4
   e21c8:	f7f5 fc64 	bl	d7a94 <mbedtls_cipher_setup>
   e21cc:	4603      	mov	r3, r0
   e21ce:	bb40      	cbnz	r0, e2222 <mbedtls_ssl_derive_keys+0x2a2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
   e21d0:	a916      	add	r1, sp, #88	; 0x58
   e21d2:	2301      	movs	r3, #1
   e21d4:	6872      	ldr	r2, [r6, #4]
   e21d6:	4451      	add	r1, sl
   e21d8:	4628      	mov	r0, r5
   e21da:	f7f5 fc73 	bl	d7ac4 <mbedtls_cipher_setkey>
   e21de:	4603      	mov	r3, r0
   e21e0:	b9f8      	cbnz	r0, e2222 <mbedtls_ssl_derive_keys+0x2a2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
   e21e2:	6872      	ldr	r2, [r6, #4]
   e21e4:	4649      	mov	r1, r9
   e21e6:	4620      	mov	r0, r4
   e21e8:	f7f5 fc6c 	bl	d7ac4 <mbedtls_cipher_setkey>
   e21ec:	4603      	mov	r3, r0
   e21ee:	b9c0      	cbnz	r0, e2222 <mbedtls_ssl_derive_keys+0x2a2>
   e21f0:	9005      	str	r0, [sp, #20]
            return( ret );
        }
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    mbedtls_platform_zeroize( keyblk, sizeof( keyblk ) );
   e21f2:	f44f 7180 	mov.w	r1, #256	; 0x100
   e21f6:	a816      	add	r0, sp, #88	; 0x58
   e21f8:	f7fa f9fa 	bl	dc5f0 <mbedtls_platform_zeroize>
    }
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
   e21fc:	9b05      	ldr	r3, [sp, #20]
   e21fe:	e010      	b.n	e2222 <mbedtls_ssl_derive_keys+0x2a2>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e2200:	4603      	mov	r3, r0
   e2202:	e00e      	b.n	e2222 <mbedtls_ssl_derive_keys+0x2a2>
            }
            else
#endif
            {
                transform->minlen = transform->maclen
                                  + cipher_info->block_size
   e2204:	6973      	ldr	r3, [r6, #20]
                                  - transform->maclen % cipher_info->block_size;
   e2206:	fbb5 f2f3 	udiv	r2, r5, r3
   e220a:	fb03 3302 	mla	r3, r3, r2, r3
   e220e:	60a3      	str	r3, [r4, #8]
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_1 )
                ; /* No need to adjust minlen */
            else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
   e2210:	f8d8 200c 	ldr.w	r2, [r8, #12]
   e2214:	3a02      	subs	r2, #2
   e2216:	2a01      	cmp	r2, #1
   e2218:	f63f aecd 	bhi.w	e1fb6 <mbedtls_ssl_derive_keys+0x36>
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
            {
                transform->minlen += transform->ivlen;
   e221c:	440b      	add	r3, r1
   e221e:	60a3      	str	r3, [r4, #8]
   e2220:	e77e      	b.n	e2120 <mbedtls_ssl_derive_keys+0x1a0>
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
}
   e2222:	4618      	mov	r0, r3
   e2224:	b057      	add	sp, #348	; 0x15c
   e2226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e222a:	bf00      	nop
   e222c:	ffff8f00 	.word	0xffff8f00
   e2230:	ffff9400 	.word	0xffff9400
   e2234:	000e1e29 	.word	0x000e1e29
   e2238:	000e1eb5 	.word	0x000e1eb5
   e223c:	000e1e49 	.word	0x000e1e49
   e2240:	000e1e09 	.word	0x000e1e09
   e2244:	000e1cb9 	.word	0x000e1cb9
   e2248:	000e1c4d 	.word	0x000e1c4d
   e224c:	000ea095 	.word	0x000ea095
   e2250:	000ea0a3 	.word	0x000ea0a3

000e2254 <mbedtls_ssl_psk_derive_premaster>:
#endif /* MBEDTLS_SHA512_C */
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
int mbedtls_ssl_psk_derive_premaster( mbedtls_ssl_context *ssl, mbedtls_key_exchange_type_t key_ex )
{
   e2254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e2258:	4606      	mov	r6, r0
    unsigned char *p = ssl->handshake->premaster;
   e225a:	6b00      	ldr	r0, [r0, #48]	; 0x30
    unsigned char *end = p + sizeof( ssl->handshake->premaster );
    const unsigned char *psk = ssl->conf->psk;
   e225c:	6832      	ldr	r2, [r6, #0]
   e225e:	6e57      	ldr	r7, [r2, #100]	; 0x64
    size_t psk_len = ssl->conf->psk_len;
   e2260:	6e94      	ldr	r4, [r2, #104]	; 0x68

    /* If the psk callback was called, use its result */
    if( ssl->handshake->psk != NULL )
   e2262:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
int mbedtls_ssl_psk_derive_premaster( mbedtls_ssl_context *ssl, mbedtls_key_exchange_type_t key_ex )
{
    unsigned char *p = ssl->handshake->premaster;
   e2266:	f500 733d 	add.w	r3, r0, #756	; 0x2f4
    unsigned char *end = p + sizeof( ssl->handshake->premaster );
   e226a:	f500 7552 	add.w	r5, r0, #840	; 0x348
    const unsigned char *psk = ssl->conf->psk;
    size_t psk_len = ssl->conf->psk_len;

    /* If the psk callback was called, use its result */
    if( ssl->handshake->psk != NULL )
   e226e:	b112      	cbz	r2, e2276 <mbedtls_ssl_psk_derive_premaster+0x22>
    {
        psk = ssl->handshake->psk;
        psk_len = ssl->handshake->psk_len;
   e2270:	f8d0 4140 	ldr.w	r4, [r0, #320]	; 0x140
   e2274:	4617      	mov	r7, r2
     *     opaque psk<0..2^16-1>;
     * };
     * with "other_secret" depending on the particular key exchange
     */
#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
    if( key_ex == MBEDTLS_KEY_EXCHANGE_PSK )
   e2276:	2905      	cmp	r1, #5
   e2278:	d11a      	bne.n	e22b0 <mbedtls_ssl_psk_derive_premaster+0x5c>
    {
        if( end - p < 2 )
   e227a:	1aeb      	subs	r3, r5, r3
   e227c:	2b01      	cmp	r3, #1
   e227e:	dc02      	bgt.n	e2286 <mbedtls_ssl_psk_derive_premaster+0x32>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e2280:	4821      	ldr	r0, [pc, #132]	; (e2308 <mbedtls_ssl_psk_derive_premaster+0xb4>)
   e2282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

        *(p++) = (unsigned char)( psk_len >> 8 );
        *(p++) = (unsigned char)( psk_len      );
   e2286:	f200 28f6 	addw	r8, r0, #758	; 0x2f6
    if( key_ex == MBEDTLS_KEY_EXCHANGE_PSK )
    {
        if( end - p < 2 )
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

        *(p++) = (unsigned char)( psk_len >> 8 );
   e228a:	0a23      	lsrs	r3, r4, #8
        *(p++) = (unsigned char)( psk_len      );

        if( end < p || (size_t)( end - p ) < psk_len )
   e228c:	4545      	cmp	r5, r8
    if( key_ex == MBEDTLS_KEY_EXCHANGE_PSK )
    {
        if( end - p < 2 )
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

        *(p++) = (unsigned char)( psk_len >> 8 );
   e228e:	f880 32f4 	strb.w	r3, [r0, #756]	; 0x2f4
        *(p++) = (unsigned char)( psk_len      );
   e2292:	f880 42f5 	strb.w	r4, [r0, #757]	; 0x2f5

        if( end < p || (size_t)( end - p ) < psk_len )
   e2296:	d3f3      	bcc.n	e2280 <mbedtls_ssl_psk_derive_premaster+0x2c>
   e2298:	ebc8 0305 	rsb	r3, r8, r5
   e229c:	42a3      	cmp	r3, r4
   e229e:	d3ef      	bcc.n	e2280 <mbedtls_ssl_psk_derive_premaster+0x2c>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

        memset( p, 0, psk_len );
   e22a0:	4622      	mov	r2, r4
   e22a2:	2100      	movs	r1, #0
   e22a4:	4640      	mov	r0, r8
   e22a6:	f005 fe04 	bl	e7eb2 <memset>
        p += psk_len;
   e22aa:	eb08 0004 	add.w	r0, r8, r4
   e22ae:	e00c      	b.n	e22ca <mbedtls_ssl_psk_derive_premaster+0x76>
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
    if( key_ex == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
   e22b0:	2907      	cmp	r1, #7
   e22b2:	d126      	bne.n	e2302 <mbedtls_ssl_psk_derive_premaster+0xae>
    {
        /*
         * other_secret already set by the ClientKeyExchange message,
         * and is 48 bytes long
         */
        if( end - p < 2 )
   e22b4:	1aeb      	subs	r3, r5, r3
   e22b6:	2b01      	cmp	r3, #1
   e22b8:	dde2      	ble.n	e2280 <mbedtls_ssl_psk_derive_premaster+0x2c>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

        *p++ = 0;
   e22ba:	2300      	movs	r3, #0
   e22bc:	f880 32f4 	strb.w	r3, [r0, #756]	; 0x2f4
        *p++ = 48;
   e22c0:	2330      	movs	r3, #48	; 0x30
   e22c2:	f880 32f5 	strb.w	r3, [r0, #757]	; 0x2f5
        p += 48;
   e22c6:	f200 3026 	addw	r0, r0, #806	; 0x326
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    /* opaque psk<0..2^16-1>; */
    if( end - p < 2 )
   e22ca:	1a2b      	subs	r3, r5, r0
   e22cc:	2b01      	cmp	r3, #1
   e22ce:	ddd7      	ble.n	e2280 <mbedtls_ssl_psk_derive_premaster+0x2c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    *(p++) = (unsigned char)( psk_len >> 8 );
   e22d0:	4603      	mov	r3, r0
   e22d2:	0a22      	lsrs	r2, r4, #8
   e22d4:	f803 2b02 	strb.w	r2, [r3], #2
    *(p++) = (unsigned char)( psk_len      );

    if( end < p || (size_t)( end - p ) < psk_len )
   e22d8:	429d      	cmp	r5, r3
    /* opaque psk<0..2^16-1>; */
    if( end - p < 2 )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    *(p++) = (unsigned char)( psk_len >> 8 );
    *(p++) = (unsigned char)( psk_len      );
   e22da:	7044      	strb	r4, [r0, #1]

    if( end < p || (size_t)( end - p ) < psk_len )
   e22dc:	d3d0      	bcc.n	e2280 <mbedtls_ssl_psk_derive_premaster+0x2c>
   e22de:	1aed      	subs	r5, r5, r3
   e22e0:	42a5      	cmp	r5, r4
   e22e2:	d3cd      	bcc.n	e2280 <mbedtls_ssl_psk_derive_premaster+0x2c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    memcpy( p, psk, psk_len );
   e22e4:	4622      	mov	r2, r4
   e22e6:	4639      	mov	r1, r7
   e22e8:	4618      	mov	r0, r3
   e22ea:	f005 fdbc 	bl	e7e66 <memcpy>
    p += psk_len;

    ssl->handshake->pmslen = p - ssl->handshake->premaster;
   e22ee:	6b32      	ldr	r2, [r6, #48]	; 0x30
   e22f0:	4404      	add	r4, r0
   e22f2:	f502 733d 	add.w	r3, r2, #756	; 0x2f4
   e22f6:	1ae4      	subs	r4, r4, r3
   e22f8:	f8c2 42b0 	str.w	r4, [r2, #688]	; 0x2b0

    return( 0 );
   e22fc:	2000      	movs	r0, #0
   e22fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e2302:	4802      	ldr	r0, [pc, #8]	; (e230c <mbedtls_ssl_psk_derive_premaster+0xb8>)
    p += psk_len;

    ssl->handshake->pmslen = p - ssl->handshake->premaster;

    return( 0 );
}
   e2304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e2308:	ffff8f00 	.word	0xffff8f00
   e230c:	ffff9400 	.word	0xffff9400

000e2310 <mbedtls_ssl_fetch_input>:
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
   e2310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
   e2312:	6943      	ldr	r3, [r0, #20]
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
   e2314:	4604      	mov	r4, r0
   e2316:	460e      	mov	r6, r1
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
   e2318:	b90b      	cbnz	r3, e231e <mbedtls_ssl_fetch_input+0xe>
   e231a:	6983      	ldr	r3, [r0, #24]
   e231c:	b19b      	cbz	r3, e2346 <mbedtls_ssl_fetch_input+0x36>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    if( nb_want > MBEDTLS_SSL_IN_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
   e231e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   e2320:	6d22      	ldr	r2, [r4, #80]	; 0x50
   e2322:	1a9b      	subs	r3, r3, r2
   e2324:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
   e2328:	332d      	adds	r3, #45	; 0x2d
   e232a:	42b3      	cmp	r3, r6
   e232c:	d30b      	bcc.n	e2346 <mbedtls_ssl_fetch_input+0x36>
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
   e232e:	6f65      	ldr	r5, [r4, #116]	; 0x74
   e2330:	42ae      	cmp	r6, r5
   e2332:	d90a      	bls.n	e234a <mbedtls_ssl_fetch_input+0x3a>
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
   e2334:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;
   e2336:	1b75      	subs	r5, r6, r5
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
   e2338:	b14b      	cbz	r3, e234e <mbedtls_ssl_fetch_input+0x3e>
        return( 0 );

    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
   e233a:	6c60      	ldr	r0, [r4, #68]	; 0x44
   e233c:	4798      	blx	r3
   e233e:	2802      	cmp	r0, #2
   e2340:	d105      	bne.n	e234e <mbedtls_ssl_fetch_input+0x3e>
        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
   e2342:	4812      	ldr	r0, [pc, #72]	; (e238c <mbedtls_ssl_fetch_input+0x7c>)
   e2344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e2346:	4812      	ldr	r0, [pc, #72]	; (e2390 <mbedtls_ssl_fetch_input+0x80>)
   e2348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
   e234a:	2000      	movs	r0, #0
   e234c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
            else
            {
                if( ssl->f_recv_timeout != NULL )
   e234e:	69a7      	ldr	r7, [r4, #24]
   e2350:	6da1      	ldr	r1, [r4, #88]	; 0x58
   e2352:	6f60      	ldr	r0, [r4, #116]	; 0x74
   e2354:	b137      	cbz	r7, e2364 <mbedtls_ssl_fetch_input+0x54>
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
                                               ssl->in_hdr + ssl->in_left, len,
                                               ssl->conf->read_timeout );
   e2356:	6823      	ldr	r3, [r4, #0]
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
            else
            {
                if( ssl->f_recv_timeout != NULL )
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
   e2358:	4401      	add	r1, r0
   e235a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   e235c:	69e0      	ldr	r0, [r4, #28]
   e235e:	462a      	mov	r2, r5
   e2360:	47b8      	blx	r7
   e2362:	e004      	b.n	e236e <mbedtls_ssl_fetch_input+0x5e>
                                               ssl->in_hdr + ssl->in_left, len,
                                               ssl->conf->read_timeout );
                }
                else
                {
                    ret = ssl->f_recv( ssl->p_bio,
   e2364:	4401      	add	r1, r0
   e2366:	6963      	ldr	r3, [r4, #20]
   e2368:	69e0      	ldr	r0, [r4, #28]
   e236a:	462a      	mov	r2, r5
   e236c:	4798      	blx	r3

            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
   e236e:	2800      	cmp	r0, #0
   e2370:	d006      	beq.n	e2380 <mbedtls_ssl_fetch_input+0x70>
                return( MBEDTLS_ERR_SSL_CONN_EOF );

            if( ret < 0 )
   e2372:	db09      	blt.n	e2388 <mbedtls_ssl_fetch_input+0x78>
                return( ret );

            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
   e2374:	4285      	cmp	r5, r0
   e2376:	d305      	bcc.n	e2384 <mbedtls_ssl_fetch_input+0x74>
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            ssl->in_left += ret;
   e2378:	6f63      	ldr	r3, [r4, #116]	; 0x74
   e237a:	4418      	add	r0, r3
   e237c:	6760      	str	r0, [r4, #116]	; 0x74
   e237e:	e7d6      	b.n	e232e <mbedtls_ssl_fetch_input+0x1e>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
                return( MBEDTLS_ERR_SSL_CONN_EOF );
   e2380:	4804      	ldr	r0, [pc, #16]	; (e2394 <mbedtls_ssl_fetch_input+0x84>)
   e2382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
            {
                MBEDTLS_SSL_DEBUG_MSG( 1,
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e2384:	4804      	ldr	r0, [pc, #16]	; (e2398 <mbedtls_ssl_fetch_input+0x88>)
   e2386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
}
   e2388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e238a:	bf00      	nop
   e238c:	ffff9800 	.word	0xffff9800
   e2390:	ffff8f00 	.word	0xffff8f00
   e2394:	ffff8d80 	.word	0xffff8d80
   e2398:	ffff9400 	.word	0xffff9400

000e239c <mbedtls_ssl_flush_output>:

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
   e239c:	b538      	push	{r3, r4, r5, lr}
    int ret;
    unsigned char *buf;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
   e239e:	6903      	ldr	r3, [r0, #16]

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
   e23a0:	4605      	mov	r5, r0
    int ret;
    unsigned char *buf;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
   e23a2:	b30b      	cbz	r3, e23e8 <mbedtls_ssl_flush_output+0x4c>
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    /* Avoid incrementing counter if data is flushed */
    if( ssl->out_left == 0 )
   e23a4:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   e23a8:	b308      	cbz	r0, e23ee <mbedtls_ssl_flush_output+0x52>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
    }

    while( ssl->out_left > 0 )
   e23aa:	f8d5 40a4 	ldr.w	r4, [r5, #164]	; 0xa4
   e23ae:	b184      	cbz	r4, e23d2 <mbedtls_ssl_flush_output+0x36>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
                       mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen, ssl->out_left ) );

        buf = ssl->out_hdr - ssl->out_left;
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
   e23b0:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
   e23b4:	692b      	ldr	r3, [r5, #16]
   e23b6:	69e8      	ldr	r0, [r5, #28]
   e23b8:	4622      	mov	r2, r4
   e23ba:	1b09      	subs	r1, r1, r4
   e23bc:	4798      	blx	r3

        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );

        if( ret <= 0 )
   e23be:	2800      	cmp	r0, #0
   e23c0:	dd15      	ble.n	e23ee <mbedtls_ssl_flush_output+0x52>
            return( ret );

        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
   e23c2:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   e23c6:	4282      	cmp	r2, r0
   e23c8:	d310      	bcc.n	e23ec <mbedtls_ssl_flush_output+0x50>
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_left -= ret;
   e23ca:	1a10      	subs	r0, r2, r0
   e23cc:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
    }

    while( ssl->out_left > 0 )
   e23d0:	e7eb      	b.n	e23aa <mbedtls_ssl_flush_output+0xe>
        ssl->out_hdr = ssl->out_buf;
    }
    else
#endif
    {
        ssl->out_hdr = ssl->out_buf + 8;
   e23d2:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    }
    ssl_update_out_pointers( ssl, ssl->transform_out );
   e23d6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
        ssl->out_hdr = ssl->out_buf;
    }
    else
#endif
    {
        ssl->out_hdr = ssl->out_buf + 8;
   e23d8:	3308      	adds	r3, #8
    }
    ssl_update_out_pointers( ssl, ssl->transform_out );
   e23da:	4628      	mov	r0, r5
        ssl->out_hdr = ssl->out_buf;
    }
    else
#endif
    {
        ssl->out_hdr = ssl->out_buf + 8;
   e23dc:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }
    ssl_update_out_pointers( ssl, ssl->transform_out );
   e23e0:	f7ff fc1d 	bl	e1c1e <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>
   e23e4:	4620      	mov	r0, r4
   e23e6:	bd38      	pop	{r3, r4, r5, pc}

    if( ssl->f_send == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e23e8:	4801      	ldr	r0, [pc, #4]	; (e23f0 <mbedtls_ssl_flush_output+0x54>)
   e23ea:	bd38      	pop	{r3, r4, r5, pc}
        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1,
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e23ec:	4801      	ldr	r0, [pc, #4]	; (e23f4 <mbedtls_ssl_flush_output+0x58>)
    ssl_update_out_pointers( ssl, ssl->transform_out );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );

    return( 0 );
}
   e23ee:	bd38      	pop	{r3, r4, r5, pc}
   e23f0:	ffff8f00 	.word	0xffff8f00
   e23f4:	ffff9400 	.word	0xffff9400

000e23f8 <mbedtls_ssl_write_record>:
 *  - ssl->out_msgtype: type of the message (AppData, Handshake, Alert, CCS)
 *  - ssl->out_msglen: length of the record content (excl headers)
 *  - ssl->out_msg: record content
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl, uint8_t force_flush )
{
   e23f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( !done )
    {
        unsigned i;
        size_t protected_record_size;

        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
   e23fc:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 *  - ssl->out_msg: record content
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl, uint8_t force_flush )
{
    int ret, done = 0;
    size_t len = ssl->out_msglen;
   e2400:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 *  - ssl->out_msgtype: type of the message (AppData, Handshake, Alert, CCS)
 *  - ssl->out_msglen: length of the record content (excl headers)
 *  - ssl->out_msg: record content
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl, uint8_t force_flush )
{
   e2404:	460f      	mov	r7, r1
    if( !done )
    {
        unsigned i;
        size_t protected_record_size;

        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
   e2406:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
   e240a:	7011      	strb	r1, [r2, #0]
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, ssl->out_hdr + 1 );
   e240c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    {
        unsigned i;
        size_t protected_record_size;

        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
   e2410:	68c1      	ldr	r1, [r0, #12]
 *  - ssl->out_msgtype: type of the message (AppData, Handshake, Alert, CCS)
 *  - ssl->out_msglen: length of the record content (excl headers)
 *  - ssl->out_msg: record content
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl, uint8_t force_flush )
{
   e2412:	4604      	mov	r4, r0
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   e2414:	6880      	ldr	r0, [r0, #8]
   e2416:	7050      	strb	r0, [r2, #1]
        ver[1] = (unsigned char) minor;
   e2418:	7091      	strb	r1, [r2, #2]

        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, ssl->out_hdr + 1 );

        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
   e241a:	4626      	mov	r6, r4
   e241c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   e2420:	f856 2fa8 	ldr.w	r2, [r6, #168]!
   e2424:	600a      	str	r2, [r1, #0]
   e2426:	6872      	ldr	r2, [r6, #4]
   e2428:	604a      	str	r2, [r1, #4]
        ssl->out_len[0] = (unsigned char)( len >> 8 );
   e242a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   e242e:	0a19      	lsrs	r1, r3, #8
   e2430:	7011      	strb	r1, [r2, #0]
        ssl->out_len[1] = (unsigned char)( len      );
   e2432:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   e2436:	7053      	strb	r3, [r2, #1]

        if( ssl->transform_out != NULL )
   e2438:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 *  - ssl->out_msgtype: type of the message (AppData, Handshake, Alert, CCS)
 *  - ssl->out_msglen: length of the record content (excl headers)
 *  - ssl->out_msg: record content
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl, uint8_t force_flush )
{
   e243a:	b091      	sub	sp, #68	; 0x44

        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
        ssl->out_len[0] = (unsigned char)( len >> 8 );
        ssl->out_len[1] = (unsigned char)( len      );

        if( ssl->transform_out != NULL )
   e243c:	2d00      	cmp	r5, #0
   e243e:	f000 8095 	beq.w	e256c <mbedtls_ssl_write_record+0x174>
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
   e2442:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e2444:	2b00      	cmp	r3, #0
   e2446:	f000 80ac 	beq.w	e25a2 <mbedtls_ssl_write_record+0x1aa>
   e244a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, MBEDTLS_MODE_NONE );
    if( ctx->cipher_info == NULL )
   e244c:	2b00      	cmp	r3, #0
   e244e:	f000 80a8 	beq.w	e25a2 <mbedtls_ssl_write_record+0x1aa>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
   e2452:	785b      	ldrb	r3, [r3, #1]
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || \
    defined(MBEDTLS_CCM_C) || \
    defined(MBEDTLS_CHACHAPOLY_C)
    if( mode == MBEDTLS_MODE_GCM ||
   e2454:	2b06      	cmp	r3, #6
   e2456:	d004      	beq.n	e2462 <mbedtls_ssl_write_record+0x6a>
   e2458:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   e245c:	2b08      	cmp	r3, #8
   e245e:	f040 80a0 	bne.w	e25a2 <mbedtls_ssl_write_record+0x1aa>
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_out;
        unsigned char taglen = transform->ciphersuite_info->flags &
   e2462:	682b      	ldr	r3, [r5, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
   e2464:	68ea      	ldr	r2, [r5, #12]
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_out;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   e2466:	7f1b      	ldrb	r3, [r3, #28]
        size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
   e2468:	f8d5 c010 	ldr.w	ip, [r5, #16]
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_out;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   e246c:	f013 0f02 	tst.w	r3, #2
        size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;

        /*
         * Prepare additional authenticated data
         */
        memcpy( add_data, ssl->out_ctr, 8 );
   e2470:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   e2474:	6818      	ldr	r0, [r3, #0]
   e2476:	6859      	ldr	r1, [r3, #4]
   e2478:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
   e247c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
   e2480:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
   e2484:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
   e2488:	68e1      	ldr	r1, [r4, #12]
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
        ver[1] = (unsigned char) minor;
   e248a:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
         */
        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
   e248e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   e2492:	68a0      	ldr	r0, [r4, #8]
   e2494:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
         */
        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
   e2498:	ea4f 2011 	mov.w	r0, r1, lsr #8
   e249c:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
        add_data[12] = ssl->out_msglen & 0xFF;
   e24a0:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );

        /*
         * Generate IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   e24a4:	68e9      	ldr	r1, [r5, #12]
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_out;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   e24a6:	bf14      	ite	ne
   e24a8:	f04f 0808 	movne.w	r8, #8
   e24ac:	f04f 0810 	moveq.w	r8, #16
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );

        /*
         * Generate IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   e24b0:	290c      	cmp	r1, #12
   e24b2:	d176      	bne.n	e25a2 <mbedtls_ssl_write_record+0x1aa>
   e24b4:	f1bc 0f04 	cmp.w	ip, #4
   e24b8:	d10e      	bne.n	e24d8 <mbedtls_ssl_write_record+0xe0>
        {
            /* GCM and CCM: fixed || explicit (=seqnum) */
            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );
   e24ba:	69a8      	ldr	r0, [r5, #24]
   e24bc:	9009      	str	r0, [sp, #36]	; 0x24
            memcpy( iv + transform->fixed_ivlen, ssl->out_ctr, 8 );
   e24be:	6818      	ldr	r0, [r3, #0]
   e24c0:	6859      	ldr	r1, [r3, #4]
   e24c2:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   e24c6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
            memcpy( ssl->out_iv, ssl->out_ctr, 8 );
   e24ca:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   e24ce:	6819      	ldr	r1, [r3, #0]
   e24d0:	6001      	str	r1, [r0, #0]
   e24d2:	6859      	ldr	r1, [r3, #4]
   e24d4:	6041      	str	r1, [r0, #4]
   e24d6:	e01c      	b.n	e2512 <mbedtls_ssl_write_record+0x11a>

        }
        else if( transform->ivlen == 12 && transform->fixed_ivlen == 12 )
   e24d8:	f1bc 0f0c 	cmp.w	ip, #12
   e24dc:	d161      	bne.n	e25a2 <mbedtls_ssl_write_record+0x1aa>
        {
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );
   e24de:	46a9      	mov	r9, r5
   e24e0:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
   e24e4:	f859 0f18 	ldr.w	r0, [r9, #24]!
   e24e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
   e24ec:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   e24f0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   e24f4:	f8ce 0000 	str.w	r0, [lr]
   e24f8:	1e59      	subs	r1, r3, #1
   e24fa:	a80a      	add	r0, sp, #40	; 0x28
   e24fc:	3307      	adds	r3, #7

            for( i = 0; i < 8; i++ )
                iv[i+4] ^= ssl->out_ctr[i];
   e24fe:	f811 ef01 	ldrb.w	lr, [r1, #1]!
   e2502:	f890 9000 	ldrb.w	r9, [r0]
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );

            for( i = 0; i < 8; i++ )
   e2506:	428b      	cmp	r3, r1
                iv[i+4] ^= ssl->out_ctr[i];
   e2508:	ea89 0e0e 	eor.w	lr, r9, lr
   e250c:	f800 eb01 	strb.w	lr, [r0], #1
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );

            for( i = 0; i < 8; i++ )
   e2510:	d1f5      	bne.n	e24fe <mbedtls_ssl_write_record+0x106>

        /*
         * Fix message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
   e2512:	f8d4 90a0 	ldr.w	r9, [r4, #160]	; 0xa0
                                  ssl->out_iv, explicit_ivlen );

        /*
         * Fix message length with added IV
         */
        enc_msg = ssl->out_msg;
   e2516:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
                                    ssl->out_msglen ) );

        /*
         * Encrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
   e251a:	9303      	str	r3, [sp, #12]
        /*
         * Fix message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += explicit_ivlen;
   e251c:	444a      	add	r2, r9
   e251e:	ebcc 0202 	rsb	r2, ip, r2
   e2522:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
                                    ssl->out_msglen ) );

        /*
         * Encrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
   e2526:	eb03 0209 	add.w	r2, r3, r9
   e252a:	9205      	str	r2, [sp, #20]
   e252c:	9301      	str	r3, [sp, #4]
   e252e:	aa08      	add	r2, sp, #32
   e2530:	230d      	movs	r3, #13
   e2532:	9300      	str	r3, [sp, #0]
   e2534:	f8cd 8018 	str.w	r8, [sp, #24]
   e2538:	9204      	str	r2, [sp, #16]
   e253a:	f8cd 9008 	str.w	r9, [sp, #8]
   e253e:	ab0c      	add	r3, sp, #48	; 0x30
   e2540:	68ea      	ldr	r2, [r5, #12]
   e2542:	a909      	add	r1, sp, #36	; 0x24
   e2544:	f105 0050 	add.w	r0, r5, #80	; 0x50
   e2548:	f7f5 fb92 	bl	d7c70 <mbedtls_cipher_auth_encrypt>
   e254c:	bb90      	cbnz	r0, e25b4 <mbedtls_ssl_write_record+0x1bc>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
            return( ret );
        }

        if( olen != enc_msglen )
   e254e:	9b08      	ldr	r3, [sp, #32]
   e2550:	4599      	cmp	r9, r3
   e2552:	d126      	bne.n	e25a2 <mbedtls_ssl_write_record+0x1aa>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
   e2554:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
   e2558:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
   e255c:	4443      	add	r3, r8
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
   e255e:	0a19      	lsrs	r1, r3, #8
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
   e2560:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
   e2564:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
   e2566:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   e256a:	7053      	strb	r3, [r2, #1]
                                    ssl->out_hdr[2], len ) );

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                               ssl->out_hdr, protected_record_size );

        ssl->out_left += protected_record_size;
   e256c:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
        ssl->out_hdr  += protected_record_size;
        ssl_update_out_pointers( ssl, ssl->transform_out );
   e2570:	6ba1      	ldr	r1, [r4, #56]	; 0x38
            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
            ssl->out_len[1] = (unsigned char)( len      );
        }

        protected_record_size = len + mbedtls_ssl_hdr_len( ssl );
   e2572:	3305      	adds	r3, #5
                                    ssl->out_hdr[2], len ) );

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                               ssl->out_hdr, protected_record_size );

        ssl->out_left += protected_record_size;
   e2574:	441a      	add	r2, r3
   e2576:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
        ssl->out_hdr  += protected_record_size;
   e257a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   e257e:	4413      	add	r3, r2
   e2580:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        ssl_update_out_pointers( ssl, ssl->transform_out );
   e2584:	4620      	mov	r0, r4
   e2586:	f7ff fb4a 	bl	e1c1e <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>
   e258a:	f104 02b0 	add.w	r2, r4, #176	; 0xb0

        for( i = 8; i > ssl_ep_len( ssl ); i-- )
            if( ++ssl->cur_out_ctr[i - 1] != 0 )
   e258e:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
   e2592:	3301      	adds	r3, #1
   e2594:	b2db      	uxtb	r3, r3
   e2596:	7013      	strb	r3, [r2, #0]
   e2598:	b92b      	cbnz	r3, e25a6 <mbedtls_ssl_write_record+0x1ae>

        ssl->out_left += protected_record_size;
        ssl->out_hdr  += protected_record_size;
        ssl_update_out_pointers( ssl, ssl->transform_out );

        for( i = 8; i > ssl_ep_len( ssl ); i-- )
   e259a:	4296      	cmp	r6, r2
   e259c:	d1f7      	bne.n	e258e <mbedtls_ssl_write_record+0x196>

        /* The loop goes to its end iff the counter is wrapping */
        if( i == ssl_ep_len( ssl ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
   e259e:	4807      	ldr	r0, [pc, #28]	; (e25bc <mbedtls_ssl_write_record+0x1c4>)
   e25a0:	e008      	b.n	e25b4 <mbedtls_ssl_write_record+0x1bc>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e25a2:	4807      	ldr	r0, [pc, #28]	; (e25c0 <mbedtls_ssl_write_record+0x1c8>)
   e25a4:	e006      	b.n	e25b4 <mbedtls_ssl_write_record+0x1bc>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "Still %u bytes available in current datagram", (unsigned) remaining ) );
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ( flush == SSL_FORCE_FLUSH ) &&
   e25a6:	2f01      	cmp	r7, #1
   e25a8:	d103      	bne.n	e25b2 <mbedtls_ssl_write_record+0x1ba>
        ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   e25aa:	4620      	mov	r0, r4
   e25ac:	f7ff fef6 	bl	e239c <mbedtls_ssl_flush_output>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "Still %u bytes available in current datagram", (unsigned) remaining ) );
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ( flush == SSL_FORCE_FLUSH ) &&
   e25b0:	b900      	cbnz	r0, e25b4 <mbedtls_ssl_write_record+0x1bc>
        return( ret );
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );

    return( 0 );
   e25b2:	2000      	movs	r0, #0
}
   e25b4:	b011      	add	sp, #68	; 0x44
   e25b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e25ba:	bf00      	nop
   e25bc:	ffff9480 	.word	0xffff9480
   e25c0:	ffff9400 	.word	0xffff9400

000e25c4 <mbedtls_ssl_write_handshake_msg>:
 *   - ssl->out_msglen: the length of the record contents
 *      (including handshake headers but excluding record headers)
 *   - ssl->out_msg: the record contents (handshake headers + content)
 */
int mbedtls_ssl_write_handshake_msg( mbedtls_ssl_context *ssl )
{
   e25c4:	b538      	push	{r3, r4, r5, lr}
   e25c6:	4604      	mov	r4, r0
    int ret;
    const size_t hs_len = ssl->out_msglen - 4;
    const unsigned char hs_type = ssl->out_msg[0];
   e25c8:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write handshake message" ) );

    /*
     * Sanity checks
     */
    if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
   e25cc:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 *   - ssl->out_msg: the record contents (handshake headers + content)
 */
int mbedtls_ssl_write_handshake_msg( mbedtls_ssl_context *ssl )
{
    int ret;
    const size_t hs_len = ssl->out_msglen - 4;
   e25d0:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    const unsigned char hs_type = ssl->out_msg[0];
   e25d4:	7808      	ldrb	r0, [r1, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write handshake message" ) );

    /*
     * Sanity checks
     */
    if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
   e25d6:	2a16      	cmp	r2, #22
   e25d8:	d002      	beq.n	e25e0 <mbedtls_ssl_write_handshake_msg+0x1c>
   e25da:	2a14      	cmp	r2, #20
   e25dc:	d001      	beq.n	e25e2 <mbedtls_ssl_write_handshake_msg+0x1e>
   e25de:	e024      	b.n	e262a <mbedtls_ssl_write_handshake_msg+0x66>
    }

    /* Whenever we send anything different from a
     * HelloRequest we should be in a handshake - double check. */
    if( ! ( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
            hs_type          == MBEDTLS_SSL_HS_HELLO_REQUEST ) &&
   e25e0:	b300      	cbz	r0, e2624 <mbedtls_ssl_write_handshake_msg+0x60>
   e25e2:	6b25      	ldr	r5, [r4, #48]	; 0x30
   e25e4:	b30d      	cbz	r5, e262a <mbedtls_ssl_write_handshake_msg+0x66>
     * writing functions must obey the bounds of the
     * outgoing record buffer, but better be safe.
     *
     * Note: We deliberately do not check for the MTU or MFL here.
     */
    if( ssl->out_msglen > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e25e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   e25ea:	d81e      	bhi.n	e262a <mbedtls_ssl_write_handshake_msg+0x66>
    }

    /*
     * Fill handshake headers
     */
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   e25ec:	2a16      	cmp	r2, #22
   e25ee:	d113      	bne.n	e2618 <mbedtls_ssl_write_handshake_msg+0x54>
 *   - ssl->out_msg: the record contents (handshake headers + content)
 */
int mbedtls_ssl_write_handshake_msg( mbedtls_ssl_context *ssl )
{
    int ret;
    const size_t hs_len = ssl->out_msglen - 4;
   e25f0:	3b04      	subs	r3, #4
    /*
     * Fill handshake headers
     */
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        ssl->out_msg[1] = (unsigned char)( hs_len >> 16 );
   e25f2:	0c1a      	lsrs	r2, r3, #16
   e25f4:	704a      	strb	r2, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( hs_len >>  8 );
   e25f6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e25fa:	0a19      	lsrs	r1, r3, #8
   e25fc:	7091      	strb	r1, [r2, #2]
        ssl->out_msg[3] = (unsigned char)( hs_len       );
   e25fe:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e2602:	70d3      	strb	r3, [r2, #3]
            memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );
        }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

        /* Update running hashes of handshake messages seen */
        if( hs_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
   e2604:	b140      	cbz	r0, e2618 <mbedtls_ssl_write_handshake_msg+0x54>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, ssl->out_msglen );
   e2606:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e2608:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   e260c:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
   e2610:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   e2614:	4620      	mov	r0, r4
   e2616:	4798      	blx	r3
        }
    }
    else
#endif
    {
        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   e2618:	4620      	mov	r0, r4
   e261a:	2101      	movs	r1, #1
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write handshake message" ) );

    return( 0 );
}
   e261c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
    }
    else
#endif
    {
        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   e2620:	f7ff beea 	b.w	e23f8 <mbedtls_ssl_write_record>
     * writing functions must obey the bounds of the
     * outgoing record buffer, but better be safe.
     *
     * Note: We deliberately do not check for the MTU or MFL here.
     */
    if( ssl->out_msglen > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e2624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   e2628:	d9e2      	bls.n	e25f0 <mbedtls_ssl_write_handshake_msg+0x2c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write handshake message" ) );

    return( 0 );
}
   e262a:	4801      	ldr	r0, [pc, #4]	; (e2630 <mbedtls_ssl_write_handshake_msg+0x6c>)
   e262c:	bd38      	pop	{r3, r4, r5, pc}
   e262e:	bf00      	nop
   e2630:	ffff9400 	.word	0xffff9400

000e2634 <mbedtls_ssl_prepare_handshake_record>:
            ( ssl->in_msg[2] << 8  ) |
              ssl->in_msg[3] );
}

int mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )
{
   e2634:	b510      	push	{r4, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
   e2636:	6f04      	ldr	r4, [r0, #112]	; 0x70
   e2638:	2c03      	cmp	r4, #3
   e263a:	d90f      	bls.n	e265c <mbedtls_ssl_prepare_handshake_record+0x28>
   e263c:	6e41      	ldr	r1, [r0, #100]	; 0x64
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + ssl_get_hs_total_len( ssl );
   e263e:	788a      	ldrb	r2, [r1, #2]
   e2640:	784b      	ldrb	r3, [r1, #1]
   e2642:	0212      	lsls	r2, r2, #8
   e2644:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   e2648:	78ca      	ldrb	r2, [r1, #3]
   e264a:	4313      	orrs	r3, r2
   e264c:	3304      	adds	r3, #4
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
   e264e:	4a04      	ldr	r2, [pc, #16]	; (e2660 <mbedtls_ssl_prepare_handshake_record+0x2c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + ssl_get_hs_total_len( ssl );
   e2650:	6783      	str	r3, [r0, #120]	; 0x78
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
   e2652:	429c      	cmp	r4, r3
   e2654:	bf34      	ite	cc
   e2656:	4610      	movcc	r0, r2
   e2658:	2000      	movcs	r0, #0
   e265a:	bd10      	pop	{r4, pc}
{
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   e265c:	4801      	ldr	r0, [pc, #4]	; (e2664 <mbedtls_ssl_prepare_handshake_record+0x30>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
}
   e265e:	bd10      	pop	{r4, pc}
   e2660:	ffff8f80 	.word	0xffff8f80
   e2664:	ffff8e00 	.word	0xffff8e00

000e2668 <mbedtls_ssl_update_handshake_status>:

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
   e2668:	6842      	ldr	r2, [r0, #4]
   e266a:	2a10      	cmp	r2, #16

    return( 0 );
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
   e266c:	b410      	push	{r4}
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
   e266e:	d009      	beq.n	e2684 <mbedtls_ssl_update_handshake_status+0x1c>
    return( 0 );
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;
   e2670:	6b02      	ldr	r2, [r0, #48]	; 0x30

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
   e2672:	b13a      	cbz	r2, e2684 <mbedtls_ssl_update_handshake_status+0x1c>
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
   e2674:	f8d2 42a0 	ldr.w	r4, [r2, #672]	; 0x2a0
   e2678:	6e41      	ldr	r1, [r0, #100]	; 0x64
   e267a:	6f82      	ldr	r2, [r0, #120]	; 0x78
   e267c:	4623      	mov	r3, r4

        /* Create a fresh last entry */
        memset( hs_buf, 0, sizeof( mbedtls_ssl_hs_buffer ) );
    }
#endif
}
   e267e:	f85d 4b04 	ldr.w	r4, [sp], #4
{
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
   e2682:	4718      	bx	r3

        /* Create a fresh last entry */
        memset( hs_buf, 0, sizeof( mbedtls_ssl_hs_buffer ) );
    }
#endif
}
   e2684:	f85d 4b04 	ldr.w	r4, [sp], #4
   e2688:	4770      	bx	lr
	...

000e268c <mbedtls_ssl_handle_message_type>:

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
   e268c:	b510      	push	{r4, lr}
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   e268e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   e2690:	2b16      	cmp	r3, #22

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
   e2692:	4604      	mov	r4, r0
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   e2694:	d003      	beq.n	e269e <mbedtls_ssl_handle_message_type+0x12>
        {
            return( ret );
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
   e2696:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e2698:	2b14      	cmp	r3, #20
   e269a:	d10d      	bne.n	e26b8 <mbedtls_ssl_handle_message_type+0x2c>
   e269c:	e004      	b.n	e26a8 <mbedtls_ssl_handle_message_type+0x1c>
    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
   e269e:	f7ff ffc9 	bl	e2634 <mbedtls_ssl_prepare_handshake_record>
   e26a2:	2800      	cmp	r0, #0
   e26a4:	d0f7      	beq.n	e2696 <mbedtls_ssl_handle_message_type+0xa>
   e26a6:	bd10      	pop	{r4, pc}
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
    {
        if( ssl->in_msglen != 1 )
   e26a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
   e26aa:	2b01      	cmp	r3, #1
   e26ac:	d118      	bne.n	e26e0 <mbedtls_ssl_handle_message_type+0x54>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }

        if( ssl->in_msg[0] != 1 )
   e26ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
    {
        if( ssl->in_msglen != 1 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   e26b0:	480f      	ldr	r0, [pc, #60]	; (e26f0 <mbedtls_ssl_handle_message_type+0x64>)
        }

        if( ssl->in_msg[0] != 1 )
   e26b2:	781b      	ldrb	r3, [r3, #0]
    {
        if( ssl->in_msglen != 1 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   e26b4:	2b01      	cmp	r3, #1
   e26b6:	e00e      	b.n	e26d6 <mbedtls_ssl_handle_message_type+0x4a>
            return( MBEDTLS_ERR_SSL_EARLY_MESSAGE );
        }
#endif
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
   e26b8:	2b15      	cmp	r3, #21
   e26ba:	d10f      	bne.n	e26dc <mbedtls_ssl_handle_message_type+0x50>
    {
        if( ssl->in_msglen != 2 )
   e26bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
   e26be:	2b02      	cmp	r3, #2
   e26c0:	d10e      	bne.n	e26e0 <mbedtls_ssl_handle_message_type+0x54>
                       ssl->in_msg[0], ssl->in_msg[1] ) );

        /*
         * Ignore non-fatal alerts, except close_notify and no_renegotiation
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
   e26c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   e26c4:	781a      	ldrb	r2, [r3, #0]
   e26c6:	2a02      	cmp	r2, #2
   e26c8:	d00c      	beq.n	e26e4 <mbedtls_ssl_handle_message_type+0x58>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
   e26ca:	2a01      	cmp	r2, #1
   e26cc:	d10c      	bne.n	e26e8 <mbedtls_ssl_handle_message_type+0x5c>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
   e26ce:	785b      	ldrb	r3, [r3, #1]
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
   e26d0:	b163      	cbz	r3, e26ec <mbedtls_ssl_handle_message_type+0x60>
    {
        ssl_handshake_wrapup_free_hs_transform( ssl );
    }
#endif

    return( 0 );
   e26d2:	4808      	ldr	r0, [pc, #32]	; (e26f4 <mbedtls_ssl_handle_message_type+0x68>)
   e26d4:	2b64      	cmp	r3, #100	; 0x64
   e26d6:	bf08      	it	eq
   e26d8:	2000      	moveq	r0, #0
   e26da:	bd10      	pop	{r4, pc}
   e26dc:	2000      	movs	r0, #0
   e26de:	bd10      	pop	{r4, pc}
    {
        if( ssl->in_msglen != 1 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   e26e0:	4803      	ldr	r0, [pc, #12]	; (e26f0 <mbedtls_ssl_handle_message_type+0x64>)
   e26e2:	bd10      	pop	{r4, pc}
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
   e26e4:	4804      	ldr	r0, [pc, #16]	; (e26f8 <mbedtls_ssl_handle_message_type+0x6c>)
   e26e6:	bd10      	pop	{r4, pc}
            return( 0 );
        }
#endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
   e26e8:	4802      	ldr	r0, [pc, #8]	; (e26f4 <mbedtls_ssl_handle_message_type+0x68>)
   e26ea:	bd10      	pop	{r4, pc}

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
   e26ec:	4803      	ldr	r0, [pc, #12]	; (e26fc <mbedtls_ssl_handle_message_type+0x70>)
        ssl_handshake_wrapup_free_hs_transform( ssl );
    }
#endif

    return( 0 );
}
   e26ee:	bd10      	pop	{r4, pc}
   e26f0:	ffff8e00 	.word	0xffff8e00
   e26f4:	ffff9980 	.word	0xffff9980
   e26f8:	ffff8880 	.word	0xffff8880
   e26fc:	ffff8780 	.word	0xffff8780

000e2700 <mbedtls_ssl_send_alert_message>:
}

int mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,
                            unsigned char level,
                            unsigned char message )
{
   e2700:	b410      	push	{r4}
    int ret;

    if( ssl == NULL || ssl->conf == NULL )
   e2702:	b190      	cbz	r0, e272a <mbedtls_ssl_send_alert_message+0x2a>
   e2704:	6804      	ldr	r4, [r0, #0]
   e2706:	b184      	cbz	r4, e272a <mbedtls_ssl_send_alert_message+0x2a>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));

    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
   e2708:	2415      	movs	r4, #21
   e270a:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
    ssl->out_msglen = 2;
   e270e:	2402      	movs	r4, #2
   e2710:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
    ssl->out_msg[0] = level;
   e2714:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
   e2718:	7021      	strb	r1, [r4, #0]
    ssl->out_msg[1] = message;
   e271a:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   e271e:	705a      	strb	r2, [r3, #1]

    if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   e2720:	2101      	movs	r1, #1
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
   e2722:	f85d 4b04 	ldr.w	r4, [sp], #4
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
    ssl->out_msglen = 2;
    ssl->out_msg[0] = level;
    ssl->out_msg[1] = message;

    if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   e2726:	f7ff be67 	b.w	e23f8 <mbedtls_ssl_write_record>
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
   e272a:	4802      	ldr	r0, [pc, #8]	; (e2734 <mbedtls_ssl_send_alert_message+0x34>)
   e272c:	f85d 4b04 	ldr.w	r4, [sp], #4
   e2730:	4770      	bx	lr
   e2732:	bf00      	nop
   e2734:	ffff8f00 	.word	0xffff8f00

000e2738 <mbedtls_ssl_read_record>:
static int ssl_get_next_record( mbedtls_ssl_context *ssl );
static int ssl_record_is_in_progress( mbedtls_ssl_context *ssl );

int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl,
                             unsigned update_hs_digest )
{
   e2738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
   e273c:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
static int ssl_get_next_record( mbedtls_ssl_context *ssl );
static int ssl_record_is_in_progress( mbedtls_ssl_context *ssl );

int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl,
                             unsigned update_hs_digest )
{
   e2740:	b090      	sub	sp, #64	; 0x40
   e2742:	4604      	mov	r4, r0
   e2744:	460e      	mov	r6, r1
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
   e2746:	b9a5      	cbnz	r5, e2772 <mbedtls_ssl_read_record+0x3a>
        else
        {
            ssl->in_msglen = 0;
        }

        ssl->in_hslen   = 0;
   e2748:	462f      	mov	r7, r5
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
   e274a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
   e274c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   e274e:	b169      	cbz	r1, e276c <mbedtls_ssl_read_record+0x34>
    {
        /* Hard assertion to be sure that no application data
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
   e2750:	b99b      	cbnz	r3, e277a <mbedtls_ssl_read_record+0x42>
         *     should not be treated as a silently corrected assertion.
         *     Additionally, ssl->in_hslen might be arbitrarily out of
         *     bounds after handling a DTLS message with an unexpected
         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
         */
        if( ssl->in_hslen < ssl->in_msglen )
   e2752:	6f22      	ldr	r2, [r4, #112]	; 0x70
   e2754:	4291      	cmp	r1, r2
   e2756:	d206      	bcs.n	e2766 <mbedtls_ssl_read_record+0x2e>
        {
            ssl->in_msglen -= ssl->in_hslen;
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
   e2758:	6e60      	ldr	r0, [r4, #100]	; 0x64
         *     bounds after handling a DTLS message with an unexpected
         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
         */
        if( ssl->in_hslen < ssl->in_msglen )
        {
            ssl->in_msglen -= ssl->in_hslen;
   e275a:	1a52      	subs	r2, r2, r1
   e275c:	6722      	str	r2, [r4, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
                     ssl->in_msglen );
   e275e:	4401      	add	r1, r0
   e2760:	f005 fb8c 	bl	e7e7c <memmove>
   e2764:	e000      	b.n	e2768 <mbedtls_ssl_read_record+0x30>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
                                   ssl->in_msg, ssl->in_msglen );
        }
        else
        {
            ssl->in_msglen = 0;
   e2766:	6723      	str	r3, [r4, #112]	; 0x70
        }

        ssl->in_hslen   = 0;
   e2768:	67a7      	str	r7, [r4, #120]	; 0x78
   e276a:	e008      	b.n	e277e <mbedtls_ssl_read_record+0x46>
    }
    /* Case (4): Application data */
    else if( ssl->in_offt != NULL )
   e276c:	b93b      	cbnz	r3, e277e <mbedtls_ssl_read_record+0x46>
        return( 0 );
    }
    /* Everything else (CCS & Alerts) */
    else
    {
        ssl->in_msglen = 0;
   e276e:	6723      	str	r3, [r4, #112]	; 0x70
   e2770:	e005      	b.n	e277e <mbedtls_ssl_read_record+0x46>
        }
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "reuse previously read message" ) );
        ssl->keep_current_message = 0;
   e2772:	2500      	movs	r5, #0
   e2774:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
   e2778:	e127      	b.n	e29ca <mbedtls_ssl_read_record+0x292>
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e277a:	4d96      	ldr	r5, [pc, #600]	; (e29d4 <mbedtls_ssl_read_record+0x29c>)
   e277c:	e125      	b.n	e29ca <mbedtls_ssl_read_record+0x292>
    return( 0 );
}

static int ssl_record_is_in_progress( mbedtls_ssl_context *ssl )
{
    if( ssl->in_msglen > 0 )
   e277e:	6f23      	ldr	r3, [r4, #112]	; 0x70
   e2780:	2b00      	cmp	r3, #0
   e2782:	f040 8105 	bne.w	e2990 <mbedtls_ssl_read_record+0x258>
    ret = ssl_load_buffered_record( ssl );
    if( ret != 0 )
        return( ret );
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
   e2786:	2105      	movs	r1, #5
   e2788:	4620      	mov	r0, r4
   e278a:	f7ff fdc1 	bl	e2310 <mbedtls_ssl_fetch_input>
   e278e:	2800      	cmp	r0, #0
   e2790:	f040 8113 	bne.w	e29ba <mbedtls_ssl_read_record+0x282>
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
   e2794:	6da2      	ldr	r2, [r4, #88]	; 0x58
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   e2796:	6de0      	ldr	r0, [r4, #92]	; 0x5c
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
   e2798:	7813      	ldrb	r3, [r2, #0]
   e279a:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   e279c:	f890 e000 	ldrb.w	lr, [r0]
   e27a0:	7841      	ldrb	r1, [r0, #1]
    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
   e27a2:	6820      	ldr	r0, [r4, #0]
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   e27a4:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
   e27a8:	3b14      	subs	r3, #20
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   e27aa:	6721      	str	r1, [r4, #112]	; 0x70
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
   e27ac:	2b03      	cmp	r3, #3
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
   e27ae:	f892 e001 	ldrb.w	lr, [r2, #1]
        *minor = ver[1];
   e27b2:	7892      	ldrb	r2, [r2, #2]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
   e27b4:	d905      	bls.n	e27c2 <mbedtls_ssl_read_record+0x8a>
        /* Silently ignore invalid DTLS records as recommended by RFC 6347
         * Section 4.1.2.7 */
        if( ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM )
#endif /* MBEDTLS_SSL_PROTO_DTLS */
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   e27b6:	220a      	movs	r2, #10
   e27b8:	2102      	movs	r1, #2
   e27ba:	4620      	mov	r0, r4
   e27bc:	f7ff ffa0 	bl	e2700 <mbedtls_ssl_send_alert_message>
   e27c0:	e0e2      	b.n	e2988 <mbedtls_ssl_read_record+0x250>

        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check version */
    if( major_ver != ssl->major_ver )
   e27c2:	68a3      	ldr	r3, [r4, #8]
   e27c4:	459e      	cmp	lr, r3
   e27c6:	f040 80df 	bne.w	e2988 <mbedtls_ssl_read_record+0x250>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    if( minor_ver > ssl->conf->max_minor_ver )
   e27ca:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
   e27ce:	429a      	cmp	r2, r3
   e27d0:	f300 80da 	bgt.w	e2988 <mbedtls_ssl_read_record+0x250>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against the size of our buffer */
    if( ssl->in_msglen > MBEDTLS_SSL_IN_BUFFER_LEN
   e27d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   e27d6:	6d22      	ldr	r2, [r4, #80]	; 0x50
   e27d8:	1a9b      	subs	r3, r3, r2
   e27da:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
   e27de:	332d      	adds	r3, #45	; 0x2d
   e27e0:	4299      	cmp	r1, r3
   e27e2:	f200 80d1 	bhi.w	e2988 <mbedtls_ssl_read_record+0x250>
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */


    /* Check length against bounds of the current transform and version */
    if( ssl->transform_in == NULL )
   e27e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   e27e8:	b923      	cbnz	r3, e27f4 <mbedtls_ssl_read_record+0xbc>
    {
        if( ssl->in_msglen < 1 ||
   e27ea:	1e4b      	subs	r3, r1, #1
   e27ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   e27f0:	d30c      	bcc.n	e280c <mbedtls_ssl_read_record+0xd4>
   e27f2:	e0c9      	b.n	e2988 <mbedtls_ssl_read_record+0x250>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
    }
    else
    {
        if( ssl->in_msglen < ssl->transform_in->minlen )
   e27f4:	689b      	ldr	r3, [r3, #8]
   e27f6:	4299      	cmp	r1, r3
   e27f8:	f0c0 80c6 	bcc.w	e2988 <mbedtls_ssl_read_record+0x250>
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * TLS encrypted messages can have up to 256 bytes of padding
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
   e27fc:	68e2      	ldr	r2, [r4, #12]
   e27fe:	2a00      	cmp	r2, #0
   e2800:	dd04      	ble.n	e280c <mbedtls_ssl_read_record+0xd4>
   e2802:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
   e2806:	4299      	cmp	r1, r3
   e2808:	f200 80be 	bhi.w	e2988 <mbedtls_ssl_read_record+0x250>
    }

    /*
     * Read and optionally decrypt the message contents
     */
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
   e280c:	3105      	adds	r1, #5
   e280e:	4620      	mov	r0, r4
   e2810:	f7ff fd7e 	bl	e2310 <mbedtls_ssl_fetch_input>
   e2814:	2800      	cmp	r0, #0
   e2816:	f040 80d0 	bne.w	e29ba <mbedtls_ssl_read_record+0x282>

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
   e281a:	f8d4 e034 	ldr.w	lr, [r4, #52]	; 0x34
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "more than one record within datagram" ) );
        }
    }
    else
#endif
        ssl->in_left = 0;
   e281e:	6760      	str	r0, [r4, #116]	; 0x74

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
   e2820:	f1be 0f00 	cmp.w	lr, #0
   e2824:	f000 80b4 	beq.w	e2990 <mbedtls_ssl_read_record+0x258>
    size_t padlen = 0, correct = 1;
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
   e2828:	6a23      	ldr	r3, [r4, #32]
   e282a:	2b00      	cmp	r3, #0
   e282c:	f000 80ae 	beq.w	e298c <mbedtls_ssl_read_record+0x254>
   e2830:	f8de 3088 	ldr.w	r3, [lr, #136]	; 0x88
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, MBEDTLS_MODE_NONE );
    if( ctx->cipher_info == NULL )
   e2834:	b103      	cbz	r3, e2838 <mbedtls_ssl_read_record+0x100>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
   e2836:	785b      	ldrb	r3, [r3, #1]
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );

    if( ssl->in_msglen < ssl->transform_in->minlen )
   e2838:	6f22      	ldr	r2, [r4, #112]	; 0x70
   e283a:	f8de 1008 	ldr.w	r1, [lr, #8]
   e283e:	428a      	cmp	r2, r1
   e2840:	f0c0 808a 	bcc.w	e2958 <mbedtls_ssl_read_record+0x220>
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || \
    defined(MBEDTLS_CCM_C) || \
    defined(MBEDTLS_CHACHAPOLY_C)
    if( mode == MBEDTLS_MODE_GCM ||
   e2844:	2b06      	cmp	r3, #6
   e2846:	d004      	beq.n	e2852 <mbedtls_ssl_read_record+0x11a>
   e2848:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   e284c:	2b08      	cmp	r3, #8
   e284e:	f040 809d 	bne.w	e298c <mbedtls_ssl_read_record+0x254>
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_in;
        unsigned char taglen = transform->ciphersuite_info->flags &
   e2852:	f8de 3000 	ldr.w	r3, [lr]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        size_t explicit_iv_len = transform->ivlen - transform->fixed_ivlen;
   e2856:	f8de 1010 	ldr.w	r1, [lr, #16]
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_in;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   e285a:	7f1b      	ldrb	r3, [r3, #28]
   e285c:	f013 0f02 	tst.w	r3, #2
        size_t explicit_iv_len = transform->ivlen - transform->fixed_ivlen;
   e2860:	f8de 300c 	ldr.w	r3, [lr, #12]
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_in;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   e2864:	bf0c      	ite	eq
   e2866:	f04f 0c10 	moveq.w	ip, #16
   e286a:	f04f 0c08 	movne.w	ip, #8
        size_t explicit_iv_len = transform->ivlen - transform->fixed_ivlen;
   e286e:	ebc1 0803 	rsb	r8, r1, r3

        /*
         * Compute and update sizes
         */
        if( ssl->in_msglen < explicit_iv_len + taglen )
   e2872:	eb08 030c 	add.w	r3, r8, ip
   e2876:	429a      	cmp	r2, r3
   e2878:	d36e      	bcc.n	e2958 <mbedtls_ssl_read_record+0x220>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
                                "+ taglen (%d)", ssl->in_msglen,
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
   e287a:	ebc8 0802 	rsb	r8, r8, r2
   e287e:	ebcc 0808 	rsb	r8, ip, r8
        ssl->in_msglen = dec_msglen;

        /*
         * Prepare additional authenticated data
         */
        memcpy( add_data, ssl->in_ctr, 8 );
   e2882:	6d63      	ldr	r3, [r4, #84]	; 0x54
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;
   e2884:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70

        /*
         * Prepare additional authenticated data
         */
        memcpy( add_data, ssl->in_ctr, 8 );
   e2888:	6859      	ldr	r1, [r3, #4]
   e288a:	6818      	ldr	r0, [r3, #0]
        add_data[8]  = ssl->in_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
        add_data[12] = ssl->in_msglen & 0xFF;
   e288c:	f88d 803c 	strb.w	r8, [sp, #60]	; 0x3c
        ssl->in_msglen = dec_msglen;

        /*
         * Prepare additional authenticated data
         */
        memcpy( add_data, ssl->in_ctr, 8 );
   e2890:	aa0c      	add	r2, sp, #48	; 0x30
   e2892:	c203      	stmia	r2!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
   e2894:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   e2896:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
   e289a:	68e2      	ldr	r2, [r4, #12]
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
        ver[1] = (unsigned char) minor;
   e289c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
         */
        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
   e28a0:	ea4f 2218 	mov.w	r2, r8, lsr #8
   e28a4:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );

        /*
         * Prepare IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   e28a8:	f8de 200c 	ldr.w	r2, [lr, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   e28ac:	68a1      	ldr	r1, [r4, #8]
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
   e28ae:	f8d4 a064 	ldr.w	sl, [r4, #100]	; 0x64
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   e28b2:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );

        /*
         * Prepare IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   e28b6:	2a0c      	cmp	r2, #12
   e28b8:	d168      	bne.n	e298c <mbedtls_ssl_read_record+0x254>
   e28ba:	f8de 2010 	ldr.w	r2, [lr, #16]
   e28be:	2a04      	cmp	r2, #4
   e28c0:	d108      	bne.n	e28d4 <mbedtls_ssl_read_record+0x19c>
        {
            /* GCM and CCM: fixed || explicit (transmitted) */
            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
   e28c2:	f8de 0028 	ldr.w	r0, [lr, #40]	; 0x28
            memcpy( iv + transform->fixed_ivlen, ssl->in_iv, 8 );
   e28c6:	6e22      	ldr	r2, [r4, #96]	; 0x60
         * Prepare IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
        {
            /* GCM and CCM: fixed || explicit (transmitted) */
            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
   e28c8:	9009      	str	r0, [sp, #36]	; 0x24
            memcpy( iv + transform->fixed_ivlen, ssl->in_iv, 8 );
   e28ca:	6810      	ldr	r0, [r2, #0]
   e28cc:	6851      	ldr	r1, [r2, #4]
   e28ce:	ab0a      	add	r3, sp, #40	; 0x28
   e28d0:	c303      	stmia	r3!, {r0, r1}
   e28d2:	e018      	b.n	e2906 <mbedtls_ssl_read_record+0x1ce>

        }
        else if( transform->ivlen == 12 && transform->fixed_ivlen == 12 )
   e28d4:	2a0c      	cmp	r2, #12
   e28d6:	d159      	bne.n	e298c <mbedtls_ssl_read_record+0x254>
        {
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
   e28d8:	46f1      	mov	r9, lr
   e28da:	aa09      	add	r2, sp, #36	; 0x24
   e28dc:	f859 0f28 	ldr.w	r0, [r9, #40]!
   e28e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
   e28e4:	c203      	stmia	r2!, {r0, r1}
   e28e6:	f8d9 0008 	ldr.w	r0, [r9, #8]
   e28ea:	6010      	str	r0, [r2, #0]
   e28ec:	a90a      	add	r1, sp, #40	; 0x28
   e28ee:	1e5a      	subs	r2, r3, #1
   e28f0:	3307      	adds	r3, #7

            for( i = 0; i < 8; i++ )
                iv[i+4] ^= ssl->in_ctr[i];
   e28f2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   e28f6:	f891 9000 	ldrb.w	r9, [r1]
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );

            for( i = 0; i < 8; i++ )
   e28fa:	4293      	cmp	r3, r2
                iv[i+4] ^= ssl->in_ctr[i];
   e28fc:	ea89 0000 	eor.w	r0, r9, r0
   e2900:	f801 0b01 	strb.w	r0, [r1], #1
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );

            for( i = 0; i < 8; i++ )
   e2904:	d1f5      	bne.n	e28f2 <mbedtls_ssl_read_record+0x1ba>
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );

        /*
         * Decrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
   e2906:	eb0a 0308 	add.w	r3, sl, r8
   e290a:	9305      	str	r3, [sp, #20]
   e290c:	ab08      	add	r3, sp, #32
   e290e:	9304      	str	r3, [sp, #16]
   e2910:	230d      	movs	r3, #13
   e2912:	9300      	str	r3, [sp, #0]
   e2914:	f8cd c018 	str.w	ip, [sp, #24]
   e2918:	f8cd a00c 	str.w	sl, [sp, #12]
   e291c:	f8cd 8008 	str.w	r8, [sp, #8]
   e2920:	f8cd a004 	str.w	sl, [sp, #4]
   e2924:	ab0c      	add	r3, sp, #48	; 0x30
   e2926:	220c      	movs	r2, #12
   e2928:	a909      	add	r1, sp, #36	; 0x24
   e292a:	f10e 0088 	add.w	r0, lr, #136	; 0x88
   e292e:	f7f5 f9c9 	bl	d7cc4 <mbedtls_cipher_auth_decrypt>
   e2932:	b120      	cbz	r0, e293e <mbedtls_ssl_read_record+0x206>
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
   e2934:	f510 4fc6 	cmn.w	r0, #25344	; 0x6300
   e2938:	d00e      	beq.n	e2958 <mbedtls_ssl_read_record+0x220>
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
    {
        if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )
   e293a:	b300      	cbz	r0, e297e <mbedtls_ssl_read_record+0x246>
   e293c:	e03d      	b.n	e29ba <mbedtls_ssl_read_record+0x282>

            return( ret );
        }
        auth_done++;

        if( olen != dec_msglen )
   e293e:	9b08      	ldr	r3, [sp, #32]
   e2940:	4598      	cmp	r8, r3
   e2942:	d123      	bne.n	e298c <mbedtls_ssl_read_record+0x254>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ssl->in_msglen == 0 )
   e2944:	6f23      	ldr	r3, [r4, #112]	; 0x70
   e2946:	b96b      	cbnz	r3, e2964 <mbedtls_ssl_read_record+0x22c>
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
   e2948:	68e3      	ldr	r3, [r4, #12]
   e294a:	2b03      	cmp	r3, #3
   e294c:	d006      	beq.n	e295c <mbedtls_ssl_read_record+0x224>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
   e294e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   e2950:	3301      	adds	r3, #1

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
   e2952:	2b03      	cmp	r3, #3
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
   e2954:	67e3      	str	r3, [r4, #124]	; 0x7c

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
   e2956:	dd06      	ble.n	e2966 <mbedtls_ssl_read_record+0x22e>
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
                return( MBEDTLS_ERR_SSL_INVALID_MAC );
   e2958:	481f      	ldr	r0, [pc, #124]	; (e29d8 <mbedtls_ssl_read_record+0x2a0>)
   e295a:	e032      	b.n	e29c2 <mbedtls_ssl_read_record+0x28a>

    if( ssl->in_msglen == 0 )
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
            && ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
   e295c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e295e:	2b17      	cmp	r3, #23
   e2960:	d0f5      	beq.n	e294e <mbedtls_ssl_read_record+0x216>
   e2962:	e030      	b.n	e29c6 <mbedtls_ssl_read_record+0x28e>
                                "messages, possible DoS attack" ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
    }
    else
        ssl->nb_zero = 0;
   e2964:	67e0      	str	r0, [r4, #124]	; 0x7c
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
   e2966:	2207      	movs	r2, #7
    else
#endif
    {
        unsigned char i;
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
            if( ++ssl->in_ctr[i - 1] != 0 )
   e2968:	6d61      	ldr	r1, [r4, #84]	; 0x54
   e296a:	5c8b      	ldrb	r3, [r1, r2]
   e296c:	3301      	adds	r3, #1
   e296e:	b2db      	uxtb	r3, r3
   e2970:	548b      	strb	r3, [r1, r2]
   e2972:	b923      	cbnz	r3, e297e <mbedtls_ssl_read_record+0x246>
    }
    else
#endif
    {
        unsigned char i;
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
   e2974:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
   e2978:	d2f6      	bcs.n	e2968 <mbedtls_ssl_read_record+0x230>

        /* The loop goes to its end iff the counter is wrapping */
        if( i == ssl_ep_len( ssl ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
   e297a:	4818      	ldr	r0, [pc, #96]	; (e29dc <mbedtls_ssl_read_record+0x2a4>)
   e297c:	e021      	b.n	e29c2 <mbedtls_ssl_read_record+0x28a>
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_IN_CONTENT_LEN )
   e297e:	6f23      	ldr	r3, [r4, #112]	; 0x70
   e2980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   e2984:	d904      	bls.n	e2990 <mbedtls_ssl_read_record+0x258>
   e2986:	e01e      	b.n	e29c6 <mbedtls_ssl_read_record+0x28e>
        ssl->keep_current_message = 0;
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );

    return( 0 );
   e2988:	4d15      	ldr	r5, [pc, #84]	; (e29e0 <mbedtls_ssl_read_record+0x2a8>)
   e298a:	e01e      	b.n	e29ca <mbedtls_ssl_read_record+0x292>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e298c:	4811      	ldr	r0, [pc, #68]	; (e29d4 <mbedtls_ssl_read_record+0x29c>)
   e298e:	e018      	b.n	e29c2 <mbedtls_ssl_read_record+0x28a>
                        return( ret );
                    }
                }
            }

            ret = mbedtls_ssl_handle_message_type( ssl );
   e2990:	4620      	mov	r0, r4
   e2992:	f7ff fe7b 	bl	e268c <mbedtls_ssl_handle_message_type>

                ret = MBEDTLS_ERR_SSL_CONTINUE_PROCESSING;
            }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

        } while( MBEDTLS_ERR_SSL_NON_FATAL           == ret  ||
   e2996:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
   e299a:	f43f aed6 	beq.w	e274a <mbedtls_ssl_read_record+0x12>
   e299e:	f510 4fcb 	cmn.w	r0, #25984	; 0x6580
   e29a2:	f43f aed2 	beq.w	e274a <mbedtls_ssl_read_record+0x12>
                 MBEDTLS_ERR_SSL_CONTINUE_PROCESSING == ret );

        if( 0 != ret )
   e29a6:	b960      	cbnz	r0, e29c2 <mbedtls_ssl_read_record+0x28a>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_handle_message_type" ), ret );
            return( ret );
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
   e29a8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e29aa:	2b16      	cmp	r3, #22
   e29ac:	d10d      	bne.n	e29ca <mbedtls_ssl_read_record+0x292>
   e29ae:	2e01      	cmp	r6, #1
   e29b0:	d10b      	bne.n	e29ca <mbedtls_ssl_read_record+0x292>
            update_hs_digest == 1 )
        {
            mbedtls_ssl_update_handshake_status( ssl );
   e29b2:	4620      	mov	r0, r4
   e29b4:	f7ff fe58 	bl	e2668 <mbedtls_ssl_update_handshake_status>
   e29b8:	e007      	b.n	e29ca <mbedtls_ssl_read_record+0x292>

                if( have_buffered == 0 )
#endif /* MBEDTLS_SSL_PROTO_DTLS */
                {
                    ret = ssl_get_next_record( ssl );
                    if( ret == MBEDTLS_ERR_SSL_CONTINUE_PROCESSING )
   e29ba:	f510 4fcb 	cmn.w	r0, #25984	; 0x6580
   e29be:	f43f aec4 	beq.w	e274a <mbedtls_ssl_read_record+0x12>
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e29c2:	4605      	mov	r5, r0
   e29c4:	e001      	b.n	e29ca <mbedtls_ssl_read_record+0x292>
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_IN_CONTENT_LEN )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   e29c6:	4806      	ldr	r0, [pc, #24]	; (e29e0 <mbedtls_ssl_read_record+0x2a8>)
   e29c8:	e7fb      	b.n	e29c2 <mbedtls_ssl_read_record+0x28a>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );

    return( 0 );
}
   e29ca:	4628      	mov	r0, r5
   e29cc:	b010      	add	sp, #64	; 0x40
   e29ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e29d2:	bf00      	nop
   e29d4:	ffff9400 	.word	0xffff9400
   e29d8:	ffff8e80 	.word	0xffff8e80
   e29dc:	ffff9480 	.word	0xffff9480
   e29e0:	ffff8e00 	.word	0xffff8e00

000e29e4 <mbedtls_ssl_write_certificate>:

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
   e29e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
   e29e6:	6c03      	ldr	r3, [r0, #64]	; 0x40

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e29e8:	681b      	ldr	r3, [r3, #0]
   e29ea:	7a9a      	ldrb	r2, [r3, #10]
   e29ec:	2a0b      	cmp	r2, #11

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
   e29ee:	4604      	mov	r4, r0
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e29f0:	d809      	bhi.n	e2a06 <mbedtls_ssl_write_certificate+0x22>
   e29f2:	f44f 6316 	mov.w	r3, #2400	; 0x960
   e29f6:	40d3      	lsrs	r3, r2
   e29f8:	07da      	lsls	r2, r3, #31
   e29fa:	d504      	bpl.n	e2a06 <mbedtls_ssl_write_certificate+0x22>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
   e29fc:	6863      	ldr	r3, [r4, #4]
   e29fe:	3301      	adds	r3, #1
   e2a00:	6063      	str	r3, [r4, #4]
        return( 0 );
   e2a02:	2000      	movs	r0, #0
   e2a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   e2a06:	6822      	ldr	r2, [r4, #0]
   e2a08:	f892 307c 	ldrb.w	r3, [r2, #124]	; 0x7c
   e2a0c:	07db      	lsls	r3, r3, #31
   e2a0e:	d403      	bmi.n	e2a18 <mbedtls_ssl_write_certificate+0x34>
    {
        if( ssl->client_auth == 0 )
   e2a10:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   e2a14:	2b00      	cmp	r3, #0
   e2a16:	d0f1      	beq.n	e29fc <mbedtls_ssl_write_certificate+0x18>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
   e2a18:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e2a1a:	b113      	cbz	r3, e2a22 <mbedtls_ssl_write_certificate+0x3e>
   e2a1c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   e2a20:	b90b      	cbnz	r3, e2a26 <mbedtls_ssl_write_certificate+0x42>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
   e2a22:	6d13      	ldr	r3, [r2, #80]	; 0x50

    return( key_cert == NULL ? NULL : key_cert->cert );
   e2a24:	b30b      	cbz	r3, e2a6a <mbedtls_ssl_write_certificate+0x86>
   e2a26:	681e      	ldr	r6, [r3, #0]
   e2a28:	2307      	movs	r3, #7
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
   e2a2a:	b1fe      	cbz	r6, e2a6c <mbedtls_ssl_write_certificate+0x88>
    {
        n = crt->raw.len;
   e2a2c:	6875      	ldr	r5, [r6, #4]
        if( n > MBEDTLS_SSL_OUT_CONTENT_LEN - 3 - i )
   e2a2e:	f5c3 52ff 	rsb	r2, r3, #8160	; 0x1fe0
   e2a32:	321d      	adds	r2, #29
   e2a34:	4295      	cmp	r5, r2
   e2a36:	d836      	bhi.n	e2aa6 <mbedtls_ssl_write_certificate+0xc2>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_OUT_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
   e2a38:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e2a3c:	0c29      	lsrs	r1, r5, #16
   e2a3e:	54d1      	strb	r1, [r2, r3]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
   e2a40:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e2a44:	441a      	add	r2, r3
   e2a46:	0a29      	lsrs	r1, r5, #8
   e2a48:	7051      	strb	r1, [r2, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
   e2a4a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e2a4e:	441a      	add	r2, r3

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
   e2a50:	1cdf      	adds	r7, r3, #3
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
        ssl->out_msg[i + 2] = (unsigned char)( n       );
   e2a52:	7095      	strb	r5, [r2, #2]

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
   e2a54:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   e2a58:	68b1      	ldr	r1, [r6, #8]
   e2a5a:	462a      	mov	r2, r5
   e2a5c:	4438      	add	r0, r7
   e2a5e:	f005 fa02 	bl	e7e66 <memcpy>
        i += n; crt = crt->next;
   e2a62:	19eb      	adds	r3, r5, r7
   e2a64:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
   e2a68:	e7df      	b.n	e2a2a <mbedtls_ssl_write_certificate+0x46>
   e2a6a:	2307      	movs	r3, #7

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
   e2a6c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   e2a70:	1fda      	subs	r2, r3, #7
   e2a72:	0c10      	lsrs	r0, r2, #16
   e2a74:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
   e2a76:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   e2a7a:	0a10      	lsrs	r0, r2, #8
   e2a7c:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
   e2a7e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   e2a82:	718a      	strb	r2, [r1, #6]

    ssl->out_msglen  = i;
   e2a84:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e2a88:	2316      	movs	r3, #22
   e2a8a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
   e2a8e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e2a92:	220b      	movs	r2, #11
   e2a94:	701a      	strb	r2, [r3, #0]

#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)
write_msg:
#endif

    ssl->state++;
   e2a96:	6863      	ldr	r3, [r4, #4]
   e2a98:	3301      	adds	r3, #1
   e2a9a:	6063      	str	r3, [r4, #4]

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   e2a9c:	4620      	mov	r0, r4
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
   e2a9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   e2aa2:	f7ff bd8f 	b.w	e25c4 <mbedtls_ssl_write_handshake_msg>
        n = crt->raw.len;
        if( n > MBEDTLS_SSL_OUT_CONTENT_LEN - 3 - i )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_OUT_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
   e2aa6:	4801      	ldr	r0, [pc, #4]	; (e2aac <mbedtls_ssl_write_certificate+0xc8>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
   e2aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e2aaa:	bf00      	nop
   e2aac:	ffff8b00 	.word	0xffff8b00

000e2ab0 <mbedtls_ssl_write_change_cipher_spec>:
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
   e2ab0:	2214      	movs	r2, #20
    ssl->out_msglen  = 1;
    ssl->out_msg[0]  = 1;
   e2ab2:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
   e2ab6:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    ssl->out_msglen  = 1;
   e2aba:	2201      	movs	r2, #1
   e2abc:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
    ssl->out_msg[0]  = 1;
   e2ac0:	700a      	strb	r2, [r1, #0]

    ssl->state++;
   e2ac2:	6842      	ldr	r2, [r0, #4]
   e2ac4:	3201      	adds	r2, #1
   e2ac6:	6042      	str	r2, [r0, #4]

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   e2ac8:	f7ff bd7c 	b.w	e25c4 <mbedtls_ssl_write_handshake_msg>

000e2acc <mbedtls_ssl_parse_change_cipher_spec>:

    return( 0 );
}

int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
{
   e2acc:	b510      	push	{r4, lr}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e2ace:	2101      	movs	r1, #1

    return( 0 );
}

int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
{
   e2ad0:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e2ad2:	f7ff fe31 	bl	e2738 <mbedtls_ssl_read_record>
   e2ad6:	bb28      	cbnz	r0, e2b24 <mbedtls_ssl_parse_change_cipher_spec+0x58>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
   e2ad8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e2ada:	2b14      	cmp	r3, #20
   e2adc:	d006      	beq.n	e2aec <mbedtls_ssl_parse_change_cipher_spec+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   e2ade:	220a      	movs	r2, #10
   e2ae0:	2102      	movs	r1, #2
   e2ae2:	4620      	mov	r0, r4
   e2ae4:	f7ff fe0c 	bl	e2700 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e2ae8:	480f      	ldr	r0, [pc, #60]	; (e2b28 <mbedtls_ssl_parse_change_cipher_spec+0x5c>)
   e2aea:	bd10      	pop	{r4, pc}
    /*
     * Switch to our negotiated transform and session parameters for inbound
     * data.
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
    ssl->transform_in = ssl->transform_negotiate;
   e2aec:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e2aee:	6363      	str	r3, [r4, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
   e2af0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e2af2:	6223      	str	r3, [r4, #32]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->in_ctr, 0, 8 );
   e2af4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   e2af6:	6018      	str	r0, [r3, #0]
   e2af8:	6058      	str	r0, [r3, #4]
        ssl->in_iv  = ssl->in_hdr + 13;
    }
    else
#endif
    {
        ssl->in_ctr = ssl->in_hdr - 8;
   e2afa:	6da3      	ldr	r3, [r4, #88]	; 0x58
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->in_ctr, 0, 8 );

    ssl_update_in_pointers( ssl, ssl->transform_negotiate );
   e2afc:	6c21      	ldr	r1, [r4, #64]	; 0x40
        ssl->in_iv  = ssl->in_hdr + 13;
    }
    else
#endif
    {
        ssl->in_ctr = ssl->in_hdr - 8;
   e2afe:	f1a3 0208 	sub.w	r2, r3, #8
   e2b02:	6562      	str	r2, [r4, #84]	; 0x54
        ssl->in_len = ssl->in_hdr + 3;
   e2b04:	1cda      	adds	r2, r3, #3
        ssl->in_iv  = ssl->in_hdr + 5;
   e2b06:	3305      	adds	r3, #5
    }
    else
#endif
    {
        ssl->in_ctr = ssl->in_hdr - 8;
        ssl->in_len = ssl->in_hdr + 3;
   e2b08:	65e2      	str	r2, [r4, #92]	; 0x5c
        ssl->in_iv  = ssl->in_hdr + 5;
   e2b0a:	6623      	str	r3, [r4, #96]	; 0x60
    }

    /* Offset in_msg from in_iv to allow space for explicit IV, if used. */
    if( transform != NULL &&
   e2b0c:	b131      	cbz	r1, e2b1c <mbedtls_ssl_parse_change_cipher_spec+0x50>
   e2b0e:	68e2      	ldr	r2, [r4, #12]
   e2b10:	2a01      	cmp	r2, #1
        ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + transform->ivlen - transform->fixed_ivlen;
   e2b12:	bfc1      	itttt	gt
   e2b14:	68ca      	ldrgt	r2, [r1, #12]
   e2b16:	6909      	ldrgt	r1, [r1, #16]
   e2b18:	1a52      	subgt	r2, r2, r1
   e2b1a:	189b      	addgt	r3, r3, r2
    }
    else
        ssl->in_msg = ssl->in_iv;
   e2b1c:	6663      	str	r3, [r4, #100]	; 0x64
            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        }
    }
#endif

    ssl->state++;
   e2b1e:	6863      	ldr	r3, [r4, #4]
   e2b20:	3301      	adds	r3, #1
   e2b22:	6063      	str	r3, [r4, #4]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
}
   e2b24:	bd10      	pop	{r4, pc}
   e2b26:	bf00      	nop
   e2b28:	ffff8900 	.word	0xffff8900

000e2b2c <mbedtls_ssl_optimize_checksum>:
        ssl->handshake->update_checksum = ssl_update_checksum_md5sha1;
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
   e2b2c:	7a4b      	ldrb	r3, [r1, #9]
   e2b2e:	2b07      	cmp	r3, #7
   e2b30:	6b03      	ldr	r3, [r0, #48]	; 0x30
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
   e2b32:	bf0c      	ite	eq
   e2b34:	4a02      	ldreq	r2, [pc, #8]	; (e2b40 <mbedtls_ssl_optimize_checksum+0x14>)
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
   e2b36:	4a03      	ldrne	r2, [pc, #12]	; (e2b44 <mbedtls_ssl_optimize_checksum+0x18>)
   e2b38:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
   e2b3c:	4770      	bx	lr
   e2b3e:	bf00      	nop
   e2b40:	000e1f27 	.word	0x000e1f27
   e2b44:	000e1f1d 	.word	0x000e1f1d

000e2b48 <mbedtls_ssl_write_finished>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
}

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
   e2b48:	b510      	push	{r4, lr}
    int ret, hash_len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );

    ssl_update_out_pointers( ssl, ssl->transform_negotiate );
   e2b4a:	6c01      	ldr	r1, [r0, #64]	; 0x40

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
}

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
   e2b4c:	4604      	mov	r4, r0
    int ret, hash_len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );

    ssl_update_out_pointers( ssl, ssl->transform_negotiate );
   e2b4e:	f7ff f866 	bl	e1c1e <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>

    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
   e2b52:	6803      	ldr	r3, [r0, #0]
   e2b54:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
   e2b58:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   e2b5c:	6b03      	ldr	r3, [r0, #48]	; 0x30
   e2b5e:	f002 0201 	and.w	r2, r2, #1
   e2b62:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
   e2b66:	3104      	adds	r1, #4
   e2b68:	4798      	blx	r3
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
   e2b6a:	68e3      	ldr	r3, [r4, #12]
   e2b6c:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
   e2b6e:	bf14      	ite	ne
   e2b70:	2310      	movne	r3, #16
   e2b72:	2328      	moveq	r3, #40	; 0x28
   e2b74:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e2b78:	2316      	movs	r3, #22
   e2b7a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
   e2b7e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e2b82:	2214      	movs	r2, #20
   e2b84:	701a      	strb	r2, [r3, #0]

    /*
     * In case of session resuming, invert the client and server
     * ChangeCipherSpec messages order.
     */
    if( ssl->handshake->resume != 0 )
   e2b86:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e2b88:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
   e2b8c:	b133      	cbz	r3, e2b9c <mbedtls_ssl_write_finished+0x54>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   e2b8e:	6823      	ldr	r3, [r4, #0]
   e2b90:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   e2b94:	07db      	lsls	r3, r3, #31
   e2b96:	d404      	bmi.n	e2ba2 <mbedtls_ssl_write_finished+0x5a>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
   e2b98:	230f      	movs	r3, #15
   e2b9a:	e001      	b.n	e2ba0 <mbedtls_ssl_write_finished+0x58>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
#endif
    }
    else
        ssl->state++;
   e2b9c:	6863      	ldr	r3, [r4, #4]
   e2b9e:	3301      	adds	r3, #1
   e2ba0:	6063      	str	r3, [r4, #4]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->cur_out_ctr, 0, 8 );
   e2ba2:	2300      	movs	r3, #0
   e2ba4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   e2ba8:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac

    ssl->transform_out = ssl->transform_negotiate;
   e2bac:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e2bae:	63a3      	str	r3, [r4, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
   e2bb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e2bb2:	6263      	str	r3, [r4, #36]	; 0x24
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   e2bb4:	4620      	mov	r0, r4
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );

    return( 0 );
}
   e2bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   e2bba:	f7ff bd03 	b.w	e25c4 <mbedtls_ssl_write_handshake_msg>
	...

000e2bc0 <mbedtls_ssl_parse_finished>:
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
   e2bc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
   e2bc2:	6803      	ldr	r3, [r0, #0]
   e2bc4:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   e2bc8:	6b03      	ldr	r3, [r0, #48]	; 0x30
   e2bca:	43d2      	mvns	r2, r2
   e2bcc:	ad01      	add	r5, sp, #4
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
   e2bce:	4604      	mov	r4, r0
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
   e2bd0:	4629      	mov	r1, r5
   e2bd2:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
   e2bd6:	f002 0201 	and.w	r2, r2, #1
   e2bda:	4798      	blx	r3

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e2bdc:	2101      	movs	r1, #1
   e2bde:	4620      	mov	r0, r4
   e2be0:	f7ff fdaa 	bl	e2738 <mbedtls_ssl_read_record>
   e2be4:	2800      	cmp	r0, #0
   e2be6:	d13b      	bne.n	e2c60 <mbedtls_ssl_parse_finished+0xa0>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e2be8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e2bea:	2b16      	cmp	r3, #22
   e2bec:	d006      	beq.n	e2bfc <mbedtls_ssl_parse_finished+0x3c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   e2bee:	220a      	movs	r2, #10
   e2bf0:	2102      	movs	r1, #2
   e2bf2:	4620      	mov	r0, r4
   e2bf4:	f7ff fd84 	bl	e2700 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e2bf8:	481a      	ldr	r0, [pc, #104]	; (e2c64 <mbedtls_ssl_parse_finished+0xa4>)
   e2bfa:	e031      	b.n	e2c60 <mbedtls_ssl_parse_finished+0xa0>
        hash_len = 36;
    else
#endif
        hash_len = 12;

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
   e2bfc:	6e61      	ldr	r1, [r4, #100]	; 0x64
   e2bfe:	780b      	ldrb	r3, [r1, #0]
   e2c00:	2b14      	cmp	r3, #20
   e2c02:	d115      	bne.n	e2c30 <mbedtls_ssl_parse_finished+0x70>
   e2c04:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   e2c06:	2b10      	cmp	r3, #16
   e2c08:	d112      	bne.n	e2c30 <mbedtls_ssl_parse_finished+0x70>
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
   e2c0a:	f88d 0003 	strb.w	r0, [sp, #3]
   e2c0e:	1d03      	adds	r3, r0, #4
    for( i = 0; i < n; i++ )
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
   e2c10:	5ccb      	ldrb	r3, [r1, r3]
   e2c12:	5c2a      	ldrb	r2, [r5, r0]
        diff |= x ^ y;
   e2c14:	f89d 6003 	ldrb.w	r6, [sp, #3]
   e2c18:	4053      	eors	r3, r2
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   e2c1a:	3001      	adds	r0, #1
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
   e2c1c:	4333      	orrs	r3, r6
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   e2c1e:	280c      	cmp	r0, #12
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
   e2c20:	f88d 3003 	strb.w	r3, [sp, #3]
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   e2c24:	d1f3      	bne.n	e2c0e <mbedtls_ssl_parse_finished+0x4e>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
   e2c26:	f89d 3003 	ldrb.w	r3, [sp, #3]
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
    }

    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
   e2c2a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   e2c2e:	b133      	cbz	r3, e2c3e <mbedtls_ssl_parse_finished+0x7e>
                      buf, hash_len ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e2c30:	2232      	movs	r2, #50	; 0x32
   e2c32:	2102      	movs	r1, #2
   e2c34:	4620      	mov	r0, r4
   e2c36:	f7ff fd63 	bl	e2700 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
   e2c3a:	480b      	ldr	r0, [pc, #44]	; (e2c68 <mbedtls_ssl_parse_finished+0xa8>)
   e2c3c:	e010      	b.n	e2c60 <mbedtls_ssl_parse_finished+0xa0>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->peer_verify_data, buf, hash_len );
#endif

    if( ssl->handshake->resume != 0 )
   e2c3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e2c40:	f8d3 0348 	ldr.w	r0, [r3, #840]	; 0x348
   e2c44:	b138      	cbz	r0, e2c56 <mbedtls_ssl_parse_finished+0x96>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   e2c46:	6823      	ldr	r3, [r4, #0]
   e2c48:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
   e2c4c:	f010 0001 	ands.w	r0, r0, #1
   e2c50:	d105      	bne.n	e2c5e <mbedtls_ssl_parse_finished+0x9e>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
   e2c52:	230a      	movs	r3, #10
   e2c54:	e001      	b.n	e2c5a <mbedtls_ssl_parse_finished+0x9a>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
#endif
    }
    else
        ssl->state++;
   e2c56:	6863      	ldr	r3, [r4, #4]
   e2c58:	3301      	adds	r3, #1
   e2c5a:	6063      	str	r3, [r4, #4]
   e2c5c:	e000      	b.n	e2c60 <mbedtls_ssl_parse_finished+0xa0>
        mbedtls_ssl_recv_flight_completed( ssl );
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );

    return( 0 );
   e2c5e:	4610      	mov	r0, r2
}
   e2c60:	b004      	add	sp, #16
   e2c62:	bd70      	pop	{r4, r5, r6, pc}
   e2c64:	ffff8900 	.word	0xffff8900
   e2c68:	ffff8180 	.word	0xffff8180

000e2c6c <mbedtls_ssl_session_init>:
    mbedtls_md_init( &transform->md_ctx_dec );
}

void mbedtls_ssl_session_init( mbedtls_ssl_session *session )
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
   e2c6c:	2274      	movs	r2, #116	; 0x74
   e2c6e:	2100      	movs	r1, #0
   e2c70:	f005 b91f 	b.w	e7eb2 <memset>

000e2c74 <mbedtls_ssl_init>:
/*
 * Initialize an SSL context
 */
void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
{
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
   e2c74:	22bc      	movs	r2, #188	; 0xbc
   e2c76:	2100      	movs	r1, #0
   e2c78:	f005 b91b 	b.w	e7eb2 <memset>

000e2c7c <mbedtls_ssl_conf_authmode>:
}
#endif

void mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode )
{
    conf->authmode   = authmode;
   e2c7c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
   e2c80:	f361 0383 	bfi	r3, r1, #2, #2
   e2c84:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
   e2c88:	4770      	bx	lr

000e2c8a <mbedtls_ssl_conf_verify>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
void mbedtls_ssl_conf_verify( mbedtls_ssl_config *conf,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
    conf->f_vrfy      = f_vrfy;
   e2c8a:	6341      	str	r1, [r0, #52]	; 0x34
    conf->p_vrfy      = p_vrfy;
   e2c8c:	6382      	str	r2, [r0, #56]	; 0x38
   e2c8e:	4770      	bx	lr

000e2c90 <mbedtls_ssl_conf_rng>:

void mbedtls_ssl_conf_rng( mbedtls_ssl_config *conf,
                  int (*f_rng)(void *, unsigned char *, size_t),
                  void *p_rng )
{
    conf->f_rng      = f_rng;
   e2c90:	6181      	str	r1, [r0, #24]
    conf->p_rng      = p_rng;
   e2c92:	61c2      	str	r2, [r0, #28]
   e2c94:	4770      	bx	lr

000e2c96 <mbedtls_ssl_conf_dbg>:

void mbedtls_ssl_conf_dbg( mbedtls_ssl_config *conf,
                  void (*f_dbg)(void *, int, const char *, int, const char *),
                  void  *p_dbg )
{
    conf->f_dbg      = f_dbg;
   e2c96:	6101      	str	r1, [r0, #16]
    conf->p_dbg      = p_dbg;
   e2c98:	6142      	str	r2, [r0, #20]
   e2c9a:	4770      	bx	lr

000e2c9c <mbedtls_ssl_set_bio>:
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
    ssl->f_send         = f_send;
    ssl->f_recv         = f_recv;
   e2c9c:	6143      	str	r3, [r0, #20]
    ssl->f_recv_timeout = f_recv_timeout;
   e2c9e:	9b00      	ldr	r3, [sp, #0]
        void *p_bio,
        mbedtls_ssl_send_t *f_send,
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
   e2ca0:	61c1      	str	r1, [r0, #28]
    ssl->f_send         = f_send;
   e2ca2:	6102      	str	r2, [r0, #16]
    ssl->f_recv         = f_recv;
    ssl->f_recv_timeout = f_recv_timeout;
   e2ca4:	6183      	str	r3, [r0, #24]
   e2ca6:	4770      	bx	lr

000e2ca8 <mbedtls_ssl_set_timer_cb>:

void mbedtls_ssl_set_timer_cb( mbedtls_ssl_context *ssl,
                               void *p_timer,
                               mbedtls_ssl_set_timer_t *f_set_timer,
                               mbedtls_ssl_get_timer_t *f_get_timer )
{
   e2ca8:	b410      	push	{r4}
    ssl->p_timer        = p_timer;
   e2caa:	6441      	str	r1, [r0, #68]	; 0x44
    ssl->f_set_timer    = f_set_timer;
   e2cac:	6482      	str	r2, [r0, #72]	; 0x48
    ssl->f_get_timer    = f_get_timer;
   e2cae:	64c3      	str	r3, [r0, #76]	; 0x4c

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
   e2cb0:	2100      	movs	r1, #0
}
   e2cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
    ssl->p_timer        = p_timer;
    ssl->f_set_timer    = f_set_timer;
    ssl->f_get_timer    = f_get_timer;

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
   e2cb6:	f7fe bfab 	b.w	e1c10 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>

000e2cba <mbedtls_ssl_conf_own_cert>:

int mbedtls_ssl_conf_own_cert( mbedtls_ssl_config *conf,
                              mbedtls_x509_crt *own_cert,
                              mbedtls_pk_context *pk_key )
{
    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
   e2cba:	3050      	adds	r0, #80	; 0x50
   e2cbc:	f7ff b910 	b.w	e1ee0 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>

000e2cc0 <mbedtls_ssl_conf_ca_chain>:

void mbedtls_ssl_conf_ca_chain( mbedtls_ssl_config *conf,
                               mbedtls_x509_crt *ca_chain,
                               mbedtls_x509_crl *ca_crl )
{
    conf->ca_chain   = ca_chain;
   e2cc0:	6541      	str	r1, [r0, #84]	; 0x54
    conf->ca_crl     = ca_crl;
   e2cc2:	6582      	str	r2, [r0, #88]	; 0x58
   e2cc4:	4770      	bx	lr
	...

000e2cc8 <mbedtls_ssl_set_hostname>:
}
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
   e2cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e2cca:	4606      	mov	r6, r0
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
   e2ccc:	460c      	mov	r4, r1
   e2cce:	b131      	cbz	r1, e2cde <mbedtls_ssl_set_hostname+0x16>
    {
        hostname_len = strlen( hostname );
   e2cd0:	4608      	mov	r0, r1
   e2cd2:	f005 f935 	bl	e7f40 <strlen>

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
   e2cd6:	28ff      	cmp	r0, #255	; 0xff

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
    {
        hostname_len = strlen( hostname );
   e2cd8:	4605      	mov	r5, r0

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
   e2cda:	d901      	bls.n	e2ce0 <mbedtls_ssl_set_hostname+0x18>
   e2cdc:	e022      	b.n	e2d24 <mbedtls_ssl_set_hostname+0x5c>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;
   e2cde:	460d      	mov	r5, r1
    }

    /* Now it's clear that we will overwrite the old hostname,
     * so we can free it safely */

    if( ssl->hostname != NULL )
   e2ce0:	f8d6 70b4 	ldr.w	r7, [r6, #180]	; 0xb4
   e2ce4:	b157      	cbz	r7, e2cfc <mbedtls_ssl_set_hostname+0x34>
    {
        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
   e2ce6:	4638      	mov	r0, r7
   e2ce8:	f005 f92a 	bl	e7f40 <strlen>
   e2cec:	4601      	mov	r1, r0
   e2cee:	4638      	mov	r0, r7
   e2cf0:	f7f9 fc7e 	bl	dc5f0 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->hostname );
   e2cf4:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   e2cf8:	f002 ff22 	bl	e5b40 <free>
    }

    /* Passing NULL as hostname shall clear the old one */

    if( hostname == NULL )
   e2cfc:	b91c      	cbnz	r4, e2d06 <mbedtls_ssl_set_hostname+0x3e>
    {
        ssl->hostname = NULL;
   e2cfe:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
        memcpy( ssl->hostname, hostname, hostname_len );

        ssl->hostname[hostname_len] = '\0';
    }

    return( 0 );
   e2d02:	4620      	mov	r0, r4
   e2d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        ssl->hostname = NULL;
    }
    else
    {
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
   e2d06:	1c69      	adds	r1, r5, #1
   e2d08:	2001      	movs	r0, #1
   e2d0a:	f005 f887 	bl	e7e1c <calloc>
   e2d0e:	4607      	mov	r7, r0
   e2d10:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
        if( ssl->hostname == NULL )
   e2d14:	b140      	cbz	r0, e2d28 <mbedtls_ssl_set_hostname+0x60>
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

        memcpy( ssl->hostname, hostname, hostname_len );
   e2d16:	462a      	mov	r2, r5
   e2d18:	4621      	mov	r1, r4
   e2d1a:	f005 f8a4 	bl	e7e66 <memcpy>

        ssl->hostname[hostname_len] = '\0';
   e2d1e:	2000      	movs	r0, #0
   e2d20:	5578      	strb	r0, [r7, r5]
   e2d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( hostname != NULL )
    {
        hostname_len = strlen( hostname );

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e2d24:	4801      	ldr	r0, [pc, #4]	; (e2d2c <mbedtls_ssl_set_hostname+0x64>)
   e2d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
        if( ssl->hostname == NULL )
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e2d28:	4801      	ldr	r0, [pc, #4]	; (e2d30 <mbedtls_ssl_set_hostname+0x68>)

        ssl->hostname[hostname_len] = '\0';
    }

    return( 0 );
}
   e2d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e2d2c:	ffff8f00 	.word	0xffff8f00
   e2d30:	ffff8100 	.word	0xffff8100

000e2d34 <mbedtls_ssl_conf_min_version>:
    conf->max_minor_ver = minor;
}

void mbedtls_ssl_conf_min_version( mbedtls_ssl_config *conf, int major, int minor )
{
    conf->min_major_ver = major;
   e2d34:	f880 107a 	strb.w	r1, [r0, #122]	; 0x7a
    conf->min_minor_ver = minor;
   e2d38:	f880 207b 	strb.w	r2, [r0, #123]	; 0x7b
   e2d3c:	4770      	bx	lr

000e2d3e <mbedtls_ssl_get_verify_result>:
    return( 0 );
}

uint32_t mbedtls_ssl_get_verify_result( const mbedtls_ssl_context *ssl )
{
    if( ssl->session != NULL )
   e2d3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
   e2d40:	b90b      	cbnz	r3, e2d46 <mbedtls_ssl_get_verify_result+0x8>
        return( ssl->session->verify_result );

    if( ssl->session_negotiate != NULL )
   e2d42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   e2d44:	b10b      	cbz	r3, e2d4a <mbedtls_ssl_get_verify_result+0xc>
        return( ssl->session_negotiate->verify_result );
   e2d46:	6e18      	ldr	r0, [r3, #96]	; 0x60
   e2d48:	4770      	bx	lr

    return( 0xFFFFFFFF );
   e2d4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   e2d4e:	4770      	bx	lr

000e2d50 <mbedtls_ssl_get_max_frag_len>:
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = ssl_mfl_code_to_length( ssl->conf->mfl_code );
   e2d50:	6803      	ldr	r3, [r0, #0]
   e2d52:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
   e2d56:	f3c3 1382 	ubfx	r3, r3, #6, #3
   e2d5a:	3b01      	subs	r3, #1
   e2d5c:	2b03      	cmp	r3, #3
   e2d5e:	bf9c      	itt	ls
   e2d60:	4a16      	ldrls	r2, [pc, #88]	; (e2dbc <mbedtls_ssl_get_max_frag_len+0x6c>)
   e2d62:	f832 3013 	ldrhls.w	r3, [r2, r3, lsl #1]

    /* Check if a smaller max length was negotiated */
    if( ssl->session_out != NULL &&
   e2d66:	6a42      	ldr	r2, [r0, #36]	; 0x24
 *    } MaxFragmentLength;
 * and we add 0 -> extension unused
 */
static unsigned int ssl_mfl_code_to_length( int mfl )
{
    switch( mfl )
   e2d68:	bf88      	it	hi
   e2d6a:	f44f 5300 	movhi.w	r3, #8192	; 0x2000
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = ssl_mfl_code_to_length( ssl->conf->mfl_code );

    /* Check if a smaller max length was negotiated */
    if( ssl->session_out != NULL &&
   e2d6e:	b182      	cbz	r2, e2d92 <mbedtls_ssl_get_max_frag_len+0x42>
   e2d70:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
   e2d74:	3a01      	subs	r2, #1
   e2d76:	2a03      	cmp	r2, #3
   e2d78:	d806      	bhi.n	e2d88 <mbedtls_ssl_get_max_frag_len+0x38>
   e2d7a:	4910      	ldr	r1, [pc, #64]	; (e2dbc <mbedtls_ssl_get_max_frag_len+0x6c>)
   e2d7c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   e2d80:	4293      	cmp	r3, r2
   e2d82:	bf28      	it	cs
   e2d84:	4613      	movcs	r3, r2
   e2d86:	e004      	b.n	e2d92 <mbedtls_ssl_get_max_frag_len+0x42>
   e2d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   e2d8c:	bf28      	it	cs
   e2d8e:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    {
        max_len = ssl_mfl_code_to_length( ssl->session_out->mfl_code );
    }

    /* During a handshake, use the value being negotiated */
    if( ssl->session_negotiate != NULL &&
   e2d92:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   e2d94:	b182      	cbz	r2, e2db8 <mbedtls_ssl_get_max_frag_len+0x68>
   e2d96:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
   e2d9a:	3a01      	subs	r2, #1
   e2d9c:	2a03      	cmp	r2, #3
   e2d9e:	d806      	bhi.n	e2dae <mbedtls_ssl_get_max_frag_len+0x5e>
   e2da0:	4906      	ldr	r1, [pc, #24]	; (e2dbc <mbedtls_ssl_get_max_frag_len+0x6c>)
   e2da2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   e2da6:	4293      	cmp	r3, r2
   e2da8:	bf28      	it	cs
   e2daa:	4613      	movcs	r3, r2
   e2dac:	e004      	b.n	e2db8 <mbedtls_ssl_get_max_frag_len+0x68>
   e2dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   e2db2:	bf28      	it	cs
   e2db4:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    {
        max_len = ssl_mfl_code_to_length( ssl->session_negotiate->mfl_code );
    }

    return( max_len );
}
   e2db8:	4618      	mov	r0, r3
   e2dba:	4770      	bx	lr
   e2dbc:	000ea0d2 	.word	0x000ea0d2

000e2dc0 <mbedtls_ssl_get_max_out_record_payload>:
            ssl->mtu : ssl->handshake->mtu );
}
#endif /* MBEDTLS_SSL_PROTO_DTLS */

int mbedtls_ssl_get_max_out_record_payload( const mbedtls_ssl_context *ssl )
{
   e2dc0:	b508      	push	{r3, lr}
    !defined(MBEDTLS_SSL_PROTO_DTLS)
    (void) ssl;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    const size_t mfl = mbedtls_ssl_get_max_frag_len( ssl );
   e2dc2:	f7ff ffc5 	bl	e2d50 <mbedtls_ssl_get_max_frag_len>
    !defined(MBEDTLS_SSL_PROTO_DTLS)
    ((void) ssl);
#endif

    return( (int) max_len );
}
   e2dc6:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
   e2dca:	bf28      	it	cs
   e2dcc:	f44f 5000 	movcs.w	r0, #8192	; 0x2000
   e2dd0:	bd08      	pop	{r3, pc}
	...

000e2dd4 <mbedtls_ssl_handshake_step>:
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
   e2dd4:	b138      	cbz	r0, e2de6 <mbedtls_ssl_handshake_step+0x12>
   e2dd6:	6803      	ldr	r3, [r0, #0]
   e2dd8:	b12b      	cbz	r3, e2de6 <mbedtls_ssl_handshake_step+0x12>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   e2dda:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   e2dde:	07db      	lsls	r3, r3, #31
   e2de0:	d403      	bmi.n	e2dea <mbedtls_ssl_handshake_step+0x16>
        ret = mbedtls_ssl_handshake_client_step( ssl );
   e2de2:	f7fe b85f 	b.w	e0ea4 <mbedtls_ssl_handshake_client_step>
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e2de6:	4802      	ldr	r0, [pc, #8]	; (e2df0 <mbedtls_ssl_handshake_step+0x1c>)
   e2de8:	4770      	bx	lr
/*
 * Perform a single step of the SSL handshake
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
   e2dea:	4802      	ldr	r0, [pc, #8]	; (e2df4 <mbedtls_ssl_handshake_step+0x20>)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        ret = mbedtls_ssl_handshake_server_step( ssl );
#endif

    return( ret );
}
   e2dec:	4770      	bx	lr
   e2dee:	bf00      	nop
   e2df0:	ffff8f00 	.word	0xffff8f00
   e2df4:	ffff8f80 	.word	0xffff8f80

000e2df8 <mbedtls_ssl_handshake>:

/*
 * Perform the SSL handshake
 */
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
   e2df8:	b510      	push	{r4, lr}
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
   e2dfa:	4604      	mov	r4, r0
   e2dfc:	b150      	cbz	r0, e2e14 <mbedtls_ssl_handshake+0x1c>
   e2dfe:	6803      	ldr	r3, [r0, #0]
   e2e00:	b143      	cbz	r3, e2e14 <mbedtls_ssl_handshake+0x1c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );

    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   e2e02:	6863      	ldr	r3, [r4, #4]
   e2e04:	2b10      	cmp	r3, #16
   e2e06:	d007      	beq.n	e2e18 <mbedtls_ssl_handshake+0x20>
    {
        ret = mbedtls_ssl_handshake_step( ssl );
   e2e08:	4620      	mov	r0, r4
   e2e0a:	f7ff ffe3 	bl	e2dd4 <mbedtls_ssl_handshake_step>

        if( ret != 0 )
   e2e0e:	2800      	cmp	r0, #0
   e2e10:	d0f7      	beq.n	e2e02 <mbedtls_ssl_handshake+0xa>
   e2e12:	bd10      	pop	{r4, pc}
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e2e14:	4801      	ldr	r0, [pc, #4]	; (e2e1c <mbedtls_ssl_handshake+0x24>)
   e2e16:	bd10      	pop	{r4, pc}
   e2e18:	2000      	movs	r0, #0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );

    return( ret );
}
   e2e1a:	bd10      	pop	{r4, pc}
   e2e1c:	ffff8f00 	.word	0xffff8f00

000e2e20 <mbedtls_ssl_read>:

/*
 * Receive application data decrypted from the SSL layer
 */
int mbedtls_ssl_read( mbedtls_ssl_context *ssl, unsigned char *buf, size_t len )
{
   e2e20:	b570      	push	{r4, r5, r6, lr}
   e2e22:	460e      	mov	r6, r1
   e2e24:	4614      	mov	r4, r2
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
   e2e26:	4605      	mov	r5, r0
   e2e28:	2800      	cmp	r0, #0
   e2e2a:	d05f      	beq.n	e2eec <mbedtls_ssl_read+0xcc>
   e2e2c:	6803      	ldr	r3, [r0, #0]
   e2e2e:	2b00      	cmp	r3, #0
   e2e30:	d05c      	beq.n	e2eec <mbedtls_ssl_read+0xcc>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   e2e32:	6843      	ldr	r3, [r0, #4]
   e2e34:	2b10      	cmp	r3, #16
   e2e36:	d006      	beq.n	e2e46 <mbedtls_ssl_read+0x26>
    {
        ret = mbedtls_ssl_handshake( ssl );
   e2e38:	f7ff ffde 	bl	e2df8 <mbedtls_ssl_handshake>
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
   e2e3c:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
   e2e40:	d001      	beq.n	e2e46 <mbedtls_ssl_read+0x26>
   e2e42:	2800      	cmp	r0, #0
   e2e44:	d16a      	bne.n	e2f1c <mbedtls_ssl_read+0xfc>
            return( ret );
        }
    }

    /* Loop as long as no application data record is available */
    while( ssl->in_offt == NULL )
   e2e46:	6ea9      	ldr	r1, [r5, #104]	; 0x68
   e2e48:	2900      	cmp	r1, #0
   e2e4a:	d13a      	bne.n	e2ec2 <mbedtls_ssl_read+0xa2>
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
   e2e4c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   e2e4e:	b11b      	cbz	r3, e2e58 <mbedtls_ssl_read+0x38>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
   e2e50:	6c68      	ldr	r0, [r5, #68]	; 0x44
   e2e52:	4798      	blx	r3

    /* Loop as long as no application data record is available */
    while( ssl->in_offt == NULL )
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
   e2e54:	3001      	adds	r0, #1
   e2e56:	d04f      	beq.n	e2ef8 <mbedtls_ssl_read+0xd8>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
        }

        if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e2e58:	2101      	movs	r1, #1
   e2e5a:	4628      	mov	r0, r5
   e2e5c:	f7ff fc6c 	bl	e2738 <mbedtls_ssl_read_record>
   e2e60:	b120      	cbz	r0, e2e6c <mbedtls_ssl_read+0x4c>
        {
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
   e2e62:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
   e2e66:	d159      	bne.n	e2f1c <mbedtls_ssl_read+0xfc>
                return( 0 );
   e2e68:	2000      	movs	r0, #0
   e2e6a:	bd70      	pop	{r4, r5, r6, pc}

            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
            return( ret );
        }

        if( ssl->in_msglen  == 0 &&
   e2e6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   e2e6e:	b95b      	cbnz	r3, e2e88 <mbedtls_ssl_read+0x68>
   e2e70:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   e2e72:	2b17      	cmp	r3, #23
   e2e74:	d108      	bne.n	e2e88 <mbedtls_ssl_read+0x68>
            ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA )
        {
            /*
             * OpenSSL sends empty messages to randomize the IV
             */
            if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e2e76:	2101      	movs	r1, #1
   e2e78:	4628      	mov	r0, r5
   e2e7a:	f7ff fc5d 	bl	e2738 <mbedtls_ssl_read_record>
   e2e7e:	b118      	cbz	r0, e2e88 <mbedtls_ssl_read+0x68>
            {
                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
   e2e80:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
   e2e84:	d0f0      	beq.n	e2e68 <mbedtls_ssl_read+0x48>
   e2e86:	bd70      	pop	{r4, r5, r6, pc}
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
                return( ret );
            }
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   e2e88:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   e2e8a:	2b16      	cmp	r3, #22
   e2e8c:	d10b      	bne.n	e2ea6 <mbedtls_ssl_read+0x86>
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
   e2e8e:	682b      	ldr	r3, [r5, #0]
   e2e90:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   e2e94:	07db      	lsls	r3, r3, #31
   e2e96:	d435      	bmi.n	e2f04 <mbedtls_ssl_read+0xe4>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
   e2e98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
   e2e9a:	781b      	ldrb	r3, [r3, #0]
   e2e9c:	bb53      	cbnz	r3, e2ef4 <mbedtls_ssl_read+0xd4>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
   e2e9e:	6fab      	ldr	r3, [r5, #120]	; 0x78
   e2ea0:	2b04      	cmp	r3, #4
   e2ea2:	d127      	bne.n	e2ef4 <mbedtls_ssl_read+0xd4>
   e2ea4:	e02e      	b.n	e2f04 <mbedtls_ssl_read+0xe4>
            }
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        /* Fatal and closure alerts handled by mbedtls_ssl_read_record() */
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
   e2ea6:	2b15      	cmp	r3, #21
   e2ea8:	d022      	beq.n	e2ef0 <mbedtls_ssl_read+0xd0>
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
            return( MBEDTLS_ERR_SSL_WANT_READ );
        }

        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
   e2eaa:	2b17      	cmp	r3, #23
   e2eac:	d122      	bne.n	e2ef4 <mbedtls_ssl_read+0xd4>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
        }

        ssl->in_offt = ssl->in_msg;
   e2eae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   e2eb0:	66ab      	str	r3, [r5, #104]	; 0x68

        /* We're going to return something now, cancel timer,
         * except if handshake (renegotiation) is in progress */
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
   e2eb2:	686b      	ldr	r3, [r5, #4]
   e2eb4:	2b10      	cmp	r3, #16
   e2eb6:	d1c6      	bne.n	e2e46 <mbedtls_ssl_read+0x26>
            ssl_set_timer( ssl, 0 );
   e2eb8:	2100      	movs	r1, #0
   e2eba:	4628      	mov	r0, r5
   e2ebc:	f7fe fea8 	bl	e1c10 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
   e2ec0:	e7c1      	b.n	e2e46 <mbedtls_ssl_read+0x26>
        }
#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    }

    n = ( len < ssl->in_msglen )
   e2ec2:	6f28      	ldr	r0, [r5, #112]	; 0x70
   e2ec4:	4284      	cmp	r4, r0
   e2ec6:	bf28      	it	cs
   e2ec8:	4604      	movcs	r4, r0
        ? len : ssl->in_msglen;

    memcpy( buf, ssl->in_offt, n );
   e2eca:	4622      	mov	r2, r4
   e2ecc:	4630      	mov	r0, r6
   e2ece:	f004 ffca 	bl	e7e66 <memcpy>
    ssl->in_msglen -= n;
   e2ed2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   e2ed4:	1b1b      	subs	r3, r3, r4
   e2ed6:	672b      	str	r3, [r5, #112]	; 0x70

    if( ssl->in_msglen == 0 )
   e2ed8:	b91b      	cbnz	r3, e2ee2 <mbedtls_ssl_read+0xc2>
    {
        /* all bytes consumed */
        ssl->in_offt = NULL;
   e2eda:	66ab      	str	r3, [r5, #104]	; 0x68
        ssl->keep_current_message = 0;
   e2edc:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
   e2ee0:	e002      	b.n	e2ee8 <mbedtls_ssl_read+0xc8>
    }
    else
    {
        /* more data available */
        ssl->in_offt += n;
   e2ee2:	6eab      	ldr	r3, [r5, #104]	; 0x68
   e2ee4:	4423      	add	r3, r4
   e2ee6:	66ab      	str	r3, [r5, #104]	; 0x68
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );

    return( (int) n );
   e2ee8:	4620      	mov	r0, r4
   e2eea:	bd70      	pop	{r4, r5, r6, pc}
{
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e2eec:	480c      	ldr	r0, [pc, #48]	; (e2f20 <mbedtls_ssl_read+0x100>)
   e2eee:	bd70      	pop	{r4, r5, r6, pc}

        /* Fatal and closure alerts handled by mbedtls_ssl_read_record() */
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
            return( MBEDTLS_ERR_SSL_WANT_READ );
   e2ef0:	480c      	ldr	r0, [pc, #48]	; (e2f24 <mbedtls_ssl_read+0x104>)
   e2ef2:	bd70      	pop	{r4, r5, r6, pc}
                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
                {
                    continue;
                }
#endif
                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e2ef4:	480c      	ldr	r0, [pc, #48]	; (e2f28 <mbedtls_ssl_read+0x108>)
   e2ef6:	bd70      	pop	{r4, r5, r6, pc}
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
            ssl->f_get_timer( ssl->p_timer ) == -1 )
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
   e2ef8:	682b      	ldr	r3, [r5, #0]
   e2efa:	4628      	mov	r0, r5
   e2efc:	6f59      	ldr	r1, [r3, #116]	; 0x74
   e2efe:	f7fe fe87 	bl	e1c10 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
   e2f02:	e7a9      	b.n	e2e58 <mbedtls_ssl_read+0x38>
                }
                else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
   e2f04:	68eb      	ldr	r3, [r5, #12]
   e2f06:	2b00      	cmp	r3, #0
   e2f08:	dd07      	ble.n	e2f1a <mbedtls_ssl_read+0xfa>
                {
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
   e2f0a:	2264      	movs	r2, #100	; 0x64
   e2f0c:	2101      	movs	r1, #1
   e2f0e:	4628      	mov	r0, r5
   e2f10:	f7ff fbf6 	bl	e2700 <mbedtls_ssl_send_alert_message>
   e2f14:	2800      	cmp	r0, #0
   e2f16:	d096      	beq.n	e2e46 <mbedtls_ssl_read+0x26>
   e2f18:	bd70      	pop	{r4, r5, r6, pc}
                else
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 ||
          MBEDTLS_SSL_PROTO_TLS1_2 */
                {
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e2f1a:	4804      	ldr	r0, [pc, #16]	; (e2f2c <mbedtls_ssl_read+0x10c>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );

    return( (int) n );
}
   e2f1c:	bd70      	pop	{r4, r5, r6, pc}
   e2f1e:	bf00      	nop
   e2f20:	ffff8f00 	.word	0xffff8f00
   e2f24:	ffff9700 	.word	0xffff9700
   e2f28:	ffff8900 	.word	0xffff8900
   e2f2c:	ffff9400 	.word	0xffff9400

000e2f30 <mbedtls_ssl_write>:

/*
 * Write application data (public-facing wrapper)
 */
int mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len )
{
   e2f30:	b570      	push	{r4, r5, r6, lr}
   e2f32:	460e      	mov	r6, r1
   e2f34:	4615      	mov	r5, r2
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
   e2f36:	4604      	mov	r4, r0
   e2f38:	b368      	cbz	r0, e2f96 <mbedtls_ssl_write+0x66>
   e2f3a:	6803      	ldr	r3, [r0, #0]
   e2f3c:	b35b      	cbz	r3, e2f96 <mbedtls_ssl_write+0x66>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   e2f3e:	6843      	ldr	r3, [r0, #4]
   e2f40:	2b10      	cmp	r3, #16
   e2f42:	d105      	bne.n	e2f50 <mbedtls_ssl_write+0x20>
 * corresponding return code is 0 on success.
 */
static int ssl_write_real( mbedtls_ssl_context *ssl,
                           const unsigned char *buf, size_t len )
{
    int ret = mbedtls_ssl_get_max_out_record_payload( ssl );
   e2f44:	4620      	mov	r0, r4
   e2f46:	f7ff ff3b 	bl	e2dc0 <mbedtls_ssl_get_max_out_record_payload>
    const size_t max_len = (size_t) ret;

    if( ret < 0 )
   e2f4a:	2800      	cmp	r0, #0
   e2f4c:	da05      	bge.n	e2f5a <mbedtls_ssl_write+0x2a>
   e2f4e:	bd70      	pop	{r4, r5, r6, pc}
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
    {
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
   e2f50:	f7ff ff52 	bl	e2df8 <mbedtls_ssl_handshake>
   e2f54:	2800      	cmp	r0, #0
   e2f56:	d0f5      	beq.n	e2f44 <mbedtls_ssl_write+0x14>
   e2f58:	bd70      	pop	{r4, r5, r6, pc}
        else
#endif
            len = max_len;
    }

    if( ssl->out_left != 0 )
   e2f5a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   e2f5e:	4285      	cmp	r5, r0
   e2f60:	bf28      	it	cs
   e2f62:	4605      	movcs	r5, r0
   e2f64:	b12b      	cbz	r3, e2f72 <mbedtls_ssl_write+0x42>
         * The user has previously tried to send the data and
         * MBEDTLS_ERR_SSL_WANT_WRITE or the message was only partially
         * written. In this case, we expect the high-level write function
         * (e.g. mbedtls_ssl_write()) to be called with the same parameters
         */
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   e2f66:	4620      	mov	r0, r4
   e2f68:	f7ff fa18 	bl	e239c <mbedtls_ssl_flush_output>
   e2f6c:	b9a0      	cbnz	r0, e2f98 <mbedtls_ssl_write+0x68>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
            return( ret );
        }
    }

    return( (int) len );
   e2f6e:	4628      	mov	r0, r5
   e2f70:	bd70      	pop	{r4, r5, r6, pc}
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
   e2f72:	2317      	movs	r3, #23
        memcpy( ssl->out_msg, buf, len );
   e2f74:	4631      	mov	r1, r6
        /*
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
   e2f76:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
   e2f7a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
   e2f7e:	462a      	mov	r2, r5
   e2f80:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   e2f84:	f004 ff6f 	bl	e7e66 <memcpy>

        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   e2f88:	2101      	movs	r1, #1
   e2f8a:	4620      	mov	r0, r4
   e2f8c:	f7ff fa34 	bl	e23f8 <mbedtls_ssl_write_record>
   e2f90:	2800      	cmp	r0, #0
   e2f92:	d0ec      	beq.n	e2f6e <mbedtls_ssl_write+0x3e>
   e2f94:	bd70      	pop	{r4, r5, r6, pc}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e2f96:	4801      	ldr	r0, [pc, #4]	; (e2f9c <mbedtls_ssl_write+0x6c>)
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );

    return( ret );
}
   e2f98:	bd70      	pop	{r4, r5, r6, pc}
   e2f9a:	bf00      	nop
   e2f9c:	ffff8f00 	.word	0xffff8f00

000e2fa0 <mbedtls_ssl_transform_free>:

    return( 0 );
}

void mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform )
{
   e2fa0:	b510      	push	{r4, lr}
    if( transform == NULL )
   e2fa2:	4604      	mov	r4, r0
   e2fa4:	b1a0      	cbz	r0, e2fd0 <mbedtls_ssl_transform_free+0x30>
#if defined(MBEDTLS_ZLIB_SUPPORT)
    deflateEnd( &transform->ctx_deflate );
    inflateEnd( &transform->ctx_inflate );
#endif

    mbedtls_cipher_free( &transform->cipher_ctx_enc );
   e2fa6:	3050      	adds	r0, #80	; 0x50
   e2fa8:	f7f4 fd64 	bl	d7a74 <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
   e2fac:	f104 0088 	add.w	r0, r4, #136	; 0x88
   e2fb0:	f7f4 fd60 	bl	d7a74 <mbedtls_cipher_free>

    mbedtls_md_free( &transform->md_ctx_enc );
   e2fb4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   e2fb8:	f7f7 fcfb 	bl	da9b2 <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
   e2fbc:	f104 0044 	add.w	r0, r4, #68	; 0x44
   e2fc0:	f7f7 fcf7 	bl	da9b2 <mbedtls_md_free>

    mbedtls_platform_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
   e2fc4:	4620      	mov	r0, r4
   e2fc6:	21c0      	movs	r1, #192	; 0xc0
}
   e2fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_cipher_free( &transform->cipher_ctx_dec );

    mbedtls_md_free( &transform->md_ctx_enc );
    mbedtls_md_free( &transform->md_ctx_dec );

    mbedtls_platform_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
   e2fcc:	f7f9 bb10 	b.w	dc5f0 <mbedtls_platform_zeroize>
   e2fd0:	bd10      	pop	{r4, pc}

000e2fd2 <mbedtls_ssl_handshake_free>:
}

#endif /* MBEDTLS_SSL_PROTO_DTLS */

void mbedtls_ssl_handshake_free( mbedtls_ssl_context *ssl )
{
   e2fd2:	b538      	push	{r3, r4, r5, lr}
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
   e2fd4:	6b04      	ldr	r4, [r0, #48]	; 0x30

    if( handshake == NULL )
   e2fd6:	b344      	cbz	r4, e302a <mbedtls_ssl_handshake_free+0x58>
    mbedtls_md5_free(    &handshake->fin_md5  );
    mbedtls_sha1_free(   &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_free(   &handshake->fin_sha256    );
   e2fd8:	f504 70ac 	add.w	r0, r4, #344	; 0x158
   e2fdc:	f7fc f935 	bl	df24a <mbedtls_sha256_free>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_free(   &handshake->fin_sha512    );
   e2fe0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   e2fe4:	f7fc fde5 	bl	dfbb2 <mbedtls_sha512_free>

#if defined(MBEDTLS_DHM_C)
    mbedtls_dhm_free( &handshake->dhm_ctx );
#endif
#if defined(MBEDTLS_ECDH_C)
    mbedtls_ecdh_free( &handshake->ecdh_ctx );
   e2fe8:	1d20      	adds	r0, r4, #4
   e2fea:	f7f4 ff2f 	bl	d7e4c <mbedtls_ecdh_free>
#endif

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    /* explicit void pointer cast for buggy MS compiler */
    mbedtls_free( (void *) handshake->curves );
   e2fee:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
   e2ff2:	f002 fda5 	bl	e5b40 <free>
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( handshake->psk != NULL )
   e2ff6:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   e2ffa:	b138      	cbz	r0, e300c <mbedtls_ssl_handshake_free+0x3a>
    {
        mbedtls_platform_zeroize( handshake->psk, handshake->psk_len );
   e2ffc:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   e3000:	f7f9 faf6 	bl	dc5f0 <mbedtls_platform_zeroize>
        mbedtls_free( handshake->psk );
   e3004:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   e3008:	f002 fd9a 	bl	e5b40 <free>
    defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    /*
     * Free only the linked list wrapper, not the keys themselves
     * since the belong to the SNI callback
     */
    if( handshake->sni_key_cert != NULL )
   e300c:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
   e3010:	b930      	cbnz	r0, e3020 <mbedtls_ssl_handshake_free+0x4e>
    ssl_flight_free( handshake->flight );
    ssl_buffering_free( ssl );
#endif

    mbedtls_platform_zeroize( handshake,
                              sizeof( mbedtls_ssl_handshake_params ) );
   e3012:	4620      	mov	r0, r4
   e3014:	f44f 7158 	mov.w	r1, #864	; 0x360
}
   e3018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssl_flight_free( handshake->flight );
    ssl_buffering_free( ssl );
#endif

    mbedtls_platform_zeroize( handshake,
                              sizeof( mbedtls_ssl_handshake_params ) );
   e301c:	f7f9 bae8 	b.w	dc5f0 <mbedtls_platform_zeroize>
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
        {
            next = cur->next;
   e3020:	6885      	ldr	r5, [r0, #8]
            mbedtls_free( cur );
   e3022:	f002 fd8d 	bl	e5b40 <free>
     */
    if( handshake->sni_key_cert != NULL )
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
   e3026:	4628      	mov	r0, r5
   e3028:	e7f2      	b.n	e3010 <mbedtls_ssl_handshake_free+0x3e>
   e302a:	bd38      	pop	{r3, r4, r5, pc}

000e302c <mbedtls_ssl_session_free>:
    mbedtls_platform_zeroize( handshake,
                              sizeof( mbedtls_ssl_handshake_params ) );
}

void mbedtls_ssl_session_free( mbedtls_ssl_session *session )
{
   e302c:	b510      	push	{r4, lr}
    if( session == NULL )
   e302e:	4604      	mov	r4, r0
   e3030:	b178      	cbz	r0, e3052 <mbedtls_ssl_session_free+0x26>
        return;

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( session->peer_cert != NULL )
   e3032:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   e3034:	b120      	cbz	r0, e3040 <mbedtls_ssl_session_free+0x14>
    {
        mbedtls_x509_crt_free( session->peer_cert );
   e3036:	f001 ff44 	bl	e4ec2 <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
   e303a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   e303c:	f002 fd80 	bl	e5b40 <free>
    }
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
   e3040:	6e60      	ldr	r0, [r4, #100]	; 0x64
   e3042:	f002 fd7d 	bl	e5b40 <free>
#endif

    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
   e3046:	4620      	mov	r0, r4
   e3048:	2174      	movs	r1, #116	; 0x74
}
   e304a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
#endif

    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
   e304e:	f7f9 bacf 	b.w	dc5f0 <mbedtls_platform_zeroize>
   e3052:	bd10      	pop	{r4, pc}

000e3054 <mbedtls_ssl_handshake_wrapup>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
   e3054:	b538      	push	{r3, r4, r5, lr}
   e3056:	4604      	mov	r4, r0
    int resume = ssl->handshake->resume;
   e3058:	6b03      	ldr	r3, [r0, #48]	; 0x30
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
   e305a:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
    int resume = ssl->handshake->resume;
   e305c:	f8d3 5348 	ldr.w	r5, [r3, #840]	; 0x348
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
   e3060:	b120      	cbz	r0, e306c <mbedtls_ssl_handshake_wrapup+0x18>
        /* RFC 7366 3.1: keep the EtM state */
        ssl->session_negotiate->encrypt_then_mac =
                  ssl->session->encrypt_then_mac;
#endif

        mbedtls_ssl_session_free( ssl->session );
   e3062:	f7ff ffe3 	bl	e302c <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
   e3066:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   e3068:	f002 fd6a 	bl	e5b40 <free>
    }
    ssl->session = ssl->session_negotiate;
   e306c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ssl->session_negotiate = NULL;

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
   e306e:	6822      	ldr	r2, [r4, #0]
#endif

        mbedtls_ssl_session_free( ssl->session );
        mbedtls_free( ssl->session );
    }
    ssl->session = ssl->session_negotiate;
   e3070:	62a1      	str	r1, [r4, #40]	; 0x28
    ssl->session_negotiate = NULL;
   e3072:	2300      	movs	r3, #0
   e3074:	62e3      	str	r3, [r4, #44]	; 0x2c

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
   e3076:	6a53      	ldr	r3, [r2, #36]	; 0x24
   e3078:	b123      	cbz	r3, e3084 <mbedtls_ssl_handshake_wrapup+0x30>
   e307a:	6888      	ldr	r0, [r1, #8]
   e307c:	b110      	cbz	r0, e3084 <mbedtls_ssl_handshake_wrapup+0x30>
        ssl->session->id_len != 0 &&
   e307e:	b90d      	cbnz	r5, e3084 <mbedtls_ssl_handshake_wrapup+0x30>
        resume == 0 )
    {
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
   e3080:	6a90      	ldr	r0, [r2, #40]	; 0x28
   e3082:	4798      	blx	r3
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );

    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl );
   e3084:	4620      	mov	r0, r4
   e3086:	f7ff ffa4 	bl	e2fd2 <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
   e308a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e308c:	f002 fd58 	bl	e5b40 <free>
    ssl->handshake = NULL;

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
   e3090:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl );
    mbedtls_free( ssl->handshake );
    ssl->handshake = NULL;
   e3092:	2300      	movs	r3, #0
   e3094:	6323      	str	r3, [r4, #48]	; 0x30

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
   e3096:	b120      	cbz	r0, e30a2 <mbedtls_ssl_handshake_wrapup+0x4e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
   e3098:	f7ff ff82 	bl	e2fa0 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
   e309c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   e309e:	f002 fd4f 	bl	e5b40 <free>
    }
    ssl->transform = ssl->transform_negotiate;
   e30a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e30a4:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
   e30a6:	2300      	movs	r3, #0
   e30a8:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
#endif
        ssl_handshake_wrapup_free_hs_transform( ssl );

    ssl->state++;
   e30aa:	6863      	ldr	r3, [r4, #4]
   e30ac:	3301      	adds	r3, #1
   e30ae:	6063      	str	r3, [r4, #4]
   e30b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000e30b4 <_ZL18ssl_handshake_initP19mbedtls_ssl_context>:
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
}

static int ssl_handshake_init( mbedtls_ssl_context *ssl )
{
   e30b4:	b538      	push	{r3, r4, r5, lr}
   e30b6:	4604      	mov	r4, r0
    /* Clear old handshake information if present */
    if( ssl->transform_negotiate )
   e30b8:	6c00      	ldr	r0, [r0, #64]	; 0x40
   e30ba:	b108      	cbz	r0, e30c0 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xc>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
   e30bc:	f7ff ff70 	bl	e2fa0 <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
   e30c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e30c2:	b108      	cbz	r0, e30c8 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x14>
        mbedtls_ssl_session_free( ssl->session_negotiate );
   e30c4:	f7ff ffb2 	bl	e302c <mbedtls_ssl_session_free>
    if( ssl->handshake )
   e30c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e30ca:	b113      	cbz	r3, e30d2 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x1e>
        mbedtls_ssl_handshake_free( ssl );
   e30cc:	4620      	mov	r0, r4
   e30ce:	f7ff ff80 	bl	e2fd2 <mbedtls_ssl_handshake_free>

    /*
     * Either the pointers are now NULL or cleared properly and can be freed.
     * Now allocate missing structures.
     */
    if( ssl->transform_negotiate == NULL )
   e30d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e30d4:	b923      	cbnz	r3, e30e0 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x2c>
    {
        ssl->transform_negotiate = (mbedtls_ssl_transform *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
   e30d6:	21c0      	movs	r1, #192	; 0xc0
   e30d8:	2001      	movs	r0, #1
   e30da:	f004 fe9f 	bl	e7e1c <calloc>
   e30de:	6420      	str	r0, [r4, #64]	; 0x40
    }

    if( ssl->session_negotiate == NULL )
   e30e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e30e2:	b923      	cbnz	r3, e30ee <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x3a>
    {
        ssl->session_negotiate = (mbedtls_ssl_session *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
   e30e4:	2174      	movs	r1, #116	; 0x74
   e30e6:	2001      	movs	r0, #1
   e30e8:	f004 fe98 	bl	e7e1c <calloc>
   e30ec:	62e0      	str	r0, [r4, #44]	; 0x2c
    }

    if( ssl->handshake == NULL )
   e30ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e30f0:	b92b      	cbnz	r3, e30fe <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x4a>
    {
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
   e30f2:	f44f 7158 	mov.w	r1, #864	; 0x360
   e30f6:	2001      	movs	r0, #1
   e30f8:	f004 fe90 	bl	e7e1c <calloc>
   e30fc:	6320      	str	r0, [r4, #48]	; 0x30
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
   e30fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e3100:	b118      	cbz	r0, e310a <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x56>
   e3102:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e3104:	b10b      	cbz	r3, e310a <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x56>
        ssl->transform_negotiate == NULL ||
        ssl->session_negotiate == NULL )
   e3106:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
        ssl->transform_negotiate == NULL ||
   e3108:	b96b      	cbnz	r3, e3126 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x72>
        ssl->session_negotiate == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );

        mbedtls_free( ssl->handshake );
   e310a:	f002 fd19 	bl	e5b40 <free>
        mbedtls_free( ssl->transform_negotiate );
   e310e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   e3110:	f002 fd16 	bl	e5b40 <free>
        mbedtls_free( ssl->session_negotiate );
   e3114:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e3116:	f002 fd13 	bl	e5b40 <free>

        ssl->handshake = NULL;
   e311a:	2300      	movs	r3, #0
   e311c:	6323      	str	r3, [r4, #48]	; 0x30
        ssl->transform_negotiate = NULL;
   e311e:	6423      	str	r3, [r4, #64]	; 0x40
        ssl->session_negotiate = NULL;
   e3120:	62e3      	str	r3, [r4, #44]	; 0x2c

        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e3122:	4821      	ldr	r0, [pc, #132]	; (e31a8 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xf4>)
   e3124:	bd38      	pop	{r3, r4, r5, pc}
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
   e3126:	4618      	mov	r0, r3
   e3128:	f7ff fda0 	bl	e2c6c <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
   e312c:	6c25      	ldr	r5, [r4, #64]	; 0x40
#endif
}

static void ssl_transform_init( mbedtls_ssl_transform *transform )
{
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
   e312e:	22c0      	movs	r2, #192	; 0xc0
   e3130:	2100      	movs	r1, #0
   e3132:	4628      	mov	r0, r5
   e3134:	f004 febd 	bl	e7eb2 <memset>

    mbedtls_cipher_init( &transform->cipher_ctx_enc );
   e3138:	f105 0050 	add.w	r0, r5, #80	; 0x50
   e313c:	f7f4 fc96 	bl	d7a6c <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
   e3140:	f105 0088 	add.w	r0, r5, #136	; 0x88
   e3144:	f7f4 fc92 	bl	d7a6c <mbedtls_cipher_init>

    mbedtls_md_init( &transform->md_ctx_enc );
   e3148:	f105 0038 	add.w	r0, r5, #56	; 0x38
   e314c:	f7f7 fc2c 	bl	da9a8 <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
   e3150:	f105 0044 	add.w	r0, r5, #68	; 0x44
   e3154:	f7f7 fc28 	bl	da9a8 <mbedtls_md_init>
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
    ssl_transform_init( ssl->transform_negotiate );
    ssl_handshake_params_init( ssl->handshake );
   e3158:	6b24      	ldr	r4, [r4, #48]	; 0x30
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
   e315a:	f44f 7258 	mov.w	r2, #864	; 0x360
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
   e315e:	f504 75ac 	add.w	r5, r4, #344	; 0x158
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
   e3162:	2100      	movs	r1, #0
   e3164:	4620      	mov	r0, r4
   e3166:	f004 fea4 	bl	e7eb2 <memset>
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
   e316a:	4628      	mov	r0, r5
   e316c:	f7fc f869 	bl	df242 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
   e3170:	2100      	movs	r1, #0
   e3172:	4628      	mov	r0, r5
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
   e3174:	f504 75e4 	add.w	r5, r4, #456	; 0x1c8
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
   e3178:	f7fc f872 	bl	df260 <mbedtls_sha256_starts_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
   e317c:	4628      	mov	r0, r5
   e317e:	f7fc fd14 	bl	dfbaa <mbedtls_sha512_init>
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
   e3182:	2101      	movs	r1, #1
   e3184:	4628      	mov	r0, r5
   e3186:	f7fc fd1f 	bl	dfbc8 <mbedtls_sha512_starts_ret>

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
   e318a:	2500      	movs	r5, #0
    mbedtls_sha512_init(   &handshake->fin_sha512    );
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
   e318c:	4b07      	ldr	r3, [pc, #28]	; (e31ac <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xf8>)
   e318e:	f8c4 32a0 	str.w	r3, [r4, #672]	; 0x2a0

#if defined(MBEDTLS_DHM_C)
    mbedtls_dhm_init( &handshake->dhm_ctx );
#endif
#if defined(MBEDTLS_ECDH_C)
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
   e3192:	1d20      	adds	r0, r4, #4

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
   e3194:	7025      	strb	r5, [r4, #0]
    set->ecdsa = md_alg;
   e3196:	7065      	strb	r5, [r4, #1]

#if defined(MBEDTLS_DHM_C)
    mbedtls_dhm_init( &handshake->dhm_ctx );
#endif
#if defined(MBEDTLS_ECDH_C)
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
   e3198:	f7f4 fe34 	bl	d7e04 <mbedtls_ecdh_init>
#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
    mbedtls_x509_crt_restart_init( &handshake->ecrs_ctx );
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
   e319c:	2303      	movs	r3, #3
   e319e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148

        ssl_set_timer( ssl, 0 );
    }
#endif

    return( 0 );
   e31a2:	4628      	mov	r0, r5
}
   e31a4:	bd38      	pop	{r3, r4, r5, pc}
   e31a6:	bf00      	nop
   e31a8:	ffff8100 	.word	0xffff8100
   e31ac:	000e1f31 	.word	0x000e1f31

000e31b0 <mbedtls_ssl_setup>:
    ssl_update_in_pointers ( ssl, NULL /* no transform enabled */ );
}

int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
   e31b0:	b538      	push	{r3, r4, r5, lr}
    /*
     * Prepare base structures
     */

    /* Set to NULL in case of an error condition */
    ssl->out_buf = NULL;
   e31b2:	2300      	movs	r3, #0
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
    int ret;

    ssl->conf = conf;
   e31b4:	6001      	str	r1, [r0, #0]
    ssl_update_in_pointers ( ssl, NULL /* no transform enabled */ );
}

int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
   e31b6:	4604      	mov	r4, r0
    /*
     * Prepare base structures
     */

    /* Set to NULL in case of an error condition */
    ssl->out_buf = NULL;
   e31b8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

    ssl->in_buf = (unsigned char *)mbedtls_calloc( 1, MBEDTLS_SSL_IN_BUFFER_LEN );
   e31bc:	f242 012d 	movw	r1, #8237	; 0x202d
   e31c0:	2001      	movs	r0, #1
   e31c2:	f004 fe2b 	bl	e7e1c <calloc>
   e31c6:	6520      	str	r0, [r4, #80]	; 0x50
    if( ssl->in_buf == NULL )
   e31c8:	b908      	cbnz	r0, e31ce <mbedtls_ssl_setup+0x1e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", MBEDTLS_SSL_IN_BUFFER_LEN) );
        ret = MBEDTLS_ERR_SSL_ALLOC_FAILED;
   e31ca:	4d18      	ldr	r5, [pc, #96]	; (e322c <mbedtls_ssl_setup+0x7c>)
   e31cc:	e010      	b.n	e31f0 <mbedtls_ssl_setup+0x40>
        goto error;
    }

    ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, MBEDTLS_SSL_OUT_BUFFER_LEN );
   e31ce:	f242 012d 	movw	r1, #8237	; 0x202d
   e31d2:	2001      	movs	r0, #1
   e31d4:	f004 fe22 	bl	e7e1c <calloc>
   e31d8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if( ssl->out_buf == NULL )
   e31dc:	2800      	cmp	r0, #0
   e31de:	d0f4      	beq.n	e31ca <mbedtls_ssl_setup+0x1a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", MBEDTLS_SSL_OUT_BUFFER_LEN) );
        ret = MBEDTLS_ERR_SSL_ALLOC_FAILED;
        goto error;
    }

    ssl_reset_in_out_pointers( ssl );
   e31e0:	4620      	mov	r0, r4
   e31e2:	f7fe feb7 	bl	e1f54 <_ZL25ssl_reset_in_out_pointersP19mbedtls_ssl_context>

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
   e31e6:	4620      	mov	r0, r4
   e31e8:	f7ff ff64 	bl	e30b4 <_ZL18ssl_handshake_initP19mbedtls_ssl_context>
   e31ec:	4605      	mov	r5, r0
   e31ee:	b1d0      	cbz	r0, e3226 <mbedtls_ssl_setup+0x76>
        goto error;

    return( 0 );

error:
    mbedtls_free( ssl->in_buf );
   e31f0:	6d20      	ldr	r0, [r4, #80]	; 0x50
   e31f2:	f002 fca5 	bl	e5b40 <free>
    mbedtls_free( ssl->out_buf );
   e31f6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   e31fa:	f002 fca1 	bl	e5b40 <free>

    ssl->conf = NULL;
   e31fe:	2300      	movs	r3, #0
   e3200:	6023      	str	r3, [r4, #0]

    ssl->in_buf = NULL;
   e3202:	6523      	str	r3, [r4, #80]	; 0x50
    ssl->out_buf = NULL;
   e3204:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

    ssl->in_hdr = NULL;
   e3208:	65a3      	str	r3, [r4, #88]	; 0x58
    ssl->in_ctr = NULL;
   e320a:	6563      	str	r3, [r4, #84]	; 0x54
    ssl->in_len = NULL;
   e320c:	65e3      	str	r3, [r4, #92]	; 0x5c
    ssl->in_iv = NULL;
   e320e:	6623      	str	r3, [r4, #96]	; 0x60
    ssl->in_msg = NULL;
   e3210:	6663      	str	r3, [r4, #100]	; 0x64

    ssl->out_hdr = NULL;
   e3212:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    ssl->out_ctr = NULL;
   e3216:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    ssl->out_len = NULL;
   e321a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    ssl->out_iv = NULL;
   e321e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    ssl->out_msg = NULL;
   e3222:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98

    return( ret );
}
   e3226:	4628      	mov	r0, r5
   e3228:	bd38      	pop	{r3, r4, r5, pc}
   e322a:	bf00      	nop
   e322c:	ffff8100 	.word	0xffff8100

000e3230 <mbedtls_ssl_free>:

/*
 * Free an SSL context
 */
void mbedtls_ssl_free( mbedtls_ssl_context *ssl )
{
   e3230:	b538      	push	{r3, r4, r5, lr}
    if( ssl == NULL )
   e3232:	4604      	mov	r4, r0
   e3234:	2800      	cmp	r0, #0
   e3236:	d049      	beq.n	e32cc <mbedtls_ssl_free+0x9c>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );

    if( ssl->out_buf != NULL )
   e3238:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   e323c:	b138      	cbz	r0, e324e <mbedtls_ssl_free+0x1e>
    {
        mbedtls_platform_zeroize( ssl->out_buf, MBEDTLS_SSL_OUT_BUFFER_LEN );
   e323e:	f242 012d 	movw	r1, #8237	; 0x202d
   e3242:	f7f9 f9d5 	bl	dc5f0 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->out_buf );
   e3246:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   e324a:	f002 fc79 	bl	e5b40 <free>
    }

    if( ssl->in_buf != NULL )
   e324e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   e3250:	b130      	cbz	r0, e3260 <mbedtls_ssl_free+0x30>
    {
        mbedtls_platform_zeroize( ssl->in_buf, MBEDTLS_SSL_IN_BUFFER_LEN );
   e3252:	f242 012d 	movw	r1, #8237	; 0x202d
   e3256:	f7f9 f9cb 	bl	dc5f0 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->in_buf );
   e325a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   e325c:	f002 fc70 	bl	e5b40 <free>
        mbedtls_platform_zeroize( ssl->compress_buf, MBEDTLS_SSL_COMPRESS_BUFFER_LEN );
        mbedtls_free( ssl->compress_buf );
    }
#endif

    if( ssl->transform )
   e3260:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   e3262:	b120      	cbz	r0, e326e <mbedtls_ssl_free+0x3e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
   e3264:	f7ff fe9c 	bl	e2fa0 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
   e3268:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   e326a:	f002 fc69 	bl	e5b40 <free>
    }

    if( ssl->handshake )
   e326e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e3270:	b18b      	cbz	r3, e3296 <mbedtls_ssl_free+0x66>
    {
        mbedtls_ssl_handshake_free( ssl );
   e3272:	4620      	mov	r0, r4
   e3274:	f7ff fead 	bl	e2fd2 <mbedtls_ssl_handshake_free>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
   e3278:	6c20      	ldr	r0, [r4, #64]	; 0x40
   e327a:	f7ff fe91 	bl	e2fa0 <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
   e327e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e3280:	f7ff fed4 	bl	e302c <mbedtls_ssl_session_free>

        mbedtls_free( ssl->handshake );
   e3284:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e3286:	f002 fc5b 	bl	e5b40 <free>
        mbedtls_free( ssl->transform_negotiate );
   e328a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   e328c:	f002 fc58 	bl	e5b40 <free>
        mbedtls_free( ssl->session_negotiate );
   e3290:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e3292:	f002 fc55 	bl	e5b40 <free>
    }

    if( ssl->session )
   e3296:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   e3298:	b120      	cbz	r0, e32a4 <mbedtls_ssl_free+0x74>
    {
        mbedtls_ssl_session_free( ssl->session );
   e329a:	f7ff fec7 	bl	e302c <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
   e329e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   e32a0:	f002 fc4e 	bl	e5b40 <free>
    }

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( ssl->hostname != NULL )
   e32a4:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
   e32a8:	b155      	cbz	r5, e32c0 <mbedtls_ssl_free+0x90>
    {
        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
   e32aa:	4628      	mov	r0, r5
   e32ac:	f004 fe48 	bl	e7f40 <strlen>
   e32b0:	4601      	mov	r1, r0
   e32b2:	4628      	mov	r0, r5
   e32b4:	f7f9 f99c 	bl	dc5f0 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->hostname );
   e32b8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   e32bc:	f002 fc40 	bl	e5b40 <free>
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_platform_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
   e32c0:	4620      	mov	r0, r4
   e32c2:	21bc      	movs	r1, #188	; 0xbc
}
   e32c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_platform_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
   e32c8:	f7f9 b992 	b.w	dc5f0 <mbedtls_platform_zeroize>
   e32cc:	bd38      	pop	{r3, r4, r5, pc}

000e32ce <mbedtls_ssl_config_init>:
/*
 * Initialze mbedtls_ssl_config
 */
void mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
{
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
   e32ce:	2280      	movs	r2, #128	; 0x80
   e32d0:	2100      	movs	r1, #0
   e32d2:	f004 bdee 	b.w	e7eb2 <memset>
	...

000e32d8 <mbedtls_ssl_config_defaults>:
/*
 * Load default in mbedtls_ssl_config
 */
int mbedtls_ssl_config_defaults( mbedtls_ssl_config *conf,
                                 int endpoint, int transport, int preset )
{
   e32d8:	b510      	push	{r4, lr}
   e32da:	4604      	mov	r4, r0
/*
 * SSL set accessors
 */
void mbedtls_ssl_conf_endpoint( mbedtls_ssl_config *conf, int endpoint )
{
    conf->endpoint   = endpoint;
   e32dc:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
   e32e0:	f361 0000 	bfi	r0, r1, #0, #1
}

void mbedtls_ssl_conf_transport( mbedtls_ssl_config *conf, int transport )
{
    conf->transport = transport;
   e32e4:	f362 0041 	bfi	r0, r2, #1, #1
   e32e8:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c

    /*
     * Things that are common to all presets
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
   e32ec:	b951      	cbnz	r1, e3304 <mbedtls_ssl_config_defaults+0x2c>
    {
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
   e32ee:	2102      	movs	r1, #2
   e32f0:	b2c2      	uxtb	r2, r0
   e32f2:	f361 0283 	bfi	r2, r1, #2, #2
   e32f6:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
        conf->session_tickets = MBEDTLS_SSL_SESSION_TICKETS_ENABLED;
   e32fa:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
   e32fe:	430a      	orrs	r2, r1
   e3300:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
   e3304:	2b02      	cmp	r3, #2
   e3306:	f04f 0303 	mov.w	r3, #3
    {
        /*
         * NSA Suite B
         */
        case MBEDTLS_SSL_PRESET_SUITEB:
            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
   e330a:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
   e330e:	f884 307b 	strb.w	r3, [r4, #123]	; 0x7b
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
   e3312:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
   e3316:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
   e331a:	d10b      	bne.n	e3334 <mbedtls_ssl_config_defaults+0x5c>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   ssl_preset_suiteb_ciphersuites;
   e331c:	4b0d      	ldr	r3, [pc, #52]	; (e3354 <mbedtls_ssl_config_defaults+0x7c>)
   e331e:	60e3      	str	r3, [r4, #12]
   e3320:	60a3      	str	r3, [r4, #8]
   e3322:	6063      	str	r3, [r4, #4]
   e3324:	6023      	str	r3, [r4, #0]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
   e3326:	4b0c      	ldr	r3, [pc, #48]	; (e3358 <mbedtls_ssl_config_defaults+0x80>)
   e3328:	64e3      	str	r3, [r4, #76]	; 0x4c
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_suiteb_hashes;
   e332a:	4b0c      	ldr	r3, [pc, #48]	; (e335c <mbedtls_ssl_config_defaults+0x84>)
   e332c:	65e3      	str	r3, [r4, #92]	; 0x5c
#endif

#if defined(MBEDTLS_ECP_C)
            conf->curve_list = ssl_preset_suiteb_curves;
   e332e:	4b0c      	ldr	r3, [pc, #48]	; (e3360 <mbedtls_ssl_config_defaults+0x88>)
   e3330:	6623      	str	r3, [r4, #96]	; 0x60
#endif
            break;
   e3332:	e00c      	b.n	e334e <mbedtls_ssl_config_defaults+0x76>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
   e3334:	f7fd fce6 	bl	e0d04 <mbedtls_ssl_list_ciphersuites>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
   e3338:	4b0a      	ldr	r3, [pc, #40]	; (e3364 <mbedtls_ssl_config_defaults+0x8c>)
   e333a:	64e3      	str	r3, [r4, #76]	; 0x4c
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
   e333c:	4b0a      	ldr	r3, [pc, #40]	; (e3368 <mbedtls_ssl_config_defaults+0x90>)

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
   e333e:	60e0      	str	r0, [r4, #12]
   e3340:	60a0      	str	r0, [r4, #8]
   e3342:	6060      	str	r0, [r4, #4]
   e3344:	6020      	str	r0, [r4, #0]
#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
   e3346:	65e3      	str	r3, [r4, #92]	; 0x5c
#endif

#if defined(MBEDTLS_ECP_C)
            conf->curve_list = mbedtls_ecp_grp_id_list();
   e3348:	f7f5 fcc8 	bl	d8cdc <mbedtls_ecp_grp_id_list>
   e334c:	6620      	str	r0, [r4, #96]	; 0x60
            conf->dhm_min_bitlen = 1024;
#endif
    }

    return( 0 );
}
   e334e:	2000      	movs	r0, #0
   e3350:	bd10      	pop	{r4, pc}
   e3352:	bf00      	nop
   e3354:	2003b9ec 	.word	0x2003b9ec
   e3358:	000ea8e8 	.word	0x000ea8e8
   e335c:	2003ba14 	.word	0x2003ba14
   e3360:	2003ba10 	.word	0x2003ba10
   e3364:	000ea1dc 	.word	0x000ea1dc
   e3368:	2003b9f8 	.word	0x2003b9f8

000e336c <mbedtls_ssl_config_free>:

/*
 * Free mbedtls_ssl_config
 */
void mbedtls_ssl_config_free( mbedtls_ssl_config *conf )
{
   e336c:	b538      	push	{r3, r4, r5, lr}
   e336e:	4604      	mov	r4, r0
    mbedtls_mpi_free( &conf->dhm_P );
    mbedtls_mpi_free( &conf->dhm_G );
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( conf->psk != NULL )
   e3370:	6e40      	ldr	r0, [r0, #100]	; 0x64
   e3372:	b140      	cbz	r0, e3386 <mbedtls_ssl_config_free+0x1a>
    {
        mbedtls_platform_zeroize( conf->psk, conf->psk_len );
   e3374:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   e3376:	f7f9 f93b 	bl	dc5f0 <mbedtls_platform_zeroize>
        mbedtls_free( conf->psk );
   e337a:	6e60      	ldr	r0, [r4, #100]	; 0x64
   e337c:	f002 fbe0 	bl	e5b40 <free>
        conf->psk = NULL;
   e3380:	2300      	movs	r3, #0
   e3382:	6663      	str	r3, [r4, #100]	; 0x64
        conf->psk_len = 0;
   e3384:	66a3      	str	r3, [r4, #104]	; 0x68
    }

    if( conf->psk_identity != NULL )
   e3386:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   e3388:	b140      	cbz	r0, e339c <mbedtls_ssl_config_free+0x30>
    {
        mbedtls_platform_zeroize( conf->psk_identity, conf->psk_identity_len );
   e338a:	6f21      	ldr	r1, [r4, #112]	; 0x70
   e338c:	f7f9 f930 	bl	dc5f0 <mbedtls_platform_zeroize>
        mbedtls_free( conf->psk_identity );
   e3390:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   e3392:	f002 fbd5 	bl	e5b40 <free>
        conf->psk_identity = NULL;
   e3396:	2300      	movs	r3, #0
   e3398:	66e3      	str	r3, [r4, #108]	; 0x6c
        conf->psk_identity_len = 0;
   e339a:	6723      	str	r3, [r4, #112]	; 0x70
    }
#endif

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
   e339c:	6d20      	ldr	r0, [r4, #80]	; 0x50
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static void ssl_key_cert_free( mbedtls_ssl_key_cert *key_cert )
{
    mbedtls_ssl_key_cert *cur = key_cert, *next;

    while( cur != NULL )
   e339e:	b120      	cbz	r0, e33aa <mbedtls_ssl_config_free+0x3e>
    {
        next = cur->next;
   e33a0:	6885      	ldr	r5, [r0, #8]
        mbedtls_free( cur );
   e33a2:	f002 fbcd 	bl	e5b40 <free>
        cur = next;
   e33a6:	4628      	mov	r0, r5
   e33a8:	e7f9      	b.n	e339e <mbedtls_ssl_config_free+0x32>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_platform_zeroize( conf, sizeof( mbedtls_ssl_config ) );
   e33aa:	4620      	mov	r0, r4
   e33ac:	2180      	movs	r1, #128	; 0x80
}
   e33ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_platform_zeroize( conf, sizeof( mbedtls_ssl_config ) );
   e33b2:	f7f9 b91d 	b.w	dc5f0 <mbedtls_platform_zeroize>

000e33b6 <mbedtls_ssl_sig_from_pk>:
    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
   e33b6:	b510      	push	{r4, lr}
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
   e33b8:	2101      	movs	r1, #1
    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
   e33ba:	4604      	mov	r4, r0
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
   e33bc:	f7f7 fe9e 	bl	db0fc <mbedtls_pk_can_do>
   e33c0:	b940      	cbnz	r0, e33d4 <mbedtls_ssl_sig_from_pk+0x1e>
        return( MBEDTLS_SSL_SIG_RSA );
#endif
#if defined(MBEDTLS_ECDSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
   e33c2:	2104      	movs	r1, #4
   e33c4:	4620      	mov	r0, r4
   e33c6:	f7f7 fe99 	bl	db0fc <mbedtls_pk_can_do>
   e33ca:	2800      	cmp	r0, #0
        return( MBEDTLS_SSL_SIG_ECDSA );
#endif
    return( MBEDTLS_SSL_SIG_ANON );
   e33cc:	bf14      	ite	ne
   e33ce:	2003      	movne	r0, #3
   e33d0:	2000      	moveq	r0, #0
   e33d2:	bd10      	pop	{r4, pc}
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
        return( MBEDTLS_SSL_SIG_RSA );
   e33d4:	2001      	movs	r0, #1
#if defined(MBEDTLS_ECDSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
        return( MBEDTLS_SSL_SIG_ECDSA );
#endif
    return( MBEDTLS_SSL_SIG_ANON );
}
   e33d6:	bd10      	pop	{r4, pc}

000e33d8 <mbedtls_ssl_pk_alg_from_sig>:
    }
}

mbedtls_pk_type_t mbedtls_ssl_pk_alg_from_sig( unsigned char sig )
{
    switch( sig )
   e33d8:	2801      	cmp	r0, #1
   e33da:	d003      	beq.n	e33e4 <mbedtls_ssl_pk_alg_from_sig+0xc>
   e33dc:	2803      	cmp	r0, #3
#if defined(MBEDTLS_ECDSA_C)
        case MBEDTLS_SSL_SIG_ECDSA:
            return( MBEDTLS_PK_ECDSA );
#endif
        default:
            return( MBEDTLS_PK_NONE );
   e33de:	bf0c      	ite	eq
   e33e0:	2004      	moveq	r0, #4
   e33e2:	2000      	movne	r0, #0
    }
}
   e33e4:	4770      	bx	lr
	...

000e33e8 <mbedtls_ssl_md_alg_from_hash>:

/*
 * Convert from MBEDTLS_SSL_HASH_XXX to MBEDTLS_MD_XXX
 */
mbedtls_md_type_t mbedtls_ssl_md_alg_from_hash( unsigned char hash )
{
   e33e8:	3802      	subs	r0, #2
   e33ea:	b2c0      	uxtb	r0, r0
   e33ec:	2804      	cmp	r0, #4
   e33ee:	bf9a      	itte	ls
   e33f0:	4b01      	ldrls	r3, [pc, #4]	; (e33f8 <mbedtls_ssl_md_alg_from_hash+0x10>)
   e33f2:	5c18      	ldrbls	r0, [r3, r0]
   e33f4:	2000      	movhi	r0, #0
            return( MBEDTLS_MD_SHA512 );
#endif
        default:
            return( MBEDTLS_MD_NONE );
    }
}
   e33f6:	4770      	bx	lr
   e33f8:	000ea070 	.word	0x000ea070

000e33fc <mbedtls_ssl_hash_from_md_alg>:

/*
 * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
 */
unsigned char mbedtls_ssl_hash_from_md_alg( int md )
{
   e33fc:	3804      	subs	r0, #4
   e33fe:	2804      	cmp	r0, #4
   e3400:	bf9a      	itte	ls
   e3402:	4b02      	ldrls	r3, [pc, #8]	; (e340c <mbedtls_ssl_hash_from_md_alg+0x10>)
   e3404:	5c18      	ldrbls	r0, [r3, r0]
    switch( md )
   e3406:	2000      	movhi	r0, #0
            return( MBEDTLS_SSL_HASH_SHA512 );
#endif
        default:
            return( MBEDTLS_SSL_HASH_NONE );
    }
}
   e3408:	4770      	bx	lr
   e340a:	bf00      	nop
   e340c:	000ea0da 	.word	0x000ea0da

000e3410 <mbedtls_ssl_check_curve>:
 */
int mbedtls_ssl_check_curve( const mbedtls_ssl_context *ssl, mbedtls_ecp_group_id grp_id )
{
    const mbedtls_ecp_group_id *gid;

    if( ssl->conf->curve_list == NULL )
   e3410:	6803      	ldr	r3, [r0, #0]
   e3412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   e3414:	b13b      	cbz	r3, e3426 <mbedtls_ssl_check_curve+0x16>
   e3416:	3b01      	subs	r3, #1
        return( -1 );

    for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
   e3418:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   e341c:	b11a      	cbz	r2, e3426 <mbedtls_ssl_check_curve+0x16>
        if( *gid == grp_id )
   e341e:	428a      	cmp	r2, r1
   e3420:	d1fa      	bne.n	e3418 <mbedtls_ssl_check_curve+0x8>
            return( 0 );
   e3422:	2000      	movs	r0, #0
   e3424:	4770      	bx	lr
int mbedtls_ssl_check_curve( const mbedtls_ssl_context *ssl, mbedtls_ecp_group_id grp_id )
{
    const mbedtls_ecp_group_id *gid;

    if( ssl->conf->curve_list == NULL )
        return( -1 );
   e3426:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
        if( *gid == grp_id )
            return( 0 );

    return( -1 );
}
   e342a:	4770      	bx	lr

000e342c <mbedtls_ssl_check_sig_hash>:
int mbedtls_ssl_check_sig_hash( const mbedtls_ssl_context *ssl,
                                mbedtls_md_type_t md )
{
    const int *cur;

    if( ssl->conf->sig_hashes == NULL )
   e342c:	6803      	ldr	r3, [r0, #0]
   e342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   e3430:	b13b      	cbz	r3, e3442 <mbedtls_ssl_check_sig_hash+0x16>
   e3432:	3b04      	subs	r3, #4
        return( -1 );

    for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
   e3434:	f853 2f04 	ldr.w	r2, [r3, #4]!
   e3438:	b11a      	cbz	r2, e3442 <mbedtls_ssl_check_sig_hash+0x16>
        if( *cur == (int) md )
   e343a:	428a      	cmp	r2, r1
   e343c:	d1fa      	bne.n	e3434 <mbedtls_ssl_check_sig_hash+0x8>
            return( 0 );
   e343e:	2000      	movs	r0, #0
   e3440:	4770      	bx	lr
                                mbedtls_md_type_t md )
{
    const int *cur;

    if( ssl->conf->sig_hashes == NULL )
        return( -1 );
   e3442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
        if( *cur == (int) md )
            return( 0 );

    return( -1 );
}
   e3446:	4770      	bx	lr

000e3448 <mbedtls_ssl_check_cert_usage>:
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
   e3448:	2a01      	cmp	r2, #1
#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
                          int cert_endpoint,
                          uint32_t *flags )
{
   e344a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e344c:	4607      	mov	r7, r0
   e344e:	4616      	mov	r6, r2
   e3450:	461d      	mov	r5, r3
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
   e3452:	d110      	bne.n	e3476 <mbedtls_ssl_check_cert_usage+0x2e>
    {
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
   e3454:	7a8a      	ldrb	r2, [r1, #10]
   e3456:	2a0a      	cmp	r2, #10
   e3458:	d80f      	bhi.n	e347a <mbedtls_ssl_check_cert_usage+0x32>
   e345a:	fa06 f202 	lsl.w	r2, r6, r2
   e345e:	f012 0f82 	tst.w	r2, #130	; 0x82
   e3462:	d10c      	bne.n	e347e <mbedtls_ssl_check_cert_usage+0x36>
   e3464:	f412 6fc0 	tst.w	r2, #1536	; 0x600
   e3468:	d10b      	bne.n	e3482 <mbedtls_ssl_check_cert_usage+0x3a>
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
   e346a:	f012 0f1c 	tst.w	r2, #28
   e346e:	bf14      	ite	ne
   e3470:	2180      	movne	r1, #128	; 0x80
   e3472:	2100      	moveq	r1, #0
   e3474:	e006      	b.n	e3484 <mbedtls_ssl_check_cert_usage+0x3c>
        }
    }
    else
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
   e3476:	2180      	movs	r1, #128	; 0x80
   e3478:	e004      	b.n	e3484 <mbedtls_ssl_check_cert_usage+0x3c>
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
   e347a:	2100      	movs	r1, #0
   e347c:	e002      	b.n	e3484 <mbedtls_ssl_check_cert_usage+0x3c>
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
        {
            case MBEDTLS_KEY_EXCHANGE_RSA:
            case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
                usage = MBEDTLS_X509_KU_KEY_ENCIPHERMENT;
   e347e:	2120      	movs	r1, #32
   e3480:	e000      	b.n	e3484 <mbedtls_ssl_check_cert_usage+0x3c>
                usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
                break;

            case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
            case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
   e3482:	2108      	movs	r1, #8
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
   e3484:	4638      	mov	r0, r7
   e3486:	f001 fa81 	bl	e498c <mbedtls_x509_crt_check_key_usage>
   e348a:	b130      	cbz	r0, e349a <mbedtls_ssl_check_cert_usage+0x52>
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
   e348c:	682b      	ldr	r3, [r5, #0]
   e348e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   e3492:	602b      	str	r3, [r5, #0]
        ret = -1;
   e3494:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   e3498:	e000      	b.n	e349c <mbedtls_ssl_check_cert_usage+0x54>
int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
   e349a:	4604      	mov	r4, r0
    {
        ext_oid = MBEDTLS_OID_CLIENT_AUTH;
        ext_len = MBEDTLS_OID_SIZE( MBEDTLS_OID_CLIENT_AUTH );
    }

    if( mbedtls_x509_crt_check_extended_key_usage( cert, ext_oid, ext_len ) != 0 )
   e349c:	4b08      	ldr	r3, [pc, #32]	; (e34c0 <mbedtls_ssl_check_cert_usage+0x78>)
   e349e:	4909      	ldr	r1, [pc, #36]	; (e34c4 <mbedtls_ssl_check_cert_usage+0x7c>)
   e34a0:	2208      	movs	r2, #8
   e34a2:	2e01      	cmp	r6, #1
   e34a4:	bf18      	it	ne
   e34a6:	4619      	movne	r1, r3
   e34a8:	4638      	mov	r0, r7
   e34aa:	f001 fa93 	bl	e49d4 <mbedtls_x509_crt_check_extended_key_usage>
   e34ae:	b128      	cbz	r0, e34bc <mbedtls_ssl_check_cert_usage+0x74>
    {
        *flags |= MBEDTLS_X509_BADCERT_EXT_KEY_USAGE;
   e34b0:	682b      	ldr	r3, [r5, #0]
   e34b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   e34b6:	602b      	str	r3, [r5, #0]
        ret = -1;
   e34b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    }
#endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */

    return( ret );
}
   e34bc:	4620      	mov	r0, r4
   e34be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e34c0:	000e8d8a 	.word	0x000e8d8a
   e34c4:	000e8d52 	.word	0x000e8d52

000e34c8 <mbedtls_ssl_parse_certificate>:

    return( 0 );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
   e34c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;
    const mbedtls_ssl_ciphersuite_t * const ciphersuite_info =
          ssl->transform_negotiate->ciphersuite_info;
   e34cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
   e34ce:	f8d3 9000 	ldr.w	r9, [r3]
#endif
    void *rs_ctx = NULL;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e34d2:	f899 200a 	ldrb.w	r2, [r9, #10]
   e34d6:	2a0b      	cmp	r2, #11

    return( 0 );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
   e34d8:	b086      	sub	sp, #24
   e34da:	4604      	mov	r4, r0
#endif
    void *rs_ctx = NULL;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e34dc:	d808      	bhi.n	e34f0 <mbedtls_ssl_parse_certificate+0x28>
   e34de:	f44f 6316 	mov.w	r3, #2400	; 0x960
   e34e2:	40d3      	lsrs	r3, r2
   e34e4:	f003 0301 	and.w	r3, r3, #1
   e34e8:	f083 0001 	eor.w	r0, r3, #1
   e34ec:	2b00      	cmp	r3, #0
   e34ee:	d143      	bne.n	e3578 <mbedtls_ssl_parse_certificate+0xb0>
#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    const int authmode = ssl->handshake->sni_authmode != MBEDTLS_SSL_VERIFY_UNSET
                       ? ssl->handshake->sni_authmode
                       : ssl->conf->authmode;
#else
    const int authmode = ssl->conf->authmode;
   e34f0:	6823      	ldr	r3, [r4, #0]
    {
        goto crt_verify;
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e34f2:	2101      	movs	r1, #1
   e34f4:	4620      	mov	r0, r4
#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    const int authmode = ssl->handshake->sni_authmode != MBEDTLS_SSL_VERIFY_UNSET
                       ? ssl->handshake->sni_authmode
                       : ssl->conf->authmode;
#else
    const int authmode = ssl->conf->authmode;
   e34f6:	f893 707c 	ldrb.w	r7, [r3, #124]	; 0x7c
    {
        goto crt_verify;
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e34fa:	f7ff f91d 	bl	e2738 <mbedtls_ssl_read_record>
#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    const int authmode = ssl->handshake->sni_authmode != MBEDTLS_SSL_VERIFY_UNSET
                       ? ssl->handshake->sni_authmode
                       : ssl->conf->authmode;
#else
    const int authmode = ssl->conf->authmode;
   e34fe:	f3c7 0781 	ubfx	r7, r7, #2, #2
    {
        goto crt_verify;
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e3502:	4605      	mov	r5, r0
   e3504:	2800      	cmp	r0, #0
   e3506:	d14b      	bne.n	e35a0 <mbedtls_ssl_parse_certificate+0xd8>
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
          MBEDTLS_SSL_PROTO_TLS1_2 */
#endif /* MBEDTLS_SSL_SRV_C */

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e3508:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e350a:	2b16      	cmp	r3, #22
   e350c:	d006      	beq.n	e351c <mbedtls_ssl_parse_certificate+0x54>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   e350e:	220a      	movs	r2, #10
   e3510:	2102      	movs	r1, #2
   e3512:	4620      	mov	r0, r4
   e3514:	f7ff f8f4 	bl	e2700 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e3518:	4884      	ldr	r0, [pc, #528]	; (e372c <mbedtls_ssl_parse_certificate+0x264>)
   e351a:	e02d      	b.n	e3578 <mbedtls_ssl_parse_certificate+0xb0>
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
   e351c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   e351e:	7813      	ldrb	r3, [r2, #0]
   e3520:	2b0b      	cmp	r3, #11
   e3522:	d10b      	bne.n	e353c <mbedtls_ssl_parse_certificate+0x74>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
   e3524:	6fa1      	ldr	r1, [r4, #120]	; 0x78
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
   e3526:	2909      	cmp	r1, #9
   e3528:	d908      	bls.n	e353c <mbedtls_ssl_parse_certificate+0x74>
    /*
     * Same message structure as in mbedtls_ssl_write_certificate()
     */
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];

    if( ssl->in_msg[i] != 0 ||
   e352a:	7913      	ldrb	r3, [r2, #4]
   e352c:	b933      	cbnz	r3, e353c <mbedtls_ssl_parse_certificate+0x74>
   e352e:	7950      	ldrb	r0, [r2, #5]
   e3530:	7993      	ldrb	r3, [r2, #6]
   e3532:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   e3536:	3307      	adds	r3, #7
   e3538:	4299      	cmp	r1, r3
   e353a:	d006      	beq.n	e354a <mbedtls_ssl_parse_certificate+0x82>
    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e353c:	2232      	movs	r2, #50	; 0x32
   e353e:	2102      	movs	r1, #2
   e3540:	4620      	mov	r0, r4
   e3542:	f7ff f8dd 	bl	e2700 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
   e3546:	487a      	ldr	r0, [pc, #488]	; (e3730 <mbedtls_ssl_parse_certificate+0x268>)
   e3548:	e016      	b.n	e3578 <mbedtls_ssl_parse_certificate+0xb0>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
    }

    /* In case we tried to reuse a session but it failed */
    if( ssl->session_negotiate->peer_cert != NULL )
   e354a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e354c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e354e:	b128      	cbz	r0, e355c <mbedtls_ssl_parse_certificate+0x94>
    {
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
   e3550:	f001 fcb7 	bl	e4ec2 <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
   e3554:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e3556:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e3558:	f002 faf2 	bl	e5b40 <free>
    }

    if( ( ssl->session_negotiate->peer_cert = (mbedtls_x509_crt *)mbedtls_calloc( 1,
   e355c:	f44f 719a 	mov.w	r1, #308	; 0x134
   e3560:	2001      	movs	r0, #1
   e3562:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   e3564:	f004 fc5a 	bl	e7e1c <calloc>
   e3568:	65f0      	str	r0, [r6, #92]	; 0x5c
   e356a:	b948      	cbnz	r0, e3580 <mbedtls_ssl_parse_certificate+0xb8>
                    sizeof( mbedtls_x509_crt ) ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
                       sizeof( mbedtls_x509_crt ) ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   e356c:	2250      	movs	r2, #80	; 0x50
   e356e:	2102      	movs	r1, #2
   e3570:	4620      	mov	r0, r4
   e3572:	f7ff f8c5 	bl	e2700 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e3576:	486f      	ldr	r0, [pc, #444]	; (e3734 <mbedtls_ssl_parse_certificate+0x26c>)
        {
            ret = 0;
        }
#endif

        ssl->state++;
   e3578:	6863      	ldr	r3, [r4, #4]
   e357a:	3301      	adds	r3, #1
   e357c:	6063      	str	r3, [r4, #4]
        return( ret );
   e357e:	e0d1      	b.n	e3724 <mbedtls_ssl_parse_certificate+0x25c>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
   e3580:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
   e3582:	f8df a1b8 	ldr.w	sl, [pc, #440]	; e373c <mbedtls_ssl_parse_certificate+0x274>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
   e3586:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e3588:	f001 fc96 	bl	e4eb8 <mbedtls_x509_crt_init>

    i += 3;
   e358c:	2607      	movs	r6, #7

    while( i < ssl->in_hslen )
   e358e:	f8d4 e078 	ldr.w	lr, [r4, #120]	; 0x78
   e3592:	45b6      	cmp	lr, r6
   e3594:	d806      	bhi.n	e35a4 <mbedtls_ssl_parse_certificate+0xdc>
crt_verify:
    if( ssl->handshake->ecrs_enabled)
        rs_ctx = &ssl->handshake->ecrs_ctx;
#endif

    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
   e3596:	2f00      	cmp	r7, #0
   e3598:	d136      	bne.n	e3608 <mbedtls_ssl_parse_certificate+0x140>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Certificate verification flags clear" ) );
        }
#endif /* MBEDTLS_DEBUG_C */
    }

    ssl->state++;
   e359a:	6863      	ldr	r3, [r4, #4]
   e359c:	3301      	adds	r3, #1
   e359e:	6063      	str	r3, [r4, #4]
   e35a0:	4628      	mov	r0, r5
   e35a2:	e0bf      	b.n	e3724 <mbedtls_ssl_parse_certificate+0x25c>

    i += 3;

    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
   e35a4:	1cf1      	adds	r1, r6, #3
   e35a6:	458e      	cmp	lr, r1
   e35a8:	d3c8      	bcc.n	e353c <mbedtls_ssl_parse_certificate+0x74>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
        if( ssl->in_msg[i] != 0 )
   e35aa:	6e60      	ldr	r0, [r4, #100]	; 0x64
   e35ac:	5d83      	ldrb	r3, [r0, r6]
   e35ae:	2b00      	cmp	r3, #0
   e35b0:	d1c4      	bne.n	e353c <mbedtls_ssl_parse_certificate+0x74>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
   e35b2:	4406      	add	r6, r0
            | (unsigned int) ssl->in_msg[i + 2];
   e35b4:	7872      	ldrb	r2, [r6, #1]
   e35b6:	78b3      	ldrb	r3, [r6, #2]
   e35b8:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        i += 3;

        if( n < 128 || i + n > ssl->in_hslen )
   e35bc:	2a7f      	cmp	r2, #127	; 0x7f
   e35be:	d9bd      	bls.n	e353c <mbedtls_ssl_parse_certificate+0x74>
   e35c0:	188e      	adds	r6, r1, r2
   e35c2:	45b6      	cmp	lr, r6
   e35c4:	d3ba      	bcc.n	e353c <mbedtls_ssl_parse_certificate+0x74>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
   e35c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e35c8:	4401      	add	r1, r0
   e35ca:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e35cc:	f001 fcd6 	bl	e4f7c <mbedtls_x509_crt_parse_der>
                                  ssl->in_msg + i, n );
        switch( ret )
   e35d0:	4550      	cmp	r0, sl
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
   e35d2:	4680      	mov	r8, r0
                                  ssl->in_msg + i, n );
        switch( ret )
   e35d4:	d0db      	beq.n	e358e <mbedtls_ssl_parse_certificate+0xc6>
   e35d6:	dc03      	bgt.n	e35e0 <mbedtls_ssl_parse_certificate+0x118>
   e35d8:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
   e35dc:	d00a      	beq.n	e35f4 <mbedtls_ssl_parse_certificate+0x12c>
   e35de:	e007      	b.n	e35f0 <mbedtls_ssl_parse_certificate+0x128>
   e35e0:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
   e35e4:	d002      	beq.n	e35ec <mbedtls_ssl_parse_certificate+0x124>
   e35e6:	2800      	cmp	r0, #0
   e35e8:	d0d1      	beq.n	e358e <mbedtls_ssl_parse_certificate+0xc6>
   e35ea:	e001      	b.n	e35f0 <mbedtls_ssl_parse_certificate+0x128>
        case MBEDTLS_ERR_X509_ALLOC_FAILED:
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
            goto crt_parse_der_failed;

        case MBEDTLS_ERR_X509_UNKNOWN_VERSION:
            alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
   e35ec:	222b      	movs	r2, #43	; 0x2b
   e35ee:	e002      	b.n	e35f6 <mbedtls_ssl_parse_certificate+0x12e>
            goto crt_parse_der_failed;

        default:
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
   e35f0:	222a      	movs	r2, #42	; 0x2a
   e35f2:	e000      	b.n	e35f6 <mbedtls_ssl_parse_certificate+0x12e>
            /* Ignore certificate with an unknown algorithm: maybe a
               prior certificate was already trusted. */
            break;

        case MBEDTLS_ERR_X509_ALLOC_FAILED:
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
   e35f4:	2250      	movs	r2, #80	; 0x50
            goto crt_parse_der_failed;

        default:
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
        crt_parse_der_failed:
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
   e35f6:	2102      	movs	r1, #2
   e35f8:	4620      	mov	r0, r4
   e35fa:	f7ff f881 	bl	e2700 <mbedtls_ssl_send_alert_message>
           let it decide whether to alert. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ( ret = ssl_parse_certificate_chain( ssl ) ) != 0 )
   e35fe:	f1b8 0f00 	cmp.w	r8, #0
   e3602:	d0c8      	beq.n	e3596 <mbedtls_ssl_parse_certificate+0xce>
   e3604:	4640      	mov	r0, r8
   e3606:	e7b7      	b.n	e3578 <mbedtls_ssl_parse_certificate+0xb0>
    {
        mbedtls_x509_crt *ca_chain;
        mbedtls_x509_crl *ca_crl;

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
        if( ssl->handshake->sni_ca_chain != NULL )
   e3608:	6b22      	ldr	r2, [r4, #48]	; 0x30
   e360a:	6823      	ldr	r3, [r4, #0]
   e360c:	f8d2 8150 	ldr.w	r8, [r2, #336]	; 0x150
   e3610:	f1b8 0f00 	cmp.w	r8, #0
   e3614:	d002      	beq.n	e361c <mbedtls_ssl_parse_certificate+0x154>
        {
            ca_chain = ssl->handshake->sni_ca_chain;
            ca_crl   = ssl->handshake->sni_ca_crl;
   e3616:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
   e361a:	e002      	b.n	e3622 <mbedtls_ssl_parse_certificate+0x15a>
        }
        else
#endif
        {
            ca_chain = ssl->conf->ca_chain;
   e361c:	f8d3 8054 	ldr.w	r8, [r3, #84]	; 0x54
            ca_crl   = ssl->conf->ca_crl;
   e3620:	6d9a      	ldr	r2, [r3, #88]	; 0x58

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_restartable(
                                ssl->session_negotiate->peer_cert,
   e3622:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        }

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_restartable(
   e3624:	2100      	movs	r1, #0
   e3626:	9104      	str	r1, [sp, #16]
   e3628:	6b99      	ldr	r1, [r3, #56]	; 0x38
   e362a:	9103      	str	r1, [sp, #12]
   e362c:	6b59      	ldr	r1, [r3, #52]	; 0x34
   e362e:	9102      	str	r1, [sp, #8]
   e3630:	f100 0160 	add.w	r1, r0, #96	; 0x60
   e3634:	9101      	str	r1, [sp, #4]
   e3636:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   e363a:	9100      	str	r1, [sp, #0]
   e363c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   e363e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   e3640:	4641      	mov	r1, r8
   e3642:	f001 fa0b 	bl	e4a5c <mbedtls_x509_crt_verify_restartable>
         * Secondary checks: always done, but change 'ret' only if it was 0
         */

#if defined(MBEDTLS_ECP_C)
        {
            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;
   e3646:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e3648:	f8d3 a05c 	ldr.w	sl, [r3, #92]	; 0x5c
        }

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_restartable(
   e364c:	4606      	mov	r6, r0
#if defined(MBEDTLS_ECP_C)
        {
            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;

            /* If certificate uses an EC key, make sure the curve is OK */
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
   e364e:	2102      	movs	r1, #2
   e3650:	f10a 00bc 	add.w	r0, sl, #188	; 0xbc
   e3654:	f7f7 fd52 	bl	db0fc <mbedtls_pk_can_do>
   e3658:	b138      	cbz	r0, e366a <mbedtls_ssl_parse_certificate+0x1a2>
                mbedtls_ssl_check_curve( ssl, mbedtls_pk_ec( *pk )->grp.id ) != 0 )
   e365a:	f8da 30c0 	ldr.w	r3, [sl, #192]	; 0xc0
   e365e:	4620      	mov	r0, r4
   e3660:	7819      	ldrb	r1, [r3, #0]
   e3662:	f7ff fed5 	bl	e3410 <mbedtls_ssl_check_curve>
#if defined(MBEDTLS_ECP_C)
        {
            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;

            /* If certificate uses an EC key, make sure the curve is OK */
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
   e3666:	2800      	cmp	r0, #0
   e3668:	d14c      	bne.n	e3704 <mbedtls_ssl_parse_certificate+0x23c>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
   e366a:	6823      	ldr	r3, [r4, #0]
   e366c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e366e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   e3672:	f002 0201 	and.w	r2, r2, #1
   e3676:	f100 0360 	add.w	r3, r0, #96	; 0x60
   e367a:	f082 0201 	eor.w	r2, r2, #1
   e367e:	4649      	mov	r1, r9
   e3680:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   e3682:	f7ff fee1 	bl	e3448 <mbedtls_ssl_check_cert_usage>
   e3686:	b100      	cbz	r0, e368a <mbedtls_ssl_parse_certificate+0x1c2>
                                 ciphersuite_info,
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
   e3688:	b19e      	cbz	r6, e36b2 <mbedtls_ssl_parse_certificate+0x1ea>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
   e368a:	2f01      	cmp	r7, #1
   e368c:	d106      	bne.n	e369c <mbedtls_ssl_parse_certificate+0x1d4>
   e368e:	f516 5f1c 	cmn.w	r6, #9984	; 0x2700
   e3692:	d082      	beq.n	e359a <mbedtls_ssl_parse_certificate+0xd2>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
   e3694:	f516 4ff4 	cmn.w	r6, #31232	; 0x7a00
   e3698:	f43f af7f 	beq.w	e359a <mbedtls_ssl_parse_certificate+0xd2>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
   e369c:	f1b8 0f00 	cmp.w	r8, #0
   e36a0:	d101      	bne.n	e36a6 <mbedtls_ssl_parse_certificate+0x1de>
   e36a2:	2f02      	cmp	r7, #2
   e36a4:	d003      	beq.n	e36ae <mbedtls_ssl_parse_certificate+0x1e6>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
        }

        if( ret != 0 )
   e36a6:	2e00      	cmp	r6, #0
   e36a8:	f43f af77 	beq.w	e359a <mbedtls_ssl_parse_certificate+0xd2>
   e36ac:	e008      	b.n	e36c0 <mbedtls_ssl_parse_certificate+0x1f8>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
   e36ae:	4e22      	ldr	r6, [pc, #136]	; (e3738 <mbedtls_ssl_parse_certificate+0x270>)
   e36b0:	e006      	b.n	e36c0 <mbedtls_ssl_parse_certificate+0x1f8>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
   e36b2:	2f01      	cmp	r7, #1
   e36b4:	f43f af71 	beq.w	e359a <mbedtls_ssl_parse_certificate+0xd2>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
   e36b8:	f1b8 0f00 	cmp.w	r8, #0
   e36bc:	d02c      	beq.n	e3718 <mbedtls_ssl_parse_certificate+0x250>
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
   e36be:	4e1c      	ldr	r6, [pc, #112]	; (e3730 <mbedtls_ssl_parse_certificate+0x268>)
            uint8_t alert;

            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
   e36c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e36c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   e36c4:	05df      	lsls	r7, r3, #23
   e36c6:	d40e      	bmi.n	e36e6 <mbedtls_ssl_parse_certificate+0x21e>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
   e36c8:	075d      	lsls	r5, r3, #29
   e36ca:	d40e      	bmi.n	e36ea <mbedtls_ssl_parse_certificate+0x222>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
   e36cc:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
   e36d0:	d10d      	bne.n	e36ee <mbedtls_ssl_parse_certificate+0x226>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
   e36d2:	07d8      	lsls	r0, r3, #31
   e36d4:	d40d      	bmi.n	e36f2 <mbedtls_ssl_parse_certificate+0x22a>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
   e36d6:	0799      	lsls	r1, r3, #30
   e36d8:	d40d      	bmi.n	e36f6 <mbedtls_ssl_parse_certificate+0x22e>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
   e36da:	f013 0f08 	tst.w	r3, #8
   e36de:	bf14      	ite	ne
   e36e0:	2230      	movne	r2, #48	; 0x30
   e36e2:	222e      	moveq	r2, #46	; 0x2e
   e36e4:	e008      	b.n	e36f8 <mbedtls_ssl_parse_certificate+0x230>

            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
   e36e6:	2231      	movs	r2, #49	; 0x31
   e36e8:	e006      	b.n	e36f8 <mbedtls_ssl_parse_certificate+0x230>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
   e36ea:	222a      	movs	r2, #42	; 0x2a
   e36ec:	e004      	b.n	e36f8 <mbedtls_ssl_parse_certificate+0x230>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
   e36ee:	222b      	movs	r2, #43	; 0x2b
   e36f0:	e002      	b.n	e36f8 <mbedtls_ssl_parse_certificate+0x230>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
   e36f2:	222d      	movs	r2, #45	; 0x2d
   e36f4:	e000      	b.n	e36f8 <mbedtls_ssl_parse_certificate+0x230>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
   e36f6:	222c      	movs	r2, #44	; 0x2c
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            alert );
   e36f8:	2102      	movs	r1, #2
   e36fa:	4620      	mov	r0, r4
   e36fc:	f7ff f800 	bl	e2700 <mbedtls_ssl_send_alert_message>
   e3700:	4635      	mov	r5, r6
   e3702:	e74a      	b.n	e359a <mbedtls_ssl_parse_certificate+0xd2>

            /* If certificate uses an EC key, make sure the curve is OK */
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
                mbedtls_ssl_check_curve( ssl, mbedtls_pk_ec( *pk )->grp.id ) != 0 )
            {
                ssl->session_negotiate->verify_result |= MBEDTLS_X509_BADCERT_BAD_KEY;
   e3704:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e3706:	6e13      	ldr	r3, [r2, #96]	; 0x60
   e3708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   e370c:	6613      	str	r3, [r2, #96]	; 0x60

                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (EC key curve)" ) );
                if( ret == 0 )
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
   e370e:	4b08      	ldr	r3, [pc, #32]	; (e3730 <mbedtls_ssl_parse_certificate+0x268>)
   e3710:	2e00      	cmp	r6, #0
   e3712:	bf08      	it	eq
   e3714:	461e      	moveq	r6, r3
   e3716:	e7a8      	b.n	e366a <mbedtls_ssl_parse_certificate+0x1a2>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
   e3718:	4b07      	ldr	r3, [pc, #28]	; (e3738 <mbedtls_ssl_parse_certificate+0x270>)
   e371a:	4e05      	ldr	r6, [pc, #20]	; (e3730 <mbedtls_ssl_parse_certificate+0x268>)
   e371c:	2f02      	cmp	r7, #2
   e371e:	bf08      	it	eq
   e3720:	461e      	moveq	r6, r3
   e3722:	e7cd      	b.n	e36c0 <mbedtls_ssl_parse_certificate+0x1f8>
    ssl->state++;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );

    return( ret );
}
   e3724:	b006      	add	sp, #24
   e3726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e372a:	bf00      	nop
   e372c:	ffff8900 	.word	0xffff8900
   e3730:	ffff8600 	.word	0xffff8600
   e3734:	ffff8100 	.word	0xffff8100
   e3738:	ffff8980 	.word	0xffff8980
   e373c:	ffffd9d2 	.word	0xffffd9d2

000e3740 <mbedtls_ssl_write_version>:
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   e3740:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
   e3742:	7059      	strb	r1, [r3, #1]
   e3744:	4770      	bx	lr

000e3746 <mbedtls_ssl_read_version>:
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
   e3746:	781a      	ldrb	r2, [r3, #0]
   e3748:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
   e374a:	785b      	ldrb	r3, [r3, #1]
   e374c:	600b      	str	r3, [r1, #0]
   e374e:	4770      	bx	lr

000e3750 <mbedtls_ssl_get_key_exchange_md_tls1_2>:
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
int mbedtls_ssl_get_key_exchange_md_tls1_2( mbedtls_ssl_context *ssl,
                                            unsigned char *hash, size_t *hashlen,
                                            unsigned char *data, size_t data_len,
                                            mbedtls_md_type_t md_alg )
{
   e3750:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   e3754:	4605      	mov	r5, r0
    int ret = 0;
    mbedtls_md_context_t ctx;
    const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
   e3756:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
int mbedtls_ssl_get_key_exchange_md_tls1_2( mbedtls_ssl_context *ssl,
                                            unsigned char *hash, size_t *hashlen,
                                            unsigned char *data, size_t data_len,
                                            mbedtls_md_type_t md_alg )
{
   e375a:	4690      	mov	r8, r2
   e375c:	460e      	mov	r6, r1
   e375e:	461f      	mov	r7, r3
    int ret = 0;
    mbedtls_md_context_t ctx;
    const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
   e3760:	f7f7 f916 	bl	da990 <mbedtls_md_info_from_type>
   e3764:	4604      	mov	r4, r0
    *hashlen = mbedtls_md_get_size( md_info );
   e3766:	f7f7 fa4b 	bl	dac00 <mbedtls_md_get_size>
   e376a:	f8c8 0000 	str.w	r0, [r8]

    mbedtls_md_init( &ctx );
   e376e:	a801      	add	r0, sp, #4
   e3770:	f7f7 f91a 	bl	da9a8 <mbedtls_md_init>
     *     opaque client_random[32];
     *     opaque server_random[32];
     *     ServerDHParams params;
     * };
     */
    if( ( ret = mbedtls_md_setup( &ctx, md_info, 0 ) ) != 0 )
   e3774:	4621      	mov	r1, r4
   e3776:	2200      	movs	r2, #0
   e3778:	a801      	add	r0, sp, #4
   e377a:	f7f7 f935 	bl	da9e8 <mbedtls_md_setup>
   e377e:	4604      	mov	r4, r0
   e3780:	b9c8      	cbnz	r0, e37b6 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x66>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_starts( &ctx ) ) != 0 )
   e3782:	a801      	add	r0, sp, #4
   e3784:	f7f7 f952 	bl	daa2c <mbedtls_md_starts>
   e3788:	4604      	mov	r4, r0
   e378a:	b9a0      	cbnz	r0, e37b6 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x66>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_starts", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_update( &ctx, ssl->handshake->randbytes, 64 ) ) != 0 )
   e378c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   e378e:	2240      	movs	r2, #64	; 0x40
   e3790:	f501 712d 	add.w	r1, r1, #692	; 0x2b4
   e3794:	a801      	add	r0, sp, #4
   e3796:	f7f7 f953 	bl	daa40 <mbedtls_md_update>
   e379a:	4604      	mov	r4, r0
   e379c:	b958      	cbnz	r0, e37b6 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x66>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_update", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_update( &ctx, data, data_len ) ) != 0 )
   e379e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   e37a0:	4639      	mov	r1, r7
   e37a2:	a801      	add	r0, sp, #4
   e37a4:	f7f7 f94c 	bl	daa40 <mbedtls_md_update>
   e37a8:	4604      	mov	r4, r0
   e37aa:	b920      	cbnz	r0, e37b6 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x66>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_update", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_finish( &ctx, hash ) ) != 0 )
   e37ac:	4631      	mov	r1, r6
   e37ae:	a801      	add	r0, sp, #4
   e37b0:	f7f7 f950 	bl	daa54 <mbedtls_md_finish>
   e37b4:	4604      	mov	r4, r0
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_finish", ret );
        goto exit;
    }

exit:
    mbedtls_md_free( &ctx );
   e37b6:	a801      	add	r0, sp, #4
   e37b8:	f7f7 f8fb 	bl	da9b2 <mbedtls_md_free>

    if( ret != 0 )
   e37bc:	b124      	cbz	r4, e37c8 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x78>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   e37be:	2250      	movs	r2, #80	; 0x50
   e37c0:	2102      	movs	r1, #2
   e37c2:	4628      	mov	r0, r5
   e37c4:	f7fe ff9c 	bl	e2700 <mbedtls_ssl_send_alert_message>

    return( ret );
}
   e37c8:	4620      	mov	r0, r4
   e37ca:	b004      	add	sp, #16
   e37cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e37d0 <mbedtls_timing_get_timer.part.0>:
    (void) _beginthread( TimerProc, 0, NULL );
}

#else /* _WIN32 && !EFIX64 && !EFI32 */

unsigned long mbedtls_timing_get_timer( struct mbedtls_timing_hr_time *val, int reset )
   e37d0:	b513      	push	{r0, r1, r4, lr}
   e37d2:	4604      	mov	r4, r0
    }
    else
    {
        unsigned long delta;
        struct timeval now;
        gettimeofday( &now, NULL );
   e37d4:	2100      	movs	r1, #0
   e37d6:	4668      	mov	r0, sp
   e37d8:	f004 fbd4 	bl	e7f84 <gettimeofday>
        delta = ( now.tv_sec  - t->start.tv_sec  ) * 1000ul
              + ( now.tv_usec - t->start.tv_usec ) / 1000;
   e37dc:	9b00      	ldr	r3, [sp, #0]
   e37de:	6822      	ldr	r2, [r4, #0]
   e37e0:	6861      	ldr	r1, [r4, #4]
   e37e2:	1a9a      	subs	r2, r3, r2
   e37e4:	9b01      	ldr	r3, [sp, #4]
   e37e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   e37ea:	1a5b      	subs	r3, r3, r1
   e37ec:	fb93 f3f0 	sdiv	r3, r3, r0
        return( delta );
    }
}
   e37f0:	fb00 3002 	mla	r0, r0, r2, r3
   e37f4:	b002      	add	sp, #8
   e37f6:	bd10      	pop	{r4, pc}

000e37f8 <_gettimeofday>:
#define HAVE_HARDCLOCK

#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
   e37f8:	b538      	push	{r3, r4, r5, lr}
   e37fa:	4604      	mov	r4, r0
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
   e37fc:	f001 ffbc 	bl	e5778 <HAL_Timer_Get_Milli_Seconds>
   e3800:	4605      	mov	r5, r0
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
   e3802:	f001 ffc1 	bl	e5788 <HAL_RTC_Get_UnixTime>
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
   e3806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
   e380a:	6020      	str	r0, [r4, #0]
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
   e380c:	fbb5 f0f3 	udiv	r0, r5, r3
   e3810:	fb03 5010 	mls	r0, r3, r0, r5
   e3814:	4343      	muls	r3, r0
   e3816:	6063      	str	r3, [r4, #4]
    return 0;
} // end _gettimeofday()
   e3818:	2000      	movs	r0, #0
   e381a:	bd38      	pop	{r3, r4, r5, pc}

000e381c <mbedtls_timing_set_delay>:
 */
void mbedtls_timing_set_delay( void *data, uint32_t int_ms, uint32_t fin_ms )
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;

    ctx->int_ms = int_ms;
   e381c:	6201      	str	r1, [r0, #32]
    ctx->fin_ms = fin_ms;
   e381e:	6242      	str	r2, [r0, #36]	; 0x24

    if( fin_ms != 0 )
   e3820:	b112      	cbz	r2, e3828 <mbedtls_timing_set_delay+0xc>
{
    struct _hr_time *t = (struct _hr_time *) val;

    if( reset )
    {
        gettimeofday( &t->start, NULL );
   e3822:	2100      	movs	r1, #0
   e3824:	f004 bbae 	b.w	e7f84 <gettimeofday>
   e3828:	4770      	bx	lr

000e382a <mbedtls_timing_get_delay>:

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
   e382a:	b510      	push	{r4, lr}
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
   e382c:	6a43      	ldr	r3, [r0, #36]	; 0x24

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
   e382e:	4604      	mov	r4, r0
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
   e3830:	b153      	cbz	r3, e3848 <mbedtls_timing_get_delay+0x1e>
   e3832:	f7ff ffcd 	bl	e37d0 <mbedtls_timing_get_timer.part.0>
        return( -1 );

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
   e3836:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e3838:	4283      	cmp	r3, r0
   e383a:	d908      	bls.n	e384e <mbedtls_timing_get_delay+0x24>
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
        return( -1 );
   e383c:	6a23      	ldr	r3, [r4, #32]
   e383e:	4283      	cmp	r3, r0
   e3840:	bf8c      	ite	hi
   e3842:	2000      	movhi	r0, #0
   e3844:	2001      	movls	r0, #1
   e3846:	bd10      	pop	{r4, pc}
   e3848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e384c:	bd10      	pop	{r4, pc}

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
        return( 2 );
   e384e:	2002      	movs	r0, #2

    if( elapsed_ms >= ctx->int_ms )
        return( 1 );

    return( 0 );
}
   e3850:	bd10      	pop	{r4, pc}
	...

000e3854 <_ZL14x509_parse_intPPhjPi>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
   e3854:	2300      	movs	r3, #0
        cur = cur->next;
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
   e3856:	b530      	push	{r4, r5, lr}
    *res = 0;
   e3858:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
   e385a:	250a      	movs	r5, #10

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
   e385c:	b189      	cbz	r1, e3882 <_ZL14x509_parse_intPPhjPi+0x2e>
    {
        if( ( **p < '0') || ( **p > '9' ) )
   e385e:	6803      	ldr	r3, [r0, #0]
   e3860:	781b      	ldrb	r3, [r3, #0]
   e3862:	3b30      	subs	r3, #48	; 0x30
   e3864:	2b09      	cmp	r3, #9
   e3866:	d80e      	bhi.n	e3886 <_ZL14x509_parse_intPPhjPi+0x32>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
   e3868:	6813      	ldr	r3, [r2, #0]
   e386a:	436b      	muls	r3, r5
   e386c:	6013      	str	r3, [r2, #0]
        *res += ( *(*p)++ - '0' );
   e386e:	6803      	ldr	r3, [r0, #0]
   e3870:	1c5c      	adds	r4, r3, #1
   e3872:	6004      	str	r4, [r0, #0]
   e3874:	781b      	ldrb	r3, [r3, #0]
   e3876:	6814      	ldr	r4, [r2, #0]
   e3878:	3b30      	subs	r3, #48	; 0x30
   e387a:	4423      	add	r3, r4
   e387c:	6013      	str	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
   e387e:	3901      	subs	r1, #1
   e3880:	e7ec      	b.n	e385c <_ZL14x509_parse_intPPhjPi+0x8>

        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
   e3882:	4608      	mov	r0, r1
   e3884:	bd30      	pop	{r4, r5, pc}
    *res = 0;

    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
   e3886:	4801      	ldr	r0, [pc, #4]	; (e388c <_ZL14x509_parse_intPPhjPi+0x38>)
        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
}
   e3888:	bd30      	pop	{r4, r5, pc}
   e388a:	bf00      	nop
   e388c:	ffffdc00 	.word	0xffffdc00

000e3890 <mbedtls_x509_get_serial>:
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
   e3890:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( end - *p ) < 1 )
   e3892:	6803      	ldr	r3, [r0, #0]
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
   e3894:	4615      	mov	r5, r2
    int ret;

    if( ( end - *p ) < 1 )
   e3896:	1aca      	subs	r2, r1, r3
   e3898:	2a00      	cmp	r2, #0
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
   e389a:	4604      	mov	r4, r0
    int ret;

    if( ( end - *p ) < 1 )
   e389c:	dd17      	ble.n	e38ce <mbedtls_x509_get_serial+0x3e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
   e389e:	781a      	ldrb	r2, [r3, #0]
   e38a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   e38a4:	2a02      	cmp	r2, #2
   e38a6:	d114      	bne.n	e38d2 <mbedtls_x509_get_serial+0x42>
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    serial->tag = *(*p)++;
   e38a8:	1c5a      	adds	r2, r3, #1
   e38aa:	6002      	str	r2, [r0, #0]
   e38ac:	462a      	mov	r2, r5
   e38ae:	781b      	ldrb	r3, [r3, #0]
   e38b0:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
   e38b4:	f7f2 f9d6 	bl	d5c64 <mbedtls_asn1_get_len>
   e38b8:	b110      	cbz	r0, e38c0 <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
   e38ba:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
   e38be:	bd38      	pop	{r3, r4, r5, pc}

    serial->p = *p;
   e38c0:	6823      	ldr	r3, [r4, #0]
   e38c2:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
   e38c4:	6822      	ldr	r2, [r4, #0]
   e38c6:	686b      	ldr	r3, [r5, #4]
   e38c8:	4413      	add	r3, r2
   e38ca:	6023      	str	r3, [r4, #0]

    return( 0 );
   e38cc:	bd38      	pop	{r3, r4, r5, pc}
{
    int ret;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   e38ce:	4802      	ldr	r0, [pc, #8]	; (e38d8 <mbedtls_x509_get_serial+0x48>)
   e38d0:	bd38      	pop	{r3, r4, r5, pc}

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   e38d2:	4802      	ldr	r0, [pc, #8]	; (e38dc <mbedtls_x509_get_serial+0x4c>)

    serial->p = *p;
    *p += serial->len;

    return( 0 );
}
   e38d4:	bd38      	pop	{r3, r4, r5, pc}
   e38d6:	bf00      	nop
   e38d8:	ffffdd20 	.word	0xffffdd20
   e38dc:	ffffdd1e 	.word	0xffffdd1e

000e38e0 <mbedtls_x509_get_alg_null>:
 *       algorithm               OBJECT IDENTIFIER,
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
int mbedtls_x509_get_alg_null( unsigned char **p, const unsigned char *end,
                       mbedtls_x509_buf *alg )
{
   e38e0:	b508      	push	{r3, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_alg_null( p, end, alg ) ) != 0 )
   e38e2:	f7f2 fb3b 	bl	d5f5c <mbedtls_asn1_get_alg_null>
   e38e6:	b108      	cbz	r0, e38ec <mbedtls_x509_get_alg_null+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   e38e8:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300

    return( 0 );
}
   e38ec:	bd08      	pop	{r3, pc}

000e38ee <mbedtls_x509_get_alg>:
/*
 * Parse an algorithm identifier with (optional) parameters
 */
int mbedtls_x509_get_alg( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *alg, mbedtls_x509_buf *params )
{
   e38ee:	b508      	push	{r3, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
   e38f0:	f7f2 fae7 	bl	d5ec2 <mbedtls_asn1_get_alg>
   e38f4:	b108      	cbz	r0, e38fa <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   e38f6:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300

    return( 0 );
}
   e38fa:	bd08      	pop	{r3, pc}

000e38fc <mbedtls_x509_get_rsassa_pss_params>:
 * option. Enfore this at parsing time.
 */
int mbedtls_x509_get_rsassa_pss_params( const mbedtls_x509_buf *params,
                                mbedtls_md_type_t *md_alg, mbedtls_md_type_t *mgf_md,
                                int *salt_len )
{
   e38fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e3900:	461d      	mov	r5, r3
    const unsigned char *end, *end2;
    size_t len;
    mbedtls_x509_buf alg_id, alg_params;

    /* First set everything to defaults */
    *md_alg = MBEDTLS_MD_SHA1;
   e3902:	2304      	movs	r3, #4
   e3904:	700b      	strb	r3, [r1, #0]
    *mgf_md = MBEDTLS_MD_SHA1;
   e3906:	7013      	strb	r3, [r2, #0]
    *salt_len = 20;
   e3908:	2314      	movs	r3, #20
   e390a:	602b      	str	r3, [r5, #0]

    /* Make sure params is a SEQUENCE and setup bounds */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   e390c:	6803      	ldr	r3, [r0, #0]
   e390e:	2b30      	cmp	r3, #48	; 0x30
 * option. Enfore this at parsing time.
 */
int mbedtls_x509_get_rsassa_pss_params( const mbedtls_x509_buf *params,
                                mbedtls_md_type_t *md_alg, mbedtls_md_type_t *mgf_md,
                                int *salt_len )
{
   e3910:	b08f      	sub	sp, #60	; 0x3c
   e3912:	4688      	mov	r8, r1
   e3914:	4616      	mov	r6, r2
    *md_alg = MBEDTLS_MD_SHA1;
    *mgf_md = MBEDTLS_MD_SHA1;
    *salt_len = 20;

    /* Make sure params is a SEQUENCE and setup bounds */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   e3916:	f040 80ca 	bne.w	e3aae <mbedtls_x509_get_rsassa_pss_params+0x1b2>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    p = (unsigned char *) params->p;
   e391a:	6883      	ldr	r3, [r0, #8]
    end = p + params->len;
   e391c:	6844      	ldr	r4, [r0, #4]
    /* Make sure params is a SEQUENCE and setup bounds */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    p = (unsigned char *) params->p;
   e391e:	9301      	str	r3, [sp, #4]
    end = p + params->len;
   e3920:	441c      	add	r4, r3

    if( p == end )
   e3922:	42a3      	cmp	r3, r4
   e3924:	f000 80c1 	beq.w	e3aaa <mbedtls_x509_get_rsassa_pss_params+0x1ae>
        return( 0 );

    /*
     * HashAlgorithm
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   e3928:	23a0      	movs	r3, #160	; 0xa0
   e392a:	aa02      	add	r2, sp, #8
   e392c:	4621      	mov	r1, r4
   e392e:	a801      	add	r0, sp, #4
   e3930:	f7f2 f9ea 	bl	d5d08 <mbedtls_asn1_get_tag>
   e3934:	b9a8      	cbnz	r0, e3962 <mbedtls_x509_get_rsassa_pss_params+0x66>
                    MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
    {
        end2 = p + len;
   e3936:	9b02      	ldr	r3, [sp, #8]
   e3938:	9f01      	ldr	r7, [sp, #4]
   e393a:	441f      	add	r7, r3

        /* HashAlgorithm ::= AlgorithmIdentifier (without parameters) */
        if( ( ret = mbedtls_x509_get_alg_null( &p, end2, &alg_id ) ) != 0 )
   e393c:	aa05      	add	r2, sp, #20
   e393e:	4639      	mov	r1, r7
   e3940:	a801      	add	r0, sp, #4
   e3942:	f7ff ffcd 	bl	e38e0 <mbedtls_x509_get_alg_null>
   e3946:	2800      	cmp	r0, #0
   e3948:	f040 80b9 	bne.w	e3abe <mbedtls_x509_get_rsassa_pss_params+0x1c2>
            return( ret );

        if( ( ret = mbedtls_oid_get_md_alg( &alg_id, md_alg ) ) != 0 )
   e394c:	4641      	mov	r1, r8
   e394e:	a805      	add	r0, sp, #20
   e3950:	f7f7 fa98 	bl	dae84 <mbedtls_oid_get_md_alg>
   e3954:	2800      	cmp	r0, #0
   e3956:	f040 80a5 	bne.w	e3aa4 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
            return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

        if( p != end2 )
   e395a:	9b01      	ldr	r3, [sp, #4]
   e395c:	429f      	cmp	r7, r3
   e395e:	d004      	beq.n	e396a <mbedtls_x509_get_rsassa_pss_params+0x6e>
   e3960:	e09e      	b.n	e3aa0 <mbedtls_x509_get_rsassa_pss_params+0x1a4>
            return( MBEDTLS_ERR_X509_INVALID_ALG +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   e3962:	f110 0f62 	cmn.w	r0, #98	; 0x62
   e3966:	f040 809d 	bne.w	e3aa4 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    if( p == end )
   e396a:	9b01      	ldr	r3, [sp, #4]
   e396c:	429c      	cmp	r4, r3
   e396e:	f000 809c 	beq.w	e3aaa <mbedtls_x509_get_rsassa_pss_params+0x1ae>
        return( 0 );

    /*
     * MaskGenAlgorithm
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   e3972:	23a1      	movs	r3, #161	; 0xa1
   e3974:	aa02      	add	r2, sp, #8
   e3976:	4621      	mov	r1, r4
   e3978:	a801      	add	r0, sp, #4
   e397a:	f7f2 f9c5 	bl	d5d08 <mbedtls_asn1_get_tag>
   e397e:	2800      	cmp	r0, #0
   e3980:	d150      	bne.n	e3a24 <mbedtls_x509_get_rsassa_pss_params+0x128>
                    MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
    {
        end2 = p + len;
   e3982:	9b02      	ldr	r3, [sp, #8]
   e3984:	9f01      	ldr	r7, [sp, #4]
   e3986:	441f      	add	r7, r3

        /* MaskGenAlgorithm ::= AlgorithmIdentifier (params = HashAlgorithm) */
        if( ( ret = mbedtls_x509_get_alg( &p, end2, &alg_id, &alg_params ) ) != 0 )
   e3988:	aa05      	add	r2, sp, #20
   e398a:	ab08      	add	r3, sp, #32
   e398c:	4639      	mov	r1, r7
   e398e:	a801      	add	r0, sp, #4
   e3990:	f7ff ffad 	bl	e38ee <mbedtls_x509_get_alg>
   e3994:	2800      	cmp	r0, #0
   e3996:	f040 8092 	bne.w	e3abe <mbedtls_x509_get_rsassa_pss_params+0x1c2>
            return( ret );

        /* Only MFG1 is recognised for now */
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_MGF1, &alg_id ) != 0 )
   e399a:	9a06      	ldr	r2, [sp, #24]
   e399c:	2a09      	cmp	r2, #9
   e399e:	f040 8088 	bne.w	e3ab2 <mbedtls_x509_get_rsassa_pss_params+0x1b6>
   e39a2:	9907      	ldr	r1, [sp, #28]
   e39a4:	4847      	ldr	r0, [pc, #284]	; (e3ac4 <mbedtls_x509_get_rsassa_pss_params+0x1c8>)
   e39a6:	f004 fa4f 	bl	e7e48 <memcmp>
   e39aa:	2800      	cmp	r0, #0
   e39ac:	f040 8081 	bne.w	e3ab2 <mbedtls_x509_get_rsassa_pss_params+0x1b6>
    const unsigned char *end;
    mbedtls_x509_buf md_oid;
    size_t len;

    /* Make sure we got a SEQUENCE and setup bounds */
    if( alg->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   e39b0:	9b08      	ldr	r3, [sp, #32]
   e39b2:	2b30      	cmp	r3, #48	; 0x30
   e39b4:	d17b      	bne.n	e3aae <mbedtls_x509_get_rsassa_pss_params+0x1b2>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    p = (unsigned char *) alg->p;
   e39b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    end = p + alg->len;
   e39b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    /* Make sure we got a SEQUENCE and setup bounds */
    if( alg->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    p = (unsigned char *) alg->p;
   e39ba:	9303      	str	r3, [sp, #12]
    end = p + alg->len;
   e39bc:	eb03 0802 	add.w	r8, r3, r2

    if( p >= end )
   e39c0:	4543      	cmp	r3, r8
   e39c2:	d226      	bcs.n	e3a12 <mbedtls_x509_get_rsassa_pss_params+0x116>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    /* Parse md_oid */
    md_oid.tag = *p;
   e39c4:	f10d 0938 	add.w	r9, sp, #56	; 0x38
   e39c8:	781b      	ldrb	r3, [r3, #0]
   e39ca:	f849 3d0c 	str.w	r3, [r9, #-12]!

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &md_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
   e39ce:	aa0c      	add	r2, sp, #48	; 0x30
   e39d0:	2306      	movs	r3, #6
   e39d2:	4641      	mov	r1, r8
   e39d4:	a803      	add	r0, sp, #12
   e39d6:	f7f2 f997 	bl	d5d08 <mbedtls_asn1_get_tag>
   e39da:	2800      	cmp	r0, #0
   e39dc:	d16b      	bne.n	e3ab6 <mbedtls_x509_get_rsassa_pss_params+0x1ba>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    md_oid.p = p;
   e39de:	9a03      	ldr	r2, [sp, #12]
    p += md_oid.len;
   e39e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    md_oid.tag = *p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &md_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    md_oid.p = p;
   e39e2:	920d      	str	r2, [sp, #52]	; 0x34
    p += md_oid.len;
   e39e4:	4413      	add	r3, r2

    /* Get md_alg from md_oid */
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
   e39e6:	4631      	mov	r1, r6
   e39e8:	4648      	mov	r0, r9

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &md_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    md_oid.p = p;
    p += md_oid.len;
   e39ea:	9303      	str	r3, [sp, #12]

    /* Get md_alg from md_oid */
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
   e39ec:	f7f7 fa4a 	bl	dae84 <mbedtls_oid_get_md_alg>
   e39f0:	2800      	cmp	r0, #0
   e39f2:	d160      	bne.n	e3ab6 <mbedtls_x509_get_rsassa_pss_params+0x1ba>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    /* Make sure params is absent of NULL */
    if( p == end )
   e39f4:	9b03      	ldr	r3, [sp, #12]
   e39f6:	4598      	cmp	r8, r3
   e39f8:	d010      	beq.n	e3a1c <mbedtls_x509_get_rsassa_pss_params+0x120>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_NULL ) ) != 0 || len != 0 )
   e39fa:	2305      	movs	r3, #5
   e39fc:	aa04      	add	r2, sp, #16
   e39fe:	4641      	mov	r1, r8
   e3a00:	a803      	add	r0, sp, #12
   e3a02:	f7f2 f981 	bl	d5d08 <mbedtls_asn1_get_tag>
   e3a06:	2800      	cmp	r0, #0
   e3a08:	d155      	bne.n	e3ab6 <mbedtls_x509_get_rsassa_pss_params+0x1ba>
   e3a0a:	9b04      	ldr	r3, [sp, #16]
   e3a0c:	2b00      	cmp	r3, #0
   e3a0e:	d152      	bne.n	e3ab6 <mbedtls_x509_get_rsassa_pss_params+0x1ba>
   e3a10:	e001      	b.n	e3a16 <mbedtls_x509_get_rsassa_pss_params+0x11a>
    p = (unsigned char *) alg->p;
    end = p + alg->len;

    if( p >= end )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   e3a12:	482d      	ldr	r0, [pc, #180]	; (e3ac8 <mbedtls_x509_get_rsassa_pss_params+0x1cc>)
   e3a14:	e053      	b.n	e3abe <mbedtls_x509_get_rsassa_pss_params+0x1c2>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_NULL ) ) != 0 || len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    if( p != end )
   e3a16:	9b03      	ldr	r3, [sp, #12]
   e3a18:	4598      	cmp	r8, r3
   e3a1a:	d141      	bne.n	e3aa0 <mbedtls_x509_get_rsassa_pss_params+0x1a4>

        /* Parse HashAlgorithm */
        if( ( ret = x509_get_hash_alg( &alg_params, mgf_md ) ) != 0 )
            return( ret );

        if( p != end2 )
   e3a1c:	9b01      	ldr	r3, [sp, #4]
   e3a1e:	429f      	cmp	r7, r3
   e3a20:	d003      	beq.n	e3a2a <mbedtls_x509_get_rsassa_pss_params+0x12e>
   e3a22:	e03d      	b.n	e3aa0 <mbedtls_x509_get_rsassa_pss_params+0x1a4>
            return( MBEDTLS_ERR_X509_INVALID_ALG +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   e3a24:	f110 0f62 	cmn.w	r0, #98	; 0x62
   e3a28:	d13c      	bne.n	e3aa4 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    if( p == end )
   e3a2a:	9b01      	ldr	r3, [sp, #4]
   e3a2c:	429c      	cmp	r4, r3
   e3a2e:	d03c      	beq.n	e3aaa <mbedtls_x509_get_rsassa_pss_params+0x1ae>
        return( 0 );

    /*
     * salt_len
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   e3a30:	23a2      	movs	r3, #162	; 0xa2
   e3a32:	aa02      	add	r2, sp, #8
   e3a34:	4621      	mov	r1, r4
   e3a36:	a801      	add	r0, sp, #4
   e3a38:	f7f2 f966 	bl	d5d08 <mbedtls_asn1_get_tag>
   e3a3c:	b960      	cbnz	r0, e3a58 <mbedtls_x509_get_rsassa_pss_params+0x15c>
                    MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 2 ) ) == 0 )
    {
        end2 = p + len;
   e3a3e:	9b02      	ldr	r3, [sp, #8]
   e3a40:	9e01      	ldr	r6, [sp, #4]
   e3a42:	441e      	add	r6, r3

        if( ( ret = mbedtls_asn1_get_int( &p, end2, salt_len ) ) != 0 )
   e3a44:	462a      	mov	r2, r5
   e3a46:	4631      	mov	r1, r6
   e3a48:	a801      	add	r0, sp, #4
   e3a4a:	f7f2 f98a 	bl	d5d62 <mbedtls_asn1_get_int>
   e3a4e:	bb48      	cbnz	r0, e3aa4 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
            return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

        if( p != end2 )
   e3a50:	9b01      	ldr	r3, [sp, #4]
   e3a52:	429e      	cmp	r6, r3
   e3a54:	d003      	beq.n	e3a5e <mbedtls_x509_get_rsassa_pss_params+0x162>
   e3a56:	e023      	b.n	e3aa0 <mbedtls_x509_get_rsassa_pss_params+0x1a4>
            return( MBEDTLS_ERR_X509_INVALID_ALG +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   e3a58:	f110 0f62 	cmn.w	r0, #98	; 0x62
   e3a5c:	d122      	bne.n	e3aa4 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    if( p == end )
   e3a5e:	9b01      	ldr	r3, [sp, #4]
   e3a60:	429c      	cmp	r4, r3
   e3a62:	d022      	beq.n	e3aaa <mbedtls_x509_get_rsassa_pss_params+0x1ae>
        return( 0 );

    /*
     * trailer_field (if present, must be 1)
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   e3a64:	23a3      	movs	r3, #163	; 0xa3
   e3a66:	aa02      	add	r2, sp, #8
   e3a68:	4621      	mov	r1, r4
   e3a6a:	a801      	add	r0, sp, #4
   e3a6c:	f7f2 f94c 	bl	d5d08 <mbedtls_asn1_get_tag>
   e3a70:	b980      	cbnz	r0, e3a94 <mbedtls_x509_get_rsassa_pss_params+0x198>
                    MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 3 ) ) == 0 )
    {
        int trailer_field;

        end2 = p + len;
   e3a72:	9b02      	ldr	r3, [sp, #8]
   e3a74:	9d01      	ldr	r5, [sp, #4]
   e3a76:	441d      	add	r5, r3

        if( ( ret = mbedtls_asn1_get_int( &p, end2, &trailer_field ) ) != 0 )
   e3a78:	aa0b      	add	r2, sp, #44	; 0x2c
   e3a7a:	4629      	mov	r1, r5
   e3a7c:	a801      	add	r0, sp, #4
   e3a7e:	f7f2 f970 	bl	d5d62 <mbedtls_asn1_get_int>
   e3a82:	b978      	cbnz	r0, e3aa4 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
            return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

        if( p != end2 )
   e3a84:	9b01      	ldr	r3, [sp, #4]
   e3a86:	429d      	cmp	r5, r3
   e3a88:	d10a      	bne.n	e3aa0 <mbedtls_x509_get_rsassa_pss_params+0x1a4>
            return( MBEDTLS_ERR_X509_INVALID_ALG +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

        if( trailer_field != 1 )
   e3a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e3a8c:	2b01      	cmp	r3, #1
   e3a8e:	d004      	beq.n	e3a9a <mbedtls_x509_get_rsassa_pss_params+0x19e>
            return( MBEDTLS_ERR_X509_INVALID_ALG );
   e3a90:	480e      	ldr	r0, [pc, #56]	; (e3acc <mbedtls_x509_get_rsassa_pss_params+0x1d0>)
   e3a92:	e014      	b.n	e3abe <mbedtls_x509_get_rsassa_pss_params+0x1c2>
    }
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   e3a94:	f110 0f62 	cmn.w	r0, #98	; 0x62
   e3a98:	d104      	bne.n	e3aa4 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    if( p != end )
   e3a9a:	9b01      	ldr	r3, [sp, #4]
   e3a9c:	429c      	cmp	r4, r3
   e3a9e:	d004      	beq.n	e3aaa <mbedtls_x509_get_rsassa_pss_params+0x1ae>
        if( ( ret = mbedtls_asn1_get_int( &p, end2, &trailer_field ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

        if( p != end2 )
            return( MBEDTLS_ERR_X509_INVALID_ALG +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   e3aa0:	480b      	ldr	r0, [pc, #44]	; (e3ad0 <mbedtls_x509_get_rsassa_pss_params+0x1d4>)
   e3aa2:	e00c      	b.n	e3abe <mbedtls_x509_get_rsassa_pss_params+0x1c2>

        if( trailer_field != 1 )
            return( MBEDTLS_ERR_X509_INVALID_ALG );
    }
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   e3aa4:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
   e3aa8:	e009      	b.n	e3abe <mbedtls_x509_get_rsassa_pss_params+0x1c2>

    if( p != end )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
   e3aaa:	2000      	movs	r0, #0
   e3aac:	e007      	b.n	e3abe <mbedtls_x509_get_rsassa_pss_params+0x1c2>
    *salt_len = 20;

    /* Make sure params is a SEQUENCE and setup bounds */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   e3aae:	4809      	ldr	r0, [pc, #36]	; (e3ad4 <mbedtls_x509_get_rsassa_pss_params+0x1d8>)
   e3ab0:	e005      	b.n	e3abe <mbedtls_x509_get_rsassa_pss_params+0x1c2>
            return( ret );

        /* Only MFG1 is recognised for now */
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_MGF1, &alg_id ) != 0 )
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE +
                    MBEDTLS_ERR_OID_NOT_FOUND );
   e3ab2:	4809      	ldr	r0, [pc, #36]	; (e3ad8 <mbedtls_x509_get_rsassa_pss_params+0x1dc>)
   e3ab4:	e003      	b.n	e3abe <mbedtls_x509_get_rsassa_pss_params+0x1c2>
    /* Make sure params is absent of NULL */
    if( p == end )
        return( 0 );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_NULL ) ) != 0 || len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   e3ab6:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_MGF1, &alg_id ) != 0 )
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE +
                    MBEDTLS_ERR_OID_NOT_FOUND );

        /* Parse HashAlgorithm */
        if( ( ret = x509_get_hash_alg( &alg_params, mgf_md ) ) != 0 )
   e3aba:	2800      	cmp	r0, #0
   e3abc:	d0ae      	beq.n	e3a1c <mbedtls_x509_get_rsassa_pss_params+0x120>
    if( p != end )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   e3abe:	b00f      	add	sp, #60	; 0x3c
   e3ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e3ac4:	000ea0df 	.word	0x000ea0df
   e3ac8:	ffffdca0 	.word	0xffffdca0
   e3acc:	ffffdd00 	.word	0xffffdd00
   e3ad0:	ffffdc9a 	.word	0xffffdc9a
   e3ad4:	ffffdc9e 	.word	0xffffdc9e
   e3ad8:	ffffdf52 	.word	0xffffdf52

000e3adc <mbedtls_x509_get_name>:
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
   e3adc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
   e3ae0:	f8df 80f4 	ldr.w	r8, [pc, #244]	; e3bd8 <mbedtls_x509_get_name+0xfc>
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
   e3ae4:	4604      	mov	r4, r0
   e3ae6:	460f      	mov	r7, r1
   e3ae8:	4691      	mov	r9, r2
    while( 1 )
    {
        /*
         * parse SET
         */
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
   e3aea:	2331      	movs	r3, #49	; 0x31
   e3aec:	466a      	mov	r2, sp
   e3aee:	4639      	mov	r1, r7
   e3af0:	4620      	mov	r0, r4
   e3af2:	f7f2 f909 	bl	d5d08 <mbedtls_asn1_get_tag>
   e3af6:	b110      	cbz	r0, e3afe <mbedtls_x509_get_name+0x22>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
   e3af8:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
   e3afc:	e061      	b.n	e3bc2 <mbedtls_x509_get_name+0xe6>

        end_set  = *p + set_len;
   e3afe:	6826      	ldr	r6, [r4, #0]
   e3b00:	9b00      	ldr	r3, [sp, #0]
   e3b02:	464d      	mov	r5, r9
   e3b04:	441e      	add	r6, r3
    int ret;
    size_t len;
    mbedtls_x509_buf *oid;
    mbedtls_x509_buf *val;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e3b06:	2330      	movs	r3, #48	; 0x30
   e3b08:	aa01      	add	r2, sp, #4
   e3b0a:	4631      	mov	r1, r6
   e3b0c:	4620      	mov	r0, r4
   e3b0e:	f7f2 f8fb 	bl	d5d08 <mbedtls_asn1_get_tag>
   e3b12:	bb68      	cbnz	r0, e3b70 <mbedtls_x509_get_name+0x94>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    end = *p + len;
   e3b14:	9a01      	ldr	r2, [sp, #4]
   e3b16:	6823      	ldr	r3, [r4, #0]

    if( ( end - *p ) < 1 )
   e3b18:	2a00      	cmp	r2, #0

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    end = *p + len;
   e3b1a:	eb03 0902 	add.w	r9, r3, r2

    if( ( end - *p ) < 1 )
   e3b1e:	dc01      	bgt.n	e3b24 <mbedtls_x509_get_name+0x48>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   e3b20:	4829      	ldr	r0, [pc, #164]	; (e3bc8 <mbedtls_x509_get_name+0xec>)
   e3b22:	e04e      	b.n	e3bc2 <mbedtls_x509_get_name+0xe6>

    oid = &cur->oid;
    oid->tag = **p;
   e3b24:	462a      	mov	r2, r5
   e3b26:	781b      	ldrb	r3, [r3, #0]
   e3b28:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
   e3b2c:	4649      	mov	r1, r9
   e3b2e:	2306      	movs	r3, #6
   e3b30:	4620      	mov	r0, r4
   e3b32:	f7f2 f8e9 	bl	d5d08 <mbedtls_asn1_get_tag>
   e3b36:	b9d8      	cbnz	r0, e3b70 <mbedtls_x509_get_name+0x94>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
   e3b38:	6823      	ldr	r3, [r4, #0]
   e3b3a:	60ab      	str	r3, [r5, #8]
    *p += oid->len;
   e3b3c:	6820      	ldr	r0, [r4, #0]
   e3b3e:	6869      	ldr	r1, [r5, #4]
   e3b40:	1843      	adds	r3, r0, r1

    if( ( end - *p ) < 1 )
   e3b42:	ebc3 0209 	rsb	r2, r3, r9
   e3b46:	2a00      	cmp	r2, #0

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
    *p += oid->len;
   e3b48:	6023      	str	r3, [r4, #0]

    if( ( end - *p ) < 1 )
   e3b4a:	dde9      	ble.n	e3b20 <mbedtls_x509_get_name+0x44>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
   e3b4c:	5c42      	ldrb	r2, [r0, r1]
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
   e3b4e:	2a1e      	cmp	r2, #30
   e3b50:	d81c      	bhi.n	e3b8c <mbedtls_x509_get_name+0xb0>
   e3b52:	fa28 f202 	lsr.w	r2, r8, r2
   e3b56:	07d2      	lsls	r2, r2, #31
   e3b58:	d518      	bpl.n	e3b8c <mbedtls_x509_get_name+0xb0>
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
   e3b5a:	3301      	adds	r3, #1
   e3b5c:	6023      	str	r3, [r4, #0]
   e3b5e:	5c43      	ldrb	r3, [r0, r1]
   e3b60:	60eb      	str	r3, [r5, #12]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
   e3b62:	f105 0210 	add.w	r2, r5, #16
   e3b66:	4649      	mov	r1, r9
   e3b68:	4620      	mov	r0, r4
   e3b6a:	f7f2 f87b 	bl	d5c64 <mbedtls_asn1_get_len>
   e3b6e:	b118      	cbz	r0, e3b78 <mbedtls_x509_get_name+0x9c>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
   e3b70:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380

        end_set  = *p + set_len;

        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
   e3b74:	b170      	cbz	r0, e3b94 <mbedtls_x509_get_name+0xb8>
   e3b76:	e024      	b.n	e3bc2 <mbedtls_x509_get_name+0xe6>
    val->tag = *(*p)++;

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    val->p = *p;
   e3b78:	6823      	ldr	r3, [r4, #0]
   e3b7a:	616b      	str	r3, [r5, #20]
    *p += val->len;
   e3b7c:	6822      	ldr	r2, [r4, #0]
   e3b7e:	692b      	ldr	r3, [r5, #16]
   e3b80:	4413      	add	r3, r2

    if( *p != end )
   e3b82:	4599      	cmp	r9, r3

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    val->p = *p;
    *p += val->len;
   e3b84:	6023      	str	r3, [r4, #0]

    if( *p != end )
   e3b86:	d103      	bne.n	e3b90 <mbedtls_x509_get_name+0xb4>
    {
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }

    cur->next = NULL;
   e3b88:	61a8      	str	r0, [r5, #24]
   e3b8a:	e003      	b.n	e3b94 <mbedtls_x509_get_name+0xb8>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   e3b8c:	480f      	ldr	r0, [pc, #60]	; (e3bcc <mbedtls_x509_get_name+0xf0>)
   e3b8e:	e018      	b.n	e3bc2 <mbedtls_x509_get_name+0xe6>
    *p += val->len;

    if( *p != end )
    {
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   e3b90:	480f      	ldr	r0, [pc, #60]	; (e3bd0 <mbedtls_x509_get_name+0xf4>)
   e3b92:	e016      	b.n	e3bc2 <mbedtls_x509_get_name+0xe6>
        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
                return( ret );

            if( *p == end_set )
   e3b94:	6823      	ldr	r3, [r4, #0]
   e3b96:	429e      	cmp	r6, r3
   e3b98:	d008      	beq.n	e3bac <mbedtls_x509_get_name+0xd0>
                break;

            /* Mark this item as being no the only one in a set */
            cur->next_merged = 1;
   e3b9a:	2001      	movs	r0, #1
   e3b9c:	7728      	strb	r0, [r5, #28]

            cur->next = (mbedtls_asn1_named_data *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
   e3b9e:	2120      	movs	r1, #32
   e3ba0:	f004 f93c 	bl	e7e1c <calloc>
   e3ba4:	61a8      	str	r0, [r5, #24]

            if( cur->next == NULL )
   e3ba6:	b158      	cbz	r0, e3bc0 <mbedtls_x509_get_name+0xe4>
   e3ba8:	4605      	mov	r5, r0
   e3baa:	e7ac      	b.n	e3b06 <mbedtls_x509_get_name+0x2a>
        }

        /*
         * continue until end of SEQUENCE is reached
         */
        if( *p == end )
   e3bac:	42b7      	cmp	r7, r6
   e3bae:	d008      	beq.n	e3bc2 <mbedtls_x509_get_name+0xe6>
            return( 0 );

        cur->next = (mbedtls_asn1_named_data *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
   e3bb0:	2120      	movs	r1, #32
   e3bb2:	2001      	movs	r0, #1
   e3bb4:	f004 f932 	bl	e7e1c <calloc>
   e3bb8:	4681      	mov	r9, r0
   e3bba:	61a8      	str	r0, [r5, #24]

        if( cur->next == NULL )
   e3bbc:	2800      	cmp	r0, #0
   e3bbe:	d194      	bne.n	e3aea <mbedtls_x509_get_name+0xe>
            cur->next_merged = 1;

            cur->next = (mbedtls_asn1_named_data *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   e3bc0:	4804      	ldr	r0, [pc, #16]	; (e3bd4 <mbedtls_x509_get_name+0xf8>)
        if( cur->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        cur = cur->next;
    }
}
   e3bc2:	b003      	add	sp, #12
   e3bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e3bc8:	ffffdc20 	.word	0xffffdc20
   e3bcc:	ffffdc1e 	.word	0xffffdc1e
   e3bd0:	ffffdc1a 	.word	0xffffdc1a
   e3bd4:	ffffd780 	.word	0xffffd780
   e3bd8:	50581008 	.word	0x50581008

000e3bdc <mbedtls_x509_get_time>:
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
   e3bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
   e3bde:	6803      	ldr	r3, [r0, #0]
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
   e3be0:	4614      	mov	r4, r2
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
   e3be2:	1aca      	subs	r2, r1, r3
   e3be4:	2a00      	cmp	r2, #0
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
   e3be6:	4605      	mov	r5, r0
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
   e3be8:	f340 80a0 	ble.w	e3d2c <mbedtls_x509_get_time+0x150>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
   e3bec:	781a      	ldrb	r2, [r3, #0]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
   e3bee:	2a17      	cmp	r2, #23
   e3bf0:	d004      	beq.n	e3bfc <mbedtls_x509_get_time+0x20>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
   e3bf2:	2a18      	cmp	r2, #24
   e3bf4:	f040 809c 	bne.w	e3d30 <mbedtls_x509_get_time+0x154>
        year_len = 4;
   e3bf8:	2704      	movs	r7, #4
   e3bfa:	e000      	b.n	e3bfe <mbedtls_x509_get_time+0x22>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;

    if( tag == MBEDTLS_ASN1_UTC_TIME )
        year_len = 2;
   e3bfc:	2702      	movs	r7, #2
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
   e3bfe:	3301      	adds	r3, #1
   e3c00:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
   e3c02:	aa01      	add	r2, sp, #4
   e3c04:	4628      	mov	r0, r5
   e3c06:	f7f2 f82d 	bl	d5c64 <mbedtls_asn1_get_len>

    if( ret != 0 )
   e3c0a:	b110      	cbz	r0, e3c12 <mbedtls_x509_get_time+0x36>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
   e3c0c:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400
   e3c10:	e091      	b.n	e3d36 <mbedtls_x509_get_time+0x15a>

    return x509_parse_time( p, len, year_len, tm );
   e3c12:	9e01      	ldr	r6, [sp, #4]
    int ret;

    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
   e3c14:	f107 0308 	add.w	r3, r7, #8
   e3c18:	429e      	cmp	r6, r3
   e3c1a:	f0c0 808b 	bcc.w	e3d34 <mbedtls_x509_get_time+0x158>
    len -= yearlen + 8;

    /*
     * Parse year, month, day, hour, minute
     */
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
   e3c1e:	4622      	mov	r2, r4
   e3c20:	4639      	mov	r1, r7
   e3c22:	4628      	mov	r0, r5
   e3c24:	f7ff fe16 	bl	e3854 <_ZL14x509_parse_intPPhjPi>
   e3c28:	2800      	cmp	r0, #0
   e3c2a:	f040 8084 	bne.w	e3d36 <mbedtls_x509_get_time+0x15a>
    if ( 2 == yearlen )
   e3c2e:	2f02      	cmp	r7, #2
   e3c30:	d108      	bne.n	e3c44 <mbedtls_x509_get_time+0x68>
    {
        if ( tm->year < 50 )
   e3c32:	6823      	ldr	r3, [r4, #0]
   e3c34:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
   e3c36:	bfdc      	itt	le
   e3c38:	3364      	addle	r3, #100	; 0x64
   e3c3a:	6023      	strle	r3, [r4, #0]

        tm->year += 1900;
   e3c3c:	6823      	ldr	r3, [r4, #0]
   e3c3e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   e3c42:	6023      	str	r3, [r4, #0]
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
   e3c44:	1d22      	adds	r2, r4, #4
   e3c46:	2102      	movs	r1, #2
   e3c48:	4628      	mov	r0, r5
   e3c4a:	f7ff fe03 	bl	e3854 <_ZL14x509_parse_intPPhjPi>
   e3c4e:	2800      	cmp	r0, #0
   e3c50:	d171      	bne.n	e3d36 <mbedtls_x509_get_time+0x15a>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
   e3c52:	f104 0208 	add.w	r2, r4, #8
   e3c56:	2102      	movs	r1, #2
   e3c58:	4628      	mov	r0, r5
   e3c5a:	f7ff fdfb 	bl	e3854 <_ZL14x509_parse_intPPhjPi>
   e3c5e:	2800      	cmp	r0, #0
   e3c60:	d169      	bne.n	e3d36 <mbedtls_x509_get_time+0x15a>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
   e3c62:	f104 020c 	add.w	r2, r4, #12
   e3c66:	2102      	movs	r1, #2
   e3c68:	4628      	mov	r0, r5
   e3c6a:	f7ff fdf3 	bl	e3854 <_ZL14x509_parse_intPPhjPi>
   e3c6e:	2800      	cmp	r0, #0
   e3c70:	d161      	bne.n	e3d36 <mbedtls_x509_get_time+0x15a>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
   e3c72:	f104 0210 	add.w	r2, r4, #16
   e3c76:	2102      	movs	r1, #2
   e3c78:	4628      	mov	r0, r5
   e3c7a:	f7ff fdeb 	bl	e3854 <_ZL14x509_parse_intPPhjPi>
   e3c7e:	2800      	cmp	r0, #0
   e3c80:	d159      	bne.n	e3d36 <mbedtls_x509_get_time+0x15a>
    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
    len -= yearlen + 8;
   e3c82:	1bf6      	subs	r6, r6, r7
    CHECK( x509_parse_int( p, 2, &tm->min ) );

    /*
     * Parse seconds if present
     */
    if ( len >= 2 )
   e3c84:	f1a6 0308 	sub.w	r3, r6, #8
   e3c88:	2b01      	cmp	r3, #1
   e3c8a:	d953      	bls.n	e3d34 <mbedtls_x509_get_time+0x158>
    {
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
   e3c8c:	f104 0214 	add.w	r2, r4, #20
   e3c90:	2102      	movs	r1, #2
   e3c92:	4628      	mov	r0, r5
   e3c94:	f7ff fdde 	bl	e3854 <_ZL14x509_parse_intPPhjPi>
   e3c98:	2800      	cmp	r0, #0
   e3c9a:	d14c      	bne.n	e3d36 <mbedtls_x509_get_time+0x15a>
        len -= 2;
   e3c9c:	f1a6 030a 	sub.w	r3, r6, #10
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    /*
     * Parse trailing 'Z' if present
     */
    if ( 1 == len && 'Z' == **p )
   e3ca0:	2b01      	cmp	r3, #1
   e3ca2:	d107      	bne.n	e3cb4 <mbedtls_x509_get_time+0xd8>
   e3ca4:	682b      	ldr	r3, [r5, #0]
   e3ca6:	781a      	ldrb	r2, [r3, #0]
   e3ca8:	2a5a      	cmp	r2, #90	; 0x5a
   e3caa:	d143      	bne.n	e3d34 <mbedtls_x509_get_time+0x158>
    {
        (*p)++;
   e3cac:	3301      	adds	r3, #1
   e3cae:	602b      	str	r3, [r5, #0]
        len--;
   e3cb0:	f1a6 030b 	sub.w	r3, r6, #11
    }

    /*
     * We should have parsed all characters at this point
     */
    if ( 0 != len )
   e3cb4:	2b00      	cmp	r3, #0
   e3cb6:	d13d      	bne.n	e3d34 <mbedtls_x509_get_time+0x158>
static int x509_date_is_valid(const mbedtls_x509_time *t )
{
    int ret = MBEDTLS_ERR_X509_INVALID_DATE;
    int month_len;

    CHECK_RANGE( 0, 9999, t->year );
   e3cb8:	6823      	ldr	r3, [r4, #0]
   e3cba:	f242 720f 	movw	r2, #9999	; 0x270f
   e3cbe:	4293      	cmp	r3, r2
   e3cc0:	d838      	bhi.n	e3d34 <mbedtls_x509_get_time+0x158>
    CHECK_RANGE( 0, 23,   t->hour );
   e3cc2:	68e2      	ldr	r2, [r4, #12]
   e3cc4:	2a17      	cmp	r2, #23
   e3cc6:	d835      	bhi.n	e3d34 <mbedtls_x509_get_time+0x158>
    CHECK_RANGE( 0, 59,   t->min  );
   e3cc8:	6922      	ldr	r2, [r4, #16]
   e3cca:	2a3b      	cmp	r2, #59	; 0x3b
   e3ccc:	d832      	bhi.n	e3d34 <mbedtls_x509_get_time+0x158>
    CHECK_RANGE( 0, 59,   t->sec  );
   e3cce:	6962      	ldr	r2, [r4, #20]
   e3cd0:	2a3b      	cmp	r2, #59	; 0x3b
   e3cd2:	d82f      	bhi.n	e3d34 <mbedtls_x509_get_time+0x158>
   e3cd4:	6861      	ldr	r1, [r4, #4]
   e3cd6:	290c      	cmp	r1, #12
   e3cd8:	d82c      	bhi.n	e3d34 <mbedtls_x509_get_time+0x158>
   e3cda:	2201      	movs	r2, #1
   e3cdc:	408a      	lsls	r2, r1
   e3cde:	f241 51aa 	movw	r1, #5546	; 0x15aa
   e3ce2:	4011      	ands	r1, r2
   e3ce4:	b9b9      	cbnz	r1, e3d16 <mbedtls_x509_get_time+0x13a>
   e3ce6:	f412 6f25 	tst.w	r2, #2640	; 0xa50
   e3cea:	d116      	bne.n	e3d1a <mbedtls_x509_get_time+0x13e>
   e3cec:	0751      	lsls	r1, r2, #29
   e3cee:	d521      	bpl.n	e3d34 <mbedtls_x509_get_time+0x158>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
   e3cf0:	079a      	lsls	r2, r3, #30
   e3cf2:	d105      	bne.n	e3d00 <mbedtls_x509_get_time+0x124>
   e3cf4:	2164      	movs	r1, #100	; 0x64
   e3cf6:	fb93 f2f1 	sdiv	r2, r3, r1
   e3cfa:	fb01 3212 	mls	r2, r1, r2, r3
   e3cfe:	b972      	cbnz	r2, e3d1e <mbedtls_x509_get_time+0x142>
   e3d00:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e3d04:	fb93 f2f1 	sdiv	r2, r3, r1
   e3d08:	fb01 3312 	mls	r3, r1, r2, r3
                !( t->year % 400 ) )
                month_len = 29;
            else
                month_len = 28;
   e3d0c:	2b00      	cmp	r3, #0
   e3d0e:	bf0c      	ite	eq
   e3d10:	231d      	moveq	r3, #29
   e3d12:	231c      	movne	r3, #28
   e3d14:	e004      	b.n	e3d20 <mbedtls_x509_get_time+0x144>
    CHECK_RANGE( 0, 59,   t->sec  );

    switch( t->mon )
    {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            month_len = 31;
   e3d16:	231f      	movs	r3, #31
   e3d18:	e002      	b.n	e3d20 <mbedtls_x509_get_time+0x144>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
   e3d1a:	231e      	movs	r3, #30
   e3d1c:	e000      	b.n	e3d20 <mbedtls_x509_get_time+0x144>
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
                !( t->year % 400 ) )
                month_len = 29;
   e3d1e:	231d      	movs	r3, #29
                month_len = 28;
            break;
        default:
            return( ret );
    }
    CHECK_RANGE( 1, month_len, t->day );
   e3d20:	68a2      	ldr	r2, [r4, #8]
   e3d22:	2a00      	cmp	r2, #0
   e3d24:	dd06      	ble.n	e3d34 <mbedtls_x509_get_time+0x158>
   e3d26:	429a      	cmp	r2, r3
   e3d28:	dd05      	ble.n	e3d36 <mbedtls_x509_get_time+0x15a>
   e3d2a:	e003      	b.n	e3d34 <mbedtls_x509_get_time+0x158>
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   e3d2c:	4803      	ldr	r0, [pc, #12]	; (e3d3c <mbedtls_x509_get_time+0x160>)
   e3d2e:	e002      	b.n	e3d36 <mbedtls_x509_get_time+0x15a>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   e3d30:	4803      	ldr	r0, [pc, #12]	; (e3d40 <mbedtls_x509_get_time+0x164>)
   e3d32:	e000      	b.n	e3d36 <mbedtls_x509_get_time+0x15a>
   e3d34:	4803      	ldr	r0, [pc, #12]	; (e3d44 <mbedtls_x509_get_time+0x168>)

    if( ret != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    return x509_parse_time( p, len, year_len, tm );
}
   e3d36:	b003      	add	sp, #12
   e3d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e3d3a:	bf00      	nop
   e3d3c:	ffffdba0 	.word	0xffffdba0
   e3d40:	ffffdb9e 	.word	0xffffdb9e
   e3d44:	ffffdc00 	.word	0xffffdc00

000e3d48 <mbedtls_x509_get_sig>:

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
   e3d48:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
   e3d4a:	6803      	ldr	r3, [r0, #0]

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
   e3d4c:	4615      	mov	r5, r2
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
   e3d4e:	1aca      	subs	r2, r1, r3
   e3d50:	2a00      	cmp	r2, #0

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
   e3d52:	4604      	mov	r4, r0
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
   e3d54:	dd10      	ble.n	e3d78 <mbedtls_x509_get_sig+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
   e3d56:	aa01      	add	r2, sp, #4

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;
   e3d58:	781e      	ldrb	r6, [r3, #0]

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
   e3d5a:	f7f2 f85e 	bl	d5e1a <mbedtls_asn1_get_bitstring_null>
   e3d5e:	b110      	cbz	r0, e3d66 <mbedtls_x509_get_sig+0x1e>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
   e3d60:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
   e3d64:	e009      	b.n	e3d7a <mbedtls_x509_get_sig+0x32>

    sig->tag = tag_type;
    sig->len = len;
   e3d66:	9b01      	ldr	r3, [sp, #4]
   e3d68:	606b      	str	r3, [r5, #4]
    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );

    sig->tag = tag_type;
   e3d6a:	602e      	str	r6, [r5, #0]
    sig->len = len;
    sig->p = *p;
   e3d6c:	6822      	ldr	r2, [r4, #0]
   e3d6e:	60aa      	str	r2, [r5, #8]

    *p += len;
   e3d70:	6822      	ldr	r2, [r4, #0]
   e3d72:	4413      	add	r3, r2
   e3d74:	6023      	str	r3, [r4, #0]

    return( 0 );
   e3d76:	e000      	b.n	e3d7a <mbedtls_x509_get_sig+0x32>
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   e3d78:	4801      	ldr	r0, [pc, #4]	; (e3d80 <mbedtls_x509_get_sig+0x38>)
    sig->p = *p;

    *p += len;

    return( 0 );
}
   e3d7a:	b002      	add	sp, #8
   e3d7c:	bd70      	pop	{r4, r5, r6, pc}
   e3d7e:	bf00      	nop
   e3d80:	ffffdb20 	.word	0xffffdb20

000e3d84 <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
   e3d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e3d88:	9f06      	ldr	r7, [sp, #24]
   e3d8a:	461d      	mov	r5, r3
    int ret;

    if( *sig_opts != NULL )
   e3d8c:	683b      	ldr	r3, [r7, #0]
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
   e3d8e:	460e      	mov	r6, r1
   e3d90:	4690      	mov	r8, r2
    int ret;

    if( *sig_opts != NULL )
   e3d92:	bb43      	cbnz	r3, e3de6 <mbedtls_x509_get_sig_alg+0x62>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
   e3d94:	462a      	mov	r2, r5
   e3d96:	4641      	mov	r1, r8
   e3d98:	f7f7 f816 	bl	dadc8 <mbedtls_oid_get_sig_alg>
   e3d9c:	b110      	cbz	r0, e3da4 <mbedtls_x509_get_sig_alg+0x20>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
   e3d9e:	f5a0 5418 	sub.w	r4, r0, #9728	; 0x2600
   e3da2:	e025      	b.n	e3df0 <mbedtls_x509_get_sig_alg+0x6c>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
    if( *pk_alg == MBEDTLS_PK_RSASSA_PSS )
   e3da4:	782b      	ldrb	r3, [r5, #0]
   e3da6:	2b06      	cmp	r3, #6
   e3da8:	d113      	bne.n	e3dd2 <mbedtls_x509_get_sig_alg+0x4e>
    {
        mbedtls_pk_rsassa_pss_options *pss_opts;

        pss_opts = (mbedtls_pk_rsassa_pss_options *)mbedtls_calloc( 1, sizeof( mbedtls_pk_rsassa_pss_options ) );
   e3daa:	2108      	movs	r1, #8
   e3dac:	2001      	movs	r0, #1
   e3dae:	f004 f835 	bl	e7e1c <calloc>
        if( pss_opts == NULL )
   e3db2:	4605      	mov	r5, r0
   e3db4:	b1c8      	cbz	r0, e3dea <mbedtls_x509_get_sig_alg+0x66>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        ret = mbedtls_x509_get_rsassa_pss_params( sig_params,
   e3db6:	1d03      	adds	r3, r0, #4
   e3db8:	4602      	mov	r2, r0
   e3dba:	4641      	mov	r1, r8
   e3dbc:	4630      	mov	r0, r6
   e3dbe:	f7ff fd9d 	bl	e38fc <mbedtls_x509_get_rsassa_pss_params>
                                          md_alg,
                                          &pss_opts->mgf1_hash_id,
                                          &pss_opts->expected_salt_len );
        if( ret != 0 )
   e3dc2:	4604      	mov	r4, r0
   e3dc4:	b118      	cbz	r0, e3dce <mbedtls_x509_get_sig_alg+0x4a>
        {
            mbedtls_free( pss_opts );
   e3dc6:	4628      	mov	r0, r5
   e3dc8:	f001 feba 	bl	e5b40 <free>
            return( ret );
   e3dcc:	e010      	b.n	e3df0 <mbedtls_x509_get_sig_alg+0x6c>
        }

        *sig_opts = (void *) pss_opts;
   e3dce:	603d      	str	r5, [r7, #0]
   e3dd0:	e00e      	b.n	e3df0 <mbedtls_x509_get_sig_alg+0x6c>
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
   e3dd2:	6833      	ldr	r3, [r6, #0]
   e3dd4:	2b05      	cmp	r3, #5
   e3dd6:	d000      	beq.n	e3dda <mbedtls_x509_get_sig_alg+0x56>
   e3dd8:	b94b      	cbnz	r3, e3dee <mbedtls_x509_get_sig_alg+0x6a>
   e3dda:	6873      	ldr	r3, [r6, #4]
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
   e3ddc:	4c06      	ldr	r4, [pc, #24]	; (e3df8 <mbedtls_x509_get_sig_alg+0x74>)
   e3dde:	2b00      	cmp	r3, #0
   e3de0:	bf08      	it	eq
   e3de2:	2400      	moveq	r4, #0
   e3de4:	e004      	b.n	e3df0 <mbedtls_x509_get_sig_alg+0x6c>
                      void **sig_opts )
{
    int ret;

    if( *sig_opts != NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   e3de6:	4c05      	ldr	r4, [pc, #20]	; (e3dfc <mbedtls_x509_get_sig_alg+0x78>)
   e3de8:	e002      	b.n	e3df0 <mbedtls_x509_get_sig_alg+0x6c>
    {
        mbedtls_pk_rsassa_pss_options *pss_opts;

        pss_opts = (mbedtls_pk_rsassa_pss_options *)mbedtls_calloc( 1, sizeof( mbedtls_pk_rsassa_pss_options ) );
        if( pss_opts == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   e3dea:	4c05      	ldr	r4, [pc, #20]	; (e3e00 <mbedtls_x509_get_sig_alg+0x7c>)
   e3dec:	e000      	b.n	e3df0 <mbedtls_x509_get_sig_alg+0x6c>
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
   e3dee:	4c02      	ldr	r4, [pc, #8]	; (e3df8 <mbedtls_x509_get_sig_alg+0x74>)
    }

    return( 0 );
}
   e3df0:	4620      	mov	r0, r4
   e3df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e3df6:	bf00      	nop
   e3df8:	ffffdd00 	.word	0xffffdd00
   e3dfc:	ffffd800 	.word	0xffffd800
   e3e00:	ffffd780 	.word	0xffffd780

000e3e04 <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                          mbedtls_x509_buf *ext, int tag )
{
   e3e04:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t len;

    /* Extension structure use EXPLICIT tagging. That is, the actual
     * `Extensions` structure is wrapped by a tag-length pair using
     * the respective context-specific tag. */
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
   e3e06:	f043 04a0 	orr.w	r4, r3, #160	; 0xa0
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                          mbedtls_x509_buf *ext, int tag )
{
   e3e0a:	4616      	mov	r6, r2

    /* Extension structure use EXPLICIT tagging. That is, the actual
     * `Extensions` structure is wrapped by a tag-length pair using
     * the respective context-specific tag. */
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
              MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag );
   e3e0c:	4623      	mov	r3, r4
   e3e0e:	3204      	adds	r2, #4
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                          mbedtls_x509_buf *ext, int tag )
{
   e3e10:	4605      	mov	r5, r0

    /* Extension structure use EXPLICIT tagging. That is, the actual
     * `Extensions` structure is wrapped by a tag-length pair using
     * the respective context-specific tag. */
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
              MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag );
   e3e12:	f7f1 ff79 	bl	d5d08 <mbedtls_asn1_get_tag>
    if( ret != 0 )
   e3e16:	b960      	cbnz	r0, e3e32 <mbedtls_x509_get_ext+0x2e>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    ext->tag = MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag;
   e3e18:	6034      	str	r4, [r6, #0]
    ext->p   = *p;
   e3e1a:	682b      	ldr	r3, [r5, #0]
   e3e1c:	60b3      	str	r3, [r6, #8]
    end      = *p + ext->len;
   e3e1e:	6828      	ldr	r0, [r5, #0]
   e3e20:	6873      	ldr	r3, [r6, #4]
   e3e22:	18c4      	adds	r4, r0, r3

    /*
     * Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e3e24:	aa01      	add	r2, sp, #4
   e3e26:	2330      	movs	r3, #48	; 0x30
   e3e28:	4621      	mov	r1, r4
   e3e2a:	4628      	mov	r0, r5
   e3e2c:	f7f1 ff6c 	bl	d5d08 <mbedtls_asn1_get_tag>
   e3e30:	b110      	cbz	r0, e3e38 <mbedtls_x509_get_ext+0x34>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   e3e32:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
   e3e36:	e007      	b.n	e3e48 <mbedtls_x509_get_ext+0x44>

    if( end != *p + len )
   e3e38:	9b01      	ldr	r3, [sp, #4]
   e3e3a:	6828      	ldr	r0, [r5, #0]
   e3e3c:	4418      	add	r0, r3
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
   e3e3e:	4b03      	ldr	r3, [pc, #12]	; (e3e4c <mbedtls_x509_get_ext+0x48>)
   e3e40:	4284      	cmp	r4, r0
   e3e42:	bf14      	ite	ne
   e3e44:	4618      	movne	r0, r3
   e3e46:	2000      	moveq	r0, #0
}
   e3e48:	b002      	add	sp, #8
   e3e4a:	bd70      	pop	{r4, r5, r6, pc}
   e3e4c:	ffffda9a 	.word	0xffffda9a

000e3e50 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
   e3e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e3e54:	b0c2      	sub	sp, #264	; 0x108
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
   e3e56:	f04f 0a00 	mov.w	sl, #0
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
   e3e5a:	f10d 0808 	add.w	r8, sp, #8
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
   e3e5e:	460f      	mov	r7, r1
   e3e60:	4691      	mov	r9, r2
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
   e3e62:	4651      	mov	r1, sl
   e3e64:	f44f 7280 	mov.w	r2, #256	; 0x100
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
   e3e68:	4604      	mov	r4, r0
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
   e3e6a:	4640      	mov	r0, r8
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
   e3e6c:	f8cd a004 	str.w	sl, [sp, #4]
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );

    name = dn;
   e3e70:	464e      	mov	r6, r9
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
   e3e72:	f004 f81e 	bl	e7eb2 <memset>

    name = dn;
    p = buf;
    n = size;
   e3e76:	463d      	mov	r5, r7
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
   e3e78:	4652      	mov	r2, sl
            if( i >= sizeof( s ) - 1 )
                break;

            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
   e3e7a:	f04f 0a3f 	mov.w	sl, #63	; 0x3f

    name = dn;
    p = buf;
    n = size;

    while( name != NULL )
   e3e7e:	2e00      	cmp	r6, #0
   e3e80:	d057      	beq.n	e3f32 <mbedtls_x509_dn_gets+0xe2>
    {
        if( !name->oid.p )
   e3e82:	68b3      	ldr	r3, [r6, #8]
   e3e84:	2b00      	cmp	r3, #0
   e3e86:	d052      	beq.n	e3f2e <mbedtls_x509_dn_gets+0xde>
        {
            name = name->next;
            continue;
        }

        if( name != dn )
   e3e88:	454e      	cmp	r6, r9
   e3e8a:	d011      	beq.n	e3eb0 <mbedtls_x509_dn_gets+0x60>
        {
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
   e3e8c:	4b2b      	ldr	r3, [pc, #172]	; (e3f3c <mbedtls_x509_dn_gets+0xec>)
   e3e8e:	492c      	ldr	r1, [pc, #176]	; (e3f40 <mbedtls_x509_dn_gets+0xf0>)
   e3e90:	4620      	mov	r0, r4
   e3e92:	2a00      	cmp	r2, #0
   e3e94:	bf14      	ite	ne
   e3e96:	460a      	movne	r2, r1
   e3e98:	461a      	moveq	r2, r3
   e3e9a:	4629      	mov	r1, r5
   e3e9c:	f001 fe68 	bl	e5b70 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
   e3ea0:	2800      	cmp	r0, #0
   e3ea2:	da01      	bge.n	e3ea8 <mbedtls_x509_dn_gets+0x58>
   e3ea4:	4827      	ldr	r0, [pc, #156]	; (e3f44 <mbedtls_x509_dn_gets+0xf4>)
   e3ea6:	e045      	b.n	e3f34 <mbedtls_x509_dn_gets+0xe4>
   e3ea8:	4285      	cmp	r5, r0
   e3eaa:	d9fb      	bls.n	e3ea4 <mbedtls_x509_dn_gets+0x54>
   e3eac:	1a2d      	subs	r5, r5, r0
   e3eae:	4404      	add	r4, r0
        }

        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
   e3eb0:	a901      	add	r1, sp, #4
   e3eb2:	4630      	mov	r0, r6
   e3eb4:	f7f6 ff2e 	bl	dad14 <mbedtls_oid_get_attr_short_name>

        if( ret == 0 )
   e3eb8:	b930      	cbnz	r0, e3ec8 <mbedtls_x509_dn_gets+0x78>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
   e3eba:	9b01      	ldr	r3, [sp, #4]
   e3ebc:	4a22      	ldr	r2, [pc, #136]	; (e3f48 <mbedtls_x509_dn_gets+0xf8>)
   e3ebe:	4629      	mov	r1, r5
   e3ec0:	4620      	mov	r0, r4
   e3ec2:	f001 fe55 	bl	e5b70 <snprintf>
   e3ec6:	e004      	b.n	e3ed2 <mbedtls_x509_dn_gets+0x82>
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
   e3ec8:	4a20      	ldr	r2, [pc, #128]	; (e3f4c <mbedtls_x509_dn_gets+0xfc>)
   e3eca:	4629      	mov	r1, r5
   e3ecc:	4620      	mov	r0, r4
   e3ece:	f001 fe4f 	bl	e5b70 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e3ed2:	2800      	cmp	r0, #0
   e3ed4:	dbe6      	blt.n	e3ea4 <mbedtls_x509_dn_gets+0x54>
   e3ed6:	4285      	cmp	r5, r0
   e3ed8:	d9e4      	bls.n	e3ea4 <mbedtls_x509_dn_gets+0x54>
   e3eda:	1a2d      	subs	r5, r5, r0
   e3edc:	4404      	add	r4, r0

        for( i = 0; i < name->val.len; i++ )
   e3ede:	2300      	movs	r3, #0
   e3ee0:	6932      	ldr	r2, [r6, #16]
   e3ee2:	4293      	cmp	r3, r2
   e3ee4:	d213      	bcs.n	e3f0e <mbedtls_x509_dn_gets+0xbe>
        {
            if( i >= sizeof( s ) - 1 )
   e3ee6:	2bff      	cmp	r3, #255	; 0xff
   e3ee8:	d011      	beq.n	e3f0e <mbedtls_x509_dn_gets+0xbe>
                break;

            c = name->val.p[i];
   e3eea:	6972      	ldr	r2, [r6, #20]
   e3eec:	5cd2      	ldrb	r2, [r2, r3]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
   e3eee:	2a1f      	cmp	r2, #31
   e3ef0:	d906      	bls.n	e3f00 <mbedtls_x509_dn_gets+0xb0>
   e3ef2:	2a7f      	cmp	r2, #127	; 0x7f
   e3ef4:	d004      	beq.n	e3f00 <mbedtls_x509_dn_gets+0xb0>
   e3ef6:	f102 017f 	add.w	r1, r2, #127	; 0x7f
   e3efa:	b2c9      	uxtb	r1, r1
   e3efc:	291e      	cmp	r1, #30
   e3efe:	d802      	bhi.n	e3f06 <mbedtls_x509_dn_gets+0xb6>
                 s[i] = '?';
   e3f00:	f808 a003 	strb.w	sl, [r8, r3]
   e3f04:	e001      	b.n	e3f0a <mbedtls_x509_dn_gets+0xba>
            else s[i] = c;
   e3f06:	f808 2003 	strb.w	r2, [r8, r3]
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
        MBEDTLS_X509_SAFE_SNPRINTF;

        for( i = 0; i < name->val.len; i++ )
   e3f0a:	3301      	adds	r3, #1
   e3f0c:	e7e8      	b.n	e3ee0 <mbedtls_x509_dn_gets+0x90>
            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
   e3f0e:	2200      	movs	r2, #0
   e3f10:	f808 2003 	strb.w	r2, [r8, r3]
        ret = mbedtls_snprintf( p, n, "%s", s );
   e3f14:	4629      	mov	r1, r5
   e3f16:	4643      	mov	r3, r8
   e3f18:	4a0d      	ldr	r2, [pc, #52]	; (e3f50 <mbedtls_x509_dn_gets+0x100>)
   e3f1a:	4620      	mov	r0, r4
   e3f1c:	f001 fe28 	bl	e5b70 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e3f20:	2800      	cmp	r0, #0
   e3f22:	dbbf      	blt.n	e3ea4 <mbedtls_x509_dn_gets+0x54>
   e3f24:	4285      	cmp	r5, r0
   e3f26:	d9bd      	bls.n	e3ea4 <mbedtls_x509_dn_gets+0x54>

        merge = name->next_merged;
   e3f28:	7f32      	ldrb	r2, [r6, #28]
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
        ret = mbedtls_snprintf( p, n, "%s", s );
        MBEDTLS_X509_SAFE_SNPRINTF;
   e3f2a:	1a2d      	subs	r5, r5, r0
   e3f2c:	4404      	add	r4, r0

        merge = name->next_merged;
        name = name->next;
   e3f2e:	69b6      	ldr	r6, [r6, #24]
   e3f30:	e7a5      	b.n	e3e7e <mbedtls_x509_dn_gets+0x2e>
    }

    return( (int) ( size - n ) );
   e3f32:	1b78      	subs	r0, r7, r5
}
   e3f34:	b042      	add	sp, #264	; 0x108
   e3f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e3f3a:	bf00      	nop
   e3f3c:	000ea0ed 	.word	0x000ea0ed
   e3f40:	000ea0e9 	.word	0x000ea0e9
   e3f44:	ffffd680 	.word	0xffffd680
   e3f48:	000ea0f0 	.word	0x000ea0f0
   e3f4c:	000ea0f4 	.word	0x000ea0f4
   e3f50:	000ea326 	.word	0x000ea326

000e3f54 <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
   e3f54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *p;

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
   e3f58:	6856      	ldr	r6, [r2, #4]
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
   e3f5a:	f8df a084 	ldr.w	sl, [pc, #132]	; e3fe0 <mbedtls_x509_serial_gets+0x8c>
   e3f5e:	f8df b084 	ldr.w	fp, [pc, #132]	; e3fe4 <mbedtls_x509_serial_gets+0x90>

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
   e3f62:	2e21      	cmp	r6, #33	; 0x21
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
   e3f64:	4680      	mov	r8, r0
   e3f66:	460f      	mov	r7, r1
   e3f68:	4691      	mov	r9, r2

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
   e3f6a:	bf28      	it	cs
   e3f6c:	261c      	movcs	r6, #28
    int ret;
    size_t i, n, nr;
    char *p;

    p = buf;
    n = size;
   e3f6e:	460c      	mov	r4, r1

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;

    for( i = 0; i < nr; i++ )
   e3f70:	2500      	movs	r5, #0
   e3f72:	42b5      	cmp	r5, r6
   e3f74:	d01c      	beq.n	e3fb0 <mbedtls_x509_serial_gets+0x5c>
   e3f76:	f8d9 3008 	ldr.w	r3, [r9, #8]
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
   e3f7a:	b91d      	cbnz	r5, e3f84 <mbedtls_x509_serial_gets+0x30>
   e3f7c:	2e01      	cmp	r6, #1
   e3f7e:	d001      	beq.n	e3f84 <mbedtls_x509_serial_gets+0x30>
   e3f80:	781a      	ldrb	r2, [r3, #0]
   e3f82:	b19a      	cbz	r2, e3fac <mbedtls_x509_serial_gets+0x58>
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
   e3f84:	1e72      	subs	r2, r6, #1
   e3f86:	4295      	cmp	r5, r2
   e3f88:	bf34      	ite	cc
   e3f8a:	4652      	movcc	r2, sl
   e3f8c:	465a      	movcs	r2, fp
   e3f8e:	5d5b      	ldrb	r3, [r3, r5]
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
   e3f90:	9200      	str	r2, [sp, #0]
   e3f92:	4621      	mov	r1, r4
   e3f94:	4a0f      	ldr	r2, [pc, #60]	; (e3fd4 <mbedtls_x509_serial_gets+0x80>)
   e3f96:	4640      	mov	r0, r8
   e3f98:	f001 fdea 	bl	e5b70 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e3f9c:	2800      	cmp	r0, #0
   e3f9e:	da01      	bge.n	e3fa4 <mbedtls_x509_serial_gets+0x50>
   e3fa0:	480d      	ldr	r0, [pc, #52]	; (e3fd8 <mbedtls_x509_serial_gets+0x84>)
   e3fa2:	e014      	b.n	e3fce <mbedtls_x509_serial_gets+0x7a>
   e3fa4:	4284      	cmp	r4, r0
   e3fa6:	d9fb      	bls.n	e3fa0 <mbedtls_x509_serial_gets+0x4c>
   e3fa8:	1a24      	subs	r4, r4, r0
   e3faa:	4480      	add	r8, r0
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;

    for( i = 0; i < nr; i++ )
   e3fac:	3501      	adds	r5, #1
   e3fae:	e7e0      	b.n	e3f72 <mbedtls_x509_serial_gets+0x1e>
        ret = mbedtls_snprintf( p, n, "%02X%s",
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
        MBEDTLS_X509_SAFE_SNPRINTF;
    }

    if( nr != serial->len )
   e3fb0:	f8d9 3004 	ldr.w	r3, [r9, #4]
   e3fb4:	429d      	cmp	r5, r3
   e3fb6:	d009      	beq.n	e3fcc <mbedtls_x509_serial_gets+0x78>
    {
        ret = mbedtls_snprintf( p, n, "...." );
   e3fb8:	4a08      	ldr	r2, [pc, #32]	; (e3fdc <mbedtls_x509_serial_gets+0x88>)
   e3fba:	4621      	mov	r1, r4
   e3fbc:	4640      	mov	r0, r8
   e3fbe:	f001 fdd7 	bl	e5b70 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e3fc2:	2800      	cmp	r0, #0
   e3fc4:	dbec      	blt.n	e3fa0 <mbedtls_x509_serial_gets+0x4c>
   e3fc6:	4284      	cmp	r4, r0
   e3fc8:	d9ea      	bls.n	e3fa0 <mbedtls_x509_serial_gets+0x4c>
   e3fca:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
   e3fcc:	1b38      	subs	r0, r7, r4
}
   e3fce:	b003      	add	sp, #12
   e3fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e3fd4:	000ea0fa 	.word	0x000ea0fa
   e3fd8:	ffffd680 	.word	0xffffd680
   e3fdc:	000ea101 	.word	0x000ea101
   e3fe0:	000ea0f8 	.word	0x000ea0f8
   e3fe4:	000e8b09 	.word	0x000e8b09

000e3fe8 <mbedtls_x509_sig_alg_gets>:
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
   e3fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   e3fec:	460c      	mov	r4, r1
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
   e3fee:	a904      	add	r1, sp, #16
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
   e3ff0:	4698      	mov	r8, r3
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
   e3ff2:	2300      	movs	r3, #0
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
   e3ff4:	4607      	mov	r7, r0
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
   e3ff6:	f841 3d04 	str.w	r3, [r1, #-4]!

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
   e3ffa:	4610      	mov	r0, r2
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
   e3ffc:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
   e4000:	f7f6 fed6 	bl	dadb0 <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
   e4004:	b128      	cbz	r0, e4012 <mbedtls_x509_sig_alg_gets+0x2a>
        ret = mbedtls_snprintf( p, n, "???"  );
   e4006:	4a23      	ldr	r2, [pc, #140]	; (e4094 <mbedtls_x509_sig_alg_gets+0xac>)
   e4008:	4621      	mov	r1, r4
   e400a:	4638      	mov	r0, r7
   e400c:	f001 fdb0 	bl	e5b70 <snprintf>
   e4010:	e005      	b.n	e401e <mbedtls_x509_sig_alg_gets+0x36>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
   e4012:	9b03      	ldr	r3, [sp, #12]
   e4014:	4a20      	ldr	r2, [pc, #128]	; (e4098 <mbedtls_x509_sig_alg_gets+0xb0>)
   e4016:	4621      	mov	r1, r4
   e4018:	4638      	mov	r0, r7
   e401a:	f001 fda9 	bl	e5b70 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   e401e:	2800      	cmp	r0, #0

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
    if( ret != 0 )
        ret = mbedtls_snprintf( p, n, "???"  );
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
   e4020:	4606      	mov	r6, r0
    MBEDTLS_X509_SAFE_SNPRINTF;
   e4022:	da01      	bge.n	e4028 <mbedtls_x509_sig_alg_gets+0x40>
   e4024:	481d      	ldr	r0, [pc, #116]	; (e409c <mbedtls_x509_sig_alg_gets+0xb4>)
   e4026:	e032      	b.n	e408e <mbedtls_x509_sig_alg_gets+0xa6>
   e4028:	4284      	cmp	r4, r0
   e402a:	d9fb      	bls.n	e4024 <mbedtls_x509_sig_alg_gets+0x3c>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
    if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
   e402c:	f1b8 0f06 	cmp.w	r8, #6
    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
    if( ret != 0 )
        ret = mbedtls_snprintf( p, n, "???"  );
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e4030:	eba4 0500 	sub.w	r5, r4, r0

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
    if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
   e4034:	d12a      	bne.n	e408c <mbedtls_x509_sig_alg_gets+0xa4>
        const mbedtls_pk_rsassa_pss_options *pss_opts;
        const mbedtls_md_info_t *md_info, *mgf_md_info;

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) sig_opts;

        md_info = mbedtls_md_info_from_type( md_alg );
   e4036:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   e403a:	f7f6 fca9 	bl	da990 <mbedtls_md_info_from_type>
   e403e:	4680      	mov	r8, r0
        mgf_md_info = mbedtls_md_info_from_type( pss_opts->mgf1_hash_id );
   e4040:	f899 0000 	ldrb.w	r0, [r9]
   e4044:	f7f6 fca4 	bl	da990 <mbedtls_md_info_from_type>
   e4048:	4682      	mov	sl, r0

        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
   e404a:	f1b8 0f00 	cmp.w	r8, #0
   e404e:	d004      	beq.n	e405a <mbedtls_x509_sig_alg_gets+0x72>
   e4050:	4640      	mov	r0, r8
   e4052:	f7f6 fdd8 	bl	dac06 <mbedtls_md_get_name>
   e4056:	4680      	mov	r8, r0
   e4058:	e001      	b.n	e405e <mbedtls_x509_sig_alg_gets+0x76>
   e405a:	f8df 8038 	ldr.w	r8, [pc, #56]	; e4094 <mbedtls_x509_sig_alg_gets+0xac>
   e405e:	f1ba 0f00 	cmp.w	sl, #0
   e4062:	d003      	beq.n	e406c <mbedtls_x509_sig_alg_gets+0x84>
   e4064:	4650      	mov	r0, sl
   e4066:	f7f6 fdce 	bl	dac06 <mbedtls_md_get_name>
   e406a:	e000      	b.n	e406e <mbedtls_x509_sig_alg_gets+0x86>
   e406c:	4809      	ldr	r0, [pc, #36]	; (e4094 <mbedtls_x509_sig_alg_gets+0xac>)
                              md_info ? mbedtls_md_get_name( md_info ) : "???",
                              mgf_md_info ? mbedtls_md_get_name( mgf_md_info ) : "???",
                              pss_opts->expected_salt_len );
   e406e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   e4072:	4a0b      	ldr	r2, [pc, #44]	; (e40a0 <mbedtls_x509_sig_alg_gets+0xb8>)
   e4074:	e88d 0009 	stmia.w	sp, {r0, r3}
   e4078:	4629      	mov	r1, r5
   e407a:	4643      	mov	r3, r8
   e407c:	19b8      	adds	r0, r7, r6
   e407e:	f001 fd77 	bl	e5b70 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e4082:	2800      	cmp	r0, #0
   e4084:	dbce      	blt.n	e4024 <mbedtls_x509_sig_alg_gets+0x3c>
   e4086:	4285      	cmp	r5, r0
   e4088:	d9cc      	bls.n	e4024 <mbedtls_x509_sig_alg_gets+0x3c>
   e408a:	1a2d      	subs	r5, r5, r0
    ((void) pk_alg);
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
   e408c:	1b60      	subs	r0, r4, r5
}
   e408e:	b004      	add	sp, #16
   e4090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e4094:	000ea106 	.word	0x000ea106
   e4098:	000ea326 	.word	0x000ea326
   e409c:	ffffd680 	.word	0xffffd680
   e40a0:	000ea10a 	.word	0x000ea10a

000e40a4 <mbedtls_x509_key_size_helper>:

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
   e40a4:	b510      	push	{r4, lr}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
   e40a6:	4613      	mov	r3, r2
   e40a8:	4a06      	ldr	r2, [pc, #24]	; (e40c4 <mbedtls_x509_key_size_helper+0x20>)

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
   e40aa:	460c      	mov	r4, r1
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
   e40ac:	f001 fd60 	bl	e5b70 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   e40b0:	2800      	cmp	r0, #0
   e40b2:	db05      	blt.n	e40c0 <mbedtls_x509_key_size_helper+0x1c>

    return( 0 );
   e40b4:	4b04      	ldr	r3, [pc, #16]	; (e40c8 <mbedtls_x509_key_size_helper+0x24>)
   e40b6:	4284      	cmp	r4, r0
   e40b8:	bf94      	ite	ls
   e40ba:	4618      	movls	r0, r3
   e40bc:	2000      	movhi	r0, #0
   e40be:	bd10      	pop	{r4, pc}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e40c0:	4801      	ldr	r0, [pc, #4]	; (e40c8 <mbedtls_x509_key_size_helper+0x24>)

    return( 0 );
}
   e40c2:	bd10      	pop	{r4, pc}
   e40c4:	000ea121 	.word	0x000ea121
   e40c8:	ffffd680 	.word	0xffffd680

000e40cc <mbedtls_x509_time_is_past>:
   e40cc:	2000      	movs	r0, #0
   e40ce:	4770      	bx	lr

000e40d0 <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
    ((void) from);
    return( 0 );
}
   e40d0:	2000      	movs	r0, #0
   e40d2:	4770      	bx	lr

000e40d4 <_ZL15x509_memcasecmpPKvS0_j>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
   e40d4:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (const unsigned char *)s1, *n2 = (const unsigned char *)s2;

    for( i = 0; i < len; i++ )
   e40d6:	2400      	movs	r4, #0
   e40d8:	4294      	cmp	r4, r2
   e40da:	d00c      	beq.n	e40f6 <_ZL15x509_memcasecmpPKvS0_j+0x22>
    {
        diff = n1[i] ^ n2[i];
   e40dc:	5d03      	ldrb	r3, [r0, r4]
   e40de:	5d0d      	ldrb	r5, [r1, r4]

        if( diff == 0 )
   e40e0:	405d      	eors	r5, r3
   e40e2:	d006      	beq.n	e40f2 <_ZL15x509_memcasecmpPKvS0_j+0x1e>
            continue;

        if( diff == 32 &&
   e40e4:	2d20      	cmp	r5, #32
   e40e6:	d108      	bne.n	e40fa <_ZL15x509_memcasecmpPKvS0_j+0x26>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
   e40e8:	f023 0320 	bic.w	r3, r3, #32
   e40ec:	3b41      	subs	r3, #65	; 0x41
   e40ee:	2b19      	cmp	r3, #25
   e40f0:	d803      	bhi.n	e40fa <_ZL15x509_memcasecmpPKvS0_j+0x26>
{
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (const unsigned char *)s1, *n2 = (const unsigned char *)s2;

    for( i = 0; i < len; i++ )
   e40f2:	3401      	adds	r4, #1
   e40f4:	e7f0      	b.n	e40d8 <_ZL15x509_memcasecmpPKvS0_j+0x4>
        }

        return( -1 );
    }

    return( 0 );
   e40f6:	2000      	movs	r0, #0
   e40f8:	bd30      	pop	{r4, r5, pc}
              ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
        {
            continue;
        }

        return( -1 );
   e40fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return( 0 );
}
   e40fe:	bd30      	pop	{r4, r5, pc}

000e4100 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
   e4100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e4102:	4605      	mov	r5, r0
   e4104:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
   e4106:	b925      	cbnz	r5, e4112 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x12>
   e4108:	1c20      	adds	r0, r4, #0
   e410a:	bf18      	it	ne
   e410c:	2001      	movne	r0, #1
   e410e:	4240      	negs	r0, r0
   e4110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        if( a == NULL || b == NULL )
   e4112:	2c00      	cmp	r4, #0
   e4114:	d031      	beq.n	e417a <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
   e4116:	682a      	ldr	r2, [r5, #0]
   e4118:	6823      	ldr	r3, [r4, #0]
   e411a:	429a      	cmp	r2, r3
   e411c:	d12d      	bne.n	e417a <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
   e411e:	686a      	ldr	r2, [r5, #4]
    {
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
   e4120:	6863      	ldr	r3, [r4, #4]
   e4122:	429a      	cmp	r2, r3
   e4124:	d129      	bne.n	e417a <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
   e4126:	68a1      	ldr	r1, [r4, #8]
   e4128:	68a8      	ldr	r0, [r5, #8]
   e412a:	f003 fe8d 	bl	e7e48 <memcmp>
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
            a->oid.len != b->oid.len ||
   e412e:	bb20      	cbnz	r0, e417a <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
   e4130:	68ef      	ldr	r7, [r5, #12]
   e4132:	68e6      	ldr	r6, [r4, #12]
   e4134:	42b7      	cmp	r7, r6
   e4136:	d108      	bne.n	e414a <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
   e4138:	692a      	ldr	r2, [r5, #16]
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
   e413a:	6923      	ldr	r3, [r4, #16]
   e413c:	429a      	cmp	r2, r3
   e413e:	d104      	bne.n	e414a <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
        memcmp( a->p, b->p, b->len ) == 0 )
   e4140:	6961      	ldr	r1, [r4, #20]
   e4142:	6968      	ldr	r0, [r5, #20]
   e4144:	f003 fe80 	bl	e7e48 <memcmp>
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
        a->len == b->len &&
   e4148:	b180      	cbz	r0, e416c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6c>
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        a->len == b->len &&
   e414a:	2f0c      	cmp	r7, #12
   e414c:	d001      	beq.n	e4152 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x52>
        memcmp( a->p, b->p, b->len ) == 0 )
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   e414e:	2f13      	cmp	r7, #19
   e4150:	d113      	bne.n	e417a <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
   e4152:	2e0c      	cmp	r6, #12
   e4154:	d001      	beq.n	e415a <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x5a>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   e4156:	2e13      	cmp	r6, #19
   e4158:	d10f      	bne.n	e417a <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
   e415a:	692a      	ldr	r2, [r5, #16]
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   e415c:	6923      	ldr	r3, [r4, #16]
   e415e:	429a      	cmp	r2, r3
   e4160:	d10b      	bne.n	e417a <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
   e4162:	6961      	ldr	r1, [r4, #20]
   e4164:	6968      	ldr	r0, [r5, #20]
   e4166:	f7ff ffb5 	bl	e40d4 <_ZL15x509_memcasecmpPKvS0_j>
        {
            return( -1 );
        }

        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
   e416a:	b930      	cbnz	r0, e417a <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
   e416c:	7f2a      	ldrb	r2, [r5, #28]
   e416e:	7f23      	ldrb	r3, [r4, #28]
   e4170:	429a      	cmp	r2, r3
   e4172:	d102      	bne.n	e417a <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        a = a->next;
   e4174:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
   e4176:	69a4      	ldr	r4, [r4, #24]
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
   e4178:	e7c5      	b.n	e4106 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6>
    {
        if( a == NULL || b == NULL )
            return( -1 );
   e417a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        b = b->next;
    }

    /* a == NULL == b */
    return( 0 );
}
   e417e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e4180 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>:
 * Return 0 if pk_alg is acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( pk_alg == MBEDTLS_PK_NONE )
   e4180:	b151      	cbz	r1, e4198 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1+0x18>
        return( -1 );

    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
   e4182:	2301      	movs	r3, #1
   e4184:	3901      	subs	r1, #1
   e4186:	fa03 f101 	lsl.w	r1, r3, r1
   e418a:	6803      	ldr	r3, [r0, #0]
   e418c:	4219      	tst	r1, r3
   e418e:	bf0c      	ite	eq
   e4190:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   e4194:	2000      	movne	r0, #0
   e4196:	4770      	bx	lr
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( pk_alg == MBEDTLS_PK_NONE )
        return( -1 );
   e4198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
        return( 0 );

    return( -1 );
}
   e419c:	4770      	bx	lr

000e419e <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>:
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
   e419e:	b570      	push	{r4, r5, r6, lr}
   e41a0:	4615      	mov	r5, r2
    int ret;

    if( *p == end )
   e41a2:	6802      	ldr	r2, [r0, #0]
   e41a4:	428a      	cmp	r2, r1
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
   e41a6:	4604      	mov	r4, r0
    int ret;

    if( *p == end )
   e41a8:	d101      	bne.n	e41ae <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x10>
        return( 0 );
   e41aa:	2000      	movs	r0, #0
   e41ac:	bd70      	pop	{r4, r5, r6, pc}

    uid->tag = **p;
   e41ae:	7816      	ldrb	r6, [r2, #0]
   e41b0:	462a      	mov	r2, r5

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
   e41b2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    int ret;

    if( *p == end )
        return( 0 );

    uid->tag = **p;
   e41b6:	f842 6b04 	str.w	r6, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
   e41ba:	f7f1 fda5 	bl	d5d08 <mbedtls_asn1_get_tag>
   e41be:	b128      	cbz	r0, e41cc <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x2e>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | n ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   e41c0:	f110 0f62 	cmn.w	r0, #98	; 0x62
   e41c4:	d0f1      	beq.n	e41aa <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0xc>
            return( 0 );

        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   e41c6:	f5a0 5006 	sub.w	r0, r0, #8576	; 0x2180
   e41ca:	bd70      	pop	{r4, r5, r6, pc}
    }

    uid->p = *p;
   e41cc:	6823      	ldr	r3, [r4, #0]
   e41ce:	60ab      	str	r3, [r5, #8]
    *p += uid->len;
   e41d0:	6822      	ldr	r2, [r4, #0]
   e41d2:	686b      	ldr	r3, [r5, #4]
   e41d4:	4413      	add	r3, r2
   e41d6:	6023      	str	r3, [r4, #0]

    return( 0 );
}
   e41d8:	bd70      	pop	{r4, r5, r6, pc}

000e41da <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>:
 * Check key against profile
 * Return 0 if pk is acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
                                   const mbedtls_pk_context *pk )
{
   e41da:	b538      	push	{r3, r4, r5, lr}
   e41dc:	4604      	mov	r4, r0
    const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
   e41de:	4608      	mov	r0, r1
 * Check key against profile
 * Return 0 if pk is acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
                                   const mbedtls_pk_context *pk )
{
   e41e0:	460d      	mov	r5, r1
    const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
   e41e2:	f7f7 f87f 	bl	db2e4 <mbedtls_pk_get_type>

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
   e41e6:	2801      	cmp	r0, #1
   e41e8:	d001      	beq.n	e41ee <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x14>
   e41ea:	2806      	cmp	r0, #6
   e41ec:	d109      	bne.n	e4202 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x28>
    {
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
   e41ee:	4628      	mov	r0, r5
   e41f0:	f7f7 f80c 	bl	db20c <mbedtls_pk_get_bitlen>
   e41f4:	68e3      	ldr	r3, [r4, #12]
   e41f6:	4298      	cmp	r0, r3
   e41f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e41fc:	bf28      	it	cs
   e41fe:	2000      	movcs	r0, #0
   e4200:	bd38      	pop	{r3, r4, r5, pc}
        return( -1 );
    }
#endif

#if defined(MBEDTLS_ECP_C)
    if( pk_alg == MBEDTLS_PK_ECDSA ||
   e4202:	3802      	subs	r0, #2
   e4204:	b2c0      	uxtb	r0, r0
   e4206:	2802      	cmp	r0, #2
   e4208:	d80d      	bhi.n	e4226 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x4c>
        pk_alg == MBEDTLS_PK_ECKEY ||
        pk_alg == MBEDTLS_PK_ECKEY_DH )
    {
        const mbedtls_ecp_group_id gid = mbedtls_pk_ec( *pk )->grp.id;
   e420a:	686b      	ldr	r3, [r5, #4]
   e420c:	781b      	ldrb	r3, [r3, #0]

        if( gid == MBEDTLS_ECP_DP_NONE )
   e420e:	b153      	cbz	r3, e4226 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x4c>
            return( -1 );

        if( ( profile->allowed_curves & MBEDTLS_X509_ID_FLAG( gid ) ) != 0 )
   e4210:	2201      	movs	r2, #1
   e4212:	3b01      	subs	r3, #1
   e4214:	fa02 f303 	lsl.w	r3, r2, r3
   e4218:	68a2      	ldr	r2, [r4, #8]
   e421a:	4213      	tst	r3, r2
   e421c:	bf0c      	ite	eq
   e421e:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   e4222:	2000      	movne	r0, #0
   e4224:	bd38      	pop	{r3, r4, r5, pc}

        return( -1 );
    }
#endif

    return( -1 );
   e4226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   e422a:	bd38      	pop	{r3, r4, r5, pc}

000e422c <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj>:
/*
 * Check for CN match
 */
static int x509_crt_check_cn( const mbedtls_x509_buf *name,
                              const char *cn, size_t cn_len )
{
   e422c:	b570      	push	{r4, r5, r6, lr}
    /* try exact match */
    if( name->len == cn_len &&
   e422e:	6845      	ldr	r5, [r0, #4]
   e4230:	4295      	cmp	r5, r2
/*
 * Check for CN match
 */
static int x509_crt_check_cn( const mbedtls_x509_buf *name,
                              const char *cn, size_t cn_len )
{
   e4232:	4606      	mov	r6, r0
   e4234:	460c      	mov	r4, r1
    /* try exact match */
    if( name->len == cn_len &&
   e4236:	d104      	bne.n	e4242 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x16>
        x509_memcasecmp( cn, name->p, cn_len ) == 0 )
   e4238:	6881      	ldr	r1, [r0, #8]
   e423a:	4620      	mov	r0, r4
   e423c:	f7ff ff4a 	bl	e40d4 <_ZL15x509_memcasecmpPKvS0_j>
 */
static int x509_crt_check_cn( const mbedtls_x509_buf *name,
                              const char *cn, size_t cn_len )
{
    /* try exact match */
    if( name->len == cn_len &&
   e4240:	b350      	cbz	r0, e4298 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x6c>
 * Return 0 if name matches wildcard, -1 otherwise
 */
static int x509_check_wildcard( const char *cn, const mbedtls_x509_buf *name )
{
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );
   e4242:	4620      	mov	r0, r4
   e4244:	f003 fe7c 	bl	e7f40 <strlen>

    /* We can't have a match if there is no wildcard to match */
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
   e4248:	2d02      	cmp	r5, #2
   e424a:	d922      	bls.n	e4292 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x66>
   e424c:	68b3      	ldr	r3, [r6, #8]
   e424e:	781a      	ldrb	r2, [r3, #0]
   e4250:	2a2a      	cmp	r2, #42	; 0x2a
   e4252:	d11e      	bne.n	e4292 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x66>
   e4254:	785a      	ldrb	r2, [r3, #1]
   e4256:	2a2e      	cmp	r2, #46	; 0x2e
   e4258:	d11b      	bne.n	e4292 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x66>
   e425a:	2200      	movs	r2, #0
        return( -1 );

    for( i = 0; i < cn_len; ++i )
   e425c:	4290      	cmp	r0, r2
   e425e:	d013      	beq.n	e4288 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5c>
    {
        if( cn[i] == '.' )
   e4260:	4621      	mov	r1, r4
   e4262:	3401      	adds	r4, #1
   e4264:	780e      	ldrb	r6, [r1, #0]
   e4266:	2e2e      	cmp	r6, #46	; 0x2e
   e4268:	d001      	beq.n	e426e <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x42>

    /* We can't have a match if there is no wildcard to match */
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( -1 );

    for( i = 0; i < cn_len; ++i )
   e426a:	3201      	adds	r2, #1
   e426c:	e7f6      	b.n	e425c <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x30>
            cn_idx = i;
            break;
        }
    }

    if( cn_idx == 0 )
   e426e:	b182      	cbz	r2, e4292 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x66>
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
   e4270:	1a82      	subs	r2, r0, r2
   e4272:	3d01      	subs	r5, #1
   e4274:	42aa      	cmp	r2, r5
   e4276:	d107      	bne.n	e4288 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5c>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
   e4278:	1c58      	adds	r0, r3, #1
   e427a:	f7ff ff2b 	bl	e40d4 <_ZL15x509_memcasecmpPKvS0_j>
    }

    if( cn_idx == 0 )
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
   e427e:	3000      	adds	r0, #0
   e4280:	bf18      	it	ne
   e4282:	2001      	movne	r0, #1
   e4284:	4240      	negs	r0, r0
   e4286:	e001      	b.n	e428c <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x60>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
    {
        return( 0 );
    }

    return( -1 );
   e4288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    {
        return( 0 );
    }

    /* try wildcard match */
    if( x509_check_wildcard( cn, name ) == 0 )
   e428c:	4240      	negs	r0, r0
   e428e:	4240      	negs	r0, r0
   e4290:	bd70      	pop	{r4, r5, r6, pc}
    {
        return( 0 );
    }

    return( -1 );
   e4292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e4296:	bd70      	pop	{r4, r5, r6, pc}
}
   e4298:	bd70      	pop	{r4, r5, r6, pc}
	...

000e429c <mbedtls_x509_crt_info>:
 */
#define BEFORE_COLON    18
#define BC              "18"
int mbedtls_x509_crt_info( char *buf, size_t size, const char *prefix,
                   const mbedtls_x509_crt *crt )
{
   e429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e42a0:	4681      	mov	r9, r0
   e42a2:	b08d      	sub	sp, #52	; 0x34
   e42a4:	460f      	mov	r7, r1
   e42a6:	4690      	mov	r8, r2
    char key_size_str[BEFORE_COLON];

    p = buf;
    n = size;

    if( NULL == crt )
   e42a8:	461e      	mov	r6, r3
   e42aa:	b94b      	cbnz	r3, e42c0 <mbedtls_x509_crt_info+0x24>
    {
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
   e42ac:	4aa9      	ldr	r2, [pc, #676]	; (e4554 <mbedtls_x509_crt_info+0x2b8>)
   e42ae:	f001 fc5f 	bl	e5b70 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e42b2:	2800      	cmp	r0, #0
   e42b4:	f2c0 82f2 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e42b8:	4287      	cmp	r7, r0
   e42ba:	f200 82f0 	bhi.w	e489e <mbedtls_x509_crt_info+0x602>
   e42be:	e2ed      	b.n	e489c <mbedtls_x509_crt_info+0x600>

        return( (int) ( size - n ) );
    }

    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
   e42c0:	699b      	ldr	r3, [r3, #24]
   e42c2:	9300      	str	r3, [sp, #0]
   e42c4:	4613      	mov	r3, r2
   e42c6:	4aa4      	ldr	r2, [pc, #656]	; (e4558 <mbedtls_x509_crt_info+0x2bc>)
   e42c8:	f001 fc52 	bl	e5b70 <snprintf>
                               prefix, crt->version );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e42cc:	2800      	cmp	r0, #0
   e42ce:	f2c0 82e5 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e42d2:	4287      	cmp	r7, r0
   e42d4:	f240 82e2 	bls.w	e489c <mbedtls_x509_crt_info+0x600>
   e42d8:	1a3c      	subs	r4, r7, r0
   e42da:	4481      	add	r9, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
   e42dc:	4643      	mov	r3, r8
   e42de:	4a9f      	ldr	r2, [pc, #636]	; (e455c <mbedtls_x509_crt_info+0x2c0>)
   e42e0:	4621      	mov	r1, r4
   e42e2:	4648      	mov	r0, r9
   e42e4:	f001 fc44 	bl	e5b70 <snprintf>
                               prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e42e8:	2800      	cmp	r0, #0
   e42ea:	f2c0 82d7 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e42ee:	4284      	cmp	r4, r0
   e42f0:	f240 82d4 	bls.w	e489c <mbedtls_x509_crt_info+0x600>
   e42f4:	1a24      	subs	r4, r4, r0
   e42f6:	4481      	add	r9, r0

    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
   e42f8:	f106 021c 	add.w	r2, r6, #28
   e42fc:	4621      	mov	r1, r4
   e42fe:	4648      	mov	r0, r9
   e4300:	f7ff fe28 	bl	e3f54 <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
   e4304:	2800      	cmp	r0, #0
   e4306:	f2c0 82c9 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e430a:	4284      	cmp	r4, r0
   e430c:	f240 82c6 	bls.w	e489c <mbedtls_x509_crt_info+0x600>
   e4310:	1a24      	subs	r4, r4, r0
   e4312:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
   e4314:	4643      	mov	r3, r8
   e4316:	4a92      	ldr	r2, [pc, #584]	; (e4560 <mbedtls_x509_crt_info+0x2c4>)
   e4318:	4621      	mov	r1, r4
   e431a:	4648      	mov	r0, r9
   e431c:	f001 fc28 	bl	e5b70 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   e4320:	2800      	cmp	r0, #0
   e4322:	f2c0 82bb 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e4326:	4284      	cmp	r4, r0
   e4328:	f240 82b8 	bls.w	e489c <mbedtls_x509_crt_info+0x600>
   e432c:	1a24      	subs	r4, r4, r0
   e432e:	4481      	add	r9, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
   e4330:	f106 024c 	add.w	r2, r6, #76	; 0x4c
   e4334:	4621      	mov	r1, r4
   e4336:	4648      	mov	r0, r9
   e4338:	f7ff fd8a 	bl	e3e50 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
   e433c:	2800      	cmp	r0, #0
   e433e:	f2c0 82ad 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e4342:	4284      	cmp	r4, r0
   e4344:	f240 82aa 	bls.w	e489c <mbedtls_x509_crt_info+0x600>
   e4348:	1a24      	subs	r4, r4, r0
   e434a:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
   e434c:	4643      	mov	r3, r8
   e434e:	4a85      	ldr	r2, [pc, #532]	; (e4564 <mbedtls_x509_crt_info+0x2c8>)
   e4350:	4621      	mov	r1, r4
   e4352:	4648      	mov	r0, r9
   e4354:	f001 fc0c 	bl	e5b70 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   e4358:	2800      	cmp	r0, #0
   e435a:	f2c0 829f 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e435e:	4284      	cmp	r4, r0
   e4360:	f240 829c 	bls.w	e489c <mbedtls_x509_crt_info+0x600>
   e4364:	1a24      	subs	r4, r4, r0
   e4366:	4481      	add	r9, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
   e4368:	f106 026c 	add.w	r2, r6, #108	; 0x6c
   e436c:	4621      	mov	r1, r4
   e436e:	4648      	mov	r0, r9
   e4370:	f7ff fd6e 	bl	e3e50 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
   e4374:	2800      	cmp	r0, #0
   e4376:	f2c0 8291 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e437a:	4284      	cmp	r4, r0
   e437c:	f240 828e 	bls.w	e489c <mbedtls_x509_crt_info+0x600>

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
   e4380:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
   e4384:	9305      	str	r3, [sp, #20]
   e4386:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
   e438a:	9304      	str	r3, [sp, #16]
   e438c:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   e4390:	9303      	str	r3, [sp, #12]
   e4392:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
   e4396:	9302      	str	r3, [sp, #8]
   e4398:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
   e439c:	9301      	str	r3, [sp, #4]
   e439e:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
   e43a2:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e43a4:	1a24      	subs	r4, r4, r0
   e43a6:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
   e43a8:	4643      	mov	r3, r8
   e43aa:	4a6f      	ldr	r2, [pc, #444]	; (e4568 <mbedtls_x509_crt_info+0x2cc>)
   e43ac:	4621      	mov	r1, r4
   e43ae:	4648      	mov	r0, r9
   e43b0:	f001 fbde 	bl	e5b70 <snprintf>
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e43b4:	2800      	cmp	r0, #0
   e43b6:	f2c0 8271 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e43ba:	4284      	cmp	r4, r0
   e43bc:	f240 826e 	bls.w	e489c <mbedtls_x509_crt_info+0x600>

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
   e43c0:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
   e43c4:	9305      	str	r3, [sp, #20]
   e43c6:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
   e43ca:	9304      	str	r3, [sp, #16]
   e43cc:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
   e43d0:	9303      	str	r3, [sp, #12]
   e43d2:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
   e43d6:	9302      	str	r3, [sp, #8]
   e43d8:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
   e43dc:	9301      	str	r3, [sp, #4]
   e43de:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
   e43e2:	9300      	str	r3, [sp, #0]
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e43e4:	1a24      	subs	r4, r4, r0
   e43e6:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
   e43e8:	4643      	mov	r3, r8
   e43ea:	4a60      	ldr	r2, [pc, #384]	; (e456c <mbedtls_x509_crt_info+0x2d0>)
   e43ec:	4621      	mov	r1, r4
   e43ee:	4648      	mov	r0, r9
   e43f0:	f001 fbbe 	bl	e5b70 <snprintf>
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e43f4:	2800      	cmp	r0, #0
   e43f6:	f2c0 8251 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e43fa:	4284      	cmp	r4, r0
   e43fc:	f240 824e 	bls.w	e489c <mbedtls_x509_crt_info+0x600>
   e4400:	1a24      	subs	r4, r4, r0
   e4402:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
   e4404:	4643      	mov	r3, r8
   e4406:	4a5a      	ldr	r2, [pc, #360]	; (e4570 <mbedtls_x509_crt_info+0x2d4>)
   e4408:	4621      	mov	r1, r4
   e440a:	4648      	mov	r0, r9
   e440c:	f001 fbb0 	bl	e5b70 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   e4410:	2800      	cmp	r0, #0
   e4412:	f2c0 8243 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e4416:	4284      	cmp	r4, r0
   e4418:	f240 8240 	bls.w	e489c <mbedtls_x509_crt_info+0x600>

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
   e441c:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
   e4420:	f896 3129 	ldrb.w	r3, [r6, #297]	; 0x129
   e4424:	9201      	str	r2, [sp, #4]
   e4426:	f896 2128 	ldrb.w	r2, [r6, #296]	; 0x128
   e442a:	9200      	str	r2, [sp, #0]
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e442c:	1a24      	subs	r4, r4, r0
   e442e:	4481      	add	r9, r0

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
   e4430:	f106 0228 	add.w	r2, r6, #40	; 0x28
   e4434:	4621      	mov	r1, r4
   e4436:	4648      	mov	r0, r9
   e4438:	f7ff fdd6 	bl	e3fe8 <mbedtls_x509_sig_alg_gets>
                             crt->sig_md, crt->sig_opts );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e443c:	1e05      	subs	r5, r0, #0
   e443e:	f2c0 822d 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e4442:	42ac      	cmp	r4, r5
   e4444:	f240 822a 	bls.w	e489c <mbedtls_x509_crt_info+0x600>

    /* Key size */
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
   e4448:	f106 0bbc 	add.w	fp, r6, #188	; 0xbc
   e444c:	4658      	mov	r0, fp
   e444e:	f7f6 ff3f 	bl	db2d0 <mbedtls_pk_get_name>
   e4452:	f10d 0a1c 	add.w	sl, sp, #28
   e4456:	4602      	mov	r2, r0
   e4458:	2112      	movs	r1, #18
   e445a:	4650      	mov	r0, sl
   e445c:	f7ff fe22 	bl	e40a4 <mbedtls_x509_key_size_helper>
   e4460:	2800      	cmp	r0, #0
   e4462:	f040 821c 	bne.w	e489e <mbedtls_x509_crt_info+0x602>
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
   e4466:	4658      	mov	r0, fp
   e4468:	f7f6 fed0 	bl	db20c <mbedtls_pk_get_bitlen>
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e446c:	1b64      	subs	r4, r4, r5
   e446e:	444d      	add	r5, r9
                                      mbedtls_pk_get_name( &crt->pk ) ) ) != 0 )
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
   e4470:	9001      	str	r0, [sp, #4]
   e4472:	f8cd a000 	str.w	sl, [sp]
   e4476:	4643      	mov	r3, r8
   e4478:	4a3e      	ldr	r2, [pc, #248]	; (e4574 <mbedtls_x509_crt_info+0x2d8>)
   e447a:	4621      	mov	r1, r4
   e447c:	4628      	mov	r0, r5
   e447e:	f001 fb77 	bl	e5b70 <snprintf>
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e4482:	2800      	cmp	r0, #0
   e4484:	f2c0 820a 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e4488:	4284      	cmp	r4, r0
   e448a:	f240 8207 	bls.w	e489c <mbedtls_x509_crt_info+0x600>

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
   e448e:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   e4492:	05db      	lsls	r3, r3, #23
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e4494:	eba4 0400 	sub.w	r4, r4, r0
   e4498:	4405      	add	r5, r0

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
   e449a:	d528      	bpl.n	e44ee <mbedtls_x509_crt_info+0x252>
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
   e449c:	f8d6 10fc 	ldr.w	r1, [r6, #252]	; 0xfc
   e44a0:	4a35      	ldr	r2, [pc, #212]	; (e4578 <mbedtls_x509_crt_info+0x2dc>)
   e44a2:	4b36      	ldr	r3, [pc, #216]	; (e457c <mbedtls_x509_crt_info+0x2e0>)
   e44a4:	2900      	cmp	r1, #0
   e44a6:	bf18      	it	ne
   e44a8:	4613      	movne	r3, r2
   e44aa:	9300      	str	r3, [sp, #0]
   e44ac:	4a34      	ldr	r2, [pc, #208]	; (e4580 <mbedtls_x509_crt_info+0x2e4>)
   e44ae:	4643      	mov	r3, r8
   e44b0:	4621      	mov	r1, r4
   e44b2:	4628      	mov	r0, r5
   e44b4:	f001 fb5c 	bl	e5b70 <snprintf>
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
   e44b8:	2800      	cmp	r0, #0
   e44ba:	f2c0 81ef 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e44be:	4284      	cmp	r4, r0
   e44c0:	f240 81ec 	bls.w	e489c <mbedtls_x509_crt_info+0x600>

        if( crt->max_pathlen > 0 )
   e44c4:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
   e44c8:	2b00      	cmp	r3, #0

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
   e44ca:	eba4 0400 	sub.w	r4, r4, r0
   e44ce:	4405      	add	r5, r0

        if( crt->max_pathlen > 0 )
   e44d0:	dd0d      	ble.n	e44ee <mbedtls_x509_crt_info+0x252>
        {
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
   e44d2:	3b01      	subs	r3, #1
   e44d4:	4a2b      	ldr	r2, [pc, #172]	; (e4584 <mbedtls_x509_crt_info+0x2e8>)
   e44d6:	4621      	mov	r1, r4
   e44d8:	4628      	mov	r0, r5
   e44da:	f001 fb49 	bl	e5b70 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
   e44de:	2800      	cmp	r0, #0
   e44e0:	f2c0 81dc 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e44e4:	4284      	cmp	r4, r0
   e44e6:	f240 81d9 	bls.w	e489c <mbedtls_x509_crt_info+0x600>
   e44ea:	1a24      	subs	r4, r4, r0
   e44ec:	4405      	add	r5, r0
        }
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   e44ee:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   e44f2:	0698      	lsls	r0, r3, #26
   e44f4:	d553      	bpl.n	e459e <mbedtls_x509_crt_info+0x302>
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
   e44f6:	4643      	mov	r3, r8
   e44f8:	4a23      	ldr	r2, [pc, #140]	; (e4588 <mbedtls_x509_crt_info+0x2ec>)
   e44fa:	4621      	mov	r1, r4
   e44fc:	4628      	mov	r0, r5
   e44fe:	f001 fb37 	bl	e5b70 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e4502:	2800      	cmp	r0, #0
   e4504:	f2c0 81ca 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e4508:	42a0      	cmp	r0, r4
   e450a:	f080 81c7 	bcs.w	e489c <mbedtls_x509_crt_info+0x600>
{
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
   e450e:	f8df e07c 	ldr.w	lr, [pc, #124]	; e458c <mbedtls_x509_crt_info+0x2f0>
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
   e4512:	1a24      	subs	r4, r4, r0
   e4514:	4405      	add	r5, r0

        if( ( ret = x509_info_subject_alt_name( &p, &n,
   e4516:	f106 02e8 	add.w	r2, r6, #232	; 0xe8
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;
   e451a:	2000      	movs	r0, #0

    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
   e451c:	6851      	ldr	r1, [r2, #4]
   e451e:	4401      	add	r1, r0
   e4520:	42a1      	cmp	r1, r4
   e4522:	f04f 0300 	mov.w	r3, #0
   e4526:	d301      	bcc.n	e452c <mbedtls_x509_crt_info+0x290>
        {
            *p = '\0';
   e4528:	702b      	strb	r3, [r5, #0]
   e452a:	e1b7      	b.n	e489c <mbedtls_x509_crt_info+0x600>
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
   e452c:	1a64      	subs	r4, r4, r1
        for( i = 0; i < sep_len; i++ )
   e452e:	4283      	cmp	r3, r0
   e4530:	d004      	beq.n	e453c <mbedtls_x509_crt_info+0x2a0>
            *p++ = sep[i];
   e4532:	f81e 1003 	ldrb.w	r1, [lr, r3]
   e4536:	54e9      	strb	r1, [r5, r3]
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
        for( i = 0; i < sep_len; i++ )
   e4538:	3301      	adds	r3, #1
   e453a:	e7f8      	b.n	e452e <mbedtls_x509_crt_info+0x292>
   e453c:	441d      	add	r5, r3
   e453e:	4628      	mov	r0, r5
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
   e4540:	6851      	ldr	r1, [r2, #4]
   e4542:	1a2b      	subs	r3, r5, r0
   e4544:	4299      	cmp	r1, r3
   e4546:	d923      	bls.n	e4590 <mbedtls_x509_crt_info+0x2f4>
            *p++ = cur->buf.p[i];
   e4548:	6891      	ldr	r1, [r2, #8]
   e454a:	5ccb      	ldrb	r3, [r1, r3]
   e454c:	f805 3b01 	strb.w	r3, [r5], #1
   e4550:	e7f6      	b.n	e4540 <mbedtls_x509_crt_info+0x2a4>
   e4552:	bf00      	nop
   e4554:	000ea1f7 	.word	0x000ea1f7
   e4558:	000ea217 	.word	0x000ea217
   e455c:	000ea231 	.word	0x000ea231
   e4560:	000ea248 	.word	0x000ea248
   e4564:	000ea260 	.word	0x000ea260
   e4568:	000ea278 	.word	0x000ea278
   e456c:	000ea2ad 	.word	0x000ea2ad
   e4570:	000ea2e2 	.word	0x000ea2e2
   e4574:	000ea2fa 	.word	0x000ea2fa
   e4578:	000ea1ec 	.word	0x000ea1ec
   e457c:	000ea1f1 	.word	0x000ea1f1
   e4580:	000ea30c 	.word	0x000ea30c
   e4584:	000ea329 	.word	0x000ea329
   e4588:	000ea33a 	.word	0x000ea33a
   e458c:	000e8b09 	.word	0x000e8b09

        sep = ", ";
        sep_len = 2;

        cur = cur->next;
   e4590:	68d2      	ldr	r2, [r2, #12]
        for( i = 0; i < sep_len; i++ )
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
            *p++ = cur->buf.p[i];

        sep = ", ";
   e4592:	f8df e31c 	ldr.w	lr, [pc, #796]	; e48b0 <mbedtls_x509_crt_info+0x614>
        sep_len = 2;
   e4596:	2002      	movs	r0, #2
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;

    while( cur != NULL )
   e4598:	2a00      	cmp	r2, #0
   e459a:	d1bf      	bne.n	e451c <mbedtls_x509_crt_info+0x280>
        sep_len = 2;

        cur = cur->next;
    }

    *p = '\0';
   e459c:	702a      	strb	r2, [r5, #0]
        if( ( ret = x509_info_subject_alt_name( &p, &n,
                                            &crt->subject_alt_names ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
   e459e:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   e45a2:	03d9      	lsls	r1, r3, #15
   e45a4:	f140 8099 	bpl.w	e46da <mbedtls_x509_crt_info+0x43e>
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
   e45a8:	4643      	mov	r3, r8
   e45aa:	4abe      	ldr	r2, [pc, #760]	; (e48a4 <mbedtls_x509_crt_info+0x608>)
   e45ac:	4621      	mov	r1, r4
   e45ae:	4628      	mov	r0, r5
   e45b0:	f001 fade 	bl	e5b70 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e45b4:	2800      	cmp	r0, #0
   e45b6:	f2c0 8171 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e45ba:	42a0      	cmp	r0, r4
   e45bc:	f080 816e 	bcs.w	e489c <mbedtls_x509_crt_info+0x600>

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
   e45c0:	f896 9118 	ldrb.w	r9, [r6, #280]	; 0x118
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
   e45c4:	4bb8      	ldr	r3, [pc, #736]	; (e48a8 <mbedtls_x509_crt_info+0x60c>)
   e45c6:	f019 0f80 	tst.w	r9, #128	; 0x80
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
   e45ca:	eba4 0400 	sub.w	r4, r4, r0
   e45ce:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
   e45d0:	d00d      	beq.n	e45ee <mbedtls_x509_crt_info+0x352>
   e45d2:	4ab6      	ldr	r2, [pc, #728]	; (e48ac <mbedtls_x509_crt_info+0x610>)
   e45d4:	4621      	mov	r1, r4
   e45d6:	4628      	mov	r0, r5
   e45d8:	f001 faca 	bl	e5b70 <snprintf>
   e45dc:	2800      	cmp	r0, #0
   e45de:	f2c0 815d 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e45e2:	4284      	cmp	r4, r0
   e45e4:	f240 815a 	bls.w	e489c <mbedtls_x509_crt_info+0x600>
   e45e8:	4bb1      	ldr	r3, [pc, #708]	; (e48b0 <mbedtls_x509_crt_info+0x614>)
   e45ea:	1a24      	subs	r4, r4, r0
   e45ec:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
   e45ee:	f019 0f40 	tst.w	r9, #64	; 0x40
   e45f2:	d00d      	beq.n	e4610 <mbedtls_x509_crt_info+0x374>
   e45f4:	4aaf      	ldr	r2, [pc, #700]	; (e48b4 <mbedtls_x509_crt_info+0x618>)
   e45f6:	4621      	mov	r1, r4
   e45f8:	4628      	mov	r0, r5
   e45fa:	f001 fab9 	bl	e5b70 <snprintf>
   e45fe:	2800      	cmp	r0, #0
   e4600:	f2c0 814c 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e4604:	4284      	cmp	r4, r0
   e4606:	f240 8149 	bls.w	e489c <mbedtls_x509_crt_info+0x600>
   e460a:	4ba9      	ldr	r3, [pc, #676]	; (e48b0 <mbedtls_x509_crt_info+0x614>)
   e460c:	1a24      	subs	r4, r4, r0
   e460e:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
   e4610:	f019 0f20 	tst.w	r9, #32
   e4614:	d00d      	beq.n	e4632 <mbedtls_x509_crt_info+0x396>
   e4616:	4aa8      	ldr	r2, [pc, #672]	; (e48b8 <mbedtls_x509_crt_info+0x61c>)
   e4618:	4621      	mov	r1, r4
   e461a:	4628      	mov	r0, r5
   e461c:	f001 faa8 	bl	e5b70 <snprintf>
   e4620:	2800      	cmp	r0, #0
   e4622:	f2c0 813b 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e4626:	4284      	cmp	r4, r0
   e4628:	f240 8138 	bls.w	e489c <mbedtls_x509_crt_info+0x600>
   e462c:	4ba0      	ldr	r3, [pc, #640]	; (e48b0 <mbedtls_x509_crt_info+0x614>)
   e462e:	1a24      	subs	r4, r4, r0
   e4630:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
   e4632:	f019 0f10 	tst.w	r9, #16
   e4636:	d00d      	beq.n	e4654 <mbedtls_x509_crt_info+0x3b8>
   e4638:	4aa0      	ldr	r2, [pc, #640]	; (e48bc <mbedtls_x509_crt_info+0x620>)
   e463a:	4621      	mov	r1, r4
   e463c:	4628      	mov	r0, r5
   e463e:	f001 fa97 	bl	e5b70 <snprintf>
   e4642:	2800      	cmp	r0, #0
   e4644:	f2c0 812a 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e4648:	4284      	cmp	r4, r0
   e464a:	f240 8127 	bls.w	e489c <mbedtls_x509_crt_info+0x600>
   e464e:	4b98      	ldr	r3, [pc, #608]	; (e48b0 <mbedtls_x509_crt_info+0x614>)
   e4650:	1a24      	subs	r4, r4, r0
   e4652:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
   e4654:	f019 0f08 	tst.w	r9, #8
   e4658:	d00d      	beq.n	e4676 <mbedtls_x509_crt_info+0x3da>
   e465a:	4a99      	ldr	r2, [pc, #612]	; (e48c0 <mbedtls_x509_crt_info+0x624>)
   e465c:	4621      	mov	r1, r4
   e465e:	4628      	mov	r0, r5
   e4660:	f001 fa86 	bl	e5b70 <snprintf>
   e4664:	2800      	cmp	r0, #0
   e4666:	f2c0 8119 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e466a:	4284      	cmp	r4, r0
   e466c:	f240 8116 	bls.w	e489c <mbedtls_x509_crt_info+0x600>
   e4670:	4b8f      	ldr	r3, [pc, #572]	; (e48b0 <mbedtls_x509_crt_info+0x614>)
   e4672:	1a24      	subs	r4, r4, r0
   e4674:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
   e4676:	f019 0f04 	tst.w	r9, #4
   e467a:	d00d      	beq.n	e4698 <mbedtls_x509_crt_info+0x3fc>
   e467c:	4a91      	ldr	r2, [pc, #580]	; (e48c4 <mbedtls_x509_crt_info+0x628>)
   e467e:	4621      	mov	r1, r4
   e4680:	4628      	mov	r0, r5
   e4682:	f001 fa75 	bl	e5b70 <snprintf>
   e4686:	2800      	cmp	r0, #0
   e4688:	f2c0 8108 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e468c:	4284      	cmp	r4, r0
   e468e:	f240 8105 	bls.w	e489c <mbedtls_x509_crt_info+0x600>
   e4692:	4b87      	ldr	r3, [pc, #540]	; (e48b0 <mbedtls_x509_crt_info+0x614>)
   e4694:	1a24      	subs	r4, r4, r0
   e4696:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
   e4698:	f019 0f02 	tst.w	r9, #2
   e469c:	d00d      	beq.n	e46ba <mbedtls_x509_crt_info+0x41e>
   e469e:	4a8a      	ldr	r2, [pc, #552]	; (e48c8 <mbedtls_x509_crt_info+0x62c>)
   e46a0:	4621      	mov	r1, r4
   e46a2:	4628      	mov	r0, r5
   e46a4:	f001 fa64 	bl	e5b70 <snprintf>
   e46a8:	2800      	cmp	r0, #0
   e46aa:	f2c0 80f7 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e46ae:	4284      	cmp	r4, r0
   e46b0:	f240 80f4 	bls.w	e489c <mbedtls_x509_crt_info+0x600>
   e46b4:	4b7e      	ldr	r3, [pc, #504]	; (e48b0 <mbedtls_x509_crt_info+0x614>)
   e46b6:	1a24      	subs	r4, r4, r0
   e46b8:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
   e46ba:	f019 0f01 	tst.w	r9, #1
   e46be:	d00c      	beq.n	e46da <mbedtls_x509_crt_info+0x43e>
   e46c0:	4a82      	ldr	r2, [pc, #520]	; (e48cc <mbedtls_x509_crt_info+0x630>)
   e46c2:	4621      	mov	r1, r4
   e46c4:	4628      	mov	r0, r5
   e46c6:	f001 fa53 	bl	e5b70 <snprintf>
   e46ca:	2800      	cmp	r0, #0
   e46cc:	f2c0 80e6 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e46d0:	4284      	cmp	r4, r0
   e46d2:	f240 80e3 	bls.w	e489c <mbedtls_x509_crt_info+0x600>
   e46d6:	1a24      	subs	r4, r4, r0
   e46d8:	4405      	add	r5, r0

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
   e46da:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   e46de:	075a      	lsls	r2, r3, #29
   e46e0:	f140 80a0 	bpl.w	e4824 <mbedtls_x509_crt_info+0x588>
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
   e46e4:	4643      	mov	r3, r8
   e46e6:	4a7a      	ldr	r2, [pc, #488]	; (e48d0 <mbedtls_x509_crt_info+0x634>)
   e46e8:	4621      	mov	r1, r4
   e46ea:	4628      	mov	r0, r5
   e46ec:	f001 fa40 	bl	e5b70 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e46f0:	2800      	cmp	r0, #0
   e46f2:	f2c0 80d3 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e46f6:	42a0      	cmp	r0, r4
   e46f8:	f080 80d0 	bcs.w	e489c <mbedtls_x509_crt_info+0x600>

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
   e46fc:	f8d6 9104 	ldr.w	r9, [r6, #260]	; 0x104
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
   e4700:	4b69      	ldr	r3, [pc, #420]	; (e48a8 <mbedtls_x509_crt_info+0x60c>)
   e4702:	f019 0f80 	tst.w	r9, #128	; 0x80
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
   e4706:	eba4 0400 	sub.w	r4, r4, r0
   e470a:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
   e470c:	d00d      	beq.n	e472a <mbedtls_x509_crt_info+0x48e>
   e470e:	4a71      	ldr	r2, [pc, #452]	; (e48d4 <mbedtls_x509_crt_info+0x638>)
   e4710:	4621      	mov	r1, r4
   e4712:	4628      	mov	r0, r5
   e4714:	f001 fa2c 	bl	e5b70 <snprintf>
   e4718:	2800      	cmp	r0, #0
   e471a:	f2c0 80bf 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e471e:	4284      	cmp	r4, r0
   e4720:	f240 80bc 	bls.w	e489c <mbedtls_x509_crt_info+0x600>
   e4724:	4b62      	ldr	r3, [pc, #392]	; (e48b0 <mbedtls_x509_crt_info+0x614>)
   e4726:	1a24      	subs	r4, r4, r0
   e4728:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
   e472a:	f019 0f40 	tst.w	r9, #64	; 0x40
   e472e:	d00d      	beq.n	e474c <mbedtls_x509_crt_info+0x4b0>
   e4730:	4a69      	ldr	r2, [pc, #420]	; (e48d8 <mbedtls_x509_crt_info+0x63c>)
   e4732:	4621      	mov	r1, r4
   e4734:	4628      	mov	r0, r5
   e4736:	f001 fa1b 	bl	e5b70 <snprintf>
   e473a:	2800      	cmp	r0, #0
   e473c:	f2c0 80ae 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e4740:	4284      	cmp	r4, r0
   e4742:	f240 80ab 	bls.w	e489c <mbedtls_x509_crt_info+0x600>
   e4746:	4b5a      	ldr	r3, [pc, #360]	; (e48b0 <mbedtls_x509_crt_info+0x614>)
   e4748:	1a24      	subs	r4, r4, r0
   e474a:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
   e474c:	f019 0f20 	tst.w	r9, #32
   e4750:	d00d      	beq.n	e476e <mbedtls_x509_crt_info+0x4d2>
   e4752:	4a62      	ldr	r2, [pc, #392]	; (e48dc <mbedtls_x509_crt_info+0x640>)
   e4754:	4621      	mov	r1, r4
   e4756:	4628      	mov	r0, r5
   e4758:	f001 fa0a 	bl	e5b70 <snprintf>
   e475c:	2800      	cmp	r0, #0
   e475e:	f2c0 809d 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e4762:	4284      	cmp	r4, r0
   e4764:	f240 809a 	bls.w	e489c <mbedtls_x509_crt_info+0x600>
   e4768:	4b51      	ldr	r3, [pc, #324]	; (e48b0 <mbedtls_x509_crt_info+0x614>)
   e476a:	1a24      	subs	r4, r4, r0
   e476c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
   e476e:	f019 0f10 	tst.w	r9, #16
   e4772:	d00d      	beq.n	e4790 <mbedtls_x509_crt_info+0x4f4>
   e4774:	4a5a      	ldr	r2, [pc, #360]	; (e48e0 <mbedtls_x509_crt_info+0x644>)
   e4776:	4621      	mov	r1, r4
   e4778:	4628      	mov	r0, r5
   e477a:	f001 f9f9 	bl	e5b70 <snprintf>
   e477e:	2800      	cmp	r0, #0
   e4780:	f2c0 808c 	blt.w	e489c <mbedtls_x509_crt_info+0x600>
   e4784:	4284      	cmp	r4, r0
   e4786:	f240 8089 	bls.w	e489c <mbedtls_x509_crt_info+0x600>
   e478a:	4b49      	ldr	r3, [pc, #292]	; (e48b0 <mbedtls_x509_crt_info+0x614>)
   e478c:	1a24      	subs	r4, r4, r0
   e478e:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
   e4790:	f019 0f08 	tst.w	r9, #8
   e4794:	d00b      	beq.n	e47ae <mbedtls_x509_crt_info+0x512>
   e4796:	4a53      	ldr	r2, [pc, #332]	; (e48e4 <mbedtls_x509_crt_info+0x648>)
   e4798:	4621      	mov	r1, r4
   e479a:	4628      	mov	r0, r5
   e479c:	f001 f9e8 	bl	e5b70 <snprintf>
   e47a0:	2800      	cmp	r0, #0
   e47a2:	db7b      	blt.n	e489c <mbedtls_x509_crt_info+0x600>
   e47a4:	4284      	cmp	r4, r0
   e47a6:	d979      	bls.n	e489c <mbedtls_x509_crt_info+0x600>
   e47a8:	4b41      	ldr	r3, [pc, #260]	; (e48b0 <mbedtls_x509_crt_info+0x614>)
   e47aa:	1a24      	subs	r4, r4, r0
   e47ac:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
   e47ae:	f019 0f04 	tst.w	r9, #4
   e47b2:	d00b      	beq.n	e47cc <mbedtls_x509_crt_info+0x530>
   e47b4:	4a4c      	ldr	r2, [pc, #304]	; (e48e8 <mbedtls_x509_crt_info+0x64c>)
   e47b6:	4621      	mov	r1, r4
   e47b8:	4628      	mov	r0, r5
   e47ba:	f001 f9d9 	bl	e5b70 <snprintf>
   e47be:	2800      	cmp	r0, #0
   e47c0:	db6c      	blt.n	e489c <mbedtls_x509_crt_info+0x600>
   e47c2:	4284      	cmp	r4, r0
   e47c4:	d96a      	bls.n	e489c <mbedtls_x509_crt_info+0x600>
   e47c6:	4b3a      	ldr	r3, [pc, #232]	; (e48b0 <mbedtls_x509_crt_info+0x614>)
   e47c8:	1a24      	subs	r4, r4, r0
   e47ca:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
   e47cc:	f019 0f02 	tst.w	r9, #2
   e47d0:	d00b      	beq.n	e47ea <mbedtls_x509_crt_info+0x54e>
   e47d2:	4a46      	ldr	r2, [pc, #280]	; (e48ec <mbedtls_x509_crt_info+0x650>)
   e47d4:	4621      	mov	r1, r4
   e47d6:	4628      	mov	r0, r5
   e47d8:	f001 f9ca 	bl	e5b70 <snprintf>
   e47dc:	2800      	cmp	r0, #0
   e47de:	db5d      	blt.n	e489c <mbedtls_x509_crt_info+0x600>
   e47e0:	4284      	cmp	r4, r0
   e47e2:	d95b      	bls.n	e489c <mbedtls_x509_crt_info+0x600>
   e47e4:	4b32      	ldr	r3, [pc, #200]	; (e48b0 <mbedtls_x509_crt_info+0x614>)
   e47e6:	1a24      	subs	r4, r4, r0
   e47e8:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
   e47ea:	f019 0f01 	tst.w	r9, #1
   e47ee:	d00b      	beq.n	e4808 <mbedtls_x509_crt_info+0x56c>
   e47f0:	4a3f      	ldr	r2, [pc, #252]	; (e48f0 <mbedtls_x509_crt_info+0x654>)
   e47f2:	4621      	mov	r1, r4
   e47f4:	4628      	mov	r0, r5
   e47f6:	f001 f9bb 	bl	e5b70 <snprintf>
   e47fa:	2800      	cmp	r0, #0
   e47fc:	db4e      	blt.n	e489c <mbedtls_x509_crt_info+0x600>
   e47fe:	4284      	cmp	r4, r0
   e4800:	d94c      	bls.n	e489c <mbedtls_x509_crt_info+0x600>
   e4802:	4b2b      	ldr	r3, [pc, #172]	; (e48b0 <mbedtls_x509_crt_info+0x614>)
   e4804:	1a24      	subs	r4, r4, r0
   e4806:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
   e4808:	f419 4f00 	tst.w	r9, #32768	; 0x8000
   e480c:	d00a      	beq.n	e4824 <mbedtls_x509_crt_info+0x588>
   e480e:	4a39      	ldr	r2, [pc, #228]	; (e48f4 <mbedtls_x509_crt_info+0x658>)
   e4810:	4621      	mov	r1, r4
   e4812:	4628      	mov	r0, r5
   e4814:	f001 f9ac 	bl	e5b70 <snprintf>
   e4818:	2800      	cmp	r0, #0
   e481a:	db3f      	blt.n	e489c <mbedtls_x509_crt_info+0x600>
   e481c:	4284      	cmp	r4, r0
   e481e:	d93d      	bls.n	e489c <mbedtls_x509_crt_info+0x600>
   e4820:	1a24      	subs	r4, r4, r0
   e4822:	4405      	add	r5, r0

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
   e4824:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   e4828:	051b      	lsls	r3, r3, #20
   e482a:	d52b      	bpl.n	e4884 <mbedtls_x509_crt_info+0x5e8>
    {
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
   e482c:	4643      	mov	r3, r8
   e482e:	4a32      	ldr	r2, [pc, #200]	; (e48f8 <mbedtls_x509_crt_info+0x65c>)
   e4830:	4621      	mov	r1, r4
   e4832:	4628      	mov	r0, r5
   e4834:	f001 f99c 	bl	e5b70 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e4838:	2800      	cmp	r0, #0
   e483a:	db2f      	blt.n	e489c <mbedtls_x509_crt_info+0x600>
   e483c:	42a0      	cmp	r0, r4
   e483e:	d22d      	bcs.n	e489c <mbedtls_x509_crt_info+0x600>
    int ret;
    const char *desc;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";
   e4840:	f8df 8064 	ldr.w	r8, [pc, #100]	; e48a8 <mbedtls_x509_crt_info+0x60c>

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";
   e4844:	f8df 90c0 	ldr.w	r9, [pc, #192]	; e4908 <mbedtls_x509_crt_info+0x66c>
    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
    {
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;

        if( ( ret = x509_info_ext_key_usage( &p, &n,
   e4848:	f506 7684 	add.w	r6, r6, #264	; 0x108
static int x509_info_ext_key_usage( char **buf, size_t *size,
                                    const mbedtls_x509_sequence *extended_key_usage )
{
    int ret;
    const char *desc;
    size_t n = *size;
   e484c:	1a24      	subs	r4, r4, r0
    char *p = *buf;
   e484e:	4405      	add	r5, r0
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
   e4850:	a906      	add	r1, sp, #24
   e4852:	4630      	mov	r0, r6
   e4854:	f7f6 fa92 	bl	dad7c <mbedtls_oid_get_extended_key_usage>
   e4858:	b108      	cbz	r0, e485e <mbedtls_x509_crt_info+0x5c2>
            desc = "???";
   e485a:	f8cd 9018 	str.w	r9, [sp, #24]

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
   e485e:	9b06      	ldr	r3, [sp, #24]
   e4860:	9300      	str	r3, [sp, #0]
   e4862:	4a26      	ldr	r2, [pc, #152]	; (e48fc <mbedtls_x509_crt_info+0x660>)
   e4864:	4643      	mov	r3, r8
   e4866:	4621      	mov	r1, r4
   e4868:	4628      	mov	r0, r5
   e486a:	f001 f981 	bl	e5b70 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e486e:	2800      	cmp	r0, #0
   e4870:	db14      	blt.n	e489c <mbedtls_x509_crt_info+0x600>
   e4872:	42a0      	cmp	r0, r4
   e4874:	d212      	bcs.n	e489c <mbedtls_x509_crt_info+0x600>

        sep = ", ";

        cur = cur->next;
   e4876:	68f6      	ldr	r6, [r6, #12]
            desc = "???";

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
        MBEDTLS_X509_SAFE_SNPRINTF;

        sep = ", ";
   e4878:	f8df 8034 	ldr.w	r8, [pc, #52]	; e48b0 <mbedtls_x509_crt_info+0x614>
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
        MBEDTLS_X509_SAFE_SNPRINTF;
   e487c:	1a24      	subs	r4, r4, r0
   e487e:	4405      	add	r5, r0
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
   e4880:	2e00      	cmp	r6, #0
   e4882:	d1e5      	bne.n	e4850 <mbedtls_x509_crt_info+0x5b4>
        if( ( ret = x509_info_ext_key_usage( &p, &n,
                                             &crt->ext_key_usage ) ) != 0 )
            return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n" );
   e4884:	4a1e      	ldr	r2, [pc, #120]	; (e4900 <mbedtls_x509_crt_info+0x664>)
   e4886:	4621      	mov	r1, r4
   e4888:	4628      	mov	r0, r5
   e488a:	f001 f971 	bl	e5b70 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   e488e:	2800      	cmp	r0, #0
   e4890:	db04      	blt.n	e489c <mbedtls_x509_crt_info+0x600>
   e4892:	4284      	cmp	r4, r0
   e4894:	d902      	bls.n	e489c <mbedtls_x509_crt_info+0x600>

    return( (int) ( size - n ) );
   e4896:	1a20      	subs	r0, r4, r0
   e4898:	1a38      	subs	r0, r7, r0
   e489a:	e000      	b.n	e489e <mbedtls_x509_crt_info+0x602>
    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
        {
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
   e489c:	4819      	ldr	r0, [pc, #100]	; (e4904 <mbedtls_x509_crt_info+0x668>)

    ret = mbedtls_snprintf( p, n, "\n" );
    MBEDTLS_X509_SAFE_SNPRINTF;

    return( (int) ( size - n ) );
}
   e489e:	b00d      	add	sp, #52	; 0x34
   e48a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e48a4:	000ea352 	.word	0x000ea352
   e48a8:	000e8b09 	.word	0x000e8b09
   e48ac:	000ea36a 	.word	0x000ea36a
   e48b0:	000ea0ed 	.word	0x000ea0ed
   e48b4:	000ea377 	.word	0x000ea377
   e48b8:	000ea384 	.word	0x000ea384
   e48bc:	000ea38c 	.word	0x000ea38c
   e48c0:	000ea39d 	.word	0x000ea39d
   e48c4:	000ea3a8 	.word	0x000ea3a8
   e48c8:	000ea3b1 	.word	0x000ea3b1
   e48cc:	000ea3bc 	.word	0x000ea3bc
   e48d0:	000ea3d0 	.word	0x000ea3d0
   e48d4:	000ea3e8 	.word	0x000ea3e8
   e48d8:	000ea3fc 	.word	0x000ea3fc
   e48dc:	000ea40e 	.word	0x000ea40e
   e48e0:	000ea421 	.word	0x000ea421
   e48e4:	000ea435 	.word	0x000ea435
   e48e8:	000ea445 	.word	0x000ea445
   e48ec:	000ea455 	.word	0x000ea455
   e48f0:	000ea460 	.word	0x000ea460
   e48f4:	000ea470 	.word	0x000ea470
   e48f8:	000ea480 	.word	0x000ea480
   e48fc:	000ea498 	.word	0x000ea498
   e4900:	000e8d45 	.word	0x000e8d45
   e4904:	ffffd680 	.word	0xffffd680
   e4908:	000ea106 	.word	0x000ea106

000e490c <mbedtls_x509_crt_verify_info>:
    { 0, NULL }
};

int mbedtls_x509_crt_verify_info( char *buf, size_t size, const char *prefix,
                          uint32_t flags )
{
   e490c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e4910:	4e1a      	ldr	r6, [pc, #104]	; (e497c <mbedtls_x509_crt_verify_info+0x70>)
   e4912:	4607      	mov	r7, r0
   e4914:	460d      	mov	r5, r1
   e4916:	4691      	mov	r9, r2
   e4918:	4698      	mov	r8, r3
    int ret;
    const struct x509_crt_verify_string *cur;
    char *p = buf;
    size_t n = size;
   e491a:	460c      	mov	r4, r1

    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
   e491c:	f856 3c04 	ldr.w	r3, [r6, #-4]
   e4920:	b1cb      	cbz	r3, e4956 <mbedtls_x509_crt_verify_info+0x4a>
    {
        if( ( flags & cur->code ) == 0 )
   e4922:	f856 2c08 	ldr.w	r2, [r6, #-8]
   e4926:	ea18 0f02 	tst.w	r8, r2
   e492a:	d012      	beq.n	e4952 <mbedtls_x509_crt_verify_info+0x46>
            continue;

        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
   e492c:	9300      	str	r3, [sp, #0]
   e492e:	4a14      	ldr	r2, [pc, #80]	; (e4980 <mbedtls_x509_crt_verify_info+0x74>)
   e4930:	464b      	mov	r3, r9
   e4932:	4621      	mov	r1, r4
   e4934:	4638      	mov	r0, r7
   e4936:	f001 f91b 	bl	e5b70 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e493a:	2800      	cmp	r0, #0
   e493c:	da01      	bge.n	e4942 <mbedtls_x509_crt_verify_info+0x36>
   e493e:	4811      	ldr	r0, [pc, #68]	; (e4984 <mbedtls_x509_crt_verify_info+0x78>)
   e4940:	e018      	b.n	e4974 <mbedtls_x509_crt_verify_info+0x68>
   e4942:	4284      	cmp	r4, r0
   e4944:	d9fb      	bls.n	e493e <mbedtls_x509_crt_verify_info+0x32>
        flags ^= cur->code;
   e4946:	f856 3c08 	ldr.w	r3, [r6, #-8]
    {
        if( ( flags & cur->code ) == 0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
        MBEDTLS_X509_SAFE_SNPRINTF;
   e494a:	1a24      	subs	r4, r4, r0
   e494c:	4407      	add	r7, r0
        flags ^= cur->code;
   e494e:	ea88 0803 	eor.w	r8, r8, r3
   e4952:	3608      	adds	r6, #8
    int ret;
    const struct x509_crt_verify_string *cur;
    char *p = buf;
    size_t n = size;

    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
   e4954:	e7e2      	b.n	e491c <mbedtls_x509_crt_verify_info+0x10>
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
        MBEDTLS_X509_SAFE_SNPRINTF;
        flags ^= cur->code;
    }

    if( flags != 0 )
   e4956:	f1b8 0f00 	cmp.w	r8, #0
   e495a:	d00a      	beq.n	e4972 <mbedtls_x509_crt_verify_info+0x66>
    {
        ret = mbedtls_snprintf( p, n, "%sUnknown reason "
                                       "(this should not happen)\n", prefix );
   e495c:	464b      	mov	r3, r9
   e495e:	4a0a      	ldr	r2, [pc, #40]	; (e4988 <mbedtls_x509_crt_verify_info+0x7c>)
   e4960:	4621      	mov	r1, r4
   e4962:	4638      	mov	r0, r7
   e4964:	f001 f904 	bl	e5b70 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e4968:	2800      	cmp	r0, #0
   e496a:	dbe8      	blt.n	e493e <mbedtls_x509_crt_verify_info+0x32>
   e496c:	4284      	cmp	r4, r0
   e496e:	d9e6      	bls.n	e493e <mbedtls_x509_crt_verify_info+0x32>
   e4970:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
   e4972:	1b28      	subs	r0, r5, r4
}
   e4974:	b003      	add	sp, #12
   e4976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e497a:	bf00      	nop
   e497c:	000ea13c 	.word	0x000ea13c
   e4980:	000ea49d 	.word	0x000ea49d
   e4984:	ffffd680 	.word	0xffffd680
   e4988:	000ea4a3 	.word	0x000ea4a3

000e498c <mbedtls_x509_crt_check_key_usage>:
{
    unsigned int usage_must, usage_may;
    unsigned int may_mask = MBEDTLS_X509_KU_ENCIPHER_ONLY
                          | MBEDTLS_X509_KU_DECIPHER_ONLY;

    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
   e498c:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   e4990:	f013 0304 	ands.w	r3, r3, #4
   e4994:	d01a      	beq.n	e49cc <mbedtls_x509_crt_check_key_usage+0x40>
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
   e4996:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   e499a:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
   e499e:	f421 4000 	bic.w	r0, r1, #32768	; 0x8000
   e49a2:	f023 0301 	bic.w	r3, r3, #1
   e49a6:	f020 0001 	bic.w	r0, r0, #1
   e49aa:	400b      	ands	r3, r1
   e49ac:	4298      	cmp	r0, r3
   e49ae:	d10c      	bne.n	e49ca <mbedtls_x509_crt_check_key_usage+0x3e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
   e49b0:	430a      	orrs	r2, r1
   e49b2:	f248 0301 	movw	r3, #32769	; 0x8001
   e49b6:	4013      	ands	r3, r2
   e49b8:	f248 0001 	movw	r0, #32769	; 0x8001
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   e49bc:	4a04      	ldr	r2, [pc, #16]	; (e49d0 <mbedtls_x509_crt_check_key_usage+0x44>)

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
   e49be:	4008      	ands	r0, r1
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   e49c0:	4298      	cmp	r0, r3
   e49c2:	bf14      	ite	ne
   e49c4:	4613      	movne	r3, r2
   e49c6:	2300      	moveq	r3, #0
   e49c8:	e000      	b.n	e49cc <mbedtls_x509_crt_check_key_usage+0x40>
   e49ca:	4b01      	ldr	r3, [pc, #4]	; (e49d0 <mbedtls_x509_crt_check_key_usage+0x44>)

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    return( 0 );
}
   e49cc:	4618      	mov	r0, r3
   e49ce:	4770      	bx	lr
   e49d0:	ffffd800 	.word	0xffffd800

000e49d4 <mbedtls_x509_crt_check_extended_key_usage>:

#if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
int mbedtls_x509_crt_check_extended_key_usage( const mbedtls_x509_crt *crt,
                                       const char *usage_oid,
                                       size_t usage_len )
{
   e49d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const mbedtls_x509_sequence *cur;

    /* Extension is not mandatory, absent means no restriction */
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
   e49d6:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8

#if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
int mbedtls_x509_crt_check_extended_key_usage( const mbedtls_x509_crt *crt,
                                       const char *usage_oid,
                                       size_t usage_len )
{
   e49da:	4604      	mov	r4, r0
    const mbedtls_x509_sequence *cur;

    /* Extension is not mandatory, absent means no restriction */
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
   e49dc:	f413 6000 	ands.w	r0, r3, #2048	; 0x800

#if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
int mbedtls_x509_crt_check_extended_key_usage( const mbedtls_x509_crt *crt,
                                       const char *usage_oid,
                                       size_t usage_len )
{
   e49e0:	460f      	mov	r7, r1
   e49e2:	4616      	mov	r6, r2
    const mbedtls_x509_sequence *cur;

    /* Extension is not mandatory, absent means no restriction */
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
   e49e4:	d016      	beq.n	e4a14 <mbedtls_x509_crt_check_extended_key_usage+0x40>
        return( 0 );

    /*
     * Look for the requested usage (or wildcard ANY) in our list
     */
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
   e49e6:	f504 7484 	add.w	r4, r4, #264	; 0x108
    {
        const mbedtls_x509_buf *cur_oid = &cur->buf;

        if( cur_oid->len == usage_len &&
   e49ea:	6865      	ldr	r5, [r4, #4]
   e49ec:	42b5      	cmp	r5, r6
   e49ee:	d105      	bne.n	e49fc <mbedtls_x509_crt_check_extended_key_usage+0x28>
            memcmp( cur_oid->p, usage_oid, usage_len ) == 0 )
   e49f0:	4632      	mov	r2, r6
   e49f2:	4639      	mov	r1, r7
   e49f4:	68a0      	ldr	r0, [r4, #8]
   e49f6:	f003 fa27 	bl	e7e48 <memcmp>
     */
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
    {
        const mbedtls_x509_buf *cur_oid = &cur->buf;

        if( cur_oid->len == usage_len &&
   e49fa:	b158      	cbz	r0, e4a14 <mbedtls_x509_crt_check_extended_key_usage+0x40>
            memcmp( cur_oid->p, usage_oid, usage_len ) == 0 )
        {
            return( 0 );
        }

        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
   e49fc:	2d04      	cmp	r5, #4
   e49fe:	d105      	bne.n	e4a0c <mbedtls_x509_crt_check_extended_key_usage+0x38>
   e4a00:	462a      	mov	r2, r5
   e4a02:	68a1      	ldr	r1, [r4, #8]
   e4a04:	4804      	ldr	r0, [pc, #16]	; (e4a18 <mbedtls_x509_crt_check_extended_key_usage+0x44>)
   e4a06:	f003 fa1f 	bl	e7e48 <memcmp>
   e4a0a:	b118      	cbz	r0, e4a14 <mbedtls_x509_crt_check_extended_key_usage+0x40>
        return( 0 );

    /*
     * Look for the requested usage (or wildcard ANY) in our list
     */
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
   e4a0c:	68e4      	ldr	r4, [r4, #12]
   e4a0e:	2c00      	cmp	r4, #0
   e4a10:	d1eb      	bne.n	e49ea <mbedtls_x509_crt_check_extended_key_usage+0x16>

        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
            return( 0 );
    }

    return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   e4a12:	4802      	ldr	r0, [pc, #8]	; (e4a1c <mbedtls_x509_crt_check_extended_key_usage+0x48>)
}
   e4a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e4a16:	bf00      	nop
   e4a18:	000ea12d 	.word	0x000ea12d
   e4a1c:	ffffd800 	.word	0xffffd800

000e4a20 <mbedtls_x509_crt_is_revoked>:
#if defined(MBEDTLS_X509_CRL_PARSE_C)
/*
 * Return 1 if the certificate is revoked, or 0 otherwise.
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
   e4a20:	b538      	push	{r3, r4, r5, lr}
   e4a22:	4605      	mov	r5, r0
    const mbedtls_x509_crl_entry *cur = &crl->entry;
   e4a24:	f101 0484 	add.w	r4, r1, #132	; 0x84

    while( cur != NULL && cur->serial.len != 0 )
   e4a28:	b1a4      	cbz	r4, e4a54 <mbedtls_x509_crt_is_revoked+0x34>
   e4a2a:	6922      	ldr	r2, [r4, #16]
   e4a2c:	b1a2      	cbz	r2, e4a58 <mbedtls_x509_crt_is_revoked+0x38>
    {
        if( crt->serial.len == cur->serial.len &&
   e4a2e:	6a2b      	ldr	r3, [r5, #32]
   e4a30:	429a      	cmp	r2, r3
   e4a32:	d001      	beq.n	e4a38 <mbedtls_x509_crt_is_revoked+0x18>
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
                return( 1 );
        }

        cur = cur->next;
   e4a34:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
   e4a36:	e7f7      	b.n	e4a28 <mbedtls_x509_crt_is_revoked+0x8>
    {
        if( crt->serial.len == cur->serial.len &&
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
   e4a38:	6961      	ldr	r1, [r4, #20]
   e4a3a:	6a68      	ldr	r0, [r5, #36]	; 0x24
   e4a3c:	f003 fa04 	bl	e7e48 <memcmp>
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
    {
        if( crt->serial.len == cur->serial.len &&
   e4a40:	2800      	cmp	r0, #0
   e4a42:	d1f7      	bne.n	e4a34 <mbedtls_x509_crt_is_revoked+0x14>
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
   e4a44:	f104 0018 	add.w	r0, r4, #24
   e4a48:	f7ff fb40 	bl	e40cc <mbedtls_x509_time_is_past>
   e4a4c:	2800      	cmp	r0, #0
   e4a4e:	d0f1      	beq.n	e4a34 <mbedtls_x509_crt_is_revoked+0x14>
                return( 1 );
   e4a50:	2001      	movs	r0, #1
   e4a52:	bd38      	pop	{r3, r4, r5, pc}
        }

        cur = cur->next;
    }

    return( 0 );
   e4a54:	4620      	mov	r0, r4
   e4a56:	bd38      	pop	{r3, r4, r5, pc}
   e4a58:	4610      	mov	r0, r2
}
   e4a5a:	bd38      	pop	{r3, r4, r5, pc}

000e4a5c <mbedtls_x509_crt_verify_restartable>:
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy,
                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
   e4a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e4a60:	b0b7      	sub	sp, #220	; 0xdc
   e4a62:	4604      	mov	r4, r0
   e4a64:	920c      	str	r2, [sp, #48]	; 0x30
    int ret;
    mbedtls_pk_type_t pk_type;
    mbedtls_x509_crt_verify_chain ver_chain;
    uint32_t ee_flags;

    *flags = 0;
   e4a66:	9a41      	ldr	r2, [sp, #260]	; 0x104
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy,
                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
   e4a68:	9305      	str	r3, [sp, #20]
   e4a6a:	9e40      	ldr	r6, [sp, #256]	; 0x100
   e4a6c:	9109      	str	r1, [sp, #36]	; 0x24
    int ret;
    mbedtls_pk_type_t pk_type;
    mbedtls_x509_crt_verify_chain ver_chain;
    uint32_t ee_flags;

    *flags = 0;
   e4a6e:	2300      	movs	r3, #0
   e4a70:	6013      	str	r3, [r2, #0]
{
    size_t i;

    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
    {
        ver_chain->items[i].crt = NULL;
   e4a72:	ad21      	add	r5, sp, #132	; 0x84
   e4a74:	4618      	mov	r0, r3
        ver_chain->items[i].flags = (uint32_t) -1;
   e4a76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
    size_t i;

    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
    {
        ver_chain->items[i].crt = NULL;
   e4a7a:	5158      	str	r0, [r3, r5]
        ver_chain->items[i].flags = (uint32_t) -1;
   e4a7c:	18ea      	adds	r2, r5, r3
   e4a7e:	3308      	adds	r3, #8
static void x509_crt_verify_chain_reset(
    mbedtls_x509_crt_verify_chain *ver_chain )
{
    size_t i;

    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
   e4a80:	2b50      	cmp	r3, #80	; 0x50
    {
        ver_chain->items[i].crt = NULL;
        ver_chain->items[i].flags = (uint32_t) -1;
   e4a82:	6051      	str	r1, [r2, #4]
static void x509_crt_verify_chain_reset(
    mbedtls_x509_crt_verify_chain *ver_chain )
{
    size_t i;

    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
   e4a84:	d1f9      	bne.n	e4a7a <mbedtls_x509_crt_verify_restartable+0x1e>

    *flags = 0;
    ee_flags = 0;
    x509_crt_verify_chain_reset( &ver_chain );

    if( profile == NULL )
   e4a86:	9b05      	ldr	r3, [sp, #20]
   e4a88:	2b00      	cmp	r3, #0
   e4a8a:	f000 8120 	beq.w	e4cce <mbedtls_x509_crt_verify_restartable+0x272>
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    /* check name if requested */
    if( cn != NULL )
   e4a8e:	b34e      	cbz	r6, e4ae4 <mbedtls_x509_crt_verify_restartable+0x88>
                                  const char *cn,
                                  uint32_t *flags )
{
    const mbedtls_x509_name *name;
    const mbedtls_x509_sequence *cur;
    size_t cn_len = strlen( cn );
   e4a90:	4630      	mov	r0, r6
   e4a92:	f003 fa55 	bl	e7f40 <strlen>

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   e4a96:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   e4a9a:	069b      	lsls	r3, r3, #26
                                  const char *cn,
                                  uint32_t *flags )
{
    const mbedtls_x509_name *name;
    const mbedtls_x509_sequence *cur;
    size_t cn_len = strlen( cn );
   e4a9c:	4607      	mov	r7, r0

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   e4a9e:	d50d      	bpl.n	e4abc <mbedtls_x509_crt_verify_restartable+0x60>
    {
        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
   e4aa0:	f104 08e8 	add.w	r8, r4, #232	; 0xe8
        {
            if( x509_crt_check_cn( &cur->buf, cn, cn_len ) == 0 )
   e4aa4:	463a      	mov	r2, r7
   e4aa6:	4631      	mov	r1, r6
   e4aa8:	4640      	mov	r0, r8
   e4aaa:	f7ff fbbf 	bl	e422c <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj>
   e4aae:	b1d8      	cbz	r0, e4ae8 <mbedtls_x509_crt_verify_restartable+0x8c>
    const mbedtls_x509_sequence *cur;
    size_t cn_len = strlen( cn );

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
    {
        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
   e4ab0:	f8d8 800c 	ldr.w	r8, [r8, #12]
   e4ab4:	f1b8 0f00 	cmp.w	r8, #0
   e4ab8:	d1f4      	bne.n	e4aa4 <mbedtls_x509_crt_verify_restartable+0x48>
   e4aba:	e01c      	b.n	e4af6 <mbedtls_x509_crt_verify_restartable+0x9a>
        if( cur == NULL )
            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
    }
    else
    {
        for( name = &crt->subject; name != NULL; name = name->next )
   e4abc:	f104 086c 	add.w	r8, r4, #108	; 0x6c
        {
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
   e4ac0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   e4ac4:	2a03      	cmp	r2, #3
   e4ac6:	d111      	bne.n	e4aec <mbedtls_x509_crt_verify_restartable+0x90>
   e4ac8:	f8d8 1008 	ldr.w	r1, [r8, #8]
   e4acc:	4893      	ldr	r0, [pc, #588]	; (e4d1c <mbedtls_x509_crt_verify_restartable+0x2c0>)
   e4ace:	f003 f9bb 	bl	e7e48 <memcmp>
   e4ad2:	b958      	cbnz	r0, e4aec <mbedtls_x509_crt_verify_restartable+0x90>
                x509_crt_check_cn( &name->val, cn, cn_len ) == 0 )
   e4ad4:	463a      	mov	r2, r7
   e4ad6:	4631      	mov	r1, r6
   e4ad8:	f108 000c 	add.w	r0, r8, #12
   e4adc:	f7ff fba6 	bl	e422c <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj>
    }
    else
    {
        for( name = &crt->subject; name != NULL; name = name->next )
        {
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
   e4ae0:	b920      	cbnz	r0, e4aec <mbedtls_x509_crt_verify_restartable+0x90>
   e4ae2:	e001      	b.n	e4ae8 <mbedtls_x509_crt_verify_restartable+0x8c>
    mbedtls_pk_type_t pk_type;
    mbedtls_x509_crt_verify_chain ver_chain;
    uint32_t ee_flags;

    *flags = 0;
    ee_flags = 0;
   e4ae4:	46b3      	mov	fp, r6
   e4ae6:	e008      	b.n	e4afa <mbedtls_x509_crt_verify_restartable+0x9e>
   e4ae8:	4683      	mov	fp, r0
   e4aea:	e006      	b.n	e4afa <mbedtls_x509_crt_verify_restartable+0x9e>
        if( cur == NULL )
            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
    }
    else
    {
        for( name = &crt->subject; name != NULL; name = name->next )
   e4aec:	f8d8 8018 	ldr.w	r8, [r8, #24]
   e4af0:	f1b8 0f00 	cmp.w	r8, #0
   e4af4:	d1e4      	bne.n	e4ac0 <mbedtls_x509_crt_verify_restartable+0x64>
                break;
            }
        }

        if( name == NULL )
            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
   e4af6:	f04f 0b04 	mov.w	fp, #4
    /* check name if requested */
    if( cn != NULL )
        x509_crt_verify_name( crt, cn, &ee_flags );

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
   e4afa:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
   e4afe:	4630      	mov	r0, r6
   e4b00:	f7f6 fbf0 	bl	db2e4 <mbedtls_pk_get_type>
   e4b04:	9b05      	ldr	r3, [sp, #20]
   e4b06:	3304      	adds	r3, #4

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
   e4b08:	4601      	mov	r1, r0
   e4b0a:	4618      	mov	r0, r3
   e4b0c:	9306      	str	r3, [sp, #24]
   e4b0e:	f7ff fb37 	bl	e4180 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>
   e4b12:	b108      	cbz	r0, e4b18 <mbedtls_x509_crt_verify_restartable+0xbc>
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_PK;
   e4b14:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000

    if( x509_profile_check_key( profile, &crt->pk ) != 0 )
   e4b18:	4631      	mov	r1, r6
   e4b1a:	9805      	ldr	r0, [sp, #20]
   e4b1c:	f7ff fb5d 	bl	e41da <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>
   e4b20:	b108      	cbz	r0, e4b26 <mbedtls_x509_crt_verify_restartable+0xca>
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   e4b22:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
    {
        ver_chain->items[i].crt = NULL;
        ver_chain->items[i].flags = (uint32_t) -1;
    }

    ver_chain->len = 0;
   e4b26:	2700      	movs	r7, #0
        goto find_parent;
    }
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    child = crt;
    self_cnt = 0;
   e4b28:	9707      	str	r7, [sp, #28]
    parent_is_trusted = 0;
    child_is_trusted = 0;
   e4b2a:	463e      	mov	r6, r7

    while( 1 ) {
        /* Add certificate to the verification chain */
        cur = &ver_chain->items[ver_chain->len];
        cur->crt = child;
   e4b2c:	ab21      	add	r3, sp, #132	; 0x84
        cur->flags = 0;
        ver_chain->len++;
        flags = &cur->flags;

        /* Check time-validity (all certificates) */
        if( mbedtls_x509_time_is_past( &child->valid_to ) )
   e4b2e:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
    child_is_trusted = 0;

    while( 1 ) {
        /* Add certificate to the verification chain */
        cur = &ver_chain->items[ver_chain->len];
        cur->crt = child;
   e4b32:	f843 4037 	str.w	r4, [r3, r7, lsl #3]
        cur->flags = 0;
   e4b36:	2300      	movs	r3, #0
   e4b38:	606b      	str	r3, [r5, #4]
        ver_chain->len++;
   e4b3a:	f107 0a01 	add.w	sl, r7, #1
        flags = &cur->flags;

        /* Check time-validity (all certificates) */
        if( mbedtls_x509_time_is_past( &child->valid_to ) )
   e4b3e:	f7ff fac5 	bl	e40cc <mbedtls_x509_time_is_past>
   e4b42:	b108      	cbz	r0, e4b48 <mbedtls_x509_crt_verify_restartable+0xec>
            *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
   e4b44:	2301      	movs	r3, #1
   e4b46:	606b      	str	r3, [r5, #4]

        if( mbedtls_x509_time_is_future( &child->valid_from ) )
   e4b48:	f104 008c 	add.w	r0, r4, #140	; 0x8c
   e4b4c:	f7ff fac0 	bl	e40d0 <mbedtls_x509_time_is_future>
   e4b50:	b118      	cbz	r0, e4b5a <mbedtls_x509_crt_verify_restartable+0xfe>
            *flags |= MBEDTLS_X509_BADCERT_FUTURE;
   e4b52:	686b      	ldr	r3, [r5, #4]
   e4b54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   e4b58:	606b      	str	r3, [r5, #4]

        /* Stop here for trusted roots (but not for trusted EE certs) */
        if( child_is_trusted )
   e4b5a:	2e00      	cmp	r6, #0
   e4b5c:	f040 8194 	bne.w	e4e88 <mbedtls_x509_crt_verify_restartable+0x42c>
            return( 0 );

        /* Check signature algorithm: MD & PK algs */
        if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
   e4b60:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
   e4b64:	9805      	ldr	r0, [sp, #20]
   e4b66:	f7ff fb0b 	bl	e4180 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>
   e4b6a:	b118      	cbz	r0, e4b74 <mbedtls_x509_crt_verify_restartable+0x118>
            *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
   e4b6c:	686b      	ldr	r3, [r5, #4]
   e4b6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   e4b72:	606b      	str	r3, [r5, #4]

        if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
   e4b74:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
   e4b78:	9806      	ldr	r0, [sp, #24]
   e4b7a:	f7ff fb01 	bl	e4180 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>
   e4b7e:	b118      	cbz	r0, e4b88 <mbedtls_x509_crt_verify_restartable+0x12c>
            *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
   e4b80:	686b      	ldr	r3, [r5, #4]
   e4b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   e4b86:	606b      	str	r3, [r5, #4]

        /* Special case: EE certs that are locally trusted */
        if( ver_chain->len == 1 &&
   e4b88:	f1ba 0f01 	cmp.w	sl, #1
   e4b8c:	d119      	bne.n	e4bc2 <mbedtls_x509_crt_verify_restartable+0x166>
                    mbedtls_x509_crt *trust_ca )
{
    mbedtls_x509_crt *cur;

    /* must be self-issued */
    if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
   e4b8e:	f104 016c 	add.w	r1, r4, #108	; 0x6c
   e4b92:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   e4b96:	f7ff fab3 	bl	e4100 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
   e4b9a:	b978      	cbnz	r0, e4bbc <mbedtls_x509_crt_verify_restartable+0x160>
   e4b9c:	9e09      	ldr	r6, [sp, #36]	; 0x24
        return( -1 );

    /* look for an exact match with trusted cert */
    for( cur = trust_ca; cur != NULL; cur = cur->next )
   e4b9e:	b186      	cbz	r6, e4bc2 <mbedtls_x509_crt_verify_restartable+0x166>
    {
        if( crt->raw.len == cur->raw.len &&
   e4ba0:	6862      	ldr	r2, [r4, #4]
   e4ba2:	6873      	ldr	r3, [r6, #4]
   e4ba4:	429a      	cmp	r2, r3
   e4ba6:	d106      	bne.n	e4bb6 <mbedtls_x509_crt_verify_restartable+0x15a>
            memcmp( crt->raw.p, cur->raw.p, crt->raw.len ) == 0 )
   e4ba8:	68b1      	ldr	r1, [r6, #8]
   e4baa:	68a0      	ldr	r0, [r4, #8]
   e4bac:	f003 f94c 	bl	e7e48 <memcmp>
        return( -1 );

    /* look for an exact match with trusted cert */
    for( cur = trust_ca; cur != NULL; cur = cur->next )
    {
        if( crt->raw.len == cur->raw.len &&
   e4bb0:	2800      	cmp	r0, #0
   e4bb2:	f000 8169 	beq.w	e4e88 <mbedtls_x509_crt_verify_restartable+0x42c>
    /* must be self-issued */
    if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
        return( -1 );

    /* look for an exact match with trusted cert */
    for( cur = trust_ca; cur != NULL; cur = cur->next )
   e4bb6:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
   e4bba:	e7f0      	b.n	e4b9e <mbedtls_x509_crt_verify_restartable+0x142>
                    mbedtls_x509_crt *trust_ca )
{
    mbedtls_x509_crt *cur;

    /* must be self-issued */
    if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
   e4bbc:	f8cd a010 	str.w	sl, [sp, #16]
   e4bc0:	e001      	b.n	e4bc6 <mbedtls_x509_crt_verify_restartable+0x16a>
        return( -1 );

    /* look for an exact match with trusted cert */
    for( cur = trust_ca; cur != NULL; cur = cur->next )
   e4bc2:	2301      	movs	r3, #1
   e4bc4:	9304      	str	r3, [sp, #16]
                                  int top )
{
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
   e4bc6:	f104 034c 	add.w	r3, r4, #76	; 0x4c
   e4bca:	930d      	str	r3, [sp, #52]	; 0x34
        rs_ctx->parent_is_trusted = -1;
    }
#endif

    while( 1 ) {
        search_list = *parent_is_trusted ? trust_ca : child->next;
   e4bcc:	9b04      	ldr	r3, [sp, #16]
   e4bce:	b913      	cbnz	r3, e4bd6 <mbedtls_x509_crt_verify_restartable+0x17a>
   e4bd0:	f8d4 6130 	ldr.w	r6, [r4, #304]	; 0x130
   e4bd4:	e000      	b.n	e4bd8 <mbedtls_x509_crt_verify_restartable+0x17c>
   e4bd6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   e4bd8:	2300      	movs	r3, #0
   e4bda:	9308      	str	r3, [sp, #32]
   e4bdc:	4698      	mov	r8, r3
#endif

    fallback_parent = NULL;
    fallback_signature_is_good = 0;

    for( parent = candidates; parent != NULL; parent = parent->next )
   e4bde:	2e00      	cmp	r6, #0
   e4be0:	d06b      	beq.n	e4cba <mbedtls_x509_crt_verify_restartable+0x25e>
                                  int top )
{
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
   e4be2:	f106 016c 	add.w	r1, r6, #108	; 0x6c
   e4be6:	980d      	ldr	r0, [sp, #52]	; 0x34
   e4be8:	f7ff fa8a 	bl	e4100 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
   e4bec:	2800      	cmp	r0, #0
   e4bee:	d161      	bne.n	e4cb4 <mbedtls_x509_crt_verify_restartable+0x258>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
   e4bf0:	9b04      	ldr	r3, [sp, #16]
   e4bf2:	b113      	cbz	r3, e4bfa <mbedtls_x509_crt_verify_restartable+0x19e>
   e4bf4:	69b3      	ldr	r3, [r6, #24]
   e4bf6:	2b02      	cmp	r3, #2
   e4bf8:	dd09      	ble.n	e4c0e <mbedtls_x509_crt_verify_restartable+0x1b2>
        need_ca_bit = 0;

    if( need_ca_bit && ! parent->ca_istrue )
   e4bfa:	f8d6 30fc 	ldr.w	r3, [r6, #252]	; 0xfc
   e4bfe:	2b00      	cmp	r3, #0
   e4c00:	d058      	beq.n	e4cb4 <mbedtls_x509_crt_verify_restartable+0x258>
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
        mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
   e4c02:	2104      	movs	r1, #4
   e4c04:	4630      	mov	r0, r6
   e4c06:	f7ff fec1 	bl	e498c <mbedtls_x509_crt_check_key_usage>
    fallback_signature_is_good = 0;

    for( parent = candidates; parent != NULL; parent = parent->next )
    {
        /* basic parenting skills (name, CA bit, key usage) */
        if( x509_crt_check_parent( child, parent, top ) != 0 )
   e4c0a:	2800      	cmp	r0, #0
   e4c0c:	d152      	bne.n	e4cb4 <mbedtls_x509_crt_verify_restartable+0x258>
            continue;

        /* +1 because stored max_pathlen is 1 higher that the actual value */
        if( parent->max_pathlen > 0 &&
   e4c0e:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
   e4c12:	2b00      	cmp	r3, #0
   e4c14:	dd04      	ble.n	e4c20 <mbedtls_x509_crt_verify_restartable+0x1c4>
   e4c16:	9a07      	ldr	r2, [sp, #28]
   e4c18:	ebc2 020a 	rsb	r2, r2, sl
   e4c1c:	4293      	cmp	r3, r2
   e4c1e:	d349      	bcc.n	e4cb4 <mbedtls_x509_crt_verify_restartable+0x258>
                                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
    const mbedtls_md_info_t *md_info;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];

    md_info = mbedtls_md_info_from_type( child->sig_md );
   e4c20:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   e4c24:	f7f5 feb4 	bl	da990 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
   e4c28:	ab11      	add	r3, sp, #68	; 0x44
   e4c2a:	6922      	ldr	r2, [r4, #16]
   e4c2c:	6961      	ldr	r1, [r4, #20]
                                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
    const mbedtls_md_info_t *md_info;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];

    md_info = mbedtls_md_info_from_type( child->sig_md );
   e4c2e:	900a      	str	r0, [sp, #40]	; 0x28
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
   e4c30:	f7f5 ff1a 	bl	daa68 <mbedtls_md>
   e4c34:	b110      	cbz	r0, e4c3c <mbedtls_x509_crt_verify_restartable+0x1e0>
    {
        /* Note: this can't happen except after an internal error */
        return( -1 );
   e4c36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e4c3a:	e023      	b.n	e4c84 <mbedtls_x509_crt_verify_restartable+0x228>
    }

    /* Skip expensive computation on obvious mismatch */
    if( ! mbedtls_pk_can_do( &parent->pk, child->sig_pk ) )
   e4c3c:	f106 09bc 	add.w	r9, r6, #188	; 0xbc
   e4c40:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
   e4c44:	4648      	mov	r0, r9
   e4c46:	f7f6 fa59 	bl	db0fc <mbedtls_pk_can_do>
   e4c4a:	2800      	cmp	r0, #0
   e4c4c:	d0f3      	beq.n	e4c36 <mbedtls_x509_crt_verify_restartable+0x1da>
    }
#else
    (void) rs_ctx;
#endif

    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
   e4c4e:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   e4c52:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   e4c56:	930b      	str	r3, [sp, #44]	; 0x2c
                child->sig_md, hash, mbedtls_md_get_size( md_info ),
   e4c58:	980a      	ldr	r0, [sp, #40]	; 0x28
   e4c5a:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    }
#else
    (void) rs_ctx;
#endif

    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
   e4c5e:	910f      	str	r1, [sp, #60]	; 0x3c
                child->sig_md, hash, mbedtls_md_get_size( md_info ),
   e4c60:	930e      	str	r3, [sp, #56]	; 0x38
   e4c62:	f7f5 ffcd 	bl	dac00 <mbedtls_md_get_size>
                child->sig.p, child->sig.len ) );
   e4c66:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   e4c6a:	9203      	str	r2, [sp, #12]
   e4c6c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   e4c70:	9202      	str	r2, [sp, #8]
   e4c72:	ab11      	add	r3, sp, #68	; 0x44
   e4c74:	9001      	str	r0, [sp, #4]
   e4c76:	9300      	str	r3, [sp, #0]
   e4c78:	464a      	mov	r2, r9
   e4c7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e4c7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   e4c7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   e4c80:	f7f6 facc 	bl	db21c <mbedtls_pk_verify_ext>
#else
        (void) ret;
#endif

        signature_is_good = ret == 0;
        if( top && ! signature_is_good )
   e4c84:	9b04      	ldr	r3, [sp, #16]
   e4c86:	b103      	cbz	r3, e4c8a <mbedtls_x509_crt_verify_restartable+0x22e>
   e4c88:	b9a0      	cbnz	r0, e4cb4 <mbedtls_x509_crt_verify_restartable+0x258>
        }
#else
        (void) ret;
#endif

        signature_is_good = ret == 0;
   e4c8a:	fab0 f980 	clz	r9, r0
        if( top && ! signature_is_good )
            continue;

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
   e4c8e:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
        }
#else
        (void) ret;
#endif

        signature_is_good = ret == 0;
   e4c92:	ea4f 1959 	mov.w	r9, r9, lsr #5
        if( top && ! signature_is_good )
            continue;

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
   e4c96:	f7ff fa19 	bl	e40cc <mbedtls_x509_time_is_past>
   e4c9a:	b928      	cbnz	r0, e4ca8 <mbedtls_x509_crt_verify_restartable+0x24c>
            mbedtls_x509_time_is_future( &parent->valid_from ) )
   e4c9c:	f106 008c 	add.w	r0, r6, #140	; 0x8c
   e4ca0:	f7ff fa16 	bl	e40d0 <mbedtls_x509_time_is_future>
        signature_is_good = ret == 0;
        if( top && ! signature_is_good )
            continue;

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
   e4ca4:	2800      	cmp	r0, #0
   e4ca6:	d040      	beq.n	e4d2a <mbedtls_x509_crt_verify_restartable+0x2ce>
            mbedtls_x509_time_is_future( &parent->valid_from ) )
        {
            if( fallback_parent == NULL )
   e4ca8:	f1b8 0f00 	cmp.w	r8, #0
   e4cac:	d102      	bne.n	e4cb4 <mbedtls_x509_crt_verify_restartable+0x258>
        }
#else
        (void) ret;
#endif

        signature_is_good = ret == 0;
   e4cae:	f8cd 9020 	str.w	r9, [sp, #32]

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
            mbedtls_x509_time_is_future( &parent->valid_from ) )
        {
            if( fallback_parent == NULL )
   e4cb2:	46b0      	mov	r8, r6
#endif

    fallback_parent = NULL;
    fallback_signature_is_good = 0;

    for( parent = candidates; parent != NULL; parent = parent->next )
   e4cb4:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
   e4cb8:	e791      	b.n	e4bde <mbedtls_x509_crt_verify_restartable+0x182>
#else
        (void) ret;
#endif

        /* stop here if found or already in second iteration */
        if( *parent != NULL || *parent_is_trusted == 0 )
   e4cba:	f1b8 0f00 	cmp.w	r8, #0
   e4cbe:	d131      	bne.n	e4d24 <mbedtls_x509_crt_verify_restartable+0x2c8>
   e4cc0:	9b04      	ldr	r3, [sp, #16]
   e4cc2:	2b00      	cmp	r3, #0
   e4cc4:	f000 8095 	beq.w	e4df2 <mbedtls_x509_crt_verify_restartable+0x396>
            break;

        /* prepare second iteration */
        *parent_is_trusted = 0;
   e4cc8:	f8cd 8010 	str.w	r8, [sp, #16]
   e4ccc:	e780      	b.n	e4bd0 <mbedtls_x509_crt_verify_restartable+0x174>
    ee_flags = 0;
    x509_crt_verify_chain_reset( &ver_chain );

    if( profile == NULL )
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
   e4cce:	4814      	ldr	r0, [pc, #80]	; (e4d20 <mbedtls_x509_crt_verify_restartable+0x2c4>)
   e4cd0:	e01f      	b.n	e4d12 <mbedtls_x509_crt_verify_restartable+0x2b6>

        if( NULL != f_vrfy )
            if( ( ret = f_vrfy( p_vrfy, cur->crt, (int) i-1, &cur_flags ) ) != 0 )
                return( ret );

        *flags |= cur_flags;
   e4cd2:	9b41      	ldr	r3, [sp, #260]	; 0x104
   e4cd4:	681a      	ldr	r2, [r3, #0]
   e4cd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   e4cd8:	4313      	orrs	r3, r2
   e4cda:	9a41      	ldr	r2, [sp, #260]	; 0x104
   e4cdc:	3d08      	subs	r5, #8
   e4cde:	6013      	str	r3, [r2, #0]
   e4ce0:	4622      	mov	r2, r4
    int ret;
    unsigned i;
    uint32_t cur_flags;
    const mbedtls_x509_crt_verify_chain_item *cur;

    for( i = ver_chain->len; i != 0; --i )
   e4ce2:	2c00      	cmp	r4, #0
   e4ce4:	f000 80da 	beq.w	e4e9c <mbedtls_x509_crt_verify_restartable+0x440>
    {
        cur = &ver_chain->items[i-1];
        cur_flags = cur->flags;
   e4ce8:	682b      	ldr	r3, [r5, #0]
   e4cea:	9311      	str	r3, [sp, #68]	; 0x44

        if( NULL != f_vrfy )
   e4cec:	9b42      	ldr	r3, [sp, #264]	; 0x108
   e4cee:	1e54      	subs	r4, r2, #1
   e4cf0:	2b00      	cmp	r3, #0
   e4cf2:	d0ee      	beq.n	e4cd2 <mbedtls_x509_crt_verify_restartable+0x276>
            if( ( ret = f_vrfy( p_vrfy, cur->crt, (int) i-1, &cur_flags ) ) != 0 )
   e4cf4:	ab11      	add	r3, sp, #68	; 0x44
   e4cf6:	4622      	mov	r2, r4
   e4cf8:	f855 1c04 	ldr.w	r1, [r5, #-4]
   e4cfc:	9843      	ldr	r0, [sp, #268]	; 0x10c
   e4cfe:	9e42      	ldr	r6, [sp, #264]	; 0x108
   e4d00:	47b0      	blx	r6
   e4d02:	2800      	cmp	r0, #0
   e4d04:	d0e5      	beq.n	e4cd2 <mbedtls_x509_crt_verify_restartable+0x276>
#endif

    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
   e4d06:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
   e4d0a:	d070      	beq.n	e4dee <mbedtls_x509_crt_verify_restartable+0x392>
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;

    if( ret != 0 )
   e4d0c:	2800      	cmp	r0, #0
   e4d0e:	f000 80c5 	beq.w	e4e9c <mbedtls_x509_crt_verify_restartable+0x440>
    {
        *flags = (uint32_t) -1;
   e4d12:	9a41      	ldr	r2, [sp, #260]	; 0x104
   e4d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   e4d18:	6013      	str	r3, [r2, #0]
        return( ret );
   e4d1a:	e0c5      	b.n	e4ea8 <mbedtls_x509_crt_verify_restartable+0x44c>
   e4d1c:	000e8f39 	.word	0x000e8f39
   e4d20:	ffffd800 	.word	0xffffd800
#else
        (void) ret;
#endif

        /* stop here if found or already in second iteration */
        if( *parent != NULL || *parent_is_trusted == 0 )
   e4d24:	f8dd 9020 	ldr.w	r9, [sp, #32]
   e4d28:	4646      	mov	r6, r8
        }

        /* Count intermediate self-issued (not necessarily self-signed) certs.
         * These can occur with some strategies for key rollover, see [SIRO],
         * and should be excluded from max_pathlen checks. */
        if( ver_chain->len != 1 &&
   e4d2a:	f1ba 0f01 	cmp.w	sl, #1
   e4d2e:	d00c      	beq.n	e4d4a <mbedtls_x509_crt_verify_restartable+0x2ee>
            x509_name_cmp( &child->issuer, &child->subject ) == 0 )
   e4d30:	f104 016c 	add.w	r1, r4, #108	; 0x6c
   e4d34:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   e4d38:	f7ff f9e2 	bl	e4100 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
        }

        /* Count intermediate self-issued (not necessarily self-signed) certs.
         * These can occur with some strategies for key rollover, see [SIRO],
         * and should be excluded from max_pathlen checks. */
        if( ver_chain->len != 1 &&
   e4d3c:	2800      	cmp	r0, #0
   e4d3e:	d062      	beq.n	e4e06 <mbedtls_x509_crt_verify_restartable+0x3aa>
            self_cnt++;
        }

        /* path_cnt is 0 for the first intermediate CA,
         * and if parent is trusted it's not an intermediate CA */
        if( ! parent_is_trusted &&
   e4d40:	9b04      	ldr	r3, [sp, #16]
   e4d42:	b913      	cbnz	r3, e4d4a <mbedtls_x509_crt_verify_restartable+0x2ee>
   e4d44:	f1ba 0f08 	cmp.w	sl, #8
   e4d48:	d851      	bhi.n	e4dee <mbedtls_x509_crt_verify_restartable+0x392>
            /* return immediately to avoid overflow the chain array */
            return( MBEDTLS_ERR_X509_FATAL_ERROR );
        }

        /* signature was checked while searching parent */
        if( ! signature_is_good )
   e4d4a:	f1b9 0f00 	cmp.w	r9, #0
   e4d4e:	d103      	bne.n	e4d58 <mbedtls_x509_crt_verify_restartable+0x2fc>
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
   e4d50:	686b      	ldr	r3, [r5, #4]
   e4d52:	f043 0308 	orr.w	r3, r3, #8
   e4d56:	606b      	str	r3, [r5, #4]

        /* check size of signing key */
        if( x509_profile_check_key( profile, &parent->pk ) != 0 )
   e4d58:	f106 09bc 	add.w	r9, r6, #188	; 0xbc
   e4d5c:	4649      	mov	r1, r9
   e4d5e:	9805      	ldr	r0, [sp, #20]
   e4d60:	f7ff fa3b 	bl	e41da <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>
   e4d64:	b118      	cbz	r0, e4d6e <mbedtls_x509_crt_verify_restartable+0x312>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   e4d66:	686b      	ldr	r3, [r5, #4]
   e4d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   e4d6c:	606b      	str	r3, [r5, #4]
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
   e4d6e:	f106 036c 	add.w	r3, r6, #108	; 0x6c

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
            mbedtls_x509_time_is_future( &parent->valid_from ) )
        {
            if( fallback_parent == NULL )
   e4d72:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
   e4d76:	930b      	str	r3, [sp, #44]	; 0x2c

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
            mbedtls_x509_time_is_future( &parent->valid_from ) )
        {
            if( fallback_parent == NULL )
   e4d78:	2700      	movs	r7, #0
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
   e4d7a:	f1b8 0f00 	cmp.w	r8, #0
   e4d7e:	d02e      	beq.n	e4dde <mbedtls_x509_crt_verify_restartable+0x382>
    {
        if( crl_list->version == 0 ||
   e4d80:	f8d8 3018 	ldr.w	r3, [r8, #24]
   e4d84:	2b00      	cmp	r3, #0
   e4d86:	d07c      	beq.n	e4e82 <mbedtls_x509_crt_verify_restartable+0x426>
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
   e4d88:	990b      	ldr	r1, [sp, #44]	; 0x2c
   e4d8a:	f108 0034 	add.w	r0, r8, #52	; 0x34
   e4d8e:	f7ff f9b7 	bl	e4100 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
   e4d92:	2800      	cmp	r0, #0
   e4d94:	d175      	bne.n	e4e82 <mbedtls_x509_crt_verify_restartable+0x426>

        /*
         * Check if the CA is configured to sign CRLs
         */
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
        if( mbedtls_x509_crt_check_key_usage( ca,
   e4d96:	2102      	movs	r1, #2
   e4d98:	4630      	mov	r0, r6
   e4d9a:	f7ff fdf7 	bl	e498c <mbedtls_x509_crt_check_key_usage>
   e4d9e:	b9e0      	cbnz	r0, e4dda <mbedtls_x509_crt_verify_restartable+0x37e>
#endif

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
   e4da0:	f898 20e8 	ldrb.w	r2, [r8, #232]	; 0xe8
   e4da4:	9805      	ldr	r0, [sp, #20]
   e4da6:	4611      	mov	r1, r2
   e4da8:	f7ff f9ea 	bl	e4180 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>
   e4dac:	b108      	cbz	r0, e4db2 <mbedtls_x509_crt_verify_restartable+0x356>
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
   e4dae:	f447 3700 	orr.w	r7, r7, #131072	; 0x20000

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
   e4db2:	f898 10e9 	ldrb.w	r1, [r8, #233]	; 0xe9
   e4db6:	9806      	ldr	r0, [sp, #24]
   e4db8:	f7ff f9e2 	bl	e4180 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>
   e4dbc:	b108      	cbz	r0, e4dc2 <mbedtls_x509_crt_verify_restartable+0x366>
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
   e4dbe:	f447 2780 	orr.w	r7, r7, #262144	; 0x40000

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
   e4dc2:	4610      	mov	r0, r2
   e4dc4:	f7f5 fde4 	bl	da990 <mbedtls_md_info_from_type>
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
   e4dc8:	ab11      	add	r3, sp, #68	; 0x44
   e4dca:	f8d8 2010 	ldr.w	r2, [r8, #16]
   e4dce:	f8d8 1014 	ldr.w	r1, [r8, #20]
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
   e4dd2:	9008      	str	r0, [sp, #32]
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
   e4dd4:	f7f5 fe48 	bl	daa68 <mbedtls_md>
   e4dd8:	b1c8      	cbz	r0, e4e0e <mbedtls_x509_crt_verify_restartable+0x3b2>

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
                           crl_list->sig.p, crl_list->sig.len ) != 0 )
        {
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
   e4dda:	f047 0710 	orr.w	r7, r7, #16
        if( x509_profile_check_key( profile, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

#if defined(MBEDTLS_X509_CRL_PARSE_C)
        /* Check trusted CA's CRL for the given crt */
        *flags |= x509_crt_verifycrl( child, parent, ca_crl, profile );
   e4dde:	686b      	ldr	r3, [r5, #4]
   e4de0:	431f      	orrs	r7, r3
   e4de2:	606f      	str	r7, [r5, #4]
   e4de4:	4634      	mov	r4, r6
   e4de6:	3508      	adds	r5, #8
    while( 1 ) {
        /* Add certificate to the verification chain */
        cur = &ver_chain->items[ver_chain->len];
        cur->crt = child;
        cur->flags = 0;
        ver_chain->len++;
   e4de8:	4657      	mov	r7, sl
   e4dea:	9e04      	ldr	r6, [sp, #16]
   e4dec:	e69e      	b.n	e4b2c <mbedtls_x509_crt_verify_restartable+0xd0>

    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
   e4dee:	4830      	ldr	r0, [pc, #192]	; (e4eb0 <mbedtls_x509_crt_verify_restartable+0x454>)
   e4df0:	e78f      	b.n	e4d12 <mbedtls_x509_crt_verify_restartable+0x2b6>
#endif

        /* No parent? We're done here */
        if( parent == NULL )
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
   e4df2:	ab36      	add	r3, sp, #216	; 0xd8
   e4df4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   e4df8:	f857 3c50 	ldr.w	r3, [r7, #-80]
   e4dfc:	f043 0308 	orr.w	r3, r3, #8
   e4e00:	f847 3c50 	str.w	r3, [r7, #-80]
   e4e04:	e040      	b.n	e4e88 <mbedtls_x509_crt_verify_restartable+0x42c>
         * These can occur with some strategies for key rollover, see [SIRO],
         * and should be excluded from max_pathlen checks. */
        if( ver_chain->len != 1 &&
            x509_name_cmp( &child->issuer, &child->subject ) == 0 )
        {
            self_cnt++;
   e4e06:	9b07      	ldr	r3, [sp, #28]
   e4e08:	3301      	adds	r3, #1
   e4e0a:	9307      	str	r3, [sp, #28]
   e4e0c:	e798      	b.n	e4d40 <mbedtls_x509_crt_verify_restartable+0x2e4>
            /* Note: this can't happen except after an internal error */
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
            break;
        }

        if( x509_profile_check_key( profile, &ca->pk ) != 0 )
   e4e0e:	4649      	mov	r1, r9
   e4e10:	9805      	ldr	r0, [sp, #20]
   e4e12:	f7ff f9e2 	bl	e41da <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>
   e4e16:	b108      	cbz	r0, e4e1c <mbedtls_x509_crt_verify_restartable+0x3c0>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   e4e18:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
   e4e1c:	f898 30e9 	ldrb.w	r3, [r8, #233]	; 0xe9
   e4e20:	f8d8 10ec 	ldr.w	r1, [r8, #236]	; 0xec
   e4e24:	930a      	str	r3, [sp, #40]	; 0x28
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
   e4e26:	9808      	ldr	r0, [sp, #32]
        }

        if( x509_profile_check_key( profile, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
   e4e28:	f898 30e8 	ldrb.w	r3, [r8, #232]	; 0xe8
   e4e2c:	910e      	str	r1, [sp, #56]	; 0x38
   e4e2e:	930d      	str	r3, [sp, #52]	; 0x34
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
   e4e30:	f7f5 fee6 	bl	dac00 <mbedtls_md_get_size>
        }

        if( x509_profile_check_key( profile, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
   e4e34:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
   e4e38:	9203      	str	r2, [sp, #12]
   e4e3a:	f8d8 20e4 	ldr.w	r2, [r8, #228]	; 0xe4
   e4e3e:	9202      	str	r2, [sp, #8]
   e4e40:	ab11      	add	r3, sp, #68	; 0x44
   e4e42:	9001      	str	r0, [sp, #4]
   e4e44:	9300      	str	r3, [sp, #0]
   e4e46:	464a      	mov	r2, r9
   e4e48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e4e4a:	990e      	ldr	r1, [sp, #56]	; 0x38
   e4e4c:	980a      	ldr	r0, [sp, #40]	; 0x28
   e4e4e:	f7f6 f9e5 	bl	db21c <mbedtls_pk_verify_ext>
   e4e52:	2800      	cmp	r0, #0
   e4e54:	d1c1      	bne.n	e4dda <mbedtls_x509_crt_verify_restartable+0x37e>
        }

        /*
         * Check for validity of CRL (Do not drop out)
         */
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
   e4e56:	f108 006c 	add.w	r0, r8, #108	; 0x6c
   e4e5a:	f7ff f937 	bl	e40cc <mbedtls_x509_time_is_past>
   e4e5e:	b108      	cbz	r0, e4e64 <mbedtls_x509_crt_verify_restartable+0x408>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
   e4e60:	f047 0720 	orr.w	r7, r7, #32

        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
   e4e64:	f108 0054 	add.w	r0, r8, #84	; 0x54
   e4e68:	f7ff f932 	bl	e40d0 <mbedtls_x509_time_is_future>
   e4e6c:	b108      	cbz	r0, e4e72 <mbedtls_x509_crt_verify_restartable+0x416>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
   e4e6e:	f447 6780 	orr.w	r7, r7, #1024	; 0x400

        /*
         * Check if certificate is revoked
         */
        if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
   e4e72:	4641      	mov	r1, r8
   e4e74:	4620      	mov	r0, r4
   e4e76:	f7ff fdd3 	bl	e4a20 <mbedtls_x509_crt_is_revoked>
   e4e7a:	b110      	cbz	r0, e4e82 <mbedtls_x509_crt_verify_restartable+0x426>
        {
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
   e4e7c:	f047 0702 	orr.w	r7, r7, #2
   e4e80:	e7ad      	b.n	e4dde <mbedtls_x509_crt_verify_restartable+0x382>
    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
        {
            crl_list = crl_list->next;
   e4e82:	f8d8 80f0 	ldr.w	r8, [r8, #240]	; 0xf0
   e4e86:	e778      	b.n	e4d7a <mbedtls_x509_crt_verify_restartable+0x31e>

    if( ret != 0 )
        goto exit;

    /* Merge end-entity flags */
    ver_chain.items[0].flags |= ee_flags;
   e4e88:	9822      	ldr	r0, [sp, #136]	; 0x88
   e4e8a:	ab36      	add	r3, sp, #216	; 0xd8
   e4e8c:	ea40 000b 	orr.w	r0, r0, fp
   e4e90:	eb03 05ca 	add.w	r5, r3, sl, lsl #3
   e4e94:	9022      	str	r0, [sp, #136]	; 0x88
   e4e96:	3d58      	subs	r5, #88	; 0x58
   e4e98:	4652      	mov	r2, sl
   e4e9a:	e725      	b.n	e4ce8 <mbedtls_x509_crt_verify_restartable+0x28c>
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
   e4e9c:	9b41      	ldr	r3, [sp, #260]	; 0x104
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
   e4e9e:	4805      	ldr	r0, [pc, #20]	; (e4eb4 <mbedtls_x509_crt_verify_restartable+0x458>)
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
   e4ea0:	681b      	ldr	r3, [r3, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
   e4ea2:	2b00      	cmp	r3, #0
   e4ea4:	bf08      	it	eq
   e4ea6:	2000      	moveq	r0, #0

    return( 0 );
}
   e4ea8:	b037      	add	sp, #220	; 0xdc
   e4eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e4eae:	bf00      	nop
   e4eb0:	ffffd000 	.word	0xffffd000
   e4eb4:	ffffd900 	.word	0xffffd900

000e4eb8 <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
   e4eb8:	f44f 729a 	mov.w	r2, #308	; 0x134
   e4ebc:	2100      	movs	r1, #0
   e4ebe:	f002 bff8 	b.w	e7eb2 <memset>

000e4ec2 <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
   e4ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
   e4ec4:	4606      	mov	r6, r0
   e4ec6:	2800      	cmp	r0, #0
   e4ec8:	d057      	beq.n	e4f7a <mbedtls_x509_crt_free+0xb8>
   e4eca:	4604      	mov	r4, r0
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
   e4ecc:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   e4ed0:	f7f6 f8e3 	bl	db09a <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
   e4ed4:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   e4ed8:	f000 fe32 	bl	e5b40 <free>
#endif

        name_cur = cert_cur->issuer.next;
   e4edc:	6e65      	ldr	r5, [r4, #100]	; 0x64
        while( name_cur != NULL )
   e4ede:	b14d      	cbz	r5, e4ef4 <mbedtls_x509_crt_free+0x32>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   e4ee0:	4628      	mov	r0, r5

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
   e4ee2:	69af      	ldr	r7, [r5, #24]
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   e4ee4:	2120      	movs	r1, #32
   e4ee6:	f7f7 fb83 	bl	dc5f0 <mbedtls_platform_zeroize>
            mbedtls_free( name_prv );
   e4eea:	4628      	mov	r0, r5
   e4eec:	f000 fe28 	bl	e5b40 <free>

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
   e4ef0:	463d      	mov	r5, r7
#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
   e4ef2:	e7f4      	b.n	e4ede <mbedtls_x509_crt_free+0x1c>
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
   e4ef4:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        while( name_cur != NULL )
   e4ef8:	b14d      	cbz	r5, e4f0e <mbedtls_x509_crt_free+0x4c>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   e4efa:	4628      	mov	r0, r5

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
   e4efc:	69af      	ldr	r7, [r5, #24]
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   e4efe:	2120      	movs	r1, #32
   e4f00:	f7f7 fb76 	bl	dc5f0 <mbedtls_platform_zeroize>
            mbedtls_free( name_prv );
   e4f04:	4628      	mov	r0, r5
   e4f06:	f000 fe1b 	bl	e5b40 <free>

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
   e4f0a:	463d      	mov	r5, r7
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
   e4f0c:	e7f4      	b.n	e4ef8 <mbedtls_x509_crt_free+0x36>
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
   e4f0e:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
        while( seq_cur != NULL )
   e4f12:	b14d      	cbz	r5, e4f28 <mbedtls_x509_crt_free+0x66>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
   e4f14:	4628      	mov	r0, r5

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
   e4f16:	68ef      	ldr	r7, [r5, #12]
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
   e4f18:	2110      	movs	r1, #16
   e4f1a:	f7f7 fb69 	bl	dc5f0 <mbedtls_platform_zeroize>
            mbedtls_free( seq_prv );
   e4f1e:	4628      	mov	r0, r5
   e4f20:	f000 fe0e 	bl	e5b40 <free>

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
   e4f24:	463d      	mov	r5, r7
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
   e4f26:	e7f4      	b.n	e4f12 <mbedtls_x509_crt_free+0x50>
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
   e4f28:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
   e4f2c:	b14d      	cbz	r5, e4f42 <mbedtls_x509_crt_free+0x80>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
   e4f2e:	4628      	mov	r0, r5

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
   e4f30:	68ef      	ldr	r7, [r5, #12]
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
   e4f32:	2110      	movs	r1, #16
   e4f34:	f7f7 fb5c 	bl	dc5f0 <mbedtls_platform_zeroize>
            mbedtls_free( seq_prv );
   e4f38:	4628      	mov	r0, r5
   e4f3a:	f000 fe01 	bl	e5b40 <free>

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
   e4f3e:	463d      	mov	r5, r7
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
   e4f40:	e7f4      	b.n	e4f2c <mbedtls_x509_crt_free+0x6a>
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
   e4f42:	68a0      	ldr	r0, [r4, #8]
   e4f44:	b128      	cbz	r0, e4f52 <mbedtls_x509_crt_free+0x90>
        {
            mbedtls_platform_zeroize( cert_cur->raw.p, cert_cur->raw.len );
   e4f46:	6861      	ldr	r1, [r4, #4]
   e4f48:	f7f7 fb52 	bl	dc5f0 <mbedtls_platform_zeroize>
            mbedtls_free( cert_cur->raw.p );
   e4f4c:	68a0      	ldr	r0, [r4, #8]
   e4f4e:	f000 fdf7 	bl	e5b40 <free>
        }

        cert_cur = cert_cur->next;
   e4f52:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
   e4f56:	2c00      	cmp	r4, #0
   e4f58:	d1b8      	bne.n	e4ecc <mbedtls_x509_crt_free+0xa>
   e4f5a:	4634      	mov	r4, r6
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;

        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
   e4f5c:	f44f 719a 	mov.w	r1, #308	; 0x134
   e4f60:	4620      	mov	r0, r4

    cert_cur = crt;
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;
   e4f62:	f8d4 5130 	ldr.w	r5, [r4, #304]	; 0x130

        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
   e4f66:	f7f7 fb43 	bl	dc5f0 <mbedtls_platform_zeroize>
        if( cert_prv != crt )
   e4f6a:	42b4      	cmp	r4, r6
   e4f6c:	d002      	beq.n	e4f74 <mbedtls_x509_crt_free+0xb2>
            mbedtls_free( cert_prv );
   e4f6e:	4620      	mov	r0, r4
   e4f70:	f000 fde6 	bl	e5b40 <free>
    }
    while( cert_cur != NULL );
   e4f74:	462c      	mov	r4, r5
   e4f76:	2d00      	cmp	r5, #0
   e4f78:	d1f0      	bne.n	e4f5c <mbedtls_x509_crt_free+0x9a>
   e4f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e4f7c <mbedtls_x509_crt_parse_der>:
 * Parse one X.509 certificate in DER format from a buffer and add them to a
 * chained list
 */
int mbedtls_x509_crt_parse_der( mbedtls_x509_crt *chain, const unsigned char *buf,
                        size_t buflen )
{
   e4f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e4f80:	4688      	mov	r8, r1
   e4f82:	b09b      	sub	sp, #108	; 0x6c
   e4f84:	4615      	mov	r5, r2
    mbedtls_x509_crt *crt = chain, *prev = NULL;

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
   e4f86:	4682      	mov	sl, r0
   e4f88:	2800      	cmp	r0, #0
   e4f8a:	f000 81bd 	beq.w	e5308 <mbedtls_x509_crt_parse_der+0x38c>
   e4f8e:	2900      	cmp	r1, #0
   e4f90:	f000 81ba 	beq.w	e5308 <mbedtls_x509_crt_parse_der+0x38c>
   e4f94:	4604      	mov	r4, r0
   e4f96:	f04f 0900 	mov.w	r9, #0
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    while( crt->version != 0 && crt->next != NULL )
   e4f9a:	69a3      	ldr	r3, [r4, #24]
   e4f9c:	b1a3      	cbz	r3, e4fc8 <mbedtls_x509_crt_parse_der+0x4c>
   e4f9e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   e4fa2:	46a1      	mov	r9, r4
   e4fa4:	b10b      	cbz	r3, e4faa <mbedtls_x509_crt_parse_der+0x2e>
   e4fa6:	461c      	mov	r4, r3
   e4fa8:	e7f7      	b.n	e4f9a <mbedtls_x509_crt_parse_der+0x1e>
    /*
     * Add new certificate on the end of the chain if needed.
     */
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
   e4faa:	f44f 719a 	mov.w	r1, #308	; 0x134
   e4fae:	2001      	movs	r0, #1
   e4fb0:	f002 ff34 	bl	e7e1c <calloc>
   e4fb4:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130

        if( crt->next == NULL )
   e4fb8:	2800      	cmp	r0, #0
   e4fba:	f000 81a7 	beq.w	e530c <mbedtls_x509_crt_parse_der+0x390>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        prev = crt;
        mbedtls_x509_crt_init( crt->next );
   e4fbe:	f7ff ff7b 	bl	e4eb8 <mbedtls_x509_crt_init>
   e4fc2:	46a1      	mov	r9, r4
        crt = crt->next;
   e4fc4:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    int ret;
    size_t len;
    unsigned char *p, *end, *crt_end;
    mbedtls_x509_buf sig_params1, sig_params2, sig_oid2;

    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
   e4fc8:	2300      	movs	r3, #0
   e4fca:	930b      	str	r3, [sp, #44]	; 0x2c
   e4fcc:	930c      	str	r3, [sp, #48]	; 0x30
   e4fce:	930d      	str	r3, [sp, #52]	; 0x34
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
   e4fd0:	930e      	str	r3, [sp, #56]	; 0x38
   e4fd2:	930f      	str	r3, [sp, #60]	; 0x3c
   e4fd4:	9310      	str	r3, [sp, #64]	; 0x40
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
   e4fd6:	9311      	str	r3, [sp, #68]	; 0x44
   e4fd8:	9312      	str	r3, [sp, #72]	; 0x48
   e4fda:	9313      	str	r3, [sp, #76]	; 0x4c

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
   e4fdc:	2c00      	cmp	r4, #0
   e4fde:	f000 80ef 	beq.w	e51c0 <mbedtls_x509_crt_parse_der+0x244>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
    len = buflen;
   e4fe2:	ae1a      	add	r6, sp, #104	; 0x68
    end = p + len;
   e4fe4:	eb08 0b05 	add.w	fp, r8, r5
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
    len = buflen;
   e4fe8:	f846 5d54 	str.w	r5, [r6, #-84]!
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   e4fec:	2330      	movs	r3, #48	; 0x30
   e4fee:	4632      	mov	r2, r6
   e4ff0:	4659      	mov	r1, fp
   e4ff2:	a806      	add	r0, sp, #24
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
   e4ff4:	f8cd 8018 	str.w	r8, [sp, #24]
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   e4ff8:	f7f0 fe86 	bl	d5d08 <mbedtls_asn1_get_tag>
   e4ffc:	b120      	cbz	r0, e5008 <mbedtls_x509_crt_parse_der+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
   e4ffe:	4620      	mov	r0, r4
   e5000:	f7ff ff5f 	bl	e4ec2 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
   e5004:	4dbb      	ldr	r5, [pc, #748]	; (e52f4 <mbedtls_x509_crt_parse_der+0x378>)
   e5006:	e168      	b.n	e52da <mbedtls_x509_crt_parse_der+0x35e>
    }

    if( len > (size_t) ( end - p ) )
   e5008:	9d06      	ldr	r5, [sp, #24]
   e500a:	9f05      	ldr	r7, [sp, #20]
   e500c:	ebc5 0b0b 	rsb	fp, r5, fp
   e5010:	45bb      	cmp	fp, r7
   e5012:	f0c0 80d0 	bcc.w	e51b6 <mbedtls_x509_crt_parse_der+0x23a>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    crt_end = p + len;

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
   e5016:	443d      	add	r5, r7
   e5018:	ebc8 0505 	rsb	r5, r8, r5
   e501c:	6065      	str	r5, [r4, #4]
    crt->raw.p = p = (unsigned char *)mbedtls_calloc( 1, crt->raw.len );
   e501e:	4629      	mov	r1, r5
   e5020:	2001      	movs	r0, #1
   e5022:	f002 fefb 	bl	e7e1c <calloc>
   e5026:	4683      	mov	fp, r0
   e5028:	9006      	str	r0, [sp, #24]
   e502a:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
   e502c:	2800      	cmp	r0, #0
   e502e:	f000 80c9 	beq.w	e51c4 <mbedtls_x509_crt_parse_der+0x248>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
   e5032:	462a      	mov	r2, r5

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
   e5034:	1bed      	subs	r5, r5, r7
   e5036:	445d      	add	r5, fp
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char *)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
   e5038:	4641      	mov	r1, r8

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
    end = crt_end = p + len;
   e503a:	442f      	add	r7, r5
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char *)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
   e503c:	f002 ff13 	bl	e7e66 <memcpy>
    end = crt_end = p + len;

    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;
   e5040:	6165      	str	r5, [r4, #20]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   e5042:	2330      	movs	r3, #48	; 0x30
   e5044:	4632      	mov	r2, r6
   e5046:	4639      	mov	r1, r7
   e5048:	a806      	add	r0, sp, #24
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
   e504a:	9506      	str	r5, [sp, #24]
    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   e504c:	f7f0 fe5c 	bl	d5d08 <mbedtls_asn1_get_tag>
   e5050:	4605      	mov	r5, r0
   e5052:	2800      	cmp	r0, #0
   e5054:	d15b      	bne.n	e510e <mbedtls_x509_crt_parse_der+0x192>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
   e5056:	9b05      	ldr	r3, [sp, #20]
   e5058:	9e06      	ldr	r6, [sp, #24]
   e505a:	441e      	add	r6, r3
    crt->tbs.len = end - crt->tbs.p;
   e505c:	6963      	ldr	r3, [r4, #20]
   e505e:	1af3      	subs	r3, r6, r3
   e5060:	6123      	str	r3, [r4, #16]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e5062:	aa17      	add	r2, sp, #92	; 0x5c
   e5064:	23a0      	movs	r3, #160	; 0xa0
   e5066:	4631      	mov	r1, r6
   e5068:	a806      	add	r0, sp, #24
   e506a:	f7f0 fe4d 	bl	d5d08 <mbedtls_asn1_get_tag>
   e506e:	b138      	cbz	r0, e5080 <mbedtls_x509_crt_parse_der+0x104>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   e5070:	f110 0f62 	cmn.w	r0, #98	; 0x62
   e5074:	d101      	bne.n	e507a <mbedtls_x509_crt_parse_der+0xfe>
        {
            *ver = 0;
   e5076:	61a5      	str	r5, [r4, #24]
   e5078:	e017      	b.n	e50aa <mbedtls_x509_crt_parse_der+0x12e>
            return( 0 );
        }

        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   e507a:	f5a0 5506 	sub.w	r5, r0, #8576	; 0x2180
   e507e:	e011      	b.n	e50a4 <mbedtls_x509_crt_parse_der+0x128>
    }

    end = *p + len;
   e5080:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e5082:	9d06      	ldr	r5, [sp, #24]
   e5084:	441d      	add	r5, r3

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
   e5086:	f104 0218 	add.w	r2, r4, #24
   e508a:	4629      	mov	r1, r5
   e508c:	a806      	add	r0, sp, #24
   e508e:	f7f0 fe68 	bl	d5d62 <mbedtls_asn1_get_int>
   e5092:	b110      	cbz	r0, e509a <mbedtls_x509_crt_parse_der+0x11e>
        return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
   e5094:	f5a0 5508 	sub.w	r5, r0, #8704	; 0x2200
   e5098:	e004      	b.n	e50a4 <mbedtls_x509_crt_parse_der+0x128>

    if( *p != end )
   e509a:	9b06      	ldr	r3, [sp, #24]
   e509c:	429d      	cmp	r5, r3
   e509e:	d004      	beq.n	e50aa <mbedtls_x509_crt_parse_der+0x12e>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   e50a0:	4d95      	ldr	r5, [pc, #596]	; (e52f8 <mbedtls_x509_crt_parse_der+0x37c>)
   e50a2:	e1b3      	b.n	e540c <mbedtls_x509_crt_parse_der+0x490>
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
   e50a4:	2d00      	cmp	r5, #0
   e50a6:	f040 81b1 	bne.w	e540c <mbedtls_x509_crt_parse_der+0x490>
   e50aa:	f104 021c 	add.w	r2, r4, #28
   e50ae:	4631      	mov	r1, r6
   e50b0:	a806      	add	r0, sp, #24
   e50b2:	f7fe fbed 	bl	e3890 <mbedtls_x509_get_serial>
     *
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
   e50b6:	4605      	mov	r5, r0
   e50b8:	2800      	cmp	r0, #0
   e50ba:	f040 81a7 	bne.w	e540c <mbedtls_x509_crt_parse_der+0x490>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
   e50be:	f104 0828 	add.w	r8, r4, #40	; 0x28
   e50c2:	ab0b      	add	r3, sp, #44	; 0x2c
   e50c4:	4642      	mov	r2, r8
   e50c6:	4631      	mov	r1, r6
   e50c8:	a806      	add	r0, sp, #24
   e50ca:	f7fe fc10 	bl	e38ee <mbedtls_x509_get_alg>
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
   e50ce:	4605      	mov	r5, r0
   e50d0:	2800      	cmp	r0, #0
   e50d2:	f040 819b 	bne.w	e540c <mbedtls_x509_crt_parse_der+0x490>
   e50d6:	e11b      	b.n	e5310 <mbedtls_x509_crt_parse_der+0x394>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
    }

    crt->version++;
   e50d8:	3301      	adds	r3, #1
   e50da:	61a3      	str	r3, [r4, #24]

    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
   e50dc:	f504 7396 	add.w	r3, r4, #300	; 0x12c
   e50e0:	9300      	str	r3, [sp, #0]
   e50e2:	f504 7294 	add.w	r2, r4, #296	; 0x128
   e50e6:	f204 1329 	addw	r3, r4, #297	; 0x129
   e50ea:	a90b      	add	r1, sp, #44	; 0x2c
   e50ec:	4640      	mov	r0, r8
   e50ee:	f7fe fe49 	bl	e3d84 <mbedtls_x509_get_sig_alg>
   e50f2:	4605      	mov	r5, r0
   e50f4:	2800      	cmp	r0, #0
   e50f6:	f040 8189 	bne.w	e540c <mbedtls_x509_crt_parse_der+0x490>
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
   e50fa:	9b06      	ldr	r3, [sp, #24]
   e50fc:	63e3      	str	r3, [r4, #60]	; 0x3c

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   e50fe:	aa05      	add	r2, sp, #20
   e5100:	2330      	movs	r3, #48	; 0x30
   e5102:	4631      	mov	r1, r6
   e5104:	a806      	add	r0, sp, #24
   e5106:	f7f0 fdff 	bl	d5d08 <mbedtls_asn1_get_tag>
   e510a:	4605      	mov	r5, r0
   e510c:	b128      	cbz	r0, e511a <mbedtls_x509_crt_parse_der+0x19e>
    crt->subject_raw.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
   e510e:	4620      	mov	r0, r4
   e5110:	f7ff fed7 	bl	e4ec2 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   e5114:	f5a5 5506 	sub.w	r5, r5, #8576	; 0x2180
   e5118:	e0dc      	b.n	e52d4 <mbedtls_x509_crt_parse_der+0x358>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
   e511a:	9b05      	ldr	r3, [sp, #20]
   e511c:	9906      	ldr	r1, [sp, #24]
   e511e:	f104 024c 	add.w	r2, r4, #76	; 0x4c
   e5122:	4419      	add	r1, r3
   e5124:	a806      	add	r0, sp, #24
   e5126:	f7fe fcd9 	bl	e3adc <mbedtls_x509_get_name>
   e512a:	4605      	mov	r5, r0
   e512c:	2800      	cmp	r0, #0
   e512e:	f040 816d 	bne.w	e540c <mbedtls_x509_crt_parse_der+0x490>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
   e5132:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   e5134:	9b06      	ldr	r3, [sp, #24]
   e5136:	1a9b      	subs	r3, r3, r2
   e5138:	63a3      	str	r3, [r4, #56]	; 0x38
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e513a:	aa17      	add	r2, sp, #92	; 0x5c
   e513c:	2330      	movs	r3, #48	; 0x30
   e513e:	4631      	mov	r1, r6
   e5140:	a806      	add	r0, sp, #24
   e5142:	f7f0 fde1 	bl	d5d08 <mbedtls_asn1_get_tag>
   e5146:	2800      	cmp	r0, #0
   e5148:	f000 80eb 	beq.w	e5322 <mbedtls_x509_crt_parse_der+0x3a6>
     * Validity ::= SEQUENCE {
     *      notBefore      Time,
     *      notAfter       Time }
     *
     */
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
   e514c:	f5b0 5510 	subs.w	r5, r0, #9216	; 0x2400
   e5150:	f040 815c 	bne.w	e540c <mbedtls_x509_crt_parse_der+0x490>
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
   e5154:	f10d 0868 	add.w	r8, sp, #104	; 0x68

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   e5158:	aa05      	add	r2, sp, #20
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
   e515a:	f858 3d50 	ldr.w	r3, [r8, #-80]!
   e515e:	64a3      	str	r3, [r4, #72]	; 0x48

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   e5160:	4631      	mov	r1, r6
   e5162:	2330      	movs	r3, #48	; 0x30
   e5164:	4640      	mov	r0, r8
   e5166:	f7f0 fdcf 	bl	d5d08 <mbedtls_asn1_get_tag>
   e516a:	4605      	mov	r5, r0
   e516c:	2800      	cmp	r0, #0
   e516e:	d1ce      	bne.n	e510e <mbedtls_x509_crt_parse_der+0x192>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
   e5170:	9b05      	ldr	r3, [sp, #20]
   e5172:	2b00      	cmp	r3, #0
   e5174:	f040 80f1 	bne.w	e535a <mbedtls_x509_crt_parse_der+0x3de>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
   e5178:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   e517a:	9b06      	ldr	r3, [sp, #24]
   e517c:	1a9b      	subs	r3, r3, r2
   e517e:	6463      	str	r3, [r4, #68]	; 0x44

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
   e5180:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
   e5184:	4631      	mov	r1, r6
   e5186:	4640      	mov	r0, r8
   e5188:	f7f7 f89c 	bl	dc2c4 <mbedtls_pk_parse_subpubkey>
   e518c:	4605      	mov	r5, r0
   e518e:	2800      	cmp	r0, #0
   e5190:	f040 813c 	bne.w	e540c <mbedtls_x509_crt_parse_der+0x490>
     *  subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
     *                       -- If present, version shall be v2 or v3
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
   e5194:	69a3      	ldr	r3, [r4, #24]
   e5196:	3b02      	subs	r3, #2
   e5198:	2b01      	cmp	r3, #1
   e519a:	f240 80e9 	bls.w	e5370 <mbedtls_x509_crt_parse_der+0x3f4>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( crt->version == 2 || crt->version == 3 )
   e519e:	69a3      	ldr	r3, [r4, #24]
   e51a0:	3b02      	subs	r3, #2
   e51a2:	2b01      	cmp	r3, #1
   e51a4:	f240 80f0 	bls.w	e5388 <mbedtls_x509_crt_parse_der+0x40c>
            return( ret );
        }
    }

#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
   e51a8:	69a3      	ldr	r3, [r4, #24]
   e51aa:	2b03      	cmp	r3, #3
   e51ac:	d00c      	beq.n	e51c8 <mbedtls_x509_crt_parse_der+0x24c>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( p != end )
   e51ae:	9b06      	ldr	r3, [sp, #24]
   e51b0:	429e      	cmp	r6, r3
   e51b2:	f000 80fe 	beq.w	e53b2 <mbedtls_x509_crt_parse_der+0x436>
        return( ret );
    }

    if( p != end )
    {
        mbedtls_x509_crt_free( crt );
   e51b6:	4620      	mov	r0, r4
   e51b8:	f7ff fe83 	bl	e4ec2 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   e51bc:	4d4f      	ldr	r5, [pc, #316]	; (e52fc <mbedtls_x509_crt_parse_der+0x380>)
   e51be:	e08c      	b.n	e52da <mbedtls_x509_crt_parse_der+0x35e>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   e51c0:	4d4f      	ldr	r5, [pc, #316]	; (e5300 <mbedtls_x509_crt_parse_der+0x384>)
   e51c2:	e08a      	b.n	e52da <mbedtls_x509_crt_parse_der+0x35e>

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char *)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   e51c4:	4d4f      	ldr	r5, [pc, #316]	; (e5304 <mbedtls_x509_crt_parse_der+0x388>)
   e51c6:	e088      	b.n	e52da <mbedtls_x509_crt_parse_der+0x35e>
{
    int ret;
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( *p == end )
   e51c8:	9a06      	ldr	r2, [sp, #24]
   e51ca:	4296      	cmp	r6, r2
   e51cc:	d0ef      	beq.n	e51ae <mbedtls_x509_crt_parse_der+0x232>
        return( 0 );

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
   e51ce:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
   e51d2:	4631      	mov	r1, r6
   e51d4:	4640      	mov	r0, r8
   e51d6:	f7fe fe15 	bl	e3e04 <mbedtls_x509_get_ext>
   e51da:	4603      	mov	r3, r0
   e51dc:	2800      	cmp	r0, #0
   e51de:	d173      	bne.n	e52c8 <mbedtls_x509_crt_parse_der+0x34c>
        return( ret );

    end = crt->v3_ext.p + crt->v3_ext.len;
   e51e0:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   e51e4:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   e51e8:	188a      	adds	r2, r1, r2
   e51ea:	9202      	str	r2, [sp, #8]
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
   e51ec:	4680      	mov	r8, r0

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
        return( ret );

    end = crt->v3_ext.p + crt->v3_ext.len;
    while( *p < end )
   e51ee:	9b06      	ldr	r3, [sp, #24]
   e51f0:	9a02      	ldr	r2, [sp, #8]
   e51f2:	429a      	cmp	r2, r3
   e51f4:	f240 80d9 	bls.w	e53aa <mbedtls_x509_crt_parse_der+0x42e>
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
        int is_critical = 0; /* DEFAULT FALSE */
        int ext_type = 0;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e51f8:	2330      	movs	r3, #48	; 0x30
   e51fa:	aa07      	add	r2, sp, #28
   e51fc:	9902      	ldr	r1, [sp, #8]
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
   e51fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
        int is_critical = 0; /* DEFAULT FALSE */
        int ext_type = 0;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e5202:	a806      	add	r0, sp, #24
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
   e5204:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
   e5208:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
        int is_critical = 0; /* DEFAULT FALSE */
   e520c:	f8cd 8020 	str.w	r8, [sp, #32]
        int ext_type = 0;
   e5210:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e5214:	f7f0 fd78 	bl	d5d08 <mbedtls_asn1_get_tag>
   e5218:	2800      	cmp	r0, #0
   e521a:	f040 80fb 	bne.w	e5414 <mbedtls_x509_crt_parse_der+0x498>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
   e521e:	9b07      	ldr	r3, [sp, #28]
   e5220:	9d06      	ldr	r5, [sp, #24]
   e5222:	441d      	add	r5, r3

        /* Get extension ID */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
   e5224:	aa15      	add	r2, sp, #84	; 0x54
   e5226:	2306      	movs	r3, #6
   e5228:	4629      	mov	r1, r5
   e522a:	a806      	add	r0, sp, #24
   e522c:	f7f0 fd6c 	bl	d5d08 <mbedtls_asn1_get_tag>
   e5230:	2800      	cmp	r0, #0
   e5232:	f040 80ef 	bne.w	e5414 <mbedtls_x509_crt_parse_der+0x498>
                                          MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.tag = MBEDTLS_ASN1_OID;
   e5236:	2306      	movs	r3, #6
        extn_oid.p = *p;
   e5238:	9a06      	ldr	r2, [sp, #24]
        /* Get extension ID */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
                                          MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.tag = MBEDTLS_ASN1_OID;
   e523a:	9314      	str	r3, [sp, #80]	; 0x50
        extn_oid.p = *p;
        *p += extn_oid.len;
   e523c:	9b15      	ldr	r3, [sp, #84]	; 0x54
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
                                          MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.tag = MBEDTLS_ASN1_OID;
        extn_oid.p = *p;
   e523e:	9216      	str	r2, [sp, #88]	; 0x58
        *p += extn_oid.len;
   e5240:	4413      	add	r3, r2

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
   e5242:	4629      	mov	r1, r5
   e5244:	aa08      	add	r2, sp, #32
   e5246:	a806      	add	r0, sp, #24
                                          MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.tag = MBEDTLS_ASN1_OID;
        extn_oid.p = *p;
        *p += extn_oid.len;
   e5248:	9306      	str	r3, [sp, #24]

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
   e524a:	f7f0 fd71 	bl	d5d30 <mbedtls_asn1_get_bool>
   e524e:	2800      	cmp	r0, #0
   e5250:	f040 80a6 	bne.w	e53a0 <mbedtls_x509_crt_parse_der+0x424>
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        /* Data should be octet string type */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
   e5254:	2304      	movs	r3, #4
   e5256:	aa07      	add	r2, sp, #28
   e5258:	4629      	mov	r1, r5
   e525a:	a806      	add	r0, sp, #24
   e525c:	f7f0 fd54 	bl	d5d08 <mbedtls_asn1_get_tag>
   e5260:	2800      	cmp	r0, #0
   e5262:	f040 80d7 	bne.w	e5414 <mbedtls_x509_crt_parse_der+0x498>
                MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
   e5266:	9b07      	ldr	r3, [sp, #28]
   e5268:	9a06      	ldr	r2, [sp, #24]
   e526a:	4413      	add	r3, r2
   e526c:	429d      	cmp	r5, r3
   e526e:	f040 809e 	bne.w	e53ae <mbedtls_x509_crt_parse_der+0x432>
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

        /*
         * Detect supported extensions
         */
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
   e5272:	a909      	add	r1, sp, #36	; 0x24
   e5274:	a814      	add	r0, sp, #80	; 0x50
   e5276:	f7f5 fd67 	bl	dad48 <mbedtls_oid_get_x509_ext_type>

        if( ret != 0 )
   e527a:	2800      	cmp	r0, #0
   e527c:	f040 80d0 	bne.w	e5420 <mbedtls_x509_crt_parse_der+0x4a4>
#endif
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
   e5280:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
   e5284:	9a09      	ldr	r2, [sp, #36]	; 0x24
   e5286:	ea11 0302 	ands.w	r3, r1, r2
   e528a:	f040 81b9 	bne.w	e5600 <mbedtls_x509_crt_parse_der+0x684>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
   e528e:	4311      	orrs	r1, r2

        switch( ext_type )
   e5290:	f5b2 7f80 	cmp.w	r2, #256	; 0x100

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
   e5294:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8

        switch( ext_type )
   e5298:	f040 80c8 	bne.w	e542c <mbedtls_x509_crt_parse_der+0x4b0>
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
   e529c:	f504 7280 	add.w	r2, r4, #256	; 0x100
   e52a0:	9203      	str	r2, [sp, #12]
    /*
     * BasicConstraints ::= SEQUENCE {
     *      cA                      BOOLEAN DEFAULT FALSE,
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
   e52a2:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    *max_pathlen = 0; /* endless */
   e52a6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e52aa:	aa17      	add	r2, sp, #92	; 0x5c
   e52ac:	2330      	movs	r3, #48	; 0x30
   e52ae:	4629      	mov	r1, r5
   e52b0:	a806      	add	r0, sp, #24

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
   e52b2:	f104 0bfc 	add.w	fp, r4, #252	; 0xfc
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
    *max_pathlen = 0; /* endless */

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e52b6:	f7f0 fd27 	bl	d5d08 <mbedtls_asn1_get_tag>
   e52ba:	2800      	cmp	r0, #0
   e52bc:	f000 80c4 	beq.w	e5448 <mbedtls_x509_crt_parse_der+0x4cc>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   e52c0:	f5a0 5314 	sub.w	r3, r0, #9472	; 0x2500
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
   e52c4:	2b00      	cmp	r3, #0
   e52c6:	d092      	beq.n	e51ee <mbedtls_x509_crt_parse_der+0x272>
#endif
    {
        ret = x509_get_crt_ext( &p, end, crt );
        if( ret != 0 )
        {
            mbedtls_x509_crt_free( crt );
   e52c8:	4620      	mov	r0, r4
   e52ca:	9302      	str	r3, [sp, #8]
   e52cc:	f7ff fdf9 	bl	e4ec2 <mbedtls_x509_crt_free>
   e52d0:	9b02      	ldr	r3, [sp, #8]
   e52d2:	461d      	mov	r5, r3
        prev = crt;
        mbedtls_x509_crt_init( crt->next );
        crt = crt->next;
    }

    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
   e52d4:	2d00      	cmp	r5, #0
   e52d6:	f000 8199 	beq.w	e560c <mbedtls_x509_crt_parse_der+0x690>
    {
        if( prev )
   e52da:	f1b9 0f00 	cmp.w	r9, #0
   e52de:	d002      	beq.n	e52e6 <mbedtls_x509_crt_parse_der+0x36a>
            prev->next = NULL;
   e52e0:	2300      	movs	r3, #0
   e52e2:	f8c9 3130 	str.w	r3, [r9, #304]	; 0x130

        if( crt != chain )
   e52e6:	4554      	cmp	r4, sl
   e52e8:	f000 8190 	beq.w	e560c <mbedtls_x509_crt_parse_der+0x690>
            mbedtls_free( crt );
   e52ec:	4620      	mov	r0, r4
   e52ee:	f000 fc27 	bl	e5b40 <free>
   e52f2:	e18b      	b.n	e560c <mbedtls_x509_crt_parse_der+0x690>
   e52f4:	ffffde80 	.word	0xffffde80
   e52f8:	ffffdd9a 	.word	0xffffdd9a
   e52fc:	ffffde1a 	.word	0xffffde1a
   e5300:	ffffd800 	.word	0xffffd800
   e5304:	ffffd780 	.word	0xffffd780

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   e5308:	4db0      	ldr	r5, [pc, #704]	; (e55cc <mbedtls_x509_crt_parse_der+0x650>)
   e530a:	e17f      	b.n	e560c <mbedtls_x509_crt_parse_der+0x690>
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );

        if( crt->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   e530c:	4db0      	ldr	r5, [pc, #704]	; (e55d0 <mbedtls_x509_crt_parse_der+0x654>)
   e530e:	e17d      	b.n	e560c <mbedtls_x509_crt_parse_der+0x690>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->version < 0 || crt->version > 2 )
   e5310:	69a3      	ldr	r3, [r4, #24]
   e5312:	2b02      	cmp	r3, #2
   e5314:	f67f aee0 	bls.w	e50d8 <mbedtls_x509_crt_parse_der+0x15c>
    {
        mbedtls_x509_crt_free( crt );
   e5318:	4620      	mov	r0, r4
   e531a:	f7ff fdd2 	bl	e4ec2 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
   e531e:	4dad      	ldr	r5, [pc, #692]	; (e55d4 <mbedtls_x509_crt_parse_der+0x658>)
   e5320:	e7db      	b.n	e52da <mbedtls_x509_crt_parse_der+0x35e>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
   e5322:	9a06      	ldr	r2, [sp, #24]
   e5324:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e5326:	eb02 0803 	add.w	r8, r2, r3

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
   e532a:	4641      	mov	r1, r8
   e532c:	f104 028c 	add.w	r2, r4, #140	; 0x8c
   e5330:	a806      	add	r0, sp, #24
   e5332:	f7fe fc53 	bl	e3bdc <mbedtls_x509_get_time>
   e5336:	4605      	mov	r5, r0
   e5338:	2800      	cmp	r0, #0
   e533a:	d167      	bne.n	e540c <mbedtls_x509_crt_parse_der+0x490>
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
   e533c:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
   e5340:	4641      	mov	r1, r8
   e5342:	a806      	add	r0, sp, #24
   e5344:	f7fe fc4a 	bl	e3bdc <mbedtls_x509_get_time>
   e5348:	4605      	mov	r5, r0
   e534a:	2800      	cmp	r0, #0
   e534c:	d15e      	bne.n	e540c <mbedtls_x509_crt_parse_der+0x490>
        return( ret );

    if( *p != end )
   e534e:	9b06      	ldr	r3, [sp, #24]
   e5350:	4598      	cmp	r8, r3
   e5352:	f43f aeff 	beq.w	e5154 <mbedtls_x509_crt_parse_der+0x1d8>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   e5356:	4da0      	ldr	r5, [pc, #640]	; (e55d8 <mbedtls_x509_crt_parse_der+0x65c>)
   e5358:	e058      	b.n	e540c <mbedtls_x509_crt_parse_der+0x490>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
   e535a:	9906      	ldr	r1, [sp, #24]
   e535c:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   e5360:	4419      	add	r1, r3
   e5362:	4640      	mov	r0, r8
   e5364:	f7fe fbba 	bl	e3adc <mbedtls_x509_get_name>
   e5368:	4605      	mov	r5, r0
   e536a:	2800      	cmp	r0, #0
   e536c:	d14e      	bne.n	e540c <mbedtls_x509_crt_parse_der+0x490>
   e536e:	e703      	b.n	e5178 <mbedtls_x509_crt_parse_der+0x1fc>
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
   e5370:	2301      	movs	r3, #1
   e5372:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   e5376:	4631      	mov	r1, r6
   e5378:	4640      	mov	r0, r8
   e537a:	f7fe ff10 	bl	e419e <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
   e537e:	4605      	mov	r5, r0
   e5380:	2800      	cmp	r0, #0
   e5382:	f43f af0c 	beq.w	e519e <mbedtls_x509_crt_parse_der+0x222>
   e5386:	e041      	b.n	e540c <mbedtls_x509_crt_parse_der+0x490>
        }
    }

    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
   e5388:	2302      	movs	r3, #2
   e538a:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
   e538e:	4631      	mov	r1, r6
   e5390:	4640      	mov	r0, r8
   e5392:	f7fe ff04 	bl	e419e <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
   e5396:	4605      	mov	r5, r0
   e5398:	2800      	cmp	r0, #0
   e539a:	f43f af05 	beq.w	e51a8 <mbedtls_x509_crt_parse_der+0x22c>
   e539e:	e035      	b.n	e540c <mbedtls_x509_crt_parse_der+0x490>
        extn_oid.tag = MBEDTLS_ASN1_OID;
        extn_oid.p = *p;
        *p += extn_oid.len;

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
   e53a0:	f110 0f62 	cmn.w	r0, #98	; 0x62
   e53a4:	f43f af56 	beq.w	e5254 <mbedtls_x509_crt_parse_der+0x2d8>
   e53a8:	e034      	b.n	e5414 <mbedtls_x509_crt_parse_der+0x498>
        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
        }
    }

    if( *p != end )
   e53aa:	f43f af00 	beq.w	e51ae <mbedtls_x509_crt_parse_der+0x232>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   e53ae:	4b8b      	ldr	r3, [pc, #556]	; (e55dc <mbedtls_x509_crt_parse_der+0x660>)
   e53b0:	e78a      	b.n	e52c8 <mbedtls_x509_crt_parse_der+0x34c>
     *  -- end of TBSCertificate
     *
     *  signatureAlgorithm   AlgorithmIdentifier,
     *  signatureValue       BIT STRING
     */
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
   e53b2:	ab0e      	add	r3, sp, #56	; 0x38
   e53b4:	aa11      	add	r2, sp, #68	; 0x44
   e53b6:	4639      	mov	r1, r7
   e53b8:	a806      	add	r0, sp, #24
   e53ba:	f7fe fa98 	bl	e38ee <mbedtls_x509_get_alg>
   e53be:	4605      	mov	r5, r0
   e53c0:	bb20      	cbnz	r0, e540c <mbedtls_x509_crt_parse_der+0x490>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
   e53c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e53c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   e53c6:	429a      	cmp	r2, r3
   e53c8:	d10e      	bne.n	e53e8 <mbedtls_x509_crt_parse_der+0x46c>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
   e53ca:	9913      	ldr	r1, [sp, #76]	; 0x4c
   e53cc:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e53ce:	f002 fd3b 	bl	e7e48 <memcmp>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
   e53d2:	b948      	cbnz	r0, e53e8 <mbedtls_x509_crt_parse_der+0x46c>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
   e53d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
   e53d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e53d8:	429a      	cmp	r2, r3
   e53da:	d105      	bne.n	e53e8 <mbedtls_x509_crt_parse_der+0x46c>
        sig_params1.len != sig_params2.len ||
   e53dc:	b14a      	cbz	r2, e53f2 <mbedtls_x509_crt_parse_der+0x476>
        ( sig_params1.len != 0 &&
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
   e53de:	9910      	ldr	r1, [sp, #64]	; 0x40
   e53e0:	980d      	ldr	r0, [sp, #52]	; 0x34
   e53e2:	f002 fd31 	bl	e7e48 <memcmp>
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
        ( sig_params1.len != 0 &&
   e53e6:	b120      	cbz	r0, e53f2 <mbedtls_x509_crt_parse_der+0x476>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
    {
        mbedtls_x509_crt_free( crt );
   e53e8:	4620      	mov	r0, r4
   e53ea:	f7ff fd6a 	bl	e4ec2 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
   e53ee:	4d7c      	ldr	r5, [pc, #496]	; (e55e0 <mbedtls_x509_crt_parse_der+0x664>)
   e53f0:	e773      	b.n	e52da <mbedtls_x509_crt_parse_der+0x35e>
    }

    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
   e53f2:	f504 728e 	add.w	r2, r4, #284	; 0x11c
   e53f6:	4639      	mov	r1, r7
   e53f8:	a806      	add	r0, sp, #24
   e53fa:	f7fe fca5 	bl	e3d48 <mbedtls_x509_get_sig>
   e53fe:	4605      	mov	r5, r0
   e5400:	b920      	cbnz	r0, e540c <mbedtls_x509_crt_parse_der+0x490>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( p != end )
   e5402:	9b06      	ldr	r3, [sp, #24]
   e5404:	429f      	cmp	r7, r3
   e5406:	f000 8101 	beq.w	e560c <mbedtls_x509_crt_parse_der+0x690>
   e540a:	e6d4      	b.n	e51b6 <mbedtls_x509_crt_parse_der+0x23a>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
   e540c:	4620      	mov	r0, r4
   e540e:	f7ff fd58 	bl	e4ec2 <mbedtls_x509_crt_free>
   e5412:	e75f      	b.n	e52d4 <mbedtls_x509_crt_parse_der+0x358>
        *p += extn_oid.len;

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   e5414:	f5a0 5314 	sub.w	r3, r0, #9472	; 0x2500
#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
#endif
    {
        ret = x509_get_crt_ext( &p, end, crt );
        if( ret != 0 )
   e5418:	2b00      	cmp	r3, #0
   e541a:	f43f aec8 	beq.w	e51ae <mbedtls_x509_crt_parse_der+0x232>
   e541e:	e753      	b.n	e52c8 <mbedtls_x509_crt_parse_der+0x34c>
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
   e5420:	9b08      	ldr	r3, [sp, #32]
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );

        if( ret != 0 )
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;
   e5422:	9506      	str	r5, [sp, #24]

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
   e5424:	2b00      	cmp	r3, #0
   e5426:	f43f aee2 	beq.w	e51ee <mbedtls_x509_crt_parse_der+0x272>
   e542a:	e0e7      	b.n	e55fc <mbedtls_x509_crt_parse_der+0x680>
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;

        switch( ext_type )
   e542c:	dc04      	bgt.n	e5438 <mbedtls_x509_crt_parse_der+0x4bc>
   e542e:	2a04      	cmp	r2, #4
   e5430:	d03b      	beq.n	e54aa <mbedtls_x509_crt_parse_der+0x52e>
   e5432:	2a20      	cmp	r2, #32
   e5434:	d069      	beq.n	e550a <mbedtls_x509_crt_parse_der+0x58e>
   e5436:	e0e5      	b.n	e5604 <mbedtls_x509_crt_parse_der+0x688>
   e5438:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   e543c:	d056      	beq.n	e54ec <mbedtls_x509_crt_parse_der+0x570>
   e543e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   e5442:	f000 80b3 	beq.w	e55ac <mbedtls_x509_crt_parse_der+0x630>
   e5446:	e0dd      	b.n	e5604 <mbedtls_x509_crt_parse_der+0x688>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p == end )
   e5448:	9b06      	ldr	r3, [sp, #24]
   e544a:	429d      	cmp	r5, r3
   e544c:	f43f aecf 	beq.w	e51ee <mbedtls_x509_crt_parse_der+0x272>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
   e5450:	465a      	mov	r2, fp
   e5452:	4629      	mov	r1, r5
   e5454:	a806      	add	r0, sp, #24
   e5456:	f7f0 fc6b 	bl	d5d30 <mbedtls_asn1_get_bool>
   e545a:	b188      	cbz	r0, e5480 <mbedtls_x509_crt_parse_der+0x504>
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   e545c:	f110 0f62 	cmn.w	r0, #98	; 0x62
   e5460:	f47f af2e 	bne.w	e52c0 <mbedtls_x509_crt_parse_der+0x344>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
   e5464:	465a      	mov	r2, fp
   e5466:	4629      	mov	r1, r5
   e5468:	a806      	add	r0, sp, #24
   e546a:	f7f0 fc7a 	bl	d5d62 <mbedtls_asn1_get_int>

        if( ret != 0 )
   e546e:	2800      	cmp	r0, #0
   e5470:	f47f af26 	bne.w	e52c0 <mbedtls_x509_crt_parse_der+0x344>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( *ca_istrue != 0 )
   e5474:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   e5478:	b113      	cbz	r3, e5480 <mbedtls_x509_crt_parse_der+0x504>
            *ca_istrue = 1;
   e547a:	2301      	movs	r3, #1
   e547c:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    }

    if( *p == end )
   e5480:	9b06      	ldr	r3, [sp, #24]
   e5482:	429d      	cmp	r5, r3
   e5484:	f43f aeb3 	beq.w	e51ee <mbedtls_x509_crt_parse_der+0x272>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
   e5488:	9a03      	ldr	r2, [sp, #12]
   e548a:	4629      	mov	r1, r5
   e548c:	a806      	add	r0, sp, #24
   e548e:	f7f0 fc68 	bl	d5d62 <mbedtls_asn1_get_int>
   e5492:	2800      	cmp	r0, #0
   e5494:	f47f af14 	bne.w	e52c0 <mbedtls_x509_crt_parse_der+0x344>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p != end )
   e5498:	9b06      	ldr	r3, [sp, #24]
   e549a:	429d      	cmp	r5, r3
   e549c:	d187      	bne.n	e53ae <mbedtls_x509_crt_parse_der+0x432>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    (*max_pathlen)++;
   e549e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   e54a2:	3301      	adds	r3, #1
   e54a4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   e54a8:	e6a1      	b.n	e51ee <mbedtls_x509_crt_parse_der+0x272>
{
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   e54aa:	aa17      	add	r2, sp, #92	; 0x5c
   e54ac:	4629      	mov	r1, r5
   e54ae:	a806      	add	r0, sp, #24
                               const unsigned char *end,
                               unsigned int *key_usage)
{
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
   e54b0:	9317      	str	r3, [sp, #92]	; 0x5c
   e54b2:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
   e54b6:	9319      	str	r3, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   e54b8:	f7f0 fc8a 	bl	d5dd0 <mbedtls_asn1_get_bitstring>
   e54bc:	2800      	cmp	r0, #0
   e54be:	d17f      	bne.n	e55c0 <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len < 1 )
   e54c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   e54c2:	2a00      	cmp	r2, #0
   e54c4:	f000 80a0 	beq.w	e5608 <mbedtls_x509_crt_parse_der+0x68c>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
   e54c8:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
   e54cc:	9d19      	ldr	r5, [sp, #100]	; 0x64
   e54ce:	5c2b      	ldrb	r3, [r5, r0]
   e54d0:	00c1      	lsls	r1, r0, #3
   e54d2:	408b      	lsls	r3, r1
   e54d4:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
   e54d8:	3001      	adds	r0, #1
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
   e54da:	430b      	orrs	r3, r1
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
   e54dc:	4282      	cmp	r2, r0
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
   e54de:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
   e54e2:	f43f ae84 	beq.w	e51ee <mbedtls_x509_crt_parse_der+0x272>
   e54e6:	2804      	cmp	r0, #4
   e54e8:	d1f1      	bne.n	e54ce <mbedtls_x509_crt_parse_der+0x552>
   e54ea:	e680      	b.n	e51ee <mbedtls_x509_crt_parse_der+0x272>
                               const unsigned char *end,
                               mbedtls_x509_sequence *ext_key_usage)
{
    int ret;

    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
   e54ec:	2306      	movs	r3, #6
   e54ee:	f504 7284 	add.w	r2, r4, #264	; 0x108
   e54f2:	4629      	mov	r1, r5
   e54f4:	a806      	add	r0, sp, #24
   e54f6:	f7f0 fca4 	bl	d5e42 <mbedtls_asn1_get_sequence_of>
   e54fa:	2800      	cmp	r0, #0
   e54fc:	d160      	bne.n	e55c0 <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
   e54fe:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   e5502:	2b00      	cmp	r3, #0
   e5504:	f47f ae73 	bne.w	e51ee <mbedtls_x509_crt_parse_der+0x272>
   e5508:	e07e      	b.n	e5608 <mbedtls_x509_crt_parse_der+0x68c>
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e550a:	2330      	movs	r3, #48	; 0x30
   e550c:	aa0a      	add	r2, sp, #40	; 0x28
   e550e:	4629      	mov	r1, r5
   e5510:	a806      	add	r0, sp, #24
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
   e5512:	f104 0be8 	add.w	fp, r4, #232	; 0xe8
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e5516:	f7f0 fbf7 	bl	d5d08 <mbedtls_asn1_get_tag>
   e551a:	2800      	cmp	r0, #0
   e551c:	f47f aed0 	bne.w	e52c0 <mbedtls_x509_crt_parse_der+0x344>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p + len != end )
   e5520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e5522:	9a06      	ldr	r2, [sp, #24]
   e5524:	4413      	add	r3, r2
   e5526:	429d      	cmp	r5, r3
   e5528:	f47f af41 	bne.w	e53ae <mbedtls_x509_crt_parse_der+0x432>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
   e552c:	9a06      	ldr	r2, [sp, #24]
   e552e:	4295      	cmp	r5, r2
   e5530:	d933      	bls.n	e559a <mbedtls_x509_crt_parse_der+0x61e>
    {
        if( ( end - *p ) < 1 )
   e5532:	1aab      	subs	r3, r5, r2
   e5534:	2b00      	cmp	r3, #0
   e5536:	dd35      	ble.n	e55a4 <mbedtls_x509_crt_parse_der+0x628>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
   e5538:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
   e553c:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
   e553e:	4629      	mov	r1, r5
   e5540:	aa17      	add	r2, sp, #92	; 0x5c
   e5542:	a806      	add	r0, sp, #24
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
   e5544:	9303      	str	r3, [sp, #12]
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
   e5546:	f7f0 fb8d 	bl	d5c64 <mbedtls_asn1_get_len>
   e554a:	9b03      	ldr	r3, [sp, #12]
   e554c:	2800      	cmp	r0, #0
   e554e:	f47f aeb7 	bne.w	e52c0 <mbedtls_x509_crt_parse_der+0x344>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
   e5552:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   e5556:	2a80      	cmp	r2, #128	; 0x80
   e5558:	d150      	bne.n	e55fc <mbedtls_x509_crt_parse_der+0x680>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
        }

        /* Skip everything but DNS name */
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
   e555a:	2b82      	cmp	r3, #130	; 0x82
   e555c:	d002      	beq.n	e5564 <mbedtls_x509_crt_parse_der+0x5e8>
        {
            *p += tag_len;
   e555e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e5560:	9a06      	ldr	r2, [sp, #24]
   e5562:	e017      	b.n	e5594 <mbedtls_x509_crt_parse_der+0x618>
            continue;
        }

        /* Allocate and assign next pointer */
        if( cur->buf.p != NULL )
   e5564:	f8db 3008 	ldr.w	r3, [fp, #8]
   e5568:	b15b      	cbz	r3, e5582 <mbedtls_x509_crt_parse_der+0x606>
        {
            if( cur->next != NULL )
   e556a:	f8db 300c 	ldr.w	r3, [fp, #12]
   e556e:	2b00      	cmp	r3, #0
   e5570:	d146      	bne.n	e5600 <mbedtls_x509_crt_parse_der+0x684>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
   e5572:	2110      	movs	r1, #16
   e5574:	2001      	movs	r0, #1
   e5576:	f002 fc51 	bl	e7e1c <calloc>
   e557a:	f8cb 000c 	str.w	r0, [fp, #12]

            if( cur->next == NULL )
   e557e:	b198      	cbz	r0, e55a8 <mbedtls_x509_crt_parse_der+0x62c>
   e5580:	4683      	mov	fp, r0

            cur = cur->next;
        }

        buf = &(cur->buf);
        buf->tag = tag;
   e5582:	2382      	movs	r3, #130	; 0x82
   e5584:	f8cb 3000 	str.w	r3, [fp]
        buf->p = *p;
   e5588:	9a06      	ldr	r2, [sp, #24]
   e558a:	f8cb 2008 	str.w	r2, [fp, #8]
        buf->len = tag_len;
   e558e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e5590:	f8cb 3004 	str.w	r3, [fp, #4]
        *p += buf->len;
   e5594:	4413      	add	r3, r2
   e5596:	9306      	str	r3, [sp, #24]
   e5598:	e7c8      	b.n	e552c <mbedtls_x509_crt_parse_der+0x5b0>
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
   e559a:	f8cb 800c 	str.w	r8, [fp, #12]

    if( *p != end )
   e559e:	f43f ae26 	beq.w	e51ee <mbedtls_x509_crt_parse_der+0x272>
   e55a2:	e704      	b.n	e53ae <mbedtls_x509_crt_parse_der+0x432>

    while( *p < end )
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   e55a4:	4b0f      	ldr	r3, [pc, #60]	; (e55e4 <mbedtls_x509_crt_parse_der+0x668>)
   e55a6:	e68f      	b.n	e52c8 <mbedtls_x509_crt_parse_der+0x34c>

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_ALLOC_FAILED );
   e55a8:	4b0f      	ldr	r3, [pc, #60]	; (e55e8 <mbedtls_x509_crt_parse_der+0x66c>)
   e55aa:	e68d      	b.n	e52c8 <mbedtls_x509_crt_parse_der+0x34c>
                                       unsigned char *ns_cert_type)
{
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   e55ac:	aa17      	add	r2, sp, #92	; 0x5c
   e55ae:	4629      	mov	r1, r5
   e55b0:	a806      	add	r0, sp, #24
static int x509_get_ns_cert_type( unsigned char **p,
                                       const unsigned char *end,
                                       unsigned char *ns_cert_type)
{
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
   e55b2:	9317      	str	r3, [sp, #92]	; 0x5c
   e55b4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
   e55b8:	9319      	str	r3, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   e55ba:	f7f0 fc09 	bl	d5dd0 <mbedtls_asn1_get_bitstring>
   e55be:	b1a8      	cbz	r0, e55ec <mbedtls_x509_crt_parse_der+0x670>
                return( ret );
            break;

        case MBEDTLS_X509_EXT_NS_CERT_TYPE:
            /* Parse netscape certificate type */
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
   e55c0:	f5b0 5314 	subs.w	r3, r0, #9472	; 0x2500
   e55c4:	f43f ae13 	beq.w	e51ee <mbedtls_x509_crt_parse_der+0x272>
   e55c8:	e67e      	b.n	e52c8 <mbedtls_x509_crt_parse_der+0x34c>
   e55ca:	bf00      	nop
   e55cc:	ffffd800 	.word	0xffffd800
   e55d0:	ffffd780 	.word	0xffffd780
   e55d4:	ffffda80 	.word	0xffffda80
   e55d8:	ffffdb9a 	.word	0xffffdb9a
   e55dc:	ffffda9a 	.word	0xffffda9a
   e55e0:	ffffd980 	.word	0xffffd980
   e55e4:	ffffdaa0 	.word	0xffffdaa0
   e55e8:	ffffda96 	.word	0xffffda96
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len != 1 )
   e55ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e55ee:	2b01      	cmp	r3, #1
   e55f0:	d10a      	bne.n	e5608 <mbedtls_x509_crt_parse_der+0x68c>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *ns_cert_type = *bs.p;
   e55f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e55f4:	781b      	ldrb	r3, [r3, #0]
   e55f6:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
   e55fa:	e5f8      	b.n	e51ee <mbedtls_x509_crt_parse_der+0x272>
#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
            {
                /* Data is marked as critical: fail */
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   e55fc:	4b05      	ldr	r3, [pc, #20]	; (e5614 <mbedtls_x509_crt_parse_der+0x698>)
   e55fe:	e663      	b.n	e52c8 <mbedtls_x509_crt_parse_der+0x34c>
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
   e5600:	4b05      	ldr	r3, [pc, #20]	; (e5618 <mbedtls_x509_crt_parse_der+0x69c>)
   e5602:	e661      	b.n	e52c8 <mbedtls_x509_crt_parse_der+0x34c>
                    &crt->ns_cert_type ) ) != 0 )
                return( ret );
            break;

        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
   e5604:	4b05      	ldr	r3, [pc, #20]	; (e561c <mbedtls_x509_crt_parse_der+0x6a0>)
   e5606:	e65f      	b.n	e52c8 <mbedtls_x509_crt_parse_der+0x34c>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   e5608:	4b05      	ldr	r3, [pc, #20]	; (e5620 <mbedtls_x509_crt_parse_der+0x6a4>)
   e560a:	e65d      	b.n	e52c8 <mbedtls_x509_crt_parse_der+0x34c>

        return( ret );
    }

    return( 0 );
}
   e560c:	4628      	mov	r0, r5
   e560e:	b01b      	add	sp, #108	; 0x6c
   e5610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e5614:	ffffda9e 	.word	0xffffda9e
   e5618:	ffffdb00 	.word	0xffffdb00
   e561c:	ffffdf80 	.word	0xffffdf80
   e5620:	ffffda9c 	.word	0xffffda9c

000e5624 <mbedtls_x509_crt_parse>:
/*
 * Parse one or more PEM certificates from a buffer and add them to the chained
 * list
 */
int mbedtls_x509_crt_parse( mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen )
{
   e5624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e5628:	460d      	mov	r5, r1
   e562a:	b088      	sub	sp, #32
   e562c:	4617      	mov	r7, r2
#endif

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
   e562e:	4681      	mov	r9, r0
   e5630:	2800      	cmp	r0, #0
   e5632:	d054      	beq.n	e56de <mbedtls_x509_crt_parse+0xba>
   e5634:	2900      	cmp	r1, #0
   e5636:	d052      	beq.n	e56de <mbedtls_x509_crt_parse+0xba>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
   e5638:	2a00      	cmp	r2, #0
   e563a:	d054      	beq.n	e56e6 <mbedtls_x509_crt_parse+0xc2>
   e563c:	188b      	adds	r3, r1, r2
   e563e:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   e5642:	2c00      	cmp	r4, #0
   e5644:	d14f      	bne.n	e56e6 <mbedtls_x509_crt_parse+0xc2>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
   e5646:	492c      	ldr	r1, [pc, #176]	; (e56f8 <mbedtls_x509_crt_parse+0xd4>)
   e5648:	4628      	mov	r0, r5
   e564a:	f002 fc81 	bl	e7f50 <strstr>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
   e564e:	2800      	cmp	r0, #0
   e5650:	d049      	beq.n	e56e6 <mbedtls_x509_crt_parse+0xc2>
   e5652:	46a0      	mov	r8, r4
   e5654:	46a2      	mov	sl, r4
    {
        int ret;
        mbedtls_pem_context pem;

        /* 1 rather than 0 since the terminating NULL byte is counted in */
        while( buflen > 1 )
   e5656:	2f01      	cmp	r7, #1
   e5658:	d938      	bls.n	e56cc <mbedtls_x509_crt_parse+0xa8>
        {
            size_t use_len;
            mbedtls_pem_init( &pem );
   e565a:	a805      	add	r0, sp, #20
   e565c:	f7f5 fc76 	bl	daf4c <mbedtls_pem_init>

            /* If we get there, we know the string is null-terminated */
            ret = mbedtls_pem_read_buffer( &pem,
   e5660:	ab04      	add	r3, sp, #16
   e5662:	9302      	str	r3, [sp, #8]
   e5664:	2300      	movs	r3, #0
   e5666:	9301      	str	r3, [sp, #4]
   e5668:	9300      	str	r3, [sp, #0]
   e566a:	4a24      	ldr	r2, [pc, #144]	; (e56fc <mbedtls_x509_crt_parse+0xd8>)
   e566c:	4922      	ldr	r1, [pc, #136]	; (e56f8 <mbedtls_x509_crt_parse+0xd4>)
   e566e:	462b      	mov	r3, r5
   e5670:	a805      	add	r0, sp, #20
   e5672:	f7f5 fc71 	bl	daf58 <mbedtls_pem_read_buffer>
                           "-----BEGIN CERTIFICATE-----",
                           "-----END CERTIFICATE-----",
                           buf, NULL, 0, &use_len );

            if( ret == 0 )
   e5676:	4606      	mov	r6, r0
   e5678:	b968      	cbnz	r0, e5696 <mbedtls_x509_crt_parse+0x72>
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
   e567a:	9b04      	ldr	r3, [sp, #16]
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
   e567c:	9a06      	ldr	r2, [sp, #24]
   e567e:	9905      	ldr	r1, [sp, #20]
   e5680:	4648      	mov	r0, r9
            if( ret == 0 )
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
   e5682:	1aff      	subs	r7, r7, r3
                buf += use_len;
   e5684:	441d      	add	r5, r3
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
   e5686:	f7ff fc79 	bl	e4f7c <mbedtls_x509_crt_parse_der>
   e568a:	4606      	mov	r6, r0

            mbedtls_pem_free( &pem );
   e568c:	a805      	add	r0, sp, #20
   e568e:	f7f5 fced 	bl	db06c <mbedtls_pem_free>

            if( ret != 0 )
   e5692:	b96e      	cbnz	r6, e56b0 <mbedtls_x509_crt_parse+0x8c>
   e5694:	e015      	b.n	e56c2 <mbedtls_x509_crt_parse+0x9e>
                 * Was PEM encoded
                 */
                buflen -= use_len;
                buf += use_len;
            }
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
   e5696:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
   e569a:	d015      	beq.n	e56c8 <mbedtls_x509_crt_parse+0xa4>
            {
                return( ret );
            }
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   e569c:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   e56a0:	d014      	beq.n	e56cc <mbedtls_x509_crt_parse+0xa8>
            {
                mbedtls_pem_free( &pem );
   e56a2:	a805      	add	r0, sp, #20
   e56a4:	f7f5 fce2 	bl	db06c <mbedtls_pem_free>

                /*
                 * PEM header and footer were found
                 */
                buflen -= use_len;
   e56a8:	9b04      	ldr	r3, [sp, #16]
   e56aa:	1aff      	subs	r7, r7, r3
                buf += use_len;
   e56ac:	441d      	add	r5, r3
   e56ae:	e002      	b.n	e56b6 <mbedtls_x509_crt_parse+0x92>
            if( ret != 0 )
            {
                /*
                 * Quit parsing on a memory error
                 */
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
   e56b0:	f516 5f22 	cmn.w	r6, #10368	; 0x2880
   e56b4:	d008      	beq.n	e56c8 <mbedtls_x509_crt_parse+0xa4>
                    return( ret );

                if( first_error == 0 )
   e56b6:	f1b8 0f00 	cmp.w	r8, #0
   e56ba:	bf08      	it	eq
   e56bc:	46b0      	moveq	r8, r6
                    first_error = ret;

                total_failed++;
   e56be:	3401      	adds	r4, #1
                continue;
   e56c0:	e7c9      	b.n	e5656 <mbedtls_x509_crt_parse+0x32>
            }

            success = 1;
   e56c2:	f04f 0a01 	mov.w	sl, #1
   e56c6:	e7c6      	b.n	e5656 <mbedtls_x509_crt_parse+0x32>
   e56c8:	4630      	mov	r0, r6
   e56ca:	e011      	b.n	e56f0 <mbedtls_x509_crt_parse+0xcc>
        }
    }

    if( success )
   e56cc:	f1ba 0f00 	cmp.w	sl, #0
   e56d0:	d107      	bne.n	e56e2 <mbedtls_x509_crt_parse+0xbe>
        return( total_failed );
    else if( first_error )
   e56d2:	480b      	ldr	r0, [pc, #44]	; (e5700 <mbedtls_x509_crt_parse+0xdc>)
   e56d4:	f1b8 0f00 	cmp.w	r8, #0
   e56d8:	bf18      	it	ne
   e56da:	4640      	movne	r0, r8
   e56dc:	e008      	b.n	e56f0 <mbedtls_x509_crt_parse+0xcc>

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   e56de:	4809      	ldr	r0, [pc, #36]	; (e5704 <mbedtls_x509_crt_parse+0xe0>)
   e56e0:	e006      	b.n	e56f0 <mbedtls_x509_crt_parse+0xcc>
   e56e2:	4620      	mov	r0, r4
   e56e4:	e004      	b.n	e56f0 <mbedtls_x509_crt_parse+0xcc>
    {
        buf_format = MBEDTLS_X509_FORMAT_PEM;
    }

    if( buf_format == MBEDTLS_X509_FORMAT_DER )
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
   e56e6:	463a      	mov	r2, r7
   e56e8:	4629      	mov	r1, r5
   e56ea:	4648      	mov	r0, r9
   e56ec:	f7ff fc46 	bl	e4f7c <mbedtls_x509_crt_parse_der>
    else if( first_error )
        return( first_error );
    else
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
#endif /* MBEDTLS_PEM_PARSE_C */
}
   e56f0:	b008      	add	sp, #32
   e56f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e56f6:	bf00      	nop
   e56f8:	000ea4ce 	.word	0x000ea4ce
   e56fc:	000ea4ea 	.word	0x000ea4ea
   e5700:	ffffd880 	.word	0xffffd880
   e5704:	ffffd800 	.word	0xffffd800

000e5708 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   e5708:	b508      	push	{r3, lr}
   e570a:	4b02      	ldr	r3, [pc, #8]	; (e5714 <os_thread_is_current+0xc>)
   e570c:	681b      	ldr	r3, [r3, #0]
   e570e:	689b      	ldr	r3, [r3, #8]
   e5710:	9301      	str	r3, [sp, #4]
   e5712:	bd08      	pop	{r3, pc}
   e5714:	00030248 	.word	0x00030248

000e5718 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   e5718:	b508      	push	{r3, lr}
   e571a:	4b02      	ldr	r3, [pc, #8]	; (e5724 <os_thread_join+0xc>)
   e571c:	681b      	ldr	r3, [r3, #0]
   e571e:	691b      	ldr	r3, [r3, #16]
   e5720:	9301      	str	r3, [sp, #4]
   e5722:	bd08      	pop	{r3, pc}
   e5724:	00030248 	.word	0x00030248

000e5728 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   e5728:	b508      	push	{r3, lr}
   e572a:	4b02      	ldr	r3, [pc, #8]	; (e5734 <os_thread_cleanup+0xc>)
   e572c:	681b      	ldr	r3, [r3, #0]
   e572e:	695b      	ldr	r3, [r3, #20]
   e5730:	9301      	str	r3, [sp, #4]
   e5732:	bd08      	pop	{r3, pc}
   e5734:	00030248 	.word	0x00030248

000e5738 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   e5738:	b508      	push	{r3, lr}
   e573a:	4b02      	ldr	r3, [pc, #8]	; (e5744 <os_mutex_recursive_create+0xc>)
   e573c:	681b      	ldr	r3, [r3, #0]
   e573e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   e5740:	9301      	str	r3, [sp, #4]
   e5742:	bd08      	pop	{r3, pc}
   e5744:	00030248 	.word	0x00030248

000e5748 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   e5748:	b508      	push	{r3, lr}
   e574a:	4b02      	ldr	r3, [pc, #8]	; (e5754 <os_mutex_recursive_destroy+0xc>)
   e574c:	681b      	ldr	r3, [r3, #0]
   e574e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   e5750:	9301      	str	r3, [sp, #4]
   e5752:	bd08      	pop	{r3, pc}
   e5754:	00030248 	.word	0x00030248

000e5758 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   e5758:	b508      	push	{r3, lr}
   e575a:	4b02      	ldr	r3, [pc, #8]	; (e5764 <HAL_RNG_GetRandomNumber+0xc>)
   e575c:	681b      	ldr	r3, [r3, #0]
   e575e:	685b      	ldr	r3, [r3, #4]
   e5760:	9301      	str	r3, [sp, #4]
   e5762:	bd08      	pop	{r3, pc}
   e5764:	00030218 	.word	0x00030218

000e5768 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   e5768:	b508      	push	{r3, lr}
   e576a:	4b02      	ldr	r3, [pc, #8]	; (e5774 <HAL_Delay_Microseconds+0xc>)
   e576c:	681b      	ldr	r3, [r3, #0]
   e576e:	68db      	ldr	r3, [r3, #12]
   e5770:	9301      	str	r3, [sp, #4]
   e5772:	bd08      	pop	{r3, pc}
   e5774:	00030218 	.word	0x00030218

000e5778 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   e5778:	b508      	push	{r3, lr}
   e577a:	4b02      	ldr	r3, [pc, #8]	; (e5784 <HAL_Timer_Get_Milli_Seconds+0xc>)
   e577c:	681b      	ldr	r3, [r3, #0]
   e577e:	695b      	ldr	r3, [r3, #20]
   e5780:	9301      	str	r3, [sp, #4]
   e5782:	bd08      	pop	{r3, pc}
   e5784:	00030218 	.word	0x00030218

000e5788 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   e5788:	b508      	push	{r3, lr}
   e578a:	4b02      	ldr	r3, [pc, #8]	; (e5794 <HAL_RTC_Get_UnixTime+0xc>)
   e578c:	681b      	ldr	r3, [r3, #0]
   e578e:	69db      	ldr	r3, [r3, #28]
   e5790:	9301      	str	r3, [sp, #4]
   e5792:	bd08      	pop	{r3, pc}
   e5794:	00030218 	.word	0x00030218

000e5798 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   e5798:	b508      	push	{r3, lr}
   e579a:	4b02      	ldr	r3, [pc, #8]	; (e57a4 <HAL_Pin_Map+0xc>)
   e579c:	681b      	ldr	r3, [r3, #0]
   e579e:	681b      	ldr	r3, [r3, #0]
   e57a0:	9301      	str	r3, [sp, #4]
   e57a2:	bd08      	pop	{r3, pc}
   e57a4:	0003022c 	.word	0x0003022c

000e57a8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   e57a8:	b508      	push	{r3, lr}
   e57aa:	4b02      	ldr	r3, [pc, #8]	; (e57b4 <HAL_Pin_Mode+0xc>)
   e57ac:	681b      	ldr	r3, [r3, #0]
   e57ae:	689b      	ldr	r3, [r3, #8]
   e57b0:	9301      	str	r3, [sp, #4]
   e57b2:	bd08      	pop	{r3, pc}
   e57b4:	0003022c 	.word	0x0003022c

000e57b8 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   e57b8:	b508      	push	{r3, lr}
   e57ba:	4b02      	ldr	r3, [pc, #8]	; (e57c4 <HAL_Interrupts_Enable_All+0xc>)
   e57bc:	681b      	ldr	r3, [r3, #0]
   e57be:	6a1b      	ldr	r3, [r3, #32]
   e57c0:	9301      	str	r3, [sp, #4]
   e57c2:	bd08      	pop	{r3, pc}
   e57c4:	0003022c 	.word	0x0003022c

000e57c8 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   e57c8:	b508      	push	{r3, lr}
   e57ca:	4b02      	ldr	r3, [pc, #8]	; (e57d4 <HAL_Interrupts_Disable_All+0xc>)
   e57cc:	681b      	ldr	r3, [r3, #0]
   e57ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   e57d0:	9301      	str	r3, [sp, #4]
   e57d2:	bd08      	pop	{r3, pc}
   e57d4:	0003022c 	.word	0x0003022c

000e57d8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   e57d8:	b508      	push	{r3, lr}
   e57da:	4b02      	ldr	r3, [pc, #8]	; (e57e4 <HAL_I2C_Write_Data+0xc>)
   e57dc:	681b      	ldr	r3, [r3, #0]
   e57de:	6a1b      	ldr	r3, [r3, #32]
   e57e0:	9301      	str	r3, [sp, #4]
   e57e2:	bd08      	pop	{r3, pc}
   e57e4:	00030228 	.word	0x00030228

000e57e8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   e57e8:	b508      	push	{r3, lr}
   e57ea:	4b02      	ldr	r3, [pc, #8]	; (e57f4 <HAL_I2C_Available_Data+0xc>)
   e57ec:	681b      	ldr	r3, [r3, #0]
   e57ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   e57f0:	9301      	str	r3, [sp, #4]
   e57f2:	bd08      	pop	{r3, pc}
   e57f4:	00030228 	.word	0x00030228

000e57f8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   e57f8:	b508      	push	{r3, lr}
   e57fa:	4b02      	ldr	r3, [pc, #8]	; (e5804 <HAL_I2C_Read_Data+0xc>)
   e57fc:	681b      	ldr	r3, [r3, #0]
   e57fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e5800:	9301      	str	r3, [sp, #4]
   e5802:	bd08      	pop	{r3, pc}
   e5804:	00030228 	.word	0x00030228

000e5808 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   e5808:	b508      	push	{r3, lr}
   e580a:	4b02      	ldr	r3, [pc, #8]	; (e5814 <HAL_I2C_Peek_Data+0xc>)
   e580c:	681b      	ldr	r3, [r3, #0]
   e580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e5810:	9301      	str	r3, [sp, #4]
   e5812:	bd08      	pop	{r3, pc}
   e5814:	00030228 	.word	0x00030228

000e5818 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   e5818:	b508      	push	{r3, lr}
   e581a:	4b02      	ldr	r3, [pc, #8]	; (e5824 <HAL_I2C_Flush_Data+0xc>)
   e581c:	681b      	ldr	r3, [r3, #0]
   e581e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e5820:	9301      	str	r3, [sp, #4]
   e5822:	bd08      	pop	{r3, pc}
   e5824:	00030228 	.word	0x00030228

000e5828 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   e5828:	b508      	push	{r3, lr}
   e582a:	4b02      	ldr	r3, [pc, #8]	; (e5834 <HAL_I2C_Is_Enabled+0xc>)
   e582c:	681b      	ldr	r3, [r3, #0]
   e582e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e5830:	9301      	str	r3, [sp, #4]
   e5832:	bd08      	pop	{r3, pc}
   e5834:	00030228 	.word	0x00030228

000e5838 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   e5838:	b508      	push	{r3, lr}
   e583a:	4b02      	ldr	r3, [pc, #8]	; (e5844 <HAL_I2C_Init+0xc>)
   e583c:	681b      	ldr	r3, [r3, #0]
   e583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   e5840:	9301      	str	r3, [sp, #4]
   e5842:	bd08      	pop	{r3, pc}
   e5844:	00030228 	.word	0x00030228

000e5848 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   e5848:	b508      	push	{r3, lr}
   e584a:	4b02      	ldr	r3, [pc, #8]	; (e5854 <if_index_to_name+0xc>)
   e584c:	681b      	ldr	r3, [r3, #0]
   e584e:	695b      	ldr	r3, [r3, #20]
   e5850:	9301      	str	r3, [sp, #4]
   e5852:	bd08      	pop	{r3, pc}
   e5854:	0003026c 	.word	0x0003026c

000e5858 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   e5858:	b508      	push	{r3, lr}
   e585a:	4b02      	ldr	r3, [pc, #8]	; (e5864 <inet_inet_ntop+0xc>)
   e585c:	681b      	ldr	r3, [r3, #0]
   e585e:	695b      	ldr	r3, [r3, #20]
   e5860:	9301      	str	r3, [sp, #4]
   e5862:	bd08      	pop	{r3, pc}
   e5864:	00030264 	.word	0x00030264

000e5868 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   e5868:	b508      	push	{r3, lr}
   e586a:	4b02      	ldr	r3, [pc, #8]	; (e5874 <inet_htonl+0xc>)
   e586c:	681b      	ldr	r3, [r3, #0]
   e586e:	6a1b      	ldr	r3, [r3, #32]
   e5870:	9301      	str	r3, [sp, #4]
   e5872:	bd08      	pop	{r3, pc}
   e5874:	00030264 	.word	0x00030264

000e5878 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   e5878:	b508      	push	{r3, lr}
   e587a:	4b02      	ldr	r3, [pc, #8]	; (e5884 <inet_htons+0xc>)
   e587c:	681b      	ldr	r3, [r3, #0]
   e587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e5880:	9301      	str	r3, [sp, #4]
   e5882:	bd08      	pop	{r3, pc}
   e5884:	00030264 	.word	0x00030264

000e5888 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   e5888:	b508      	push	{r3, lr}
   e588a:	4b02      	ldr	r3, [pc, #8]	; (e5894 <netdb_freeaddrinfo+0xc>)
   e588c:	681b      	ldr	r3, [r3, #0]
   e588e:	689b      	ldr	r3, [r3, #8]
   e5890:	9301      	str	r3, [sp, #4]
   e5892:	bd08      	pop	{r3, pc}
   e5894:	00030268 	.word	0x00030268

000e5898 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   e5898:	b508      	push	{r3, lr}
   e589a:	4b02      	ldr	r3, [pc, #8]	; (e58a4 <netdb_getaddrinfo+0xc>)
   e589c:	681b      	ldr	r3, [r3, #0]
   e589e:	68db      	ldr	r3, [r3, #12]
   e58a0:	9301      	str	r3, [sp, #4]
   e58a2:	bd08      	pop	{r3, pc}
   e58a4:	00030268 	.word	0x00030268

000e58a8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   e58a8:	b508      	push	{r3, lr}
   e58aa:	4b02      	ldr	r3, [pc, #8]	; (e58b4 <sock_setsockopt+0xc>)
   e58ac:	681b      	ldr	r3, [r3, #0]
   e58ae:	699b      	ldr	r3, [r3, #24]
   e58b0:	9301      	str	r3, [sp, #4]
   e58b2:	bd08      	pop	{r3, pc}
   e58b4:	00030238 	.word	0x00030238

000e58b8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   e58b8:	b508      	push	{r3, lr}
   e58ba:	4b02      	ldr	r3, [pc, #8]	; (e58c4 <sock_close+0xc>)
   e58bc:	681b      	ldr	r3, [r3, #0]
   e58be:	69db      	ldr	r3, [r3, #28]
   e58c0:	9301      	str	r3, [sp, #4]
   e58c2:	bd08      	pop	{r3, pc}
   e58c4:	00030238 	.word	0x00030238

000e58c8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   e58c8:	b508      	push	{r3, lr}
   e58ca:	4b02      	ldr	r3, [pc, #8]	; (e58d4 <sock_connect+0xc>)
   e58cc:	681b      	ldr	r3, [r3, #0]
   e58ce:	6a1b      	ldr	r3, [r3, #32]
   e58d0:	9301      	str	r3, [sp, #4]
   e58d2:	bd08      	pop	{r3, pc}
   e58d4:	00030238 	.word	0x00030238

000e58d8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   e58d8:	b508      	push	{r3, lr}
   e58da:	4b02      	ldr	r3, [pc, #8]	; (e58e4 <sock_recv+0xc>)
   e58dc:	681b      	ldr	r3, [r3, #0]
   e58de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e58e0:	9301      	str	r3, [sp, #4]
   e58e2:	bd08      	pop	{r3, pc}
   e58e4:	00030238 	.word	0x00030238

000e58e8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   e58e8:	b508      	push	{r3, lr}
   e58ea:	4b02      	ldr	r3, [pc, #8]	; (e58f4 <sock_send+0xc>)
   e58ec:	681b      	ldr	r3, [r3, #0]
   e58ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e58f0:	9301      	str	r3, [sp, #4]
   e58f2:	bd08      	pop	{r3, pc}
   e58f4:	00030238 	.word	0x00030238

000e58f8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   e58f8:	b508      	push	{r3, lr}
   e58fa:	4b02      	ldr	r3, [pc, #8]	; (e5904 <sock_socket+0xc>)
   e58fc:	681b      	ldr	r3, [r3, #0]
   e58fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   e5900:	9301      	str	r3, [sp, #4]
   e5902:	bd08      	pop	{r3, pc}
   e5904:	00030238 	.word	0x00030238

000e5908 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   e5908:	b508      	push	{r3, lr}
   e590a:	4b02      	ldr	r3, [pc, #8]	; (e5914 <HAL_SPI_Init+0xc>)
   e590c:	681b      	ldr	r3, [r3, #0]
   e590e:	69db      	ldr	r3, [r3, #28]
   e5910:	9301      	str	r3, [sp, #4]
   e5912:	bd08      	pop	{r3, pc}
   e5914:	00030230 	.word	0x00030230

000e5918 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   e5918:	b508      	push	{r3, lr}
   e591a:	4b02      	ldr	r3, [pc, #8]	; (e5924 <HAL_SPI_Is_Enabled+0xc>)
   e591c:	681b      	ldr	r3, [r3, #0]
   e591e:	6a1b      	ldr	r3, [r3, #32]
   e5920:	9301      	str	r3, [sp, #4]
   e5922:	bd08      	pop	{r3, pc}
   e5924:	00030230 	.word	0x00030230

000e5928 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   e5928:	b508      	push	{r3, lr}
   e592a:	4b02      	ldr	r3, [pc, #8]	; (e5934 <HAL_USART_Init+0xc>)
   e592c:	681b      	ldr	r3, [r3, #0]
   e592e:	681b      	ldr	r3, [r3, #0]
   e5930:	9301      	str	r3, [sp, #4]
   e5932:	bd08      	pop	{r3, pc}
   e5934:	0003023c 	.word	0x0003023c

000e5938 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   e5938:	b508      	push	{r3, lr}
   e593a:	4b02      	ldr	r3, [pc, #8]	; (e5944 <HAL_USART_Write_Data+0xc>)
   e593c:	681b      	ldr	r3, [r3, #0]
   e593e:	68db      	ldr	r3, [r3, #12]
   e5940:	9301      	str	r3, [sp, #4]
   e5942:	bd08      	pop	{r3, pc}
   e5944:	0003023c 	.word	0x0003023c

000e5948 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   e5948:	b508      	push	{r3, lr}
   e594a:	4b02      	ldr	r3, [pc, #8]	; (e5954 <HAL_USART_Available_Data+0xc>)
   e594c:	681b      	ldr	r3, [r3, #0]
   e594e:	691b      	ldr	r3, [r3, #16]
   e5950:	9301      	str	r3, [sp, #4]
   e5952:	bd08      	pop	{r3, pc}
   e5954:	0003023c 	.word	0x0003023c

000e5958 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   e5958:	b508      	push	{r3, lr}
   e595a:	4b02      	ldr	r3, [pc, #8]	; (e5964 <HAL_USART_Read_Data+0xc>)
   e595c:	681b      	ldr	r3, [r3, #0]
   e595e:	695b      	ldr	r3, [r3, #20]
   e5960:	9301      	str	r3, [sp, #4]
   e5962:	bd08      	pop	{r3, pc}
   e5964:	0003023c 	.word	0x0003023c

000e5968 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   e5968:	b508      	push	{r3, lr}
   e596a:	4b02      	ldr	r3, [pc, #8]	; (e5974 <HAL_USART_Peek_Data+0xc>)
   e596c:	681b      	ldr	r3, [r3, #0]
   e596e:	699b      	ldr	r3, [r3, #24]
   e5970:	9301      	str	r3, [sp, #4]
   e5972:	bd08      	pop	{r3, pc}
   e5974:	0003023c 	.word	0x0003023c

000e5978 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   e5978:	b508      	push	{r3, lr}
   e597a:	4b02      	ldr	r3, [pc, #8]	; (e5984 <HAL_USART_Flush_Data+0xc>)
   e597c:	681b      	ldr	r3, [r3, #0]
   e597e:	69db      	ldr	r3, [r3, #28]
   e5980:	9301      	str	r3, [sp, #4]
   e5982:	bd08      	pop	{r3, pc}
   e5984:	0003023c 	.word	0x0003023c

000e5988 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   e5988:	b508      	push	{r3, lr}
   e598a:	4b02      	ldr	r3, [pc, #8]	; (e5994 <HAL_USART_Is_Enabled+0xc>)
   e598c:	681b      	ldr	r3, [r3, #0]
   e598e:	6a1b      	ldr	r3, [r3, #32]
   e5990:	9301      	str	r3, [sp, #4]
   e5992:	bd08      	pop	{r3, pc}
   e5994:	0003023c 	.word	0x0003023c

000e5998 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   e5998:	b508      	push	{r3, lr}
   e599a:	4b02      	ldr	r3, [pc, #8]	; (e59a4 <HAL_USART_Available_Data_For_Write+0xc>)
   e599c:	681b      	ldr	r3, [r3, #0]
   e599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e59a0:	9301      	str	r3, [sp, #4]
   e59a2:	bd08      	pop	{r3, pc}
   e59a4:	0003023c 	.word	0x0003023c

000e59a8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   e59a8:	b508      	push	{r3, lr}
   e59aa:	4b02      	ldr	r3, [pc, #8]	; (e59b4 <HAL_USB_USART_Init+0xc>)
   e59ac:	681b      	ldr	r3, [r3, #0]
   e59ae:	681b      	ldr	r3, [r3, #0]
   e59b0:	9301      	str	r3, [sp, #4]
   e59b2:	bd08      	pop	{r3, pc}
   e59b4:	0003024c 	.word	0x0003024c

000e59b8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   e59b8:	b508      	push	{r3, lr}
   e59ba:	4b02      	ldr	r3, [pc, #8]	; (e59c4 <HAL_USB_USART_Begin+0xc>)
   e59bc:	681b      	ldr	r3, [r3, #0]
   e59be:	685b      	ldr	r3, [r3, #4]
   e59c0:	9301      	str	r3, [sp, #4]
   e59c2:	bd08      	pop	{r3, pc}
   e59c4:	0003024c 	.word	0x0003024c

000e59c8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   e59c8:	b508      	push	{r3, lr}
   e59ca:	4b02      	ldr	r3, [pc, #8]	; (e59d4 <HAL_USB_USART_Available_Data+0xc>)
   e59cc:	681b      	ldr	r3, [r3, #0]
   e59ce:	691b      	ldr	r3, [r3, #16]
   e59d0:	9301      	str	r3, [sp, #4]
   e59d2:	bd08      	pop	{r3, pc}
   e59d4:	0003024c 	.word	0x0003024c

000e59d8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   e59d8:	b508      	push	{r3, lr}
   e59da:	4b02      	ldr	r3, [pc, #8]	; (e59e4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   e59dc:	681b      	ldr	r3, [r3, #0]
   e59de:	695b      	ldr	r3, [r3, #20]
   e59e0:	9301      	str	r3, [sp, #4]
   e59e2:	bd08      	pop	{r3, pc}
   e59e4:	0003024c 	.word	0x0003024c

000e59e8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   e59e8:	b508      	push	{r3, lr}
   e59ea:	4b02      	ldr	r3, [pc, #8]	; (e59f4 <HAL_USB_USART_Receive_Data+0xc>)
   e59ec:	681b      	ldr	r3, [r3, #0]
   e59ee:	699b      	ldr	r3, [r3, #24]
   e59f0:	9301      	str	r3, [sp, #4]
   e59f2:	bd08      	pop	{r3, pc}
   e59f4:	0003024c 	.word	0x0003024c

000e59f8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   e59f8:	b508      	push	{r3, lr}
   e59fa:	4b02      	ldr	r3, [pc, #8]	; (e5a04 <HAL_USB_USART_Send_Data+0xc>)
   e59fc:	681b      	ldr	r3, [r3, #0]
   e59fe:	69db      	ldr	r3, [r3, #28]
   e5a00:	9301      	str	r3, [sp, #4]
   e5a02:	bd08      	pop	{r3, pc}
   e5a04:	0003024c 	.word	0x0003024c

000e5a08 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   e5a08:	b508      	push	{r3, lr}
   e5a0a:	4b02      	ldr	r3, [pc, #8]	; (e5a14 <HAL_USB_USART_Flush_Data+0xc>)
   e5a0c:	681b      	ldr	r3, [r3, #0]
   e5a0e:	6a1b      	ldr	r3, [r3, #32]
   e5a10:	9301      	str	r3, [sp, #4]
   e5a12:	bd08      	pop	{r3, pc}
   e5a14:	0003024c 	.word	0x0003024c

000e5a18 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   e5a18:	b508      	push	{r3, lr}
   e5a1a:	4b02      	ldr	r3, [pc, #8]	; (e5a24 <panic_+0xc>)
   e5a1c:	681b      	ldr	r3, [r3, #0]
   e5a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e5a20:	9301      	str	r3, [sp, #4]
   e5a22:	bd08      	pop	{r3, pc}
   e5a24:	00030260 	.word	0x00030260

000e5a28 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   e5a28:	b508      	push	{r3, lr}
   e5a2a:	4b02      	ldr	r3, [pc, #8]	; (e5a34 <log_message+0xc>)
   e5a2c:	681b      	ldr	r3, [r3, #0]
   e5a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   e5a30:	9301      	str	r3, [sp, #4]
   e5a32:	bd08      	pop	{r3, pc}
   e5a34:	00030260 	.word	0x00030260

000e5a38 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   e5a38:	b508      	push	{r3, lr}
   e5a3a:	4b02      	ldr	r3, [pc, #8]	; (e5a44 <set_system_mode+0xc>)
   e5a3c:	681b      	ldr	r3, [r3, #0]
   e5a3e:	685b      	ldr	r3, [r3, #4]
   e5a40:	9301      	str	r3, [sp, #4]
   e5a42:	bd08      	pop	{r3, pc}
   e5a44:	00030220 	.word	0x00030220

000e5a48 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   e5a48:	b508      	push	{r3, lr}
   e5a4a:	4b02      	ldr	r3, [pc, #8]	; (e5a54 <system_delay_ms+0xc>)
   e5a4c:	681b      	ldr	r3, [r3, #0]
   e5a4e:	695b      	ldr	r3, [r3, #20]
   e5a50:	9301      	str	r3, [sp, #4]
   e5a52:	bd08      	pop	{r3, pc}
   e5a54:	00030220 	.word	0x00030220

000e5a58 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   e5a58:	b508      	push	{r3, lr}
   e5a5a:	4b03      	ldr	r3, [pc, #12]	; (e5a68 <system_ctrl_set_app_request_handler+0x10>)
   e5a5c:	681b      	ldr	r3, [r3, #0]
   e5a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   e5a62:	9301      	str	r3, [sp, #4]
   e5a64:	bd08      	pop	{r3, pc}
   e5a66:	0000      	.short	0x0000
   e5a68:	00030220 	.word	0x00030220

000e5a6c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   e5a6c:	b508      	push	{r3, lr}
   e5a6e:	4b03      	ldr	r3, [pc, #12]	; (e5a7c <system_ctrl_set_result+0x10>)
   e5a70:	681b      	ldr	r3, [r3, #0]
   e5a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   e5a76:	9301      	str	r3, [sp, #4]
   e5a78:	bd08      	pop	{r3, pc}
   e5a7a:	0000      	.short	0x0000
   e5a7c:	00030220 	.word	0x00030220

000e5a80 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   e5a80:	b508      	push	{r3, lr}
   e5a82:	4b02      	ldr	r3, [pc, #8]	; (e5a8c <spark_set_random_seed_from_cloud_handler+0xc>)
   e5a84:	681b      	ldr	r3, [r3, #0]
   e5a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e5a88:	9301      	str	r3, [sp, #4]
   e5a8a:	bd08      	pop	{r3, pc}
   e5a8c:	00030244 	.word	0x00030244

000e5a90 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   e5a90:	b508      	push	{r3, lr}
   e5a92:	4b02      	ldr	r3, [pc, #8]	; (e5a9c <network_connect+0xc>)
   e5a94:	681b      	ldr	r3, [r3, #0]
   e5a96:	685b      	ldr	r3, [r3, #4]
   e5a98:	9301      	str	r3, [sp, #4]
   e5a9a:	bd08      	pop	{r3, pc}
   e5a9c:	00030240 	.word	0x00030240

000e5aa0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   e5aa0:	b508      	push	{r3, lr}
   e5aa2:	4b02      	ldr	r3, [pc, #8]	; (e5aac <network_connecting+0xc>)
   e5aa4:	681b      	ldr	r3, [r3, #0]
   e5aa6:	689b      	ldr	r3, [r3, #8]
   e5aa8:	9301      	str	r3, [sp, #4]
   e5aaa:	bd08      	pop	{r3, pc}
   e5aac:	00030240 	.word	0x00030240

000e5ab0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   e5ab0:	b508      	push	{r3, lr}
   e5ab2:	4b02      	ldr	r3, [pc, #8]	; (e5abc <network_disconnect+0xc>)
   e5ab4:	681b      	ldr	r3, [r3, #0]
   e5ab6:	68db      	ldr	r3, [r3, #12]
   e5ab8:	9301      	str	r3, [sp, #4]
   e5aba:	bd08      	pop	{r3, pc}
   e5abc:	00030240 	.word	0x00030240

000e5ac0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   e5ac0:	b508      	push	{r3, lr}
   e5ac2:	4b02      	ldr	r3, [pc, #8]	; (e5acc <network_ready+0xc>)
   e5ac4:	681b      	ldr	r3, [r3, #0]
   e5ac6:	691b      	ldr	r3, [r3, #16]
   e5ac8:	9301      	str	r3, [sp, #4]
   e5aca:	bd08      	pop	{r3, pc}
   e5acc:	00030240 	.word	0x00030240

000e5ad0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   e5ad0:	b508      	push	{r3, lr}
   e5ad2:	4b02      	ldr	r3, [pc, #8]	; (e5adc <network_on+0xc>)
   e5ad4:	681b      	ldr	r3, [r3, #0]
   e5ad6:	695b      	ldr	r3, [r3, #20]
   e5ad8:	9301      	str	r3, [sp, #4]
   e5ada:	bd08      	pop	{r3, pc}
   e5adc:	00030240 	.word	0x00030240

000e5ae0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   e5ae0:	b508      	push	{r3, lr}
   e5ae2:	4b02      	ldr	r3, [pc, #8]	; (e5aec <network_off+0xc>)
   e5ae4:	681b      	ldr	r3, [r3, #0]
   e5ae6:	699b      	ldr	r3, [r3, #24]
   e5ae8:	9301      	str	r3, [sp, #4]
   e5aea:	bd08      	pop	{r3, pc}
   e5aec:	00030240 	.word	0x00030240

000e5af0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   e5af0:	b508      	push	{r3, lr}
   e5af2:	4b02      	ldr	r3, [pc, #8]	; (e5afc <network_listen+0xc>)
   e5af4:	681b      	ldr	r3, [r3, #0]
   e5af6:	69db      	ldr	r3, [r3, #28]
   e5af8:	9301      	str	r3, [sp, #4]
   e5afa:	bd08      	pop	{r3, pc}
   e5afc:	00030240 	.word	0x00030240

000e5b00 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   e5b00:	b508      	push	{r3, lr}
   e5b02:	4b02      	ldr	r3, [pc, #8]	; (e5b0c <network_listening+0xc>)
   e5b04:	681b      	ldr	r3, [r3, #0]
   e5b06:	6a1b      	ldr	r3, [r3, #32]
   e5b08:	9301      	str	r3, [sp, #4]
   e5b0a:	bd08      	pop	{r3, pc}
   e5b0c:	00030240 	.word	0x00030240

000e5b10 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   e5b10:	b508      	push	{r3, lr}
   e5b12:	4b02      	ldr	r3, [pc, #8]	; (e5b1c <network_set_listen_timeout+0xc>)
   e5b14:	681b      	ldr	r3, [r3, #0]
   e5b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e5b18:	9301      	str	r3, [sp, #4]
   e5b1a:	bd08      	pop	{r3, pc}
   e5b1c:	00030240 	.word	0x00030240

000e5b20 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   e5b20:	b508      	push	{r3, lr}
   e5b22:	4b02      	ldr	r3, [pc, #8]	; (e5b2c <network_get_listen_timeout+0xc>)
   e5b24:	681b      	ldr	r3, [r3, #0]
   e5b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e5b28:	9301      	str	r3, [sp, #4]
   e5b2a:	bd08      	pop	{r3, pc}
   e5b2c:	00030240 	.word	0x00030240

000e5b30 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   e5b30:	b508      	push	{r3, lr}
   e5b32:	4b02      	ldr	r3, [pc, #8]	; (e5b3c <malloc+0xc>)
   e5b34:	681b      	ldr	r3, [r3, #0]
   e5b36:	681b      	ldr	r3, [r3, #0]
   e5b38:	9301      	str	r3, [sp, #4]
   e5b3a:	bd08      	pop	{r3, pc}
   e5b3c:	0003021c 	.word	0x0003021c

000e5b40 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   e5b40:	b508      	push	{r3, lr}
   e5b42:	4b02      	ldr	r3, [pc, #8]	; (e5b4c <free+0xc>)
   e5b44:	681b      	ldr	r3, [r3, #0]
   e5b46:	685b      	ldr	r3, [r3, #4]
   e5b48:	9301      	str	r3, [sp, #4]
   e5b4a:	bd08      	pop	{r3, pc}
   e5b4c:	0003021c 	.word	0x0003021c

000e5b50 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   e5b50:	b508      	push	{r3, lr}
   e5b52:	4b02      	ldr	r3, [pc, #8]	; (e5b5c <realloc+0xc>)
   e5b54:	681b      	ldr	r3, [r3, #0]
   e5b56:	689b      	ldr	r3, [r3, #8]
   e5b58:	9301      	str	r3, [sp, #4]
   e5b5a:	bd08      	pop	{r3, pc}
   e5b5c:	0003021c 	.word	0x0003021c

000e5b60 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   e5b60:	b508      	push	{r3, lr}
   e5b62:	4b02      	ldr	r3, [pc, #8]	; (e5b6c <sprintf+0xc>)
   e5b64:	681b      	ldr	r3, [r3, #0]
   e5b66:	68db      	ldr	r3, [r3, #12]
   e5b68:	9301      	str	r3, [sp, #4]
   e5b6a:	bd08      	pop	{r3, pc}
   e5b6c:	0003021c 	.word	0x0003021c

000e5b70 <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   e5b70:	b508      	push	{r3, lr}
   e5b72:	4b02      	ldr	r3, [pc, #8]	; (e5b7c <snprintf+0xc>)
   e5b74:	681b      	ldr	r3, [r3, #0]
   e5b76:	69db      	ldr	r3, [r3, #28]
   e5b78:	9301      	str	r3, [sp, #4]
   e5b7a:	bd08      	pop	{r3, pc}
   e5b7c:	0003021c 	.word	0x0003021c

000e5b80 <_malloc_r>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   e5b80:	b508      	push	{r3, lr}
   e5b82:	4b02      	ldr	r3, [pc, #8]	; (e5b8c <_malloc_r+0xc>)
   e5b84:	681b      	ldr	r3, [r3, #0]
   e5b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e5b88:	9301      	str	r3, [sp, #4]
   e5b8a:	bd08      	pop	{r3, pc}
   e5b8c:	0003021c 	.word	0x0003021c

000e5b90 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   e5b90:	b508      	push	{r3, lr}
   e5b92:	4b02      	ldr	r3, [pc, #8]	; (e5b9c <__errno+0xc>)
   e5b94:	681b      	ldr	r3, [r3, #0]
   e5b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e5b98:	9301      	str	r3, [sp, #4]
   e5b9a:	bd08      	pop	{r3, pc}
   e5b9c:	0003021c 	.word	0x0003021c

000e5ba0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   e5ba0:	2100      	movs	r1, #0
   e5ba2:	f7ff bf51 	b.w	e5a48 <system_delay_ms>

000e5ba6 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   e5ba6:	b510      	push	{r4, lr}
   e5ba8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   e5baa:	6800      	ldr	r0, [r0, #0]
   e5bac:	b108      	cbz	r0, e5bb2 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   e5bae:	f7ff fdcb 	bl	e5748 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   e5bb2:	4620      	mov	r0, r4
   e5bb4:	bd10      	pop	{r4, pc}
	...

000e5bb8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   e5bb8:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   e5bba:	4c06      	ldr	r4, [pc, #24]	; (e5bd4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   e5bbc:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   e5bbe:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   e5bc0:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   e5bc2:	f7ff fdb9 	bl	e5738 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   e5bc6:	4620      	mov	r0, r4
   e5bc8:	4a03      	ldr	r2, [pc, #12]	; (e5bd8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   e5bca:	4904      	ldr	r1, [pc, #16]	; (e5bdc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   e5bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   e5bd0:	f001 b998 	b.w	e6f04 <__aeabi_atexit>
   e5bd4:	2003e3cc 	.word	0x2003e3cc
   e5bd8:	2003ba88 	.word	0x2003ba88
   e5bdc:	000e5ba7 	.word	0x000e5ba7

000e5be0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   e5be0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   e5be2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   e5be4:	4604      	mov	r4, r0
    {
      if (_M_manager)
   e5be6:	b113      	cbz	r3, e5bee <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   e5be8:	2203      	movs	r2, #3
   e5bea:	4601      	mov	r1, r0
   e5bec:	4798      	blx	r3
    }
   e5bee:	4620      	mov	r0, r4
   e5bf0:	bd10      	pop	{r4, pc}

000e5bf2 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e5bf2:	2200      	movs	r2, #0
   e5bf4:	4611      	mov	r1, r2
   e5bf6:	6840      	ldr	r0, [r0, #4]
   e5bf8:	f7ff bf82 	b.w	e5b00 <network_listening>

000e5bfc <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   e5bfc:	2200      	movs	r2, #0
   e5bfe:	4611      	mov	r1, r2
   e5c00:	6840      	ldr	r0, [r0, #4]
   e5c02:	f7ff bf8d 	b.w	e5b20 <network_get_listen_timeout>

000e5c06 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   e5c06:	2200      	movs	r2, #0
   e5c08:	6840      	ldr	r0, [r0, #4]
   e5c0a:	f7ff bf81 	b.w	e5b10 <network_set_listen_timeout>

000e5c0e <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   e5c0e:	2200      	movs	r2, #0
   e5c10:	f081 0101 	eor.w	r1, r1, #1
   e5c14:	6840      	ldr	r0, [r0, #4]
   e5c16:	f7ff bf6b 	b.w	e5af0 <network_listen>

000e5c1a <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   e5c1a:	2300      	movs	r3, #0
   e5c1c:	461a      	mov	r2, r3
   e5c1e:	4619      	mov	r1, r3
   e5c20:	6840      	ldr	r0, [r0, #4]
   e5c22:	f7ff bf5d 	b.w	e5ae0 <network_off>

000e5c26 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   e5c26:	2300      	movs	r3, #0
   e5c28:	461a      	mov	r2, r3
   e5c2a:	4619      	mov	r1, r3
   e5c2c:	6840      	ldr	r0, [r0, #4]
   e5c2e:	f7ff bf4f 	b.w	e5ad0 <network_on>

000e5c32 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   e5c32:	2200      	movs	r2, #0
   e5c34:	4611      	mov	r1, r2
   e5c36:	6840      	ldr	r0, [r0, #4]
   e5c38:	f7ff bf42 	b.w	e5ac0 <network_ready>

000e5c3c <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   e5c3c:	2200      	movs	r2, #0
   e5c3e:	4611      	mov	r1, r2
   e5c40:	6840      	ldr	r0, [r0, #4]
   e5c42:	f7ff bf2d 	b.w	e5aa0 <network_connecting>

000e5c46 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e5c46:	2200      	movs	r2, #0
   e5c48:	2102      	movs	r1, #2
   e5c4a:	6840      	ldr	r0, [r0, #4]
   e5c4c:	f7ff bf30 	b.w	e5ab0 <network_disconnect>

000e5c50 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   e5c50:	2300      	movs	r3, #0
   e5c52:	461a      	mov	r2, r3
   e5c54:	6840      	ldr	r0, [r0, #4]
   e5c56:	f7ff bf1b 	b.w	e5a90 <network_connect>
	...

000e5c5c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   e5c5c:	4b02      	ldr	r3, [pc, #8]	; (e5c68 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   e5c5e:	2203      	movs	r2, #3
   e5c60:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   e5c62:	4a02      	ldr	r2, [pc, #8]	; (e5c6c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   e5c64:	601a      	str	r2, [r3, #0]
   e5c66:	4770      	bx	lr
   e5c68:	2003e3d0 	.word	0x2003e3d0
   e5c6c:	000ea900 	.word	0x000ea900

000e5c70 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   e5c70:	4770      	bx	lr

000e5c72 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   e5c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e5c74:	4606      	mov	r6, r0
   e5c76:	4615      	mov	r5, r2
   e5c78:	460c      	mov	r4, r1
   e5c7a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   e5c7c:	42bc      	cmp	r4, r7
   e5c7e:	d006      	beq.n	e5c8e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   e5c80:	6833      	ldr	r3, [r6, #0]
   e5c82:	f814 1b01 	ldrb.w	r1, [r4], #1
   e5c86:	689b      	ldr	r3, [r3, #8]
   e5c88:	4630      	mov	r0, r6
   e5c8a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   e5c8c:	e7f6      	b.n	e5c7c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   e5c8e:	4628      	mov	r0, r5
   e5c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e5c92 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   e5c92:	2200      	movs	r2, #0
   e5c94:	7c00      	ldrb	r0, [r0, #16]
   e5c96:	f7ff bd9f 	b.w	e57d8 <HAL_I2C_Write_Data>

000e5c9a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   e5c9a:	2100      	movs	r1, #0
   e5c9c:	7c00      	ldrb	r0, [r0, #16]
   e5c9e:	f7ff bda3 	b.w	e57e8 <HAL_I2C_Available_Data>

000e5ca2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   e5ca2:	2100      	movs	r1, #0
   e5ca4:	7c00      	ldrb	r0, [r0, #16]
   e5ca6:	f7ff bda7 	b.w	e57f8 <HAL_I2C_Read_Data>

000e5caa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   e5caa:	2100      	movs	r1, #0
   e5cac:	7c00      	ldrb	r0, [r0, #16]
   e5cae:	f7ff bdab 	b.w	e5808 <HAL_I2C_Peek_Data>

000e5cb2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   e5cb2:	2100      	movs	r1, #0
   e5cb4:	7c00      	ldrb	r0, [r0, #16]
   e5cb6:	f7ff bdaf 	b.w	e5818 <HAL_I2C_Flush_Data>

000e5cba <_ZN7TwoWireD0Ev>:
   e5cba:	b510      	push	{r4, lr}
   e5cbc:	2114      	movs	r1, #20
   e5cbe:	4604      	mov	r4, r0
   e5cc0:	f001 f925 	bl	e6f0e <_ZdlPvj>
   e5cc4:	4620      	mov	r0, r4
   e5cc6:	bd10      	pop	{r4, pc}

000e5cc8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   e5cc8:	b510      	push	{r4, lr}
   e5cca:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   e5ccc:	2300      	movs	r3, #0
   e5cce:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   e5cd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e5cd4:	60a3      	str	r3, [r4, #8]
   e5cd6:	4b04      	ldr	r3, [pc, #16]	; (e5ce8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   e5cd8:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   e5cda:	4608      	mov	r0, r1
   e5cdc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   e5cde:	4611      	mov	r1, r2
   e5ce0:	f7ff fdaa 	bl	e5838 <HAL_I2C_Init>
}
   e5ce4:	4620      	mov	r0, r4
   e5ce6:	bd10      	pop	{r4, pc}
   e5ce8:	000ea934 	.word	0x000ea934

000e5cec <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   e5cec:	2100      	movs	r1, #0
   e5cee:	7c00      	ldrb	r0, [r0, #16]
   e5cf0:	f7ff bd9a 	b.w	e5828 <HAL_I2C_Is_Enabled>

000e5cf4 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   e5cf4:	f7ff bd68 	b.w	e57c8 <HAL_Interrupts_Disable_All>

000e5cf8 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   e5cf8:	f7ff bd5e 	b.w	e57b8 <HAL_Interrupts_Enable_All>

000e5cfc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   e5cfc:	4770      	bx	lr

000e5cfe <_ZN9IPAddressD0Ev>:
   e5cfe:	b510      	push	{r4, lr}
   e5d00:	2118      	movs	r1, #24
   e5d02:	4604      	mov	r4, r0
   e5d04:	f001 f903 	bl	e6f0e <_ZdlPvj>
   e5d08:	4620      	mov	r0, r4
   e5d0a:	bd10      	pop	{r4, pc}

000e5d0c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   e5d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   e5d0e:	7d03      	ldrb	r3, [r0, #20]
   e5d10:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   e5d12:	b08d      	sub	sp, #52	; 0x34
   e5d14:	460e      	mov	r6, r1
   e5d16:	f100 0704 	add.w	r7, r0, #4
   e5d1a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   e5d1e:	d002      	beq.n	e5d26 <_ZNK9IPAddress7printToER5Print+0x1a>
   e5d20:	f100 0508 	add.w	r5, r0, #8
   e5d24:	e018      	b.n	e5d58 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   e5d26:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   e5d28:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   e5d2a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   e5d2e:	232f      	movs	r3, #47	; 0x2f
   e5d30:	462a      	mov	r2, r5
   e5d32:	200a      	movs	r0, #10
   e5d34:	f7ff fd90 	bl	e5858 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   e5d38:	4628      	mov	r0, r5
   e5d3a:	f002 f901 	bl	e7f40 <strlen>
   e5d3e:	6833      	ldr	r3, [r6, #0]
   e5d40:	4602      	mov	r2, r0
   e5d42:	68db      	ldr	r3, [r3, #12]
   e5d44:	4629      	mov	r1, r5
   e5d46:	4630      	mov	r0, r6
   e5d48:	4798      	blx	r3
   e5d4a:	e00f      	b.n	e5d6c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   e5d4c:	b124      	cbz	r4, e5d58 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   e5d4e:	212e      	movs	r1, #46	; 0x2e
   e5d50:	4630      	mov	r0, r6
   e5d52:	f000 f9f5 	bl	e6140 <_ZN5Print5printEc>
   e5d56:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   e5d58:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   e5d5c:	220a      	movs	r2, #10
   e5d5e:	4630      	mov	r0, r6
   e5d60:	f000 f9f1 	bl	e6146 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   e5d64:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   e5d66:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   e5d68:	d1f0      	bne.n	e5d4c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   e5d6a:	4620      	mov	r0, r4
    }
    return n;
}
   e5d6c:	b00d      	add	sp, #52	; 0x34
   e5d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e5d70 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   e5d70:	b510      	push	{r4, lr}
   e5d72:	4b05      	ldr	r3, [pc, #20]	; (e5d88 <_ZN9IPAddressC1Ev+0x18>)
   e5d74:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   e5d76:	2211      	movs	r2, #17
   e5d78:	f840 3b04 	str.w	r3, [r0], #4
   e5d7c:	2100      	movs	r1, #0
   e5d7e:	f002 f898 	bl	e7eb2 <memset>
{
    clear();
}
   e5d82:	4620      	mov	r0, r4
   e5d84:	bd10      	pop	{r4, pc}
   e5d86:	bf00      	nop
   e5d88:	000ea95c 	.word	0x000ea95c

000e5d8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   e5d8c:	4603      	mov	r3, r0
   e5d8e:	4a07      	ldr	r2, [pc, #28]	; (e5dac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   e5d90:	b510      	push	{r4, lr}
   e5d92:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   e5d96:	f101 0210 	add.w	r2, r1, #16
   e5d9a:	f851 4b04 	ldr.w	r4, [r1], #4
   e5d9e:	f843 4b04 	str.w	r4, [r3], #4
   e5da2:	4291      	cmp	r1, r2
   e5da4:	d1f9      	bne.n	e5d9a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   e5da6:	780a      	ldrb	r2, [r1, #0]
   e5da8:	701a      	strb	r2, [r3, #0]
}
   e5daa:	bd10      	pop	{r4, pc}
   e5dac:	000ea95c 	.word	0x000ea95c

000e5db0 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   e5db0:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   e5db2:	2b04      	cmp	r3, #4
   e5db4:	d101      	bne.n	e5dba <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   e5db6:	6840      	ldr	r0, [r0, #4]
   e5db8:	e008      	b.n	e5dcc <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   e5dba:	2b06      	cmp	r3, #6
   e5dbc:	d10a      	bne.n	e5dd4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   e5dbe:	6843      	ldr	r3, [r0, #4]
   e5dc0:	b953      	cbnz	r3, e5dd8 <_ZNK9IPAddresscvbEv+0x28>
   e5dc2:	6883      	ldr	r3, [r0, #8]
   e5dc4:	b943      	cbnz	r3, e5dd8 <_ZNK9IPAddresscvbEv+0x28>
   e5dc6:	68c3      	ldr	r3, [r0, #12]
   e5dc8:	b933      	cbnz	r3, e5dd8 <_ZNK9IPAddresscvbEv+0x28>
   e5dca:	6900      	ldr	r0, [r0, #16]
   e5dcc:	3000      	adds	r0, #0
   e5dce:	bf18      	it	ne
   e5dd0:	2001      	movne	r0, #1
   e5dd2:	4770      	bx	lr
    } else {
        return false;
   e5dd4:	2000      	movs	r0, #0
   e5dd6:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   e5dd8:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   e5dda:	4770      	bx	lr

000e5ddc <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   e5ddc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   e5dde:	f89d 4008 	ldrb.w	r4, [sp, #8]
   e5de2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   e5de6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   e5dea:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   e5dee:	2304      	movs	r3, #4
   e5df0:	6041      	str	r1, [r0, #4]
   e5df2:	7503      	strb	r3, [r0, #20]
   e5df4:	bd10      	pop	{r4, pc}

000e5df6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   e5df6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   e5df8:	780d      	ldrb	r5, [r1, #0]
   e5dfa:	788b      	ldrb	r3, [r1, #2]
   e5dfc:	784a      	ldrb	r2, [r1, #1]
   e5dfe:	78c9      	ldrb	r1, [r1, #3]
   e5e00:	9100      	str	r1, [sp, #0]
   e5e02:	4629      	mov	r1, r5
   e5e04:	f7ff ffea 	bl	e5ddc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   e5e08:	b003      	add	sp, #12
   e5e0a:	bd30      	pop	{r4, r5, pc}

000e5e0c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   e5e0c:	b510      	push	{r4, lr}
   e5e0e:	4b03      	ldr	r3, [pc, #12]	; (e5e1c <_ZN9IPAddressC1EPKh+0x10>)
   e5e10:	6003      	str	r3, [r0, #0]
   e5e12:	4604      	mov	r4, r0
{
    *this = address;
   e5e14:	f7ff ffef 	bl	e5df6 <_ZN9IPAddressaSEPKh>
}
   e5e18:	4620      	mov	r0, r4
   e5e1a:	bd10      	pop	{r4, pc}
   e5e1c:	000ea95c 	.word	0x000ea95c

000e5e20 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   e5e20:	4b01      	ldr	r3, [pc, #4]	; (e5e28 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   e5e22:	4a02      	ldr	r2, [pc, #8]	; (e5e2c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   e5e24:	601a      	str	r2, [r3, #0]
   e5e26:	4770      	bx	lr
   e5e28:	2003e3d8 	.word	0x2003e3d8
   e5e2c:	000ea9d6 	.word	0x000ea9d6

000e5e30 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e5e30:	2200      	movs	r2, #0
   e5e32:	4611      	mov	r1, r2
   e5e34:	6840      	ldr	r0, [r0, #4]
   e5e36:	f7ff be63 	b.w	e5b00 <network_listening>

000e5e3a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   e5e3a:	2200      	movs	r2, #0
   e5e3c:	4611      	mov	r1, r2
   e5e3e:	6840      	ldr	r0, [r0, #4]
   e5e40:	f7ff be6e 	b.w	e5b20 <network_get_listen_timeout>

000e5e44 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   e5e44:	2200      	movs	r2, #0
   e5e46:	6840      	ldr	r0, [r0, #4]
   e5e48:	f7ff be62 	b.w	e5b10 <network_set_listen_timeout>

000e5e4c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   e5e4c:	2200      	movs	r2, #0
   e5e4e:	f081 0101 	eor.w	r1, r1, #1
   e5e52:	6840      	ldr	r0, [r0, #4]
   e5e54:	f7ff be4c 	b.w	e5af0 <network_listen>

000e5e58 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   e5e58:	2300      	movs	r3, #0
   e5e5a:	461a      	mov	r2, r3
   e5e5c:	2101      	movs	r1, #1
   e5e5e:	6840      	ldr	r0, [r0, #4]
   e5e60:	f7ff be3e 	b.w	e5ae0 <network_off>

000e5e64 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   e5e64:	2300      	movs	r3, #0
   e5e66:	461a      	mov	r2, r3
   e5e68:	4619      	mov	r1, r3
   e5e6a:	6840      	ldr	r0, [r0, #4]
   e5e6c:	f7ff be30 	b.w	e5ad0 <network_on>

000e5e70 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   e5e70:	2200      	movs	r2, #0
   e5e72:	4611      	mov	r1, r2
   e5e74:	6840      	ldr	r0, [r0, #4]
   e5e76:	f7ff be23 	b.w	e5ac0 <network_ready>

000e5e7a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   e5e7a:	2200      	movs	r2, #0
   e5e7c:	4611      	mov	r1, r2
   e5e7e:	6840      	ldr	r0, [r0, #4]
   e5e80:	f7ff be0e 	b.w	e5aa0 <network_connecting>

000e5e84 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e5e84:	2200      	movs	r2, #0
   e5e86:	2102      	movs	r1, #2
   e5e88:	6840      	ldr	r0, [r0, #4]
   e5e8a:	f7ff be11 	b.w	e5ab0 <network_disconnect>

000e5e8e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   e5e8e:	2300      	movs	r3, #0
   e5e90:	461a      	mov	r2, r3
   e5e92:	6840      	ldr	r0, [r0, #4]
   e5e94:	f7ff bdfc 	b.w	e5a90 <network_connect>

000e5e98 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   e5e98:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e5e9a:	4605      	mov	r5, r0
   e5e9c:	b188      	cbz	r0, e5ec2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e5e9e:	6804      	ldr	r4, [r0, #0]
   e5ea0:	b14c      	cbz	r4, e5eb6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   e5ea2:	68a3      	ldr	r3, [r4, #8]
   e5ea4:	b11b      	cbz	r3, e5eae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   e5ea6:	2203      	movs	r2, #3
   e5ea8:	4621      	mov	r1, r4
   e5eaa:	4620      	mov	r0, r4
   e5eac:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e5eae:	2110      	movs	r1, #16
   e5eb0:	4620      	mov	r0, r4
   e5eb2:	f001 f82c 	bl	e6f0e <_ZdlPvj>
   e5eb6:	4628      	mov	r0, r5
   e5eb8:	2114      	movs	r1, #20
      }
   e5eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e5ebe:	f001 b826 	b.w	e6f0e <_ZdlPvj>
   e5ec2:	bd38      	pop	{r3, r4, r5, pc}

000e5ec4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   e5ec4:	b110      	cbz	r0, e5ecc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   e5ec6:	6803      	ldr	r3, [r0, #0]
   e5ec8:	685b      	ldr	r3, [r3, #4]
   e5eca:	4718      	bx	r3
   e5ecc:	4770      	bx	lr

000e5ece <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   e5ece:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   e5ed0:	6803      	ldr	r3, [r0, #0]
   e5ed2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   e5ed4:	b1bb      	cbz	r3, e5f06 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   e5ed6:	6858      	ldr	r0, [r3, #4]
   e5ed8:	f7ff fc16 	bl	e5708 <os_thread_is_current>
   e5edc:	b978      	cbnz	r0, e5efe <_ZN6ThreadD1Ev+0x30>
   e5ede:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   e5ee0:	7c5a      	ldrb	r2, [r3, #17]
   e5ee2:	b912      	cbnz	r2, e5eea <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   e5ee4:	6858      	ldr	r0, [r3, #4]
   e5ee6:	f7ff fc17 	bl	e5718 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   e5eea:	6823      	ldr	r3, [r4, #0]
   e5eec:	6858      	ldr	r0, [r3, #4]
   e5eee:	f7ff fc1b 	bl	e5728 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e5ef2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   e5ef4:	2300      	movs	r3, #0
   e5ef6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   e5ef8:	b128      	cbz	r0, e5f06 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   e5efa:	f7ff ffcd 	bl	e5e98 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e5efe:	6820      	ldr	r0, [r4, #0]
   e5f00:	b108      	cbz	r0, e5f06 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   e5f02:	f7ff ffc9 	bl	e5e98 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   e5f06:	4620      	mov	r0, r4
   e5f08:	bd10      	pop	{r4, pc}

000e5f0a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   e5f0a:	b538      	push	{r3, r4, r5, lr}
   e5f0c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e5f0e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   e5f12:	b108      	cbz	r0, e5f18 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   e5f14:	f7ee f8c7 	bl	d40a6 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   e5f18:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   e5f1c:	b108      	cbz	r0, e5f22 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   e5f1e:	f7ff fc13 	bl	e5748 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e5f22:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   e5f26:	b135      	cbz	r5, e5f36 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e5f28:	4628      	mov	r0, r5
   e5f2a:	f7ff ffd0 	bl	e5ece <_ZN6ThreadD1Ev>
   e5f2e:	2104      	movs	r1, #4
   e5f30:	4628      	mov	r0, r5
   e5f32:	f000 ffec 	bl	e6f0e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e5f36:	6820      	ldr	r0, [r4, #0]
   e5f38:	b108      	cbz	r0, e5f3e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   e5f3a:	f7ff ffc3 	bl	e5ec4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   e5f3e:	4620      	mov	r0, r4
   e5f40:	bd38      	pop	{r3, r4, r5, pc}
	...

000e5f44 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   e5f44:	b510      	push	{r4, lr}
   e5f46:	4b04      	ldr	r3, [pc, #16]	; (e5f58 <_ZN5spark9MeshClassD1Ev+0x14>)
   e5f48:	4604      	mov	r4, r0
   e5f4a:	f840 3b08 	str.w	r3, [r0], #8
   e5f4e:	f7ff ffdc 	bl	e5f0a <_ZN5spark11MeshPublishD1Ev>
   e5f52:	4620      	mov	r0, r4
   e5f54:	bd10      	pop	{r4, pc}
   e5f56:	bf00      	nop
   e5f58:	000eaa44 	.word	0x000eaa44

000e5f5c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   e5f5c:	b538      	push	{r3, r4, r5, lr}
   e5f5e:	4c0e      	ldr	r4, [pc, #56]	; (e5f98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   e5f60:	4b0e      	ldr	r3, [pc, #56]	; (e5f9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   e5f62:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   e5f64:	2500      	movs	r5, #0
   e5f66:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   e5f68:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   e5f6c:	6063      	str	r3, [r4, #4]
   e5f6e:	60a5      	str	r5, [r4, #8]
   e5f70:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   e5f74:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   e5f78:	f7ff fbde 	bl	e5738 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   e5f7c:	4b08      	ldr	r3, [pc, #32]	; (e5fa0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   e5f7e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   e5f82:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   e5f86:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   e5f88:	4620      	mov	r0, r4
   e5f8a:	4a06      	ldr	r2, [pc, #24]	; (e5fa4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   e5f8c:	4906      	ldr	r1, [pc, #24]	; (e5fa8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   e5f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   e5f92:	f000 bfb7 	b.w	e6f04 <__aeabi_atexit>
   e5f96:	bf00      	nop
   e5f98:	2003e3dc 	.word	0x2003e3dc
   e5f9c:	000eaa78 	.word	0x000eaa78
   e5fa0:	000eaa44 	.word	0x000eaa44
   e5fa4:	2003ba88 	.word	0x2003ba88
   e5fa8:	000e5f45 	.word	0x000e5f45

000e5fac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   e5fac:	2300      	movs	r3, #0
   e5fae:	461a      	mov	r2, r3
   e5fb0:	6840      	ldr	r0, [r0, #4]
   e5fb2:	f7ff bd6d 	b.w	e5a90 <network_connect>

000e5fb6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   e5fb6:	2200      	movs	r2, #0
   e5fb8:	2102      	movs	r1, #2
   e5fba:	6840      	ldr	r0, [r0, #4]
   e5fbc:	f7ff bd78 	b.w	e5ab0 <network_disconnect>

000e5fc0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   e5fc0:	2200      	movs	r2, #0
   e5fc2:	4611      	mov	r1, r2
   e5fc4:	6840      	ldr	r0, [r0, #4]
   e5fc6:	f7ff bd6b 	b.w	e5aa0 <network_connecting>

000e5fca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   e5fca:	2200      	movs	r2, #0
   e5fcc:	4611      	mov	r1, r2
   e5fce:	6840      	ldr	r0, [r0, #4]
   e5fd0:	f7ff bd76 	b.w	e5ac0 <network_ready>

000e5fd4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   e5fd4:	2300      	movs	r3, #0
   e5fd6:	461a      	mov	r2, r3
   e5fd8:	4619      	mov	r1, r3
   e5fda:	6840      	ldr	r0, [r0, #4]
   e5fdc:	f7ff bd78 	b.w	e5ad0 <network_on>

000e5fe0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   e5fe0:	2300      	movs	r3, #0
   e5fe2:	461a      	mov	r2, r3
   e5fe4:	4619      	mov	r1, r3
   e5fe6:	6840      	ldr	r0, [r0, #4]
   e5fe8:	f7ff bd7a 	b.w	e5ae0 <network_off>

000e5fec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   e5fec:	2200      	movs	r2, #0
   e5fee:	f081 0101 	eor.w	r1, r1, #1
   e5ff2:	6840      	ldr	r0, [r0, #4]
   e5ff4:	f7ff bd7c 	b.w	e5af0 <network_listen>

000e5ff8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   e5ff8:	2200      	movs	r2, #0
   e5ffa:	6840      	ldr	r0, [r0, #4]
   e5ffc:	f7ff bd88 	b.w	e5b10 <network_set_listen_timeout>

000e6000 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   e6000:	2200      	movs	r2, #0
   e6002:	4611      	mov	r1, r2
   e6004:	6840      	ldr	r0, [r0, #4]
   e6006:	f7ff bd8b 	b.w	e5b20 <network_get_listen_timeout>

000e600a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   e600a:	2200      	movs	r2, #0
   e600c:	4611      	mov	r1, r2
   e600e:	6840      	ldr	r0, [r0, #4]
   e6010:	f7ff bd76 	b.w	e5b00 <network_listening>

000e6014 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   e6014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   e6018:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   e601a:	b095      	sub	sp, #84	; 0x54
   e601c:	4616      	mov	r6, r2
   e601e:	460d      	mov	r5, r1
   e6020:	4607      	mov	r7, r0
    IPAddress addr;
   e6022:	f7ff fea5 	bl	e5d70 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   e6026:	4621      	mov	r1, r4
   e6028:	2220      	movs	r2, #32
   e602a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   e602c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   e602e:	f001 ff40 	bl	e7eb2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   e6032:	2340      	movs	r3, #64	; 0x40
   e6034:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   e6036:	4621      	mov	r1, r4
   e6038:	466b      	mov	r3, sp
   e603a:	aa0c      	add	r2, sp, #48	; 0x30
   e603c:	4630      	mov	r0, r6
   e603e:	f7ff fc2b 	bl	e5898 <netdb_getaddrinfo>
    if (!r) {
   e6042:	4604      	mov	r4, r0
   e6044:	2800      	cmp	r0, #0
   e6046:	d144      	bne.n	e60d2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   e6048:	4602      	mov	r2, r0
   e604a:	2101      	movs	r1, #1
   e604c:	6868      	ldr	r0, [r5, #4]
   e604e:	f7ff fd37 	bl	e5ac0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e6052:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   e6054:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e6056:	4622      	mov	r2, r4
   e6058:	6868      	ldr	r0, [r5, #4]
   e605a:	f7ff fd31 	bl	e5ac0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e605e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e6060:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   e6062:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e6064:	2e00      	cmp	r6, #0
   e6066:	d034      	beq.n	e60d2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   e6068:	2900      	cmp	r1, #0
   e606a:	d132      	bne.n	e60d2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   e606c:	6873      	ldr	r3, [r6, #4]
   e606e:	2b02      	cmp	r3, #2
   e6070:	d002      	beq.n	e6078 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   e6072:	2b0a      	cmp	r3, #10
   e6074:	d009      	beq.n	e608a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   e6076:	e02a      	b.n	e60ce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   e6078:	f1b8 0f00 	cmp.w	r8, #0
   e607c:	d027      	beq.n	e60ce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   e607e:	6971      	ldr	r1, [r6, #20]
   e6080:	4638      	mov	r0, r7
   e6082:	3104      	adds	r1, #4
   e6084:	f7ff feb7 	bl	e5df6 <_ZN9IPAddressaSEPKh>
   e6088:	e020      	b.n	e60cc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   e608a:	f1b9 0f00 	cmp.w	r9, #0
   e608e:	d01e      	beq.n	e60ce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   e6090:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   e6092:	2211      	movs	r2, #17
   e6094:	a801      	add	r0, sp, #4
   e6096:	f001 ff0c 	bl	e7eb2 <memset>
                    a.v = 6;
   e609a:	2306      	movs	r3, #6
   e609c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   e60a0:	ad01      	add	r5, sp, #4
   e60a2:	f104 0308 	add.w	r3, r4, #8
   e60a6:	3418      	adds	r4, #24
   e60a8:	6818      	ldr	r0, [r3, #0]
   e60aa:	6859      	ldr	r1, [r3, #4]
   e60ac:	462a      	mov	r2, r5
   e60ae:	c203      	stmia	r2!, {r0, r1}
   e60b0:	3308      	adds	r3, #8
   e60b2:	42a3      	cmp	r3, r4
   e60b4:	4615      	mov	r5, r2
   e60b6:	d1f7      	bne.n	e60a8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   e60b8:	a901      	add	r1, sp, #4
   e60ba:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   e60bc:	ad07      	add	r5, sp, #28
   e60be:	f7ff fe65 	bl	e5d8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e60c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e60c4:	1d3c      	adds	r4, r7, #4
   e60c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e60c8:	682b      	ldr	r3, [r5, #0]
   e60ca:	7023      	strb	r3, [r4, #0]
                    ok = true;
   e60cc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e60ce:	69f6      	ldr	r6, [r6, #28]
   e60d0:	e7c8      	b.n	e6064 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   e60d2:	9800      	ldr	r0, [sp, #0]
   e60d4:	f7ff fbd8 	bl	e5888 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   e60d8:	4638      	mov	r0, r7
   e60da:	b015      	add	sp, #84	; 0x54
   e60dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e60e0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   e60e0:	4b02      	ldr	r3, [pc, #8]	; (e60ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   e60e2:	4a03      	ldr	r2, [pc, #12]	; (e60f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   e60e4:	601a      	str	r2, [r3, #0]
   e60e6:	2200      	movs	r2, #0
   e60e8:	605a      	str	r2, [r3, #4]
   e60ea:	4770      	bx	lr
   e60ec:	2003e5b0 	.word	0x2003e5b0
   e60f0:	000eaa78 	.word	0x000eaa78

000e60f4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   e60f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e60f6:	4606      	mov	r6, r0
   e60f8:	460d      	mov	r5, r1
   e60fa:	188f      	adds	r7, r1, r2
  size_t n = 0;
   e60fc:	2400      	movs	r4, #0
  while (size--) {
   e60fe:	42bd      	cmp	r5, r7
   e6100:	d00c      	beq.n	e611c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   e6102:	6833      	ldr	r3, [r6, #0]
   e6104:	f815 1b01 	ldrb.w	r1, [r5], #1
   e6108:	689b      	ldr	r3, [r3, #8]
   e610a:	4630      	mov	r0, r6
   e610c:	4798      	blx	r3
     if (chunk>=0)
   e610e:	2800      	cmp	r0, #0
   e6110:	db01      	blt.n	e6116 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   e6112:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   e6114:	e7f3      	b.n	e60fe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   e6116:	2c00      	cmp	r4, #0
   e6118:	bf08      	it	eq
   e611a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   e611c:	4620      	mov	r0, r4
   e611e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e6120 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   e6120:	b570      	push	{r4, r5, r6, lr}
   e6122:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   e6124:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   e6126:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   e6128:	b149      	cbz	r1, e613e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   e612a:	f001 ff09 	bl	e7f40 <strlen>
   e612e:	682b      	ldr	r3, [r5, #0]
   e6130:	4602      	mov	r2, r0
   e6132:	4621      	mov	r1, r4
   e6134:	4628      	mov	r0, r5
   e6136:	68db      	ldr	r3, [r3, #12]
    }
   e6138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   e613c:	4718      	bx	r3
    }
   e613e:	bd70      	pop	{r4, r5, r6, pc}

000e6140 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   e6140:	6803      	ldr	r3, [r0, #0]
   e6142:	689b      	ldr	r3, [r3, #8]
   e6144:	4718      	bx	r3

000e6146 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   e6146:	b530      	push	{r4, r5, lr}
   e6148:	b08b      	sub	sp, #44	; 0x2c
   e614a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   e614c:	2100      	movs	r1, #0
   e614e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   e6152:	2a01      	cmp	r2, #1
   e6154:	bf98      	it	ls
   e6156:	220a      	movls	r2, #10
   e6158:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   e615c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   e6160:	fb05 3312 	mls	r3, r5, r2, r3
   e6164:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   e6168:	2b09      	cmp	r3, #9
   e616a:	bf94      	ite	ls
   e616c:	3330      	addls	r3, #48	; 0x30
   e616e:	3337      	addhi	r3, #55	; 0x37
   e6170:	b2db      	uxtb	r3, r3
   e6172:	4621      	mov	r1, r4
   e6174:	f804 3901 	strb.w	r3, [r4], #-1
   e6178:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   e617a:	2d00      	cmp	r5, #0
   e617c:	d1ee      	bne.n	e615c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   e617e:	f7ff ffcf 	bl	e6120 <_ZN5Print5writeEPKc>
}
   e6182:	b00b      	add	sp, #44	; 0x2c
   e6184:	bd30      	pop	{r4, r5, pc}

000e6186 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   e6186:	b510      	push	{r4, lr}
   e6188:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   e618a:	f7ff fd29 	bl	e5be0 <_ZNSt14_Function_baseD1Ev>
   e618e:	4620      	mov	r0, r4
   e6190:	bd10      	pop	{r4, pc}
	...

000e6194 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   e6194:	4803      	ldr	r0, [pc, #12]	; (e61a4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   e6196:	4a04      	ldr	r2, [pc, #16]	; (e61a8 <_GLOBAL__sub_I_RGB+0x14>)
   e6198:	4904      	ldr	r1, [pc, #16]	; (e61ac <_GLOBAL__sub_I_RGB+0x18>)
   e619a:	2300      	movs	r3, #0
   e619c:	6083      	str	r3, [r0, #8]
   e619e:	f000 beb1 	b.w	e6f04 <__aeabi_atexit>
   e61a2:	bf00      	nop
   e61a4:	2003e5b8 	.word	0x2003e5b8
   e61a8:	2003ba88 	.word	0x2003ba88
   e61ac:	000e6187 	.word	0x000e6187

000e61b0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   e61b0:	b510      	push	{r4, lr}
   e61b2:	4604      	mov	r4, r0
{
    _spi = spi;
   e61b4:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   e61b6:	4608      	mov	r0, r1
   e61b8:	f7ff fba6 	bl	e5908 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   e61bc:	2300      	movs	r3, #0
   e61be:	6063      	str	r3, [r4, #4]
}
   e61c0:	4620      	mov	r0, r4
   e61c2:	bd10      	pop	{r4, pc}

000e61c4 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   e61c4:	7800      	ldrb	r0, [r0, #0]
   e61c6:	f7ff bba7 	b.w	e5918 <HAL_SPI_Is_Enabled>
	...

000e61cc <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   e61cc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e61d0:	ec59 8b10 	vmov	r8, r9, d0
   e61d4:	4607      	mov	r7, r0
   e61d6:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   e61d8:	2200      	movs	r2, #0
   e61da:	2300      	movs	r3, #0
   e61dc:	ee10 0a10 	vmov	r0, s0
   e61e0:	4649      	mov	r1, r9
   e61e2:	f001 fc23 	bl	e7a2c <__aeabi_dcmplt>
   e61e6:	b128      	cbz	r0, e61f4 <_Z4dtoadhPc+0x28>
        val = -val;
   e61e8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   e61ec:	4699      	mov	r9, r3
        *sout++ = '-';
   e61ee:	232d      	movs	r3, #45	; 0x2d
   e61f0:	7033      	strb	r3, [r6, #0]
   e61f2:	3601      	adds	r6, #1
   e61f4:	2300      	movs	r3, #0
    }
    long scale = 1;
   e61f6:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   e61f8:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   e61fa:	b2d9      	uxtb	r1, r3
   e61fc:	428f      	cmp	r7, r1
   e61fe:	d902      	bls.n	e6206 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   e6200:	4354      	muls	r4, r2
   e6202:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   e6204:	e7f9      	b.n	e61fa <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   e6206:	4620      	mov	r0, r4
   e6208:	f001 f938 	bl	e747c <__aeabi_i2d>
   e620c:	4642      	mov	r2, r8
   e620e:	464b      	mov	r3, r9
   e6210:	f001 f99a 	bl	e7548 <__aeabi_dmul>
   e6214:	4682      	mov	sl, r0
   e6216:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   e6218:	f001 fc68 	bl	e7aec <__aeabi_d2ulz>
   e621c:	4680      	mov	r8, r0
   e621e:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   e6220:	f001 f95c 	bl	e74dc <__aeabi_ul2d>
   e6224:	4602      	mov	r2, r0
   e6226:	460b      	mov	r3, r1
   e6228:	4650      	mov	r0, sl
   e622a:	4659      	mov	r1, fp
   e622c:	f000 ffd8 	bl	e71e0 <__aeabi_dsub>
   e6230:	2200      	movs	r2, #0
   e6232:	4b17      	ldr	r3, [pc, #92]	; (e6290 <_Z4dtoadhPc+0xc4>)
   e6234:	f001 fc0e 	bl	e7a54 <__aeabi_dcmpge>
   e6238:	b118      	cbz	r0, e6242 <_Z4dtoadhPc+0x76>
        fixed++;
   e623a:	f118 0801 	adds.w	r8, r8, #1
   e623e:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   e6242:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   e6244:	4622      	mov	r2, r4
   e6246:	462b      	mov	r3, r5
   e6248:	4640      	mov	r0, r8
   e624a:	4649      	mov	r1, r9
   e624c:	f001 fc36 	bl	e7abc <__aeabi_uldivmod>
   e6250:	2301      	movs	r3, #1
   e6252:	220a      	movs	r2, #10
   e6254:	4631      	mov	r1, r6
   e6256:	f000 fd1c 	bl	e6c92 <ultoa>
    if (prec) {
   e625a:	b1af      	cbz	r7, e6288 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   e625c:	4630      	mov	r0, r6
   e625e:	f001 fe6f 	bl	e7f40 <strlen>
        *sout++ = '.';
   e6262:	232e      	movs	r3, #46	; 0x2e
   e6264:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   e6266:	3001      	adds	r0, #1
   e6268:	4406      	add	r6, r0
   e626a:	4622      	mov	r2, r4
   e626c:	462b      	mov	r3, r5
   e626e:	4640      	mov	r0, r8
   e6270:	4649      	mov	r1, r9
   e6272:	f001 fc23 	bl	e7abc <__aeabi_uldivmod>
   e6276:	463b      	mov	r3, r7
   e6278:	4610      	mov	r0, r2
   e627a:	4631      	mov	r1, r6
   e627c:	220a      	movs	r2, #10
    }
}
   e627e:	b001      	add	sp, #4
   e6280:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   e6284:	f000 bd05 	b.w	e6c92 <ultoa>
    }
}
   e6288:	b001      	add	sp, #4
   e628a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e628e:	bf00      	nop
   e6290:	3fe00000 	.word	0x3fe00000

000e6294 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   e6294:	b510      	push	{r4, lr}
   e6296:	4604      	mov	r4, r0
{
	free(buffer);
   e6298:	6800      	ldr	r0, [r0, #0]
   e629a:	f7ff fc51 	bl	e5b40 <free>
}
   e629e:	4620      	mov	r0, r4
   e62a0:	bd10      	pop	{r4, pc}

000e62a2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   e62a2:	b510      	push	{r4, lr}
   e62a4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   e62a6:	6800      	ldr	r0, [r0, #0]
   e62a8:	b108      	cbz	r0, e62ae <_ZN6String10invalidateEv+0xc>
   e62aa:	f7ff fc49 	bl	e5b40 <free>
	buffer = NULL;
   e62ae:	2300      	movs	r3, #0
   e62b0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   e62b2:	60a3      	str	r3, [r4, #8]
   e62b4:	6063      	str	r3, [r4, #4]
   e62b6:	bd10      	pop	{r4, pc}

000e62b8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   e62b8:	b538      	push	{r3, r4, r5, lr}
   e62ba:	4604      	mov	r4, r0
   e62bc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   e62be:	6800      	ldr	r0, [r0, #0]
   e62c0:	3101      	adds	r1, #1
   e62c2:	f7ff fc45 	bl	e5b50 <realloc>
	if (newbuffer) {
   e62c6:	b110      	cbz	r0, e62ce <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   e62c8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   e62cc:	2001      	movs	r0, #1
	}
	return 0;
}
   e62ce:	bd38      	pop	{r3, r4, r5, pc}

000e62d0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   e62d0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   e62d2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   e62d4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   e62d6:	b113      	cbz	r3, e62de <_ZN6String7reserveEj+0xe>
   e62d8:	6843      	ldr	r3, [r0, #4]
   e62da:	428b      	cmp	r3, r1
   e62dc:	d207      	bcs.n	e62ee <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   e62de:	4620      	mov	r0, r4
   e62e0:	f7ff ffea 	bl	e62b8 <_ZN6String12changeBufferEj>
   e62e4:	b120      	cbz	r0, e62f0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   e62e6:	68a3      	ldr	r3, [r4, #8]
   e62e8:	b90b      	cbnz	r3, e62ee <_ZN6String7reserveEj+0x1e>
   e62ea:	6822      	ldr	r2, [r4, #0]
   e62ec:	7013      	strb	r3, [r2, #0]
   e62ee:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   e62f0:	bd10      	pop	{r4, pc}

000e62f2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   e62f2:	b570      	push	{r4, r5, r6, lr}
   e62f4:	460e      	mov	r6, r1
	if (!reserve(length)) {
   e62f6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   e62f8:	4604      	mov	r4, r0
   e62fa:	4615      	mov	r5, r2
	if (!reserve(length)) {
   e62fc:	f7ff ffe8 	bl	e62d0 <_ZN6String7reserveEj>
   e6300:	b918      	cbnz	r0, e630a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   e6302:	4620      	mov	r0, r4
   e6304:	f7ff ffcd 	bl	e62a2 <_ZN6String10invalidateEv>
		return *this;
   e6308:	e009      	b.n	e631e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   e630a:	462a      	mov	r2, r5
   e630c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   e630e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   e6310:	6820      	ldr	r0, [r4, #0]
   e6312:	f001 fda8 	bl	e7e66 <memcpy>
	buffer[len] = 0;
   e6316:	6822      	ldr	r2, [r4, #0]
   e6318:	68a3      	ldr	r3, [r4, #8]
   e631a:	2100      	movs	r1, #0
   e631c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   e631e:	4620      	mov	r0, r4
   e6320:	bd70      	pop	{r4, r5, r6, pc}

000e6322 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   e6322:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e6324:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   e6326:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e6328:	6003      	str	r3, [r0, #0]
	capacity = 0;
   e632a:	6043      	str	r3, [r0, #4]
	len = 0;
   e632c:	6083      	str	r3, [r0, #8]
	flags = 0;
   e632e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   e6330:	460d      	mov	r5, r1
   e6332:	b139      	cbz	r1, e6344 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   e6334:	4608      	mov	r0, r1
   e6336:	f001 fe03 	bl	e7f40 <strlen>
   e633a:	4629      	mov	r1, r5
   e633c:	4602      	mov	r2, r0
   e633e:	4620      	mov	r0, r4
   e6340:	f7ff ffd7 	bl	e62f2 <_ZN6String4copyEPKcj>
}
   e6344:	4620      	mov	r0, r4
   e6346:	bd38      	pop	{r3, r4, r5, pc}

000e6348 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   e6348:	b538      	push	{r3, r4, r5, lr}
   e634a:	4605      	mov	r5, r0
	if (buffer) {
   e634c:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   e634e:	460c      	mov	r4, r1
	if (buffer) {
   e6350:	b160      	cbz	r0, e636c <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   e6352:	686a      	ldr	r2, [r5, #4]
   e6354:	688b      	ldr	r3, [r1, #8]
   e6356:	429a      	cmp	r2, r3
   e6358:	d306      	bcc.n	e6368 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   e635a:	6809      	ldr	r1, [r1, #0]
   e635c:	f001 fde8 	bl	e7f30 <strcpy>
			len = rhs.len;
   e6360:	68a3      	ldr	r3, [r4, #8]
   e6362:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   e6364:	2300      	movs	r3, #0
   e6366:	e00a      	b.n	e637e <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   e6368:	f7ff fbea 	bl	e5b40 <free>
		}
	}
	buffer = rhs.buffer;
   e636c:	6823      	ldr	r3, [r4, #0]
   e636e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   e6370:	6863      	ldr	r3, [r4, #4]
   e6372:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   e6374:	68a3      	ldr	r3, [r4, #8]
   e6376:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   e6378:	2300      	movs	r3, #0
   e637a:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   e637c:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   e637e:	60a3      	str	r3, [r4, #8]
   e6380:	bd38      	pop	{r3, r4, r5, pc}

000e6382 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   e6382:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   e6384:	b510      	push	{r4, lr}
   e6386:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   e6388:	d001      	beq.n	e638e <_ZN6StringaSEOS_+0xc>
   e638a:	f7ff ffdd 	bl	e6348 <_ZN6String4moveERS_>
	return *this;
}
   e638e:	4620      	mov	r0, r4
   e6390:	bd10      	pop	{r4, pc}

000e6392 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   e6392:	b538      	push	{r3, r4, r5, lr}
   e6394:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   e6396:	460c      	mov	r4, r1
   e6398:	b141      	cbz	r1, e63ac <_ZN6StringaSEPKc+0x1a>
   e639a:	4608      	mov	r0, r1
   e639c:	f001 fdd0 	bl	e7f40 <strlen>
   e63a0:	4621      	mov	r1, r4
   e63a2:	4602      	mov	r2, r0
   e63a4:	4628      	mov	r0, r5
   e63a6:	f7ff ffa4 	bl	e62f2 <_ZN6String4copyEPKcj>
   e63aa:	e001      	b.n	e63b0 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   e63ac:	f7ff ff79 	bl	e62a2 <_ZN6String10invalidateEv>

	return *this;
}
   e63b0:	4628      	mov	r0, r5
   e63b2:	bd38      	pop	{r3, r4, r5, pc}

000e63b4 <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   e63b4:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e63b6:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   e63b8:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e63ba:	6003      	str	r3, [r0, #0]
	capacity = 0;
   e63bc:	6043      	str	r3, [r0, #4]
	len = 0;
   e63be:	6083      	str	r3, [r0, #8]
	flags = 0;
   e63c0:	7303      	strb	r3, [r0, #12]
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   e63c2:	4604      	mov	r4, r0
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   e63c4:	ee10 0a10 	vmov	r0, s0
   e63c8:	b2cd      	uxtb	r5, r1
   e63ca:	f001 f869 	bl	e74a0 <__aeabi_f2d>
   e63ce:	ec41 0b10 	vmov	d0, r0, r1
   e63d2:	a901      	add	r1, sp, #4
   e63d4:	4628      	mov	r0, r5
   e63d6:	f7ff fef9 	bl	e61cc <_Z4dtoadhPc>
        *this = buf;
   e63da:	a901      	add	r1, sp, #4
   e63dc:	4620      	mov	r0, r4
   e63de:	f7ff ffd8 	bl	e6392 <_ZN6StringaSEPKc>
}
   e63e2:	4620      	mov	r0, r4
   e63e4:	b00b      	add	sp, #44	; 0x2c
   e63e6:	bd30      	pop	{r4, r5, pc}

000e63e8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   e63e8:	b510      	push	{r4, lr}
   e63ea:	4604      	mov	r4, r0
        if (wakeupSource_) {
   e63ec:	6800      	ldr	r0, [r0, #0]
   e63ee:	b118      	cbz	r0, e63f8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   e63f0:	f7ff fba6 	bl	e5b40 <free>
            wakeupSource_ = nullptr;
   e63f4:	2300      	movs	r3, #0
   e63f6:	6023      	str	r3, [r4, #0]
   e63f8:	bd10      	pop	{r4, pc}

000e63fa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   e63fa:	b510      	push	{r4, lr}
   e63fc:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   e63fe:	f7ff fff3 	bl	e63e8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   e6402:	4620      	mov	r0, r4
   e6404:	bd10      	pop	{r4, pc}
	...

000e6408 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   e6408:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   e640a:	4c09      	ldr	r4, [pc, #36]	; (e6430 <_GLOBAL__sub_I_System+0x28>)
   e640c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   e640e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   e6412:	6020      	str	r0, [r4, #0]
   e6414:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   e6416:	71a0      	strb	r0, [r4, #6]
   e6418:	8120      	strh	r0, [r4, #8]
   e641a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   e641c:	f7ff fb0c 	bl	e5a38 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   e6420:	4620      	mov	r0, r4
   e6422:	4a04      	ldr	r2, [pc, #16]	; (e6434 <_GLOBAL__sub_I_System+0x2c>)
   e6424:	4904      	ldr	r1, [pc, #16]	; (e6438 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   e6426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   e642a:	f000 bd6b 	b.w	e6f04 <__aeabi_atexit>
   e642e:	bf00      	nop
   e6430:	2003e5c8 	.word	0x2003e5c8
   e6434:	2003ba88 	.word	0x2003ba88
   e6438:	000e63fb 	.word	0x000e63fb

000e643c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   e643c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e643e:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   e6440:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   e6442:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   e6446:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   e6448:	2201      	movs	r2, #1
   e644a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   e644e:	4621      	mov	r1, r4
   e6450:	47a8      	blx	r5
}
   e6452:	b003      	add	sp, #12
   e6454:	bd30      	pop	{r4, r5, pc}

000e6456 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   e6456:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   e6458:	6803      	ldr	r3, [r0, #0]
   e645a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   e645c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   e6460:	46a4      	mov	ip, r4
}
   e6462:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   e6466:	4760      	bx	ip

000e6468 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   e6468:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e646a:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   e646c:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   e646e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   e6472:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   e6474:	4621      	mov	r1, r4
   e6476:	4613      	mov	r3, r2
   e6478:	2201      	movs	r2, #1
   e647a:	47a8      	blx	r5
}
   e647c:	b003      	add	sp, #12
   e647e:	bd30      	pop	{r4, r5, pc}

000e6480 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   e6480:	4770      	bx	lr

000e6482 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   e6482:	b538      	push	{r3, r4, r5, lr}
   e6484:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   e6486:	681a      	ldr	r2, [r3, #0]
   e6488:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   e648a:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   e648c:	da05      	bge.n	e649a <_ZN9TCPClient9connectedEv+0x18>
   e648e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e6492:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e6496:	429a      	cmp	r2, r3
   e6498:	d001      	beq.n	e649e <_ZN9TCPClient9connectedEv+0x1c>
   e649a:	2501      	movs	r5, #1
   e649c:	e00b      	b.n	e64b6 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   e649e:	6803      	ldr	r3, [r0, #0]
   e64a0:	691b      	ldr	r3, [r3, #16]
   e64a2:	4798      	blx	r3
   e64a4:	2800      	cmp	r0, #0
   e64a6:	bf14      	ite	ne
   e64a8:	2501      	movne	r5, #1
   e64aa:	2500      	moveq	r5, #0
        if (!rv) {
   e64ac:	d103      	bne.n	e64b6 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   e64ae:	6823      	ldr	r3, [r4, #0]
   e64b0:	4620      	mov	r0, r4
   e64b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e64b4:	4798      	blx	r3
        }
    }
    return rv;
}
   e64b6:	4628      	mov	r0, r5
   e64b8:	bd38      	pop	{r3, r4, r5, pc}

000e64ba <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   e64ba:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   e64bc:	6818      	ldr	r0, [r3, #0]
}
   e64be:	43c0      	mvns	r0, r0
   e64c0:	0fc0      	lsrs	r0, r0, #31
   e64c2:	4770      	bx	lr

000e64c4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   e64c4:	4770      	bx	lr

000e64c6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   e64c6:	2000      	movs	r0, #0
   e64c8:	4770      	bx	lr

000e64ca <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   e64ca:	b510      	push	{r4, lr}
   e64cc:	2114      	movs	r1, #20
   e64ce:	4604      	mov	r4, r0
   e64d0:	f000 fd1d 	bl	e6f0e <_ZdlPvj>
   e64d4:	4620      	mov	r0, r4
   e64d6:	bd10      	pop	{r4, pc}

000e64d8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   e64d8:	f7ed bde3 	b.w	d40a2 <_ZdlPv>

000e64dc <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   e64dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   e64de:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   e64e0:	2200      	movs	r2, #0
   e64e2:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   e64e4:	9202      	str	r2, [sp, #8]
   e64e6:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   e64e8:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   e64ea:	4604      	mov	r4, r0
   e64ec:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   e64ee:	d008      	beq.n	e6502 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   e64f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   e64f4:	fbb3 f1f2 	udiv	r1, r3, r2
   e64f8:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   e64fa:	fb02 3111 	mls	r1, r2, r1, r3
   e64fe:	434a      	muls	r2, r1
   e6500:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   e6502:	6960      	ldr	r0, [r4, #20]
   e6504:	2308      	movs	r3, #8
   e6506:	9300      	str	r3, [sp, #0]
   e6508:	f241 0205 	movw	r2, #4101	; 0x1005
   e650c:	446b      	add	r3, sp
   e650e:	f640 71ff 	movw	r1, #4095	; 0xfff
   e6512:	6800      	ldr	r0, [r0, #0]
   e6514:	f7ff f9c8 	bl	e58a8 <sock_setsockopt>
    if (ret < 0) {
   e6518:	2800      	cmp	r0, #0
   e651a:	db08      	blt.n	e652e <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   e651c:	6960      	ldr	r0, [r4, #20]
   e651e:	2300      	movs	r3, #0
   e6520:	4632      	mov	r2, r6
   e6522:	4629      	mov	r1, r5
   e6524:	6800      	ldr	r0, [r0, #0]
   e6526:	f7ff f9df 	bl	e58e8 <sock_send>
    if (ret < 0) {
   e652a:	2800      	cmp	r0, #0
   e652c:	da04      	bge.n	e6538 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   e652e:	f7ff fb2f 	bl	e5b90 <__errno>
   e6532:	6803      	ldr	r3, [r0, #0]
   e6534:	6063      	str	r3, [r4, #4]
   e6536:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   e6538:	b004      	add	sp, #16
   e653a:	bd70      	pop	{r4, r5, r6, pc}

000e653c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e653c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   e653e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e6540:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   e6542:	689b      	ldr	r3, [r3, #8]
   e6544:	4798      	blx	r3
          if (--_M_weak_count == 0)
   e6546:	68a3      	ldr	r3, [r4, #8]
   e6548:	3b01      	subs	r3, #1
   e654a:	60a3      	str	r3, [r4, #8]
   e654c:	b92b      	cbnz	r3, e655a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   e654e:	6823      	ldr	r3, [r4, #0]
   e6550:	4620      	mov	r0, r4
   e6552:	68db      	ldr	r3, [r3, #12]
        }
    }
   e6554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   e6558:	4718      	bx	r3
   e655a:	bd10      	pop	{r4, pc}

000e655c <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   e655c:	b570      	push	{r4, r5, r6, lr}
   e655e:	4604      	mov	r4, r0
   e6560:	694d      	ldr	r5, [r1, #20]
   e6562:	4b05      	ldr	r3, [pc, #20]	; (e6578 <_ZN9TCPClient8remoteIPEv+0x1c>)
   e6564:	f844 3b04 	str.w	r3, [r4], #4
   e6568:	358c      	adds	r5, #140	; 0x8c
   e656a:	4606      	mov	r6, r0
   e656c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e656e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e6570:	682b      	ldr	r3, [r5, #0]
   e6572:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   e6574:	4630      	mov	r0, r6
   e6576:	bd70      	pop	{r4, r5, r6, pc}
   e6578:	000ea95c 	.word	0x000ea95c

000e657c <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   e657c:	b510      	push	{r4, lr}
   e657e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   e6580:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e6584:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e6588:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   e658a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   e658c:	d005      	beq.n	e659a <_ZN9TCPClient4peekEv+0x1e>
   e658e:	6962      	ldr	r2, [r4, #20]
   e6590:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   e6594:	4413      	add	r3, r2
   e6596:	7918      	ldrb	r0, [r3, #4]
   e6598:	bd10      	pop	{r4, pc}
   e659a:	6803      	ldr	r3, [r0, #0]
   e659c:	691b      	ldr	r3, [r3, #16]
   e659e:	4798      	blx	r3
   e65a0:	2800      	cmp	r0, #0
   e65a2:	d1f4      	bne.n	e658e <_ZN9TCPClient4peekEv+0x12>
   e65a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   e65a8:	bd10      	pop	{r4, pc}

000e65aa <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   e65aa:	b510      	push	{r4, lr}
   e65ac:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   e65ae:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e65b2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e65b6:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   e65b8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   e65ba:	d008      	beq.n	e65ce <_ZN9TCPClient4readEv+0x24>
   e65bc:	6962      	ldr	r2, [r4, #20]
   e65be:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   e65c2:	1c59      	adds	r1, r3, #1
   e65c4:	4413      	add	r3, r2
   e65c6:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   e65ca:	7918      	ldrb	r0, [r3, #4]
   e65cc:	bd10      	pop	{r4, pc}
   e65ce:	6803      	ldr	r3, [r0, #0]
   e65d0:	691b      	ldr	r3, [r3, #16]
   e65d2:	4798      	blx	r3
   e65d4:	2800      	cmp	r0, #0
   e65d6:	d1f1      	bne.n	e65bc <_ZN9TCPClient4readEv+0x12>
   e65d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   e65dc:	bd10      	pop	{r4, pc}

000e65de <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   e65de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e65e0:	6943      	ldr	r3, [r0, #20]
   e65e2:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   e65e4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e65e8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e65ec:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   e65ee:	4605      	mov	r5, r0
   e65f0:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   e65f2:	d106      	bne.n	e6602 <_ZN9TCPClient4readEPhj+0x24>
   e65f4:	6803      	ldr	r3, [r0, #0]
   e65f6:	691b      	ldr	r3, [r3, #16]
   e65f8:	4798      	blx	r3
   e65fa:	b910      	cbnz	r0, e6602 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   e65fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   e6600:	e014      	b.n	e662c <_ZN9TCPClient4readEPhj+0x4e>
   e6602:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   e6604:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   e6608:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   e660c:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   e660e:	42bc      	cmp	r4, r7
   e6610:	bf28      	it	cs
   e6612:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   e6614:	4419      	add	r1, r3
   e6616:	4622      	mov	r2, r4
   e6618:	3104      	adds	r1, #4
   e661a:	4630      	mov	r0, r6
   e661c:	f001 fc23 	bl	e7e66 <memcpy>
   e6620:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   e6622:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   e6626:	4423      	add	r3, r4
   e6628:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   e662c:	4620      	mov	r0, r4
   e662e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e6630 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   e6630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e6634:	4698      	mov	r8, r3
    stop();
   e6636:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   e6638:	b093      	sub	sp, #76	; 0x4c
    stop();
   e663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   e663c:	460d      	mov	r5, r1
   e663e:	4606      	mov	r6, r0
   e6640:	4617      	mov	r7, r2
    stop();
   e6642:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   e6644:	ab12      	add	r3, sp, #72	; 0x48
   e6646:	2400      	movs	r4, #0
   e6648:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   e664c:	4622      	mov	r2, r4
   e664e:	4621      	mov	r1, r4
   e6650:	4628      	mov	r0, r5
   e6652:	f7ff f921 	bl	e5898 <netdb_getaddrinfo>
   e6656:	4681      	mov	r9, r0
   e6658:	2800      	cmp	r0, #0
   e665a:	d13d      	bne.n	e66d8 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   e665c:	9b00      	ldr	r3, [sp, #0]
   e665e:	2b00      	cmp	r3, #0
   e6660:	d056      	beq.n	e6710 <_ZN9TCPClient7connectEPKctm+0xe0>
   e6662:	695b      	ldr	r3, [r3, #20]
   e6664:	2b00      	cmp	r3, #0
   e6666:	d053      	beq.n	e6710 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   e6668:	a806      	add	r0, sp, #24
   e666a:	f7ff fb81 	bl	e5d70 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   e666e:	9b00      	ldr	r3, [sp, #0]
   e6670:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   e6672:	7863      	ldrb	r3, [r4, #1]
   e6674:	2b02      	cmp	r3, #2
   e6676:	d101      	bne.n	e667c <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   e6678:	1d21      	adds	r1, r4, #4
   e667a:	e013      	b.n	e66a4 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   e667c:	2b0a      	cmp	r3, #10
   e667e:	d114      	bne.n	e66aa <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   e6680:	2211      	movs	r2, #17
   e6682:	4649      	mov	r1, r9
   e6684:	a801      	add	r0, sp, #4
   e6686:	f001 fc14 	bl	e7eb2 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   e668a:	68a3      	ldr	r3, [r4, #8]
   e668c:	bb33      	cbnz	r3, e66dc <_ZN9TCPClient7connectEPKctm+0xac>
   e668e:	68e3      	ldr	r3, [r4, #12]
   e6690:	bb23      	cbnz	r3, e66dc <_ZN9TCPClient7connectEPKctm+0xac>
   e6692:	f64f 70ff 	movw	r0, #65535	; 0xffff
   e6696:	6925      	ldr	r5, [r4, #16]
   e6698:	f7ff f8e6 	bl	e5868 <inet_htonl>
   e669c:	4285      	cmp	r5, r0
   e669e:	d11d      	bne.n	e66dc <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   e66a0:	f104 0114 	add.w	r1, r4, #20
   e66a4:	a806      	add	r0, sp, #24
   e66a6:	f7ff fba6 	bl	e5df6 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   e66aa:	a806      	add	r0, sp, #24
   e66ac:	f7ff fb80 	bl	e5db0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   e66b0:	2800      	cmp	r0, #0
   e66b2:	d02d      	beq.n	e6710 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   e66b4:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   e66b6:	ad07      	add	r5, sp, #28
   e66b8:	f8d3 9020 	ldr.w	r9, [r3, #32]
   e66bc:	4b18      	ldr	r3, [pc, #96]	; (e6720 <_ZN9TCPClient7connectEPKctm+0xf0>)
   e66be:	930c      	str	r3, [sp, #48]	; 0x30
   e66c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e66c2:	ac0d      	add	r4, sp, #52	; 0x34
   e66c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e66c6:	682b      	ldr	r3, [r5, #0]
   e66c8:	7023      	strb	r3, [r4, #0]
   e66ca:	463a      	mov	r2, r7
   e66cc:	4643      	mov	r3, r8
   e66ce:	a90c      	add	r1, sp, #48	; 0x30
   e66d0:	4630      	mov	r0, r6
   e66d2:	47c8      	blx	r9
   e66d4:	4681      	mov	r9, r0
   e66d6:	e01b      	b.n	e6710 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   e66d8:	46a1      	mov	r9, r4
   e66da:	e019      	b.n	e6710 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   e66dc:	f104 0308 	add.w	r3, r4, #8
   e66e0:	ad01      	add	r5, sp, #4
   e66e2:	3418      	adds	r4, #24
   e66e4:	6818      	ldr	r0, [r3, #0]
   e66e6:	6859      	ldr	r1, [r3, #4]
   e66e8:	462a      	mov	r2, r5
   e66ea:	c203      	stmia	r2!, {r0, r1}
   e66ec:	3308      	adds	r3, #8
   e66ee:	42a3      	cmp	r3, r4
   e66f0:	4615      	mov	r5, r2
   e66f2:	d1f7      	bne.n	e66e4 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   e66f4:	2306      	movs	r3, #6
            addr = IPAddress(a);
   e66f6:	a901      	add	r1, sp, #4
   e66f8:	a80c      	add	r0, sp, #48	; 0x30
   e66fa:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   e66fc:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   e6700:	f7ff fb44 	bl	e5d8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e6704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e6706:	ac07      	add	r4, sp, #28
   e6708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e670a:	682b      	ldr	r3, [r5, #0]
   e670c:	7023      	strb	r3, [r4, #0]
   e670e:	e7cc      	b.n	e66aa <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   e6710:	9800      	ldr	r0, [sp, #0]
   e6712:	f7ff f8b9 	bl	e5888 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   e6716:	4648      	mov	r0, r9
   e6718:	b013      	add	sp, #76	; 0x4c
   e671a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e671e:	bf00      	nop
   e6720:	000ea95c 	.word	0x000ea95c

000e6724 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   e6724:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   e6726:	2300      	movs	r3, #0
   e6728:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   e672c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   e672e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   e6732:	4770      	bx	lr

000e6734 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   e6734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e6738:	461e      	mov	r6, r3
    stop();
   e673a:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   e673c:	460c      	mov	r4, r1
   e673e:	b08a      	sub	sp, #40	; 0x28
    stop();
   e6740:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   e6742:	4605      	mov	r5, r0
   e6744:	4617      	mov	r7, r2
    stop();
   e6746:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   e6748:	7d23      	ldrb	r3, [r4, #20]
   e674a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   e674e:	2b04      	cmp	r3, #4
   e6750:	bf0c      	ite	eq
   e6752:	2002      	moveq	r0, #2
   e6754:	200a      	movne	r0, #10
   e6756:	2206      	movs	r2, #6
   e6758:	2101      	movs	r1, #1
   e675a:	f7ff f8cd 	bl	e58f8 <sock_socket>
   e675e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   e6762:	696b      	ldr	r3, [r5, #20]
   e6764:	681b      	ldr	r3, [r3, #0]
   e6766:	2b00      	cmp	r3, #0
   e6768:	db18      	blt.n	e679c <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   e676a:	4628      	mov	r0, r5
   e676c:	f7ff ffda 	bl	e6724 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   e6770:	b1d6      	cbz	r6, e67a8 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   e6772:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   e6774:	a903      	add	r1, sp, #12
   e6776:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   e6778:	9303      	str	r3, [sp, #12]
   e677a:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   e677e:	f7ff f863 	bl	e5848 <if_index_to_name>
   e6782:	b958      	cbnz	r0, e679c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   e6784:	6968      	ldr	r0, [r5, #20]
   e6786:	2306      	movs	r3, #6
   e6788:	9300      	str	r3, [sp, #0]
   e678a:	f241 020b 	movw	r2, #4107	; 0x100b
   e678e:	ab03      	add	r3, sp, #12
   e6790:	f640 71ff 	movw	r1, #4095	; 0xfff
   e6794:	6800      	ldr	r0, [r0, #0]
   e6796:	f7ff f887 	bl	e58a8 <sock_setsockopt>
   e679a:	b128      	cbz	r0, e67a8 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   e679c:	682b      	ldr	r3, [r5, #0]
   e679e:	4628      	mov	r0, r5
   e67a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   e67a2:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   e67a4:	4798      	blx	r3
   e67a6:	e03b      	b.n	e6820 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   e67a8:	261c      	movs	r6, #28
   e67aa:	4632      	mov	r2, r6
   e67ac:	2100      	movs	r1, #0
   e67ae:	a803      	add	r0, sp, #12
   e67b0:	f001 fb7f 	bl	e7eb2 <memset>
    if (ip.version() == 4) {
   e67b4:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   e67b6:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   e67ba:	2b04      	cmp	r3, #4
   e67bc:	d10c      	bne.n	e67d8 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   e67be:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   e67c0:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   e67c2:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   e67c6:	f7ff f857 	bl	e5878 <inet_htons>
   e67ca:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   e67ce:	6860      	ldr	r0, [r4, #4]
   e67d0:	f7ff f84a 	bl	e5868 <inet_htonl>
   e67d4:	9004      	str	r0, [sp, #16]
   e67d6:	e013      	b.n	e6800 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   e67d8:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   e67da:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   e67dc:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   e67e0:	f7ff f84a 	bl	e5878 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   e67e4:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   e67e6:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   e67ea:	1d23      	adds	r3, r4, #4
   e67ec:	f104 0714 	add.w	r7, r4, #20
   e67f0:	6818      	ldr	r0, [r3, #0]
   e67f2:	6859      	ldr	r1, [r3, #4]
   e67f4:	4632      	mov	r2, r6
   e67f6:	c203      	stmia	r2!, {r0, r1}
   e67f8:	3308      	adds	r3, #8
   e67fa:	42bb      	cmp	r3, r7
   e67fc:	4616      	mov	r6, r2
   e67fe:	d1f7      	bne.n	e67f0 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   e6800:	696b      	ldr	r3, [r5, #20]
   e6802:	221c      	movs	r2, #28
   e6804:	a903      	add	r1, sp, #12
   e6806:	6818      	ldr	r0, [r3, #0]
   e6808:	f7ff f85e 	bl	e58c8 <sock_connect>
   e680c:	2800      	cmp	r0, #0
   e680e:	d1c5      	bne.n	e679c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   e6810:	3404      	adds	r4, #4
   e6812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   e6814:	696d      	ldr	r5, [r5, #20]
   e6816:	358c      	adds	r5, #140	; 0x8c
   e6818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   e681a:	6823      	ldr	r3, [r4, #0]
   e681c:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   e681e:	2401      	movs	r4, #1
}
   e6820:	4620      	mov	r0, r4
   e6822:	b00a      	add	sp, #40	; 0x28
   e6824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e6828 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   e6828:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   e682a:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   e682c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   e682e:	6818      	ldr	r0, [r3, #0]
   e6830:	2800      	cmp	r0, #0
   e6832:	db01      	blt.n	e6838 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   e6834:	f7ff f840 	bl	e58b8 <sock_close>
   e6838:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   e683a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e683e:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   e6840:	6960      	ldr	r0, [r4, #20]
   e6842:	2211      	movs	r2, #17
   e6844:	2100      	movs	r1, #0
   e6846:	308c      	adds	r0, #140	; 0x8c
   e6848:	f001 fb33 	bl	e7eb2 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   e684c:	4620      	mov	r0, r4
}
   e684e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   e6852:	f7ff bf67 	b.w	e6724 <_ZN9TCPClient12flush_bufferEv>
	...

000e6858 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   e6858:	b530      	push	{r4, r5, lr}
   e685a:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   e685c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   e6860:	b08b      	sub	sp, #44	; 0x2c
   e6862:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   e6864:	b11b      	cbz	r3, e686e <_ZN9TCPClient9availableEv+0x16>
   e6866:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   e686a:	429a      	cmp	r2, r3
   e686c:	d040      	beq.n	e68f0 <_ZN9TCPClient9availableEv+0x98>
   e686e:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   e6870:	6818      	ldr	r0, [r3, #0]
   e6872:	2800      	cmp	r0, #0
   e6874:	db3f      	blt.n	e68f6 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   e6876:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   e687a:	2d7f      	cmp	r5, #127	; 0x7f
   e687c:	d83b      	bhi.n	e68f6 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   e687e:	1d19      	adds	r1, r3, #4
   e6880:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   e6884:	2308      	movs	r3, #8
   e6886:	4429      	add	r1, r5
   e6888:	f7ff f826 	bl	e58d8 <sock_recv>
            if (ret > 0) {
   e688c:	2800      	cmp	r0, #0
   e688e:	dd0c      	ble.n	e68aa <_ZN9TCPClient9availableEv+0x52>
   e6890:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   e6892:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e6896:	b90a      	cbnz	r2, e689c <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   e6898:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   e689c:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   e689e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   e68a2:	4418      	add	r0, r3
   e68a4:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   e68a8:	e025      	b.n	e68f6 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   e68aa:	f7ff f971 	bl	e5b90 <__errno>
   e68ae:	6803      	ldr	r3, [r0, #0]
   e68b0:	2b0b      	cmp	r3, #11
   e68b2:	d020      	beq.n	e68f6 <_ZN9TCPClient9availableEv+0x9e>
   e68b4:	f7ff f96c 	bl	e5b90 <__errno>
   e68b8:	6803      	ldr	r3, [r0, #0]
   e68ba:	2b0b      	cmp	r3, #11
   e68bc:	d01b      	beq.n	e68f6 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   e68be:	2320      	movs	r3, #32
   e68c0:	2500      	movs	r5, #0
   e68c2:	9302      	str	r3, [sp, #8]
   e68c4:	9503      	str	r5, [sp, #12]
   e68c6:	f7ff f963 	bl	e5b90 <__errno>
   e68ca:	6803      	ldr	r3, [r0, #0]
   e68cc:	9301      	str	r3, [sp, #4]
   e68ce:	4b0e      	ldr	r3, [pc, #56]	; (e6908 <_ZN9TCPClient9availableEv+0xb0>)
   e68d0:	9300      	str	r3, [sp, #0]
   e68d2:	aa02      	add	r2, sp, #8
   e68d4:	462b      	mov	r3, r5
   e68d6:	490d      	ldr	r1, [pc, #52]	; (e690c <_ZN9TCPClient9availableEv+0xb4>)
   e68d8:	2032      	movs	r0, #50	; 0x32
   e68da:	f7ff f8a5 	bl	e5a28 <log_message>
                    sock_close(d_->sock);
   e68de:	6963      	ldr	r3, [r4, #20]
   e68e0:	6818      	ldr	r0, [r3, #0]
   e68e2:	f7fe ffe9 	bl	e58b8 <sock_close>
   e68e6:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   e68e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e68ec:	601a      	str	r2, [r3, #0]
   e68ee:	e002      	b.n	e68f6 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   e68f0:	f7ff ff18 	bl	e6724 <_ZN9TCPClient12flush_bufferEv>
   e68f4:	e7bb      	b.n	e686e <_ZN9TCPClient9availableEv+0x16>
   e68f6:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   e68f8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   e68fc:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   e6900:	1a18      	subs	r0, r3, r0
}
   e6902:	b00b      	add	sp, #44	; 0x2c
   e6904:	bd30      	pop	{r4, r5, pc}
   e6906:	bf00      	nop
   e6908:	000eab13 	.word	0x000eab13
   e690c:	000eab0c 	.word	0x000eab0c

000e6910 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   e6910:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   e6912:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   e6914:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   e6916:	6001      	str	r1, [r0, #0]
   e6918:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   e691c:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   e6920:	3088      	adds	r0, #136	; 0x88
   e6922:	f7ff fa25 	bl	e5d70 <_ZN9IPAddressC1Ev>
}
   e6926:	4620      	mov	r0, r4
   e6928:	bd10      	pop	{r4, pc}
	...

000e692c <_ZN9TCPClientC1Ei>:
   e692c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   e6930:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   e6932:	2300      	movs	r3, #0
   e6934:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   e6936:	4a14      	ldr	r2, [pc, #80]	; (e6988 <_ZN9TCPClientC1Ei+0x5c>)
   e6938:	6043      	str	r3, [r0, #4]
   e693a:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   e693c:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   e693e:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   e6940:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   e6942:	20a0      	movs	r0, #160	; 0xa0
   e6944:	460e      	mov	r6, r1
   e6946:	f7ed fba8 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   e694a:	4605      	mov	r5, r0
   e694c:	b110      	cbz	r0, e6954 <_ZN9TCPClientC1Ei+0x28>
   e694e:	4631      	mov	r1, r6
   e6950:	f7ff ffde 	bl	e6910 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   e6954:	2014      	movs	r0, #20
   e6956:	f7ed fba0 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   e695a:	4603      	mov	r3, r0
   e695c:	b128      	cbz	r0, e696a <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   e695e:	2201      	movs	r2, #1
   e6960:	6042      	str	r2, [r0, #4]
   e6962:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   e6964:	4a09      	ldr	r2, [pc, #36]	; (e698c <_ZN9TCPClientC1Ei+0x60>)
   e6966:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   e6968:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   e696a:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   e696c:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   e696e:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   e6970:	b128      	cbz	r0, e697e <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   e6972:	6843      	ldr	r3, [r0, #4]
   e6974:	3b01      	subs	r3, #1
   e6976:	6043      	str	r3, [r0, #4]
   e6978:	b90b      	cbnz	r3, e697e <_ZN9TCPClientC1Ei+0x52>
   e697a:	f7ff fddf 	bl	e653c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   e697e:	4620      	mov	r0, r4
   e6980:	f7ff fed0 	bl	e6724 <_ZN9TCPClient12flush_bufferEv>
}
   e6984:	4620      	mov	r0, r4
   e6986:	bd70      	pop	{r4, r5, r6, pc}
   e6988:	000eaac8 	.word	0x000eaac8
   e698c:	000eaaac 	.word	0x000eaaac

000e6990 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   e6990:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   e6992:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   e6996:	4604      	mov	r4, r0
        : TCPClient(-1) {
   e6998:	f7ff ffc8 	bl	e692c <_ZN9TCPClientC1Ei>
}
   e699c:	4620      	mov	r0, r4
   e699e:	bd10      	pop	{r4, pc}

000e69a0 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   e69a0:	b510      	push	{r4, lr}
   e69a2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   e69a4:	6800      	ldr	r0, [r0, #0]
   e69a6:	2800      	cmp	r0, #0
   e69a8:	db01      	blt.n	e69ae <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   e69aa:	f7fe ff85 	bl	e58b8 <sock_close>
    }
}
   e69ae:	4620      	mov	r0, r4
   e69b0:	bd10      	pop	{r4, pc}

000e69b2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   e69b2:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   e69b4:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   e69b6:	4620      	mov	r0, r4
   e69b8:	f7ff fff2 	bl	e69a0 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   e69bc:	b124      	cbz	r4, e69c8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   e69be:	4620      	mov	r0, r4
   e69c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   e69c4:	f7ed bb6d 	b.w	d40a2 <_ZdlPv>
   e69c8:	bd10      	pop	{r4, pc}
	...

000e69cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   e69cc:	4b02      	ldr	r3, [pc, #8]	; (e69d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   e69ce:	681a      	ldr	r2, [r3, #0]
   e69d0:	4b02      	ldr	r3, [pc, #8]	; (e69dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   e69d2:	601a      	str	r2, [r3, #0]
   e69d4:	4770      	bx	lr
   e69d6:	bf00      	nop
   e69d8:	2003ba20 	.word	0x2003ba20
   e69dc:	2003e5d4 	.word	0x2003e5d4

000e69e0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   e69e0:	4770      	bx	lr

000e69e2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e69e2:	7441      	strb	r1, [r0, #17]
   e69e4:	4770      	bx	lr

000e69e6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   e69e6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   e69e8:	7c00      	ldrb	r0, [r0, #16]
   e69ea:	f7fe ffd5 	bl	e5998 <HAL_USART_Available_Data_For_Write>
}
   e69ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e69f2:	bd08      	pop	{r3, pc}

000e69f4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   e69f4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   e69f6:	7c00      	ldrb	r0, [r0, #16]
   e69f8:	f7fe ffa6 	bl	e5948 <HAL_USART_Available_Data>
}
   e69fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e6a00:	bd08      	pop	{r3, pc}

000e6a02 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   e6a02:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   e6a04:	7c00      	ldrb	r0, [r0, #16]
   e6a06:	f7fe ffaf 	bl	e5968 <HAL_USART_Peek_Data>
}
   e6a0a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e6a0e:	bf28      	it	cs
   e6a10:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   e6a14:	bd08      	pop	{r3, pc}

000e6a16 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   e6a16:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   e6a18:	7c00      	ldrb	r0, [r0, #16]
   e6a1a:	f7fe ff9d 	bl	e5958 <HAL_USART_Read_Data>
}
   e6a1e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e6a22:	bf28      	it	cs
   e6a24:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   e6a28:	bd08      	pop	{r3, pc}

000e6a2a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   e6a2a:	7c00      	ldrb	r0, [r0, #16]
   e6a2c:	f7fe bfa4 	b.w	e5978 <HAL_USART_Flush_Data>

000e6a30 <_ZN11USARTSerialD0Ev>:
   e6a30:	b510      	push	{r4, lr}
   e6a32:	2114      	movs	r1, #20
   e6a34:	4604      	mov	r4, r0
   e6a36:	f000 fa6a 	bl	e6f0e <_ZdlPvj>
   e6a3a:	4620      	mov	r0, r4
   e6a3c:	bd10      	pop	{r4, pc}

000e6a3e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   e6a3e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   e6a40:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   e6a42:	4604      	mov	r4, r0
   e6a44:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   e6a46:	b925      	cbnz	r5, e6a52 <_ZN11USARTSerial5writeEh+0x14>
   e6a48:	7c00      	ldrb	r0, [r0, #16]
   e6a4a:	f7fe ffa5 	bl	e5998 <HAL_USART_Available_Data_For_Write>
   e6a4e:	2800      	cmp	r0, #0
   e6a50:	dd05      	ble.n	e6a5e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   e6a52:	4631      	mov	r1, r6
   e6a54:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   e6a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   e6a5a:	f7fe bf6d 	b.w	e5938 <HAL_USART_Write_Data>
  }
  return 0;
}
   e6a5e:	4628      	mov	r0, r5
   e6a60:	bd70      	pop	{r4, r5, r6, pc}
	...

000e6a64 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   e6a64:	b510      	push	{r4, lr}
   e6a66:	4604      	mov	r4, r0
   e6a68:	4608      	mov	r0, r1
   e6a6a:	4611      	mov	r1, r2
   e6a6c:	2200      	movs	r2, #0
   e6a6e:	6062      	str	r2, [r4, #4]
   e6a70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   e6a74:	60a2      	str	r2, [r4, #8]
   e6a76:	4a05      	ldr	r2, [pc, #20]	; (e6a8c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   e6a78:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   e6a7a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   e6a7c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   e6a7e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   e6a80:	461a      	mov	r2, r3
   e6a82:	f7fe ff51 	bl	e5928 <HAL_USART_Init>
}
   e6a86:	4620      	mov	r0, r4
   e6a88:	bd10      	pop	{r4, pc}
   e6a8a:	bf00      	nop
   e6a8c:	000eab54 	.word	0x000eab54

000e6a90 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   e6a90:	7c00      	ldrb	r0, [r0, #16]
   e6a92:	f7fe bf79 	b.w	e5988 <HAL_USART_Is_Enabled>
	...

000e6a98 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   e6a98:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   e6a9a:	4d0c      	ldr	r5, [pc, #48]	; (e6acc <_Z22__fetch_global_Serial1v+0x34>)
   e6a9c:	6829      	ldr	r1, [r5, #0]
   e6a9e:	f011 0401 	ands.w	r4, r1, #1
   e6aa2:	d111      	bne.n	e6ac8 <_Z22__fetch_global_Serial1v+0x30>
   e6aa4:	4628      	mov	r0, r5
   e6aa6:	f7ed fb00 	bl	d40aa <__cxa_guard_acquire>
   e6aaa:	b168      	cbz	r0, e6ac8 <_Z22__fetch_global_Serial1v+0x30>
   e6aac:	4a08      	ldr	r2, [pc, #32]	; (e6ad0 <_Z22__fetch_global_Serial1v+0x38>)
   e6aae:	4b09      	ldr	r3, [pc, #36]	; (e6ad4 <_Z22__fetch_global_Serial1v+0x3c>)
   e6ab0:	4809      	ldr	r0, [pc, #36]	; (e6ad8 <_Z22__fetch_global_Serial1v+0x40>)
   e6ab2:	4621      	mov	r1, r4
   e6ab4:	f7ff ffd6 	bl	e6a64 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   e6ab8:	4628      	mov	r0, r5
   e6aba:	f7ed fafb 	bl	d40b4 <__cxa_guard_release>
   e6abe:	4a07      	ldr	r2, [pc, #28]	; (e6adc <_Z22__fetch_global_Serial1v+0x44>)
   e6ac0:	4907      	ldr	r1, [pc, #28]	; (e6ae0 <_Z22__fetch_global_Serial1v+0x48>)
   e6ac2:	4805      	ldr	r0, [pc, #20]	; (e6ad8 <_Z22__fetch_global_Serial1v+0x40>)
   e6ac4:	f000 fa1e 	bl	e6f04 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   e6ac8:	4803      	ldr	r0, [pc, #12]	; (e6ad8 <_Z22__fetch_global_Serial1v+0x40>)
   e6aca:	bd38      	pop	{r3, r4, r5, pc}
   e6acc:	2003e670 	.word	0x2003e670
   e6ad0:	2003e674 	.word	0x2003e674
   e6ad4:	2003e5ec 	.word	0x2003e5ec
   e6ad8:	2003e5d8 	.word	0x2003e5d8
   e6adc:	2003ba88 	.word	0x2003ba88
   e6ae0:	000e69e1 	.word	0x000e69e1

000e6ae4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e6ae4:	7441      	strb	r1, [r0, #17]
   e6ae6:	4770      	bx	lr

000e6ae8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   e6ae8:	4770      	bx	lr

000e6aea <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   e6aea:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   e6aec:	2100      	movs	r1, #0
   e6aee:	7c00      	ldrb	r0, [r0, #16]
   e6af0:	f7fe ff7a 	bl	e59e8 <HAL_USB_USART_Receive_Data>
}
   e6af4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e6af8:	bf28      	it	cs
   e6afa:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   e6afe:	bd08      	pop	{r3, pc}

000e6b00 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   e6b00:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   e6b02:	2101      	movs	r1, #1
   e6b04:	7c00      	ldrb	r0, [r0, #16]
   e6b06:	f7fe ff6f 	bl	e59e8 <HAL_USB_USART_Receive_Data>
}
   e6b0a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e6b0e:	bf28      	it	cs
   e6b10:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   e6b14:	bd08      	pop	{r3, pc}

000e6b16 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   e6b16:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   e6b18:	7c00      	ldrb	r0, [r0, #16]
   e6b1a:	f7fe ff5d 	bl	e59d8 <HAL_USB_USART_Available_Data_For_Write>
}
   e6b1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e6b22:	bd08      	pop	{r3, pc}

000e6b24 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   e6b24:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   e6b26:	7c00      	ldrb	r0, [r0, #16]
   e6b28:	f7fe ff4e 	bl	e59c8 <HAL_USB_USART_Available_Data>
}
   e6b2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e6b30:	bd08      	pop	{r3, pc}

000e6b32 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   e6b32:	7c00      	ldrb	r0, [r0, #16]
   e6b34:	f7fe bf68 	b.w	e5a08 <HAL_USB_USART_Flush_Data>

000e6b38 <_ZN9USBSerialD0Ev>:
   e6b38:	b510      	push	{r4, lr}
   e6b3a:	2114      	movs	r1, #20
   e6b3c:	4604      	mov	r4, r0
   e6b3e:	f000 f9e6 	bl	e6f0e <_ZdlPvj>
   e6b42:	4620      	mov	r0, r4
   e6b44:	bd10      	pop	{r4, pc}

000e6b46 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   e6b46:	b538      	push	{r3, r4, r5, lr}
   e6b48:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e6b4a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   e6b4c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e6b4e:	f7fe ff43 	bl	e59d8 <HAL_USB_USART_Available_Data_For_Write>
   e6b52:	2800      	cmp	r0, #0
   e6b54:	dc01      	bgt.n	e6b5a <_ZN9USBSerial5writeEh+0x14>
   e6b56:	7c60      	ldrb	r0, [r4, #17]
   e6b58:	b128      	cbz	r0, e6b66 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   e6b5a:	4629      	mov	r1, r5
   e6b5c:	7c20      	ldrb	r0, [r4, #16]
   e6b5e:	f7fe ff4b 	bl	e59f8 <HAL_USB_USART_Send_Data>
   e6b62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   e6b66:	bd38      	pop	{r3, r4, r5, pc}

000e6b68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   e6b68:	b510      	push	{r4, lr}
   e6b6a:	4604      	mov	r4, r0
   e6b6c:	2300      	movs	r3, #0
   e6b6e:	6063      	str	r3, [r4, #4]
   e6b70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e6b74:	60a3      	str	r3, [r4, #8]
   e6b76:	4b05      	ldr	r3, [pc, #20]	; (e6b8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   e6b78:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   e6b7a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   e6b7c:	4608      	mov	r0, r1
{
  _serial = serial;
   e6b7e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   e6b80:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   e6b82:	4611      	mov	r1, r2
   e6b84:	f7fe ff10 	bl	e59a8 <HAL_USB_USART_Init>
}
   e6b88:	4620      	mov	r0, r4
   e6b8a:	bd10      	pop	{r4, pc}
   e6b8c:	000eab84 	.word	0x000eab84

000e6b90 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   e6b90:	2200      	movs	r2, #0
   e6b92:	7c00      	ldrb	r0, [r0, #16]
   e6b94:	f7fe bf10 	b.w	e59b8 <HAL_USB_USART_Begin>

000e6b98 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   e6b98:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   e6b9a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   e6b9c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   e6b9e:	2100      	movs	r1, #0
   e6ba0:	f001 f987 	bl	e7eb2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   e6ba4:	4620      	mov	r0, r4
   e6ba6:	bd10      	pop	{r4, pc}

000e6ba8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   e6ba8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e6baa:	4d0e      	ldr	r5, [pc, #56]	; (e6be4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   e6bac:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   e6bae:	a801      	add	r0, sp, #4
   e6bb0:	f7ff fff2 	bl	e6b98 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e6bb4:	6829      	ldr	r1, [r5, #0]
   e6bb6:	f011 0401 	ands.w	r4, r1, #1
   e6bba:	d110      	bne.n	e6bde <_Z16_fetch_usbserialv+0x36>
   e6bbc:	4628      	mov	r0, r5
   e6bbe:	f7ed fa74 	bl	d40aa <__cxa_guard_acquire>
   e6bc2:	b160      	cbz	r0, e6bde <_Z16_fetch_usbserialv+0x36>
   e6bc4:	aa01      	add	r2, sp, #4
   e6bc6:	4621      	mov	r1, r4
   e6bc8:	4807      	ldr	r0, [pc, #28]	; (e6be8 <_Z16_fetch_usbserialv+0x40>)
   e6bca:	f7ff ffcd 	bl	e6b68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   e6bce:	4628      	mov	r0, r5
   e6bd0:	f7ed fa70 	bl	d40b4 <__cxa_guard_release>
   e6bd4:	4a05      	ldr	r2, [pc, #20]	; (e6bec <_Z16_fetch_usbserialv+0x44>)
   e6bd6:	4906      	ldr	r1, [pc, #24]	; (e6bf0 <_Z16_fetch_usbserialv+0x48>)
   e6bd8:	4803      	ldr	r0, [pc, #12]	; (e6be8 <_Z16_fetch_usbserialv+0x40>)
   e6bda:	f000 f993 	bl	e6f04 <__aeabi_atexit>
	return _usbserial;
}
   e6bde:	4802      	ldr	r0, [pc, #8]	; (e6be8 <_Z16_fetch_usbserialv+0x40>)
   e6be0:	b007      	add	sp, #28
   e6be2:	bd30      	pop	{r4, r5, pc}
   e6be4:	2003e6f8 	.word	0x2003e6f8
   e6be8:	2003e6fc 	.word	0x2003e6fc
   e6bec:	2003ba88 	.word	0x2003ba88
   e6bf0:	000e6ae9 	.word	0x000e6ae9

000e6bf4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   e6bf4:	2200      	movs	r2, #0
   e6bf6:	4611      	mov	r1, r2
   e6bf8:	6840      	ldr	r0, [r0, #4]
   e6bfa:	f7fe bf61 	b.w	e5ac0 <network_ready>

000e6bfe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e6bfe:	2200      	movs	r2, #0
   e6c00:	4611      	mov	r1, r2
   e6c02:	6840      	ldr	r0, [r0, #4]
   e6c04:	f7fe bf7c 	b.w	e5b00 <network_listening>

000e6c08 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   e6c08:	2200      	movs	r2, #0
   e6c0a:	4611      	mov	r1, r2
   e6c0c:	6840      	ldr	r0, [r0, #4]
   e6c0e:	f7fe bf87 	b.w	e5b20 <network_get_listen_timeout>

000e6c12 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   e6c12:	2200      	movs	r2, #0
   e6c14:	6840      	ldr	r0, [r0, #4]
   e6c16:	f7fe bf7b 	b.w	e5b10 <network_set_listen_timeout>

000e6c1a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   e6c1a:	2200      	movs	r2, #0
   e6c1c:	f081 0101 	eor.w	r1, r1, #1
   e6c20:	6840      	ldr	r0, [r0, #4]
   e6c22:	f7fe bf65 	b.w	e5af0 <network_listen>

000e6c26 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   e6c26:	2300      	movs	r3, #0
   e6c28:	461a      	mov	r2, r3
   e6c2a:	4619      	mov	r1, r3
   e6c2c:	6840      	ldr	r0, [r0, #4]
   e6c2e:	f7fe bf57 	b.w	e5ae0 <network_off>

000e6c32 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   e6c32:	2300      	movs	r3, #0
   e6c34:	461a      	mov	r2, r3
   e6c36:	4619      	mov	r1, r3
   e6c38:	6840      	ldr	r0, [r0, #4]
   e6c3a:	f7fe bf49 	b.w	e5ad0 <network_on>

000e6c3e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   e6c3e:	2200      	movs	r2, #0
   e6c40:	4611      	mov	r1, r2
   e6c42:	6840      	ldr	r0, [r0, #4]
   e6c44:	f7fe bf2c 	b.w	e5aa0 <network_connecting>

000e6c48 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e6c48:	2200      	movs	r2, #0
   e6c4a:	2102      	movs	r1, #2
   e6c4c:	6840      	ldr	r0, [r0, #4]
   e6c4e:	f7fe bf2f 	b.w	e5ab0 <network_disconnect>

000e6c52 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   e6c52:	2300      	movs	r3, #0
   e6c54:	461a      	mov	r2, r3
   e6c56:	6840      	ldr	r0, [r0, #4]
   e6c58:	f7fe bf1a 	b.w	e5a90 <network_connect>

000e6c5c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   e6c5c:	4b02      	ldr	r3, [pc, #8]	; (e6c68 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   e6c5e:	2204      	movs	r2, #4
   e6c60:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   e6c62:	4a02      	ldr	r2, [pc, #8]	; (e6c6c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   e6c64:	601a      	str	r2, [r3, #0]
   e6c66:	4770      	bx	lr
   e6c68:	2003e710 	.word	0x2003e710
   e6c6c:	000eabb4 	.word	0x000eabb4

000e6c70 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   e6c70:	b510      	push	{r4, lr}
   e6c72:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   e6c74:	f001 f964 	bl	e7f40 <strlen>
   e6c78:	3801      	subs	r0, #1
   e6c7a:	1823      	adds	r3, r4, r0
   e6c7c:	4620      	mov	r0, r4
	while(i<j){
   e6c7e:	4298      	cmp	r0, r3
   e6c80:	d206      	bcs.n	e6c90 <_Z11str_reversePc+0x20>
		c = *i;
   e6c82:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   e6c84:	7819      	ldrb	r1, [r3, #0]
   e6c86:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   e6c8a:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   e6c8e:	e7f6      	b.n	e6c7e <_Z11str_reversePc+0xe>
   e6c90:	bd10      	pop	{r4, pc}

000e6c92 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   e6c92:	b570      	push	{r4, r5, r6, lr}
   e6c94:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   e6c96:	1e91      	subs	r1, r2, #2
   e6c98:	2922      	cmp	r1, #34	; 0x22
   e6c9a:	d820      	bhi.n	e6cde <ultoa+0x4c>
   e6c9c:	4625      	mov	r5, r4
   e6c9e:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   e6ca0:	b910      	cbnz	r0, e6ca8 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   e6ca2:	4423      	add	r3, r4
            *ptr++ = '0';
   e6ca4:	2230      	movs	r2, #48	; 0x30
   e6ca6:	e00e      	b.n	e6cc6 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   e6ca8:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   e6cac:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   e6cb0:	b2c1      	uxtb	r1, r0
   e6cb2:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   e6cb6:	2809      	cmp	r0, #9
                *ptr += '0';
   e6cb8:	bf94      	ite	ls
   e6cba:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   e6cbc:	3157      	addhi	r1, #87	; 0x57
   e6cbe:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   e6cc2:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   e6cc4:	e7eb      	b.n	e6c9e <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   e6cc6:	4299      	cmp	r1, r3
   e6cc8:	d202      	bcs.n	e6cd0 <ultoa+0x3e>
            *ptr++ = '0';
   e6cca:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   e6cce:	e7fa      	b.n	e6cc6 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   e6cd0:	2300      	movs	r3, #0
	str_reverse(buffer);
   e6cd2:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   e6cd4:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   e6cd6:	f7ff ffcb 	bl	e6c70 <_Z11str_reversePc>
	return buffer;
   e6cda:	4620      	mov	r0, r4
   e6cdc:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   e6cde:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   e6ce0:	bd70      	pop	{r4, r5, r6, pc}
	...

000e6ce4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   e6ce4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   e6ce6:	4b0c      	ldr	r3, [pc, #48]	; (e6d18 <serialEventRun+0x34>)
   e6ce8:	b133      	cbz	r3, e6cf8 <serialEventRun+0x14>
   e6cea:	f7ff ff5d 	bl	e6ba8 <_Z16_fetch_usbserialv>
   e6cee:	6803      	ldr	r3, [r0, #0]
   e6cf0:	691b      	ldr	r3, [r3, #16]
   e6cf2:	4798      	blx	r3
   e6cf4:	2800      	cmp	r0, #0
   e6cf6:	dc09      	bgt.n	e6d0c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   e6cf8:	4b08      	ldr	r3, [pc, #32]	; (e6d1c <serialEventRun+0x38>)
   e6cfa:	b163      	cbz	r3, e6d16 <serialEventRun+0x32>
   e6cfc:	f7ff fecc 	bl	e6a98 <_Z22__fetch_global_Serial1v>
   e6d00:	6803      	ldr	r3, [r0, #0]
   e6d02:	691b      	ldr	r3, [r3, #16]
   e6d04:	4798      	blx	r3
   e6d06:	2800      	cmp	r0, #0
   e6d08:	dc03      	bgt.n	e6d12 <serialEventRun+0x2e>
   e6d0a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   e6d0c:	f3af 8000 	nop.w
   e6d10:	e7f2      	b.n	e6cf8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   e6d12:	f3af 8000 	nop.w
   e6d16:	bd08      	pop	{r3, pc}
	...

000e6d20 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   e6d20:	b508      	push	{r3, lr}
	serialEventRun();
   e6d22:	f7ff ffdf 	bl	e6ce4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   e6d26:	f7fe fd27 	bl	e5778 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   e6d2a:	4b01      	ldr	r3, [pc, #4]	; (e6d30 <_post_loop+0x10>)
   e6d2c:	6018      	str	r0, [r3, #0]
   e6d2e:	bd08      	pop	{r3, pc}
   e6d30:	2003e72c 	.word	0x2003e72c

000e6d34 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   e6d34:	4802      	ldr	r0, [pc, #8]	; (e6d40 <_Z33system_initialize_user_backup_ramv+0xc>)
   e6d36:	4a03      	ldr	r2, [pc, #12]	; (e6d44 <_Z33system_initialize_user_backup_ramv+0x10>)
   e6d38:	4903      	ldr	r1, [pc, #12]	; (e6d48 <_Z33system_initialize_user_backup_ramv+0x14>)
   e6d3a:	1a12      	subs	r2, r2, r0
   e6d3c:	f001 b893 	b.w	e7e66 <memcpy>
   e6d40:	2003f400 	.word	0x2003f400
   e6d44:	2003f404 	.word	0x2003f404
   e6d48:	000eac98 	.word	0x000eac98

000e6d4c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   e6d4c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   e6d4e:	2300      	movs	r3, #0
   e6d50:	9300      	str	r3, [sp, #0]
   e6d52:	461a      	mov	r2, r3
   e6d54:	f06f 0177 	mvn.w	r1, #119	; 0x77
   e6d58:	f7fe fe88 	bl	e5a6c <system_ctrl_set_result>
}
   e6d5c:	b003      	add	sp, #12
   e6d5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e6d64 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   e6d64:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   e6d66:	8843      	ldrh	r3, [r0, #2]
   e6d68:	2b0a      	cmp	r3, #10
   e6d6a:	d008      	beq.n	e6d7e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   e6d6c:	2b50      	cmp	r3, #80	; 0x50
   e6d6e:	d109      	bne.n	e6d84 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   e6d70:	4b09      	ldr	r3, [pc, #36]	; (e6d98 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   e6d72:	681b      	ldr	r3, [r3, #0]
   e6d74:	b13b      	cbz	r3, e6d86 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   e6d76:	b003      	add	sp, #12
   e6d78:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   e6d7c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   e6d7e:	f7ff ffe5 	bl	e6d4c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   e6d82:	e006      	b.n	e6d92 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   e6d84:	2300      	movs	r3, #0
   e6d86:	9300      	str	r3, [sp, #0]
   e6d88:	461a      	mov	r2, r3
   e6d8a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   e6d8e:	f7fe fe6d 	bl	e5a6c <system_ctrl_set_result>
        break;
    }
}
   e6d92:	b003      	add	sp, #12
   e6d94:	f85d fb04 	ldr.w	pc, [sp], #4
   e6d98:	2003e718 	.word	0x2003e718

000e6d9c <module_user_init_hook>:

void module_user_init_hook()
{
   e6d9c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   e6d9e:	4c10      	ldr	r4, [pc, #64]	; (e6de0 <module_user_init_hook+0x44>)
   e6da0:	4d10      	ldr	r5, [pc, #64]	; (e6de4 <module_user_init_hook+0x48>)
   e6da2:	6823      	ldr	r3, [r4, #0]
   e6da4:	42ab      	cmp	r3, r5
   e6da6:	4b10      	ldr	r3, [pc, #64]	; (e6de8 <module_user_init_hook+0x4c>)
   e6da8:	bf0c      	ite	eq
   e6daa:	2201      	moveq	r2, #1
   e6dac:	2200      	movne	r2, #0
   e6dae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   e6db0:	d002      	beq.n	e6db8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   e6db2:	f7ff ffbf 	bl	e6d34 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   e6db6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   e6db8:	f7fe fcce 	bl	e5758 <HAL_RNG_GetRandomNumber>
   e6dbc:	4604      	mov	r4, r0
    srand(seed);
   e6dbe:	f001 f88f 	bl	e7ee0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   e6dc2:	4b0a      	ldr	r3, [pc, #40]	; (e6dec <module_user_init_hook+0x50>)
   e6dc4:	b113      	cbz	r3, e6dcc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   e6dc6:	4620      	mov	r0, r4
   e6dc8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   e6dcc:	2100      	movs	r1, #0
   e6dce:	4807      	ldr	r0, [pc, #28]	; (e6dec <module_user_init_hook+0x50>)
   e6dd0:	f7fe fe56 	bl	e5a80 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   e6dd4:	2100      	movs	r1, #0
   e6dd6:	4806      	ldr	r0, [pc, #24]	; (e6df0 <module_user_init_hook+0x54>)
}
   e6dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   e6ddc:	f7fe be3c 	b.w	e5a58 <system_ctrl_set_app_request_handler>
   e6de0:	2003f400 	.word	0x2003f400
   e6de4:	9a271c1e 	.word	0x9a271c1e
   e6de8:	2003e71c 	.word	0x2003e71c
   e6dec:	00000000 	.word	0x00000000
   e6df0:	000e6d65 	.word	0x000e6d65

000e6df4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   e6df4:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   e6df6:	4e18      	ldr	r6, [pc, #96]	; (e6e58 <pinAvailable+0x64>)
   e6df8:	6831      	ldr	r1, [r6, #0]
   e6dfa:	f011 0501 	ands.w	r5, r1, #1
   e6dfe:	4604      	mov	r4, r0
   e6e00:	d10a      	bne.n	e6e18 <pinAvailable+0x24>
   e6e02:	4630      	mov	r0, r6
   e6e04:	f7ed f951 	bl	d40aa <__cxa_guard_acquire>
   e6e08:	b130      	cbz	r0, e6e18 <pinAvailable+0x24>
   e6e0a:	4629      	mov	r1, r5
   e6e0c:	4813      	ldr	r0, [pc, #76]	; (e6e5c <pinAvailable+0x68>)
   e6e0e:	f7ff f9cf 	bl	e61b0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   e6e12:	4630      	mov	r0, r6
   e6e14:	f7ed f94e 	bl	d40b4 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   e6e18:	4810      	ldr	r0, [pc, #64]	; (e6e5c <pinAvailable+0x68>)
   e6e1a:	f7ff f9d3 	bl	e61c4 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   e6e1e:	b128      	cbz	r0, e6e2c <pinAvailable+0x38>
   e6e20:	f1a4 030b 	sub.w	r3, r4, #11
   e6e24:	2b02      	cmp	r3, #2
   e6e26:	d801      	bhi.n	e6e2c <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   e6e28:	2000      	movs	r0, #0
   e6e2a:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   e6e2c:	f000 f844 	bl	e6eb8 <_Z19__fetch_global_Wirev>
   e6e30:	f7fe ff5c 	bl	e5cec <_ZN7TwoWire9isEnabledEv>
   e6e34:	b108      	cbz	r0, e6e3a <pinAvailable+0x46>
   e6e36:	2c01      	cmp	r4, #1
   e6e38:	d9f6      	bls.n	e6e28 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   e6e3a:	f7ff fe2d 	bl	e6a98 <_Z22__fetch_global_Serial1v>
   e6e3e:	f7ff fe27 	bl	e6a90 <_ZN11USARTSerial9isEnabledEv>
   e6e42:	b118      	cbz	r0, e6e4c <pinAvailable+0x58>
   e6e44:	f1a4 0309 	sub.w	r3, r4, #9
   e6e48:	2b01      	cmp	r3, #1
   e6e4a:	d9ed      	bls.n	e6e28 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   e6e4c:	2c23      	cmp	r4, #35	; 0x23
   e6e4e:	bf8c      	ite	hi
   e6e50:	2000      	movhi	r0, #0
   e6e52:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   e6e54:	bd70      	pop	{r4, r5, r6, pc}
   e6e56:	bf00      	nop
   e6e58:	2003e720 	.word	0x2003e720
   e6e5c:	2003e724 	.word	0x2003e724

000e6e60 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   e6e60:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   e6e62:	b538      	push	{r3, r4, r5, lr}
   e6e64:	4604      	mov	r4, r0
   e6e66:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   e6e68:	d80a      	bhi.n	e6e80 <pinMode+0x20>
   e6e6a:	29ff      	cmp	r1, #255	; 0xff
   e6e6c:	d008      	beq.n	e6e80 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   e6e6e:	f7ff ffc1 	bl	e6df4 <pinAvailable>
   e6e72:	b128      	cbz	r0, e6e80 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   e6e74:	4629      	mov	r1, r5
   e6e76:	4620      	mov	r0, r4
}
   e6e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   e6e7c:	f7fe bc94 	b.w	e57a8 <HAL_Pin_Mode>
   e6e80:	bd38      	pop	{r3, r4, r5, pc}
	...

000e6e84 <_Z17acquireWireBufferv>:
   e6e84:	b570      	push	{r4, r5, r6, lr}
   e6e86:	4604      	mov	r4, r0
   e6e88:	2514      	movs	r5, #20
   e6e8a:	462a      	mov	r2, r5
   e6e8c:	4e09      	ldr	r6, [pc, #36]	; (e6eb4 <_Z17acquireWireBufferv+0x30>)
   e6e8e:	2100      	movs	r1, #0
   e6e90:	f001 f80f 	bl	e7eb2 <memset>
   e6e94:	8025      	strh	r5, [r4, #0]
   e6e96:	2520      	movs	r5, #32
   e6e98:	4631      	mov	r1, r6
   e6e9a:	60a5      	str	r5, [r4, #8]
   e6e9c:	6125      	str	r5, [r4, #16]
   e6e9e:	4628      	mov	r0, r5
   e6ea0:	f000 f84f 	bl	e6f42 <_ZnajRKSt9nothrow_t>
   e6ea4:	4631      	mov	r1, r6
   e6ea6:	6060      	str	r0, [r4, #4]
   e6ea8:	4628      	mov	r0, r5
   e6eaa:	f000 f84a 	bl	e6f42 <_ZnajRKSt9nothrow_t>
   e6eae:	60e0      	str	r0, [r4, #12]
   e6eb0:	4620      	mov	r0, r4
   e6eb2:	bd70      	pop	{r4, r5, r6, pc}
   e6eb4:	000eabe0 	.word	0x000eabe0

000e6eb8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   e6eb8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e6eba:	4d0e      	ldr	r5, [pc, #56]	; (e6ef4 <_Z19__fetch_global_Wirev+0x3c>)
   e6ebc:	6829      	ldr	r1, [r5, #0]
   e6ebe:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   e6ec2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e6ec4:	d113      	bne.n	e6eee <_Z19__fetch_global_Wirev+0x36>
   e6ec6:	4628      	mov	r0, r5
   e6ec8:	f7ed f8ef 	bl	d40aa <__cxa_guard_acquire>
   e6ecc:	b178      	cbz	r0, e6eee <_Z19__fetch_global_Wirev+0x36>
   e6ece:	a801      	add	r0, sp, #4
   e6ed0:	f7ff ffd8 	bl	e6e84 <_Z17acquireWireBufferv>
   e6ed4:	aa01      	add	r2, sp, #4
   e6ed6:	4621      	mov	r1, r4
   e6ed8:	4807      	ldr	r0, [pc, #28]	; (e6ef8 <_Z19__fetch_global_Wirev+0x40>)
   e6eda:	f7fe fef5 	bl	e5cc8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   e6ede:	4628      	mov	r0, r5
   e6ee0:	f7ed f8e8 	bl	d40b4 <__cxa_guard_release>
   e6ee4:	4a05      	ldr	r2, [pc, #20]	; (e6efc <_Z19__fetch_global_Wirev+0x44>)
   e6ee6:	4906      	ldr	r1, [pc, #24]	; (e6f00 <_Z19__fetch_global_Wirev+0x48>)
   e6ee8:	4803      	ldr	r0, [pc, #12]	; (e6ef8 <_Z19__fetch_global_Wirev+0x40>)
   e6eea:	f000 f80b 	bl	e6f04 <__aeabi_atexit>
	return wire;
}
   e6eee:	4802      	ldr	r0, [pc, #8]	; (e6ef8 <_Z19__fetch_global_Wirev+0x40>)
   e6ef0:	b007      	add	sp, #28
   e6ef2:	bd30      	pop	{r4, r5, pc}
   e6ef4:	2003e730 	.word	0x2003e730
   e6ef8:	2003e734 	.word	0x2003e734
   e6efc:	2003ba88 	.word	0x2003ba88
   e6f00:	000e5c71 	.word	0x000e5c71

000e6f04 <__aeabi_atexit>:
   e6f04:	460b      	mov	r3, r1
   e6f06:	4601      	mov	r1, r0
   e6f08:	4618      	mov	r0, r3
   e6f0a:	f000 bf8f 	b.w	e7e2c <__cxa_atexit>

000e6f0e <_ZdlPvj>:
   e6f0e:	f7ed b8c8 	b.w	d40a2 <_ZdlPv>
	...

000e6f14 <_ZSt15get_new_handlerv>:
   e6f14:	4b02      	ldr	r3, [pc, #8]	; (e6f20 <_ZSt15get_new_handlerv+0xc>)
   e6f16:	6818      	ldr	r0, [r3, #0]
   e6f18:	f3bf 8f5f 	dmb	sy
   e6f1c:	4770      	bx	lr
   e6f1e:	bf00      	nop
   e6f20:	2003e748 	.word	0x2003e748

000e6f24 <_ZnwjRKSt9nothrow_t>:
   e6f24:	b510      	push	{r4, lr}
   e6f26:	2800      	cmp	r0, #0
   e6f28:	bf14      	ite	ne
   e6f2a:	4604      	movne	r4, r0
   e6f2c:	2401      	moveq	r4, #1
   e6f2e:	4620      	mov	r0, r4
   e6f30:	f7fe fdfe 	bl	e5b30 <malloc>
   e6f34:	b920      	cbnz	r0, e6f40 <_ZnwjRKSt9nothrow_t+0x1c>
   e6f36:	f7ff ffed 	bl	e6f14 <_ZSt15get_new_handlerv>
   e6f3a:	b108      	cbz	r0, e6f40 <_ZnwjRKSt9nothrow_t+0x1c>
   e6f3c:	4780      	blx	r0
   e6f3e:	e7f6      	b.n	e6f2e <_ZnwjRKSt9nothrow_t+0xa>
   e6f40:	bd10      	pop	{r4, pc}

000e6f42 <_ZnajRKSt9nothrow_t>:
   e6f42:	f7ff bfef 	b.w	e6f24 <_ZnwjRKSt9nothrow_t>
	...

000e6f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   e6f48:	4b24      	ldr	r3, [pc, #144]	; (e6fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   e6f4a:	681a      	ldr	r2, [r3, #0]
   e6f4c:	07d0      	lsls	r0, r2, #31
   e6f4e:	bf5c      	itt	pl
   e6f50:	2201      	movpl	r2, #1
   e6f52:	601a      	strpl	r2, [r3, #0]
   e6f54:	4b22      	ldr	r3, [pc, #136]	; (e6fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   e6f56:	681a      	ldr	r2, [r3, #0]
   e6f58:	07d1      	lsls	r1, r2, #31
   e6f5a:	bf5c      	itt	pl
   e6f5c:	2201      	movpl	r2, #1
   e6f5e:	601a      	strpl	r2, [r3, #0]
   e6f60:	4b20      	ldr	r3, [pc, #128]	; (e6fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   e6f62:	681a      	ldr	r2, [r3, #0]
   e6f64:	07d2      	lsls	r2, r2, #31
   e6f66:	bf5c      	itt	pl
   e6f68:	2201      	movpl	r2, #1
   e6f6a:	601a      	strpl	r2, [r3, #0]
   e6f6c:	4b1e      	ldr	r3, [pc, #120]	; (e6fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   e6f6e:	681a      	ldr	r2, [r3, #0]
   e6f70:	07d0      	lsls	r0, r2, #31
   e6f72:	bf5c      	itt	pl
   e6f74:	2201      	movpl	r2, #1
   e6f76:	601a      	strpl	r2, [r3, #0]
   e6f78:	4b1c      	ldr	r3, [pc, #112]	; (e6fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   e6f7a:	681a      	ldr	r2, [r3, #0]
   e6f7c:	07d1      	lsls	r1, r2, #31
   e6f7e:	bf5c      	itt	pl
   e6f80:	2201      	movpl	r2, #1
   e6f82:	601a      	strpl	r2, [r3, #0]
   e6f84:	4b1a      	ldr	r3, [pc, #104]	; (e6ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   e6f86:	681a      	ldr	r2, [r3, #0]
   e6f88:	07d2      	lsls	r2, r2, #31
   e6f8a:	bf5c      	itt	pl
   e6f8c:	2201      	movpl	r2, #1
   e6f8e:	601a      	strpl	r2, [r3, #0]
   e6f90:	4b18      	ldr	r3, [pc, #96]	; (e6ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   e6f92:	681a      	ldr	r2, [r3, #0]
   e6f94:	07d0      	lsls	r0, r2, #31
   e6f96:	bf5c      	itt	pl
   e6f98:	2201      	movpl	r2, #1
   e6f9a:	601a      	strpl	r2, [r3, #0]
   e6f9c:	4b16      	ldr	r3, [pc, #88]	; (e6ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   e6f9e:	681a      	ldr	r2, [r3, #0]
   e6fa0:	07d1      	lsls	r1, r2, #31
   e6fa2:	bf5c      	itt	pl
   e6fa4:	2201      	movpl	r2, #1
   e6fa6:	601a      	strpl	r2, [r3, #0]
   e6fa8:	4b14      	ldr	r3, [pc, #80]	; (e6ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   e6faa:	681a      	ldr	r2, [r3, #0]
   e6fac:	07d2      	lsls	r2, r2, #31
   e6fae:	bf5c      	itt	pl
   e6fb0:	2201      	movpl	r2, #1
   e6fb2:	601a      	strpl	r2, [r3, #0]
   e6fb4:	4b12      	ldr	r3, [pc, #72]	; (e7000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   e6fb6:	681a      	ldr	r2, [r3, #0]
   e6fb8:	07d0      	lsls	r0, r2, #31
   e6fba:	bf5c      	itt	pl
   e6fbc:	2201      	movpl	r2, #1
   e6fbe:	601a      	strpl	r2, [r3, #0]
   e6fc0:	4b10      	ldr	r3, [pc, #64]	; (e7004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   e6fc2:	681a      	ldr	r2, [r3, #0]
   e6fc4:	07d1      	lsls	r1, r2, #31
   e6fc6:	bf5c      	itt	pl
   e6fc8:	2201      	movpl	r2, #1
   e6fca:	601a      	strpl	r2, [r3, #0]
   e6fcc:	4b0e      	ldr	r3, [pc, #56]	; (e7008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   e6fce:	681a      	ldr	r2, [r3, #0]
   e6fd0:	07d2      	lsls	r2, r2, #31
   e6fd2:	bf5c      	itt	pl
   e6fd4:	2201      	movpl	r2, #1
   e6fd6:	601a      	strpl	r2, [r3, #0]
   e6fd8:	4770      	bx	lr
   e6fda:	bf00      	nop
   e6fdc:	2003e778 	.word	0x2003e778
   e6fe0:	2003e774 	.word	0x2003e774
   e6fe4:	2003e770 	.word	0x2003e770
   e6fe8:	2003e76c 	.word	0x2003e76c
   e6fec:	2003e768 	.word	0x2003e768
   e6ff0:	2003e764 	.word	0x2003e764
   e6ff4:	2003e760 	.word	0x2003e760
   e6ff8:	2003e75c 	.word	0x2003e75c
   e6ffc:	2003e758 	.word	0x2003e758
   e7000:	2003e754 	.word	0x2003e754
   e7004:	2003e750 	.word	0x2003e750
   e7008:	2003e74c 	.word	0x2003e74c

000e700c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   e700c:	4b18      	ldr	r3, [pc, #96]	; (e7070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   e700e:	681a      	ldr	r2, [r3, #0]
   e7010:	07d1      	lsls	r1, r2, #31
   e7012:	bf5c      	itt	pl
   e7014:	2201      	movpl	r2, #1
   e7016:	601a      	strpl	r2, [r3, #0]
   e7018:	4b16      	ldr	r3, [pc, #88]	; (e7074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   e701a:	681a      	ldr	r2, [r3, #0]
   e701c:	07d2      	lsls	r2, r2, #31
   e701e:	bf5c      	itt	pl
   e7020:	2201      	movpl	r2, #1
   e7022:	601a      	strpl	r2, [r3, #0]
   e7024:	4b14      	ldr	r3, [pc, #80]	; (e7078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   e7026:	681a      	ldr	r2, [r3, #0]
   e7028:	07d0      	lsls	r0, r2, #31
   e702a:	bf5c      	itt	pl
   e702c:	2201      	movpl	r2, #1
   e702e:	601a      	strpl	r2, [r3, #0]
   e7030:	4b12      	ldr	r3, [pc, #72]	; (e707c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   e7032:	681a      	ldr	r2, [r3, #0]
   e7034:	07d1      	lsls	r1, r2, #31
   e7036:	bf5c      	itt	pl
   e7038:	2201      	movpl	r2, #1
   e703a:	601a      	strpl	r2, [r3, #0]
   e703c:	4b10      	ldr	r3, [pc, #64]	; (e7080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   e703e:	681a      	ldr	r2, [r3, #0]
   e7040:	07d2      	lsls	r2, r2, #31
   e7042:	bf5c      	itt	pl
   e7044:	2201      	movpl	r2, #1
   e7046:	601a      	strpl	r2, [r3, #0]
   e7048:	4b0e      	ldr	r3, [pc, #56]	; (e7084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   e704a:	681a      	ldr	r2, [r3, #0]
   e704c:	07d0      	lsls	r0, r2, #31
   e704e:	bf5c      	itt	pl
   e7050:	2201      	movpl	r2, #1
   e7052:	601a      	strpl	r2, [r3, #0]
   e7054:	4b0c      	ldr	r3, [pc, #48]	; (e7088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   e7056:	681a      	ldr	r2, [r3, #0]
   e7058:	07d1      	lsls	r1, r2, #31
   e705a:	bf5c      	itt	pl
   e705c:	2201      	movpl	r2, #1
   e705e:	601a      	strpl	r2, [r3, #0]
   e7060:	4b0a      	ldr	r3, [pc, #40]	; (e708c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   e7062:	681a      	ldr	r2, [r3, #0]
   e7064:	07d2      	lsls	r2, r2, #31
   e7066:	bf5c      	itt	pl
   e7068:	2201      	movpl	r2, #1
   e706a:	601a      	strpl	r2, [r3, #0]
   e706c:	4770      	bx	lr
   e706e:	bf00      	nop
   e7070:	2003e798 	.word	0x2003e798
   e7074:	2003e794 	.word	0x2003e794
   e7078:	2003e790 	.word	0x2003e790
   e707c:	2003e78c 	.word	0x2003e78c
   e7080:	2003e788 	.word	0x2003e788
   e7084:	2003e784 	.word	0x2003e784
   e7088:	2003e780 	.word	0x2003e780
   e708c:	2003e77c 	.word	0x2003e77c

000e7090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   e7090:	4b18      	ldr	r3, [pc, #96]	; (e70f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   e7092:	681a      	ldr	r2, [r3, #0]
   e7094:	07d1      	lsls	r1, r2, #31
   e7096:	bf5c      	itt	pl
   e7098:	2201      	movpl	r2, #1
   e709a:	601a      	strpl	r2, [r3, #0]
   e709c:	4b16      	ldr	r3, [pc, #88]	; (e70f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   e709e:	681a      	ldr	r2, [r3, #0]
   e70a0:	07d2      	lsls	r2, r2, #31
   e70a2:	bf5c      	itt	pl
   e70a4:	2201      	movpl	r2, #1
   e70a6:	601a      	strpl	r2, [r3, #0]
   e70a8:	4b14      	ldr	r3, [pc, #80]	; (e70fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   e70aa:	681a      	ldr	r2, [r3, #0]
   e70ac:	07d0      	lsls	r0, r2, #31
   e70ae:	bf5c      	itt	pl
   e70b0:	2201      	movpl	r2, #1
   e70b2:	601a      	strpl	r2, [r3, #0]
   e70b4:	4b12      	ldr	r3, [pc, #72]	; (e7100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   e70b6:	681a      	ldr	r2, [r3, #0]
   e70b8:	07d1      	lsls	r1, r2, #31
   e70ba:	bf5c      	itt	pl
   e70bc:	2201      	movpl	r2, #1
   e70be:	601a      	strpl	r2, [r3, #0]
   e70c0:	4b10      	ldr	r3, [pc, #64]	; (e7104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   e70c2:	681a      	ldr	r2, [r3, #0]
   e70c4:	07d2      	lsls	r2, r2, #31
   e70c6:	bf5c      	itt	pl
   e70c8:	2201      	movpl	r2, #1
   e70ca:	601a      	strpl	r2, [r3, #0]
   e70cc:	4b0e      	ldr	r3, [pc, #56]	; (e7108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   e70ce:	681a      	ldr	r2, [r3, #0]
   e70d0:	07d0      	lsls	r0, r2, #31
   e70d2:	bf5c      	itt	pl
   e70d4:	2201      	movpl	r2, #1
   e70d6:	601a      	strpl	r2, [r3, #0]
   e70d8:	4b0c      	ldr	r3, [pc, #48]	; (e710c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   e70da:	681a      	ldr	r2, [r3, #0]
   e70dc:	07d1      	lsls	r1, r2, #31
   e70de:	bf5c      	itt	pl
   e70e0:	2201      	movpl	r2, #1
   e70e2:	601a      	strpl	r2, [r3, #0]
   e70e4:	4b0a      	ldr	r3, [pc, #40]	; (e7110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   e70e6:	681a      	ldr	r2, [r3, #0]
   e70e8:	07d2      	lsls	r2, r2, #31
   e70ea:	bf5c      	itt	pl
   e70ec:	2201      	movpl	r2, #1
   e70ee:	601a      	strpl	r2, [r3, #0]
   e70f0:	4770      	bx	lr
   e70f2:	bf00      	nop
   e70f4:	2003e7b8 	.word	0x2003e7b8
   e70f8:	2003e7b4 	.word	0x2003e7b4
   e70fc:	2003e7b0 	.word	0x2003e7b0
   e7100:	2003e7ac 	.word	0x2003e7ac
   e7104:	2003e7a8 	.word	0x2003e7a8
   e7108:	2003e7a4 	.word	0x2003e7a4
   e710c:	2003e7a0 	.word	0x2003e7a0
   e7110:	2003e79c 	.word	0x2003e79c

000e7114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   e7114:	4b24      	ldr	r3, [pc, #144]	; (e71a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   e7116:	681a      	ldr	r2, [r3, #0]
   e7118:	07d0      	lsls	r0, r2, #31
   e711a:	bf5c      	itt	pl
   e711c:	2201      	movpl	r2, #1
   e711e:	601a      	strpl	r2, [r3, #0]
   e7120:	4b22      	ldr	r3, [pc, #136]	; (e71ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   e7122:	681a      	ldr	r2, [r3, #0]
   e7124:	07d1      	lsls	r1, r2, #31
   e7126:	bf5c      	itt	pl
   e7128:	2201      	movpl	r2, #1
   e712a:	601a      	strpl	r2, [r3, #0]
   e712c:	4b20      	ldr	r3, [pc, #128]	; (e71b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   e712e:	681a      	ldr	r2, [r3, #0]
   e7130:	07d2      	lsls	r2, r2, #31
   e7132:	bf5c      	itt	pl
   e7134:	2201      	movpl	r2, #1
   e7136:	601a      	strpl	r2, [r3, #0]
   e7138:	4b1e      	ldr	r3, [pc, #120]	; (e71b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   e713a:	681a      	ldr	r2, [r3, #0]
   e713c:	07d0      	lsls	r0, r2, #31
   e713e:	bf5c      	itt	pl
   e7140:	2201      	movpl	r2, #1
   e7142:	601a      	strpl	r2, [r3, #0]
   e7144:	4b1c      	ldr	r3, [pc, #112]	; (e71b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   e7146:	681a      	ldr	r2, [r3, #0]
   e7148:	07d1      	lsls	r1, r2, #31
   e714a:	bf5c      	itt	pl
   e714c:	2201      	movpl	r2, #1
   e714e:	601a      	strpl	r2, [r3, #0]
   e7150:	4b1a      	ldr	r3, [pc, #104]	; (e71bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   e7152:	681a      	ldr	r2, [r3, #0]
   e7154:	07d2      	lsls	r2, r2, #31
   e7156:	bf5c      	itt	pl
   e7158:	2201      	movpl	r2, #1
   e715a:	601a      	strpl	r2, [r3, #0]
   e715c:	4b18      	ldr	r3, [pc, #96]	; (e71c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   e715e:	681a      	ldr	r2, [r3, #0]
   e7160:	07d0      	lsls	r0, r2, #31
   e7162:	bf5c      	itt	pl
   e7164:	2201      	movpl	r2, #1
   e7166:	601a      	strpl	r2, [r3, #0]
   e7168:	4b16      	ldr	r3, [pc, #88]	; (e71c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   e716a:	681a      	ldr	r2, [r3, #0]
   e716c:	07d1      	lsls	r1, r2, #31
   e716e:	bf5c      	itt	pl
   e7170:	2201      	movpl	r2, #1
   e7172:	601a      	strpl	r2, [r3, #0]
   e7174:	4b14      	ldr	r3, [pc, #80]	; (e71c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   e7176:	681a      	ldr	r2, [r3, #0]
   e7178:	07d2      	lsls	r2, r2, #31
   e717a:	bf5c      	itt	pl
   e717c:	2201      	movpl	r2, #1
   e717e:	601a      	strpl	r2, [r3, #0]
   e7180:	4b12      	ldr	r3, [pc, #72]	; (e71cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   e7182:	681a      	ldr	r2, [r3, #0]
   e7184:	07d0      	lsls	r0, r2, #31
   e7186:	bf5c      	itt	pl
   e7188:	2201      	movpl	r2, #1
   e718a:	601a      	strpl	r2, [r3, #0]
   e718c:	4b10      	ldr	r3, [pc, #64]	; (e71d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   e718e:	681a      	ldr	r2, [r3, #0]
   e7190:	07d1      	lsls	r1, r2, #31
   e7192:	bf5c      	itt	pl
   e7194:	2201      	movpl	r2, #1
   e7196:	601a      	strpl	r2, [r3, #0]
   e7198:	4b0e      	ldr	r3, [pc, #56]	; (e71d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   e719a:	681a      	ldr	r2, [r3, #0]
   e719c:	07d2      	lsls	r2, r2, #31
   e719e:	bf5c      	itt	pl
   e71a0:	2201      	movpl	r2, #1
   e71a2:	601a      	strpl	r2, [r3, #0]
   e71a4:	4770      	bx	lr
   e71a6:	bf00      	nop
   e71a8:	2003e7e8 	.word	0x2003e7e8
   e71ac:	2003e7e4 	.word	0x2003e7e4
   e71b0:	2003e7e0 	.word	0x2003e7e0
   e71b4:	2003e7dc 	.word	0x2003e7dc
   e71b8:	2003e7d8 	.word	0x2003e7d8
   e71bc:	2003e7d4 	.word	0x2003e7d4
   e71c0:	2003e7d0 	.word	0x2003e7d0
   e71c4:	2003e7cc 	.word	0x2003e7cc
   e71c8:	2003e7c8 	.word	0x2003e7c8
   e71cc:	2003e7c4 	.word	0x2003e7c4
   e71d0:	2003e7c0 	.word	0x2003e7c0
   e71d4:	2003e7bc 	.word	0x2003e7bc

000e71d8 <__aeabi_drsub>:
   e71d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   e71dc:	e002      	b.n	e71e4 <__adddf3>
   e71de:	bf00      	nop

000e71e0 <__aeabi_dsub>:
   e71e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000e71e4 <__adddf3>:
   e71e4:	b530      	push	{r4, r5, lr}
   e71e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   e71ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
   e71ee:	ea94 0f05 	teq	r4, r5
   e71f2:	bf08      	it	eq
   e71f4:	ea90 0f02 	teqeq	r0, r2
   e71f8:	bf1f      	itttt	ne
   e71fa:	ea54 0c00 	orrsne.w	ip, r4, r0
   e71fe:	ea55 0c02 	orrsne.w	ip, r5, r2
   e7202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   e7206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e720a:	f000 80e2 	beq.w	e73d2 <__adddf3+0x1ee>
   e720e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   e7212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   e7216:	bfb8      	it	lt
   e7218:	426d      	neglt	r5, r5
   e721a:	dd0c      	ble.n	e7236 <__adddf3+0x52>
   e721c:	442c      	add	r4, r5
   e721e:	ea80 0202 	eor.w	r2, r0, r2
   e7222:	ea81 0303 	eor.w	r3, r1, r3
   e7226:	ea82 0000 	eor.w	r0, r2, r0
   e722a:	ea83 0101 	eor.w	r1, r3, r1
   e722e:	ea80 0202 	eor.w	r2, r0, r2
   e7232:	ea81 0303 	eor.w	r3, r1, r3
   e7236:	2d36      	cmp	r5, #54	; 0x36
   e7238:	bf88      	it	hi
   e723a:	bd30      	pophi	{r4, r5, pc}
   e723c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e7240:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e7244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   e7248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   e724c:	d002      	beq.n	e7254 <__adddf3+0x70>
   e724e:	4240      	negs	r0, r0
   e7250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e7254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   e7258:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e725c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   e7260:	d002      	beq.n	e7268 <__adddf3+0x84>
   e7262:	4252      	negs	r2, r2
   e7264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   e7268:	ea94 0f05 	teq	r4, r5
   e726c:	f000 80a7 	beq.w	e73be <__adddf3+0x1da>
   e7270:	f1a4 0401 	sub.w	r4, r4, #1
   e7274:	f1d5 0e20 	rsbs	lr, r5, #32
   e7278:	db0d      	blt.n	e7296 <__adddf3+0xb2>
   e727a:	fa02 fc0e 	lsl.w	ip, r2, lr
   e727e:	fa22 f205 	lsr.w	r2, r2, r5
   e7282:	1880      	adds	r0, r0, r2
   e7284:	f141 0100 	adc.w	r1, r1, #0
   e7288:	fa03 f20e 	lsl.w	r2, r3, lr
   e728c:	1880      	adds	r0, r0, r2
   e728e:	fa43 f305 	asr.w	r3, r3, r5
   e7292:	4159      	adcs	r1, r3
   e7294:	e00e      	b.n	e72b4 <__adddf3+0xd0>
   e7296:	f1a5 0520 	sub.w	r5, r5, #32
   e729a:	f10e 0e20 	add.w	lr, lr, #32
   e729e:	2a01      	cmp	r2, #1
   e72a0:	fa03 fc0e 	lsl.w	ip, r3, lr
   e72a4:	bf28      	it	cs
   e72a6:	f04c 0c02 	orrcs.w	ip, ip, #2
   e72aa:	fa43 f305 	asr.w	r3, r3, r5
   e72ae:	18c0      	adds	r0, r0, r3
   e72b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   e72b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e72b8:	d507      	bpl.n	e72ca <__adddf3+0xe6>
   e72ba:	f04f 0e00 	mov.w	lr, #0
   e72be:	f1dc 0c00 	rsbs	ip, ip, #0
   e72c2:	eb7e 0000 	sbcs.w	r0, lr, r0
   e72c6:	eb6e 0101 	sbc.w	r1, lr, r1
   e72ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   e72ce:	d31b      	bcc.n	e7308 <__adddf3+0x124>
   e72d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   e72d4:	d30c      	bcc.n	e72f0 <__adddf3+0x10c>
   e72d6:	0849      	lsrs	r1, r1, #1
   e72d8:	ea5f 0030 	movs.w	r0, r0, rrx
   e72dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   e72e0:	f104 0401 	add.w	r4, r4, #1
   e72e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   e72e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   e72ec:	f080 809a 	bcs.w	e7424 <__adddf3+0x240>
   e72f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   e72f4:	bf08      	it	eq
   e72f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e72fa:	f150 0000 	adcs.w	r0, r0, #0
   e72fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e7302:	ea41 0105 	orr.w	r1, r1, r5
   e7306:	bd30      	pop	{r4, r5, pc}
   e7308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   e730c:	4140      	adcs	r0, r0
   e730e:	eb41 0101 	adc.w	r1, r1, r1
   e7312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e7316:	f1a4 0401 	sub.w	r4, r4, #1
   e731a:	d1e9      	bne.n	e72f0 <__adddf3+0x10c>
   e731c:	f091 0f00 	teq	r1, #0
   e7320:	bf04      	itt	eq
   e7322:	4601      	moveq	r1, r0
   e7324:	2000      	moveq	r0, #0
   e7326:	fab1 f381 	clz	r3, r1
   e732a:	bf08      	it	eq
   e732c:	3320      	addeq	r3, #32
   e732e:	f1a3 030b 	sub.w	r3, r3, #11
   e7332:	f1b3 0220 	subs.w	r2, r3, #32
   e7336:	da0c      	bge.n	e7352 <__adddf3+0x16e>
   e7338:	320c      	adds	r2, #12
   e733a:	dd08      	ble.n	e734e <__adddf3+0x16a>
   e733c:	f102 0c14 	add.w	ip, r2, #20
   e7340:	f1c2 020c 	rsb	r2, r2, #12
   e7344:	fa01 f00c 	lsl.w	r0, r1, ip
   e7348:	fa21 f102 	lsr.w	r1, r1, r2
   e734c:	e00c      	b.n	e7368 <__adddf3+0x184>
   e734e:	f102 0214 	add.w	r2, r2, #20
   e7352:	bfd8      	it	le
   e7354:	f1c2 0c20 	rsble	ip, r2, #32
   e7358:	fa01 f102 	lsl.w	r1, r1, r2
   e735c:	fa20 fc0c 	lsr.w	ip, r0, ip
   e7360:	bfdc      	itt	le
   e7362:	ea41 010c 	orrle.w	r1, r1, ip
   e7366:	4090      	lslle	r0, r2
   e7368:	1ae4      	subs	r4, r4, r3
   e736a:	bfa2      	ittt	ge
   e736c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   e7370:	4329      	orrge	r1, r5
   e7372:	bd30      	popge	{r4, r5, pc}
   e7374:	ea6f 0404 	mvn.w	r4, r4
   e7378:	3c1f      	subs	r4, #31
   e737a:	da1c      	bge.n	e73b6 <__adddf3+0x1d2>
   e737c:	340c      	adds	r4, #12
   e737e:	dc0e      	bgt.n	e739e <__adddf3+0x1ba>
   e7380:	f104 0414 	add.w	r4, r4, #20
   e7384:	f1c4 0220 	rsb	r2, r4, #32
   e7388:	fa20 f004 	lsr.w	r0, r0, r4
   e738c:	fa01 f302 	lsl.w	r3, r1, r2
   e7390:	ea40 0003 	orr.w	r0, r0, r3
   e7394:	fa21 f304 	lsr.w	r3, r1, r4
   e7398:	ea45 0103 	orr.w	r1, r5, r3
   e739c:	bd30      	pop	{r4, r5, pc}
   e739e:	f1c4 040c 	rsb	r4, r4, #12
   e73a2:	f1c4 0220 	rsb	r2, r4, #32
   e73a6:	fa20 f002 	lsr.w	r0, r0, r2
   e73aa:	fa01 f304 	lsl.w	r3, r1, r4
   e73ae:	ea40 0003 	orr.w	r0, r0, r3
   e73b2:	4629      	mov	r1, r5
   e73b4:	bd30      	pop	{r4, r5, pc}
   e73b6:	fa21 f004 	lsr.w	r0, r1, r4
   e73ba:	4629      	mov	r1, r5
   e73bc:	bd30      	pop	{r4, r5, pc}
   e73be:	f094 0f00 	teq	r4, #0
   e73c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   e73c6:	bf06      	itte	eq
   e73c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   e73cc:	3401      	addeq	r4, #1
   e73ce:	3d01      	subne	r5, #1
   e73d0:	e74e      	b.n	e7270 <__adddf3+0x8c>
   e73d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e73d6:	bf18      	it	ne
   e73d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e73dc:	d029      	beq.n	e7432 <__adddf3+0x24e>
   e73de:	ea94 0f05 	teq	r4, r5
   e73e2:	bf08      	it	eq
   e73e4:	ea90 0f02 	teqeq	r0, r2
   e73e8:	d005      	beq.n	e73f6 <__adddf3+0x212>
   e73ea:	ea54 0c00 	orrs.w	ip, r4, r0
   e73ee:	bf04      	itt	eq
   e73f0:	4619      	moveq	r1, r3
   e73f2:	4610      	moveq	r0, r2
   e73f4:	bd30      	pop	{r4, r5, pc}
   e73f6:	ea91 0f03 	teq	r1, r3
   e73fa:	bf1e      	ittt	ne
   e73fc:	2100      	movne	r1, #0
   e73fe:	2000      	movne	r0, #0
   e7400:	bd30      	popne	{r4, r5, pc}
   e7402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   e7406:	d105      	bne.n	e7414 <__adddf3+0x230>
   e7408:	0040      	lsls	r0, r0, #1
   e740a:	4149      	adcs	r1, r1
   e740c:	bf28      	it	cs
   e740e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   e7412:	bd30      	pop	{r4, r5, pc}
   e7414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   e7418:	bf3c      	itt	cc
   e741a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   e741e:	bd30      	popcc	{r4, r5, pc}
   e7420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e7424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   e7428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e742c:	f04f 0000 	mov.w	r0, #0
   e7430:	bd30      	pop	{r4, r5, pc}
   e7432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e7436:	bf1a      	itte	ne
   e7438:	4619      	movne	r1, r3
   e743a:	4610      	movne	r0, r2
   e743c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   e7440:	bf1c      	itt	ne
   e7442:	460b      	movne	r3, r1
   e7444:	4602      	movne	r2, r0
   e7446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e744a:	bf06      	itte	eq
   e744c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   e7450:	ea91 0f03 	teqeq	r1, r3
   e7454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   e7458:	bd30      	pop	{r4, r5, pc}
   e745a:	bf00      	nop

000e745c <__aeabi_ui2d>:
   e745c:	f090 0f00 	teq	r0, #0
   e7460:	bf04      	itt	eq
   e7462:	2100      	moveq	r1, #0
   e7464:	4770      	bxeq	lr
   e7466:	b530      	push	{r4, r5, lr}
   e7468:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e746c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e7470:	f04f 0500 	mov.w	r5, #0
   e7474:	f04f 0100 	mov.w	r1, #0
   e7478:	e750      	b.n	e731c <__adddf3+0x138>
   e747a:	bf00      	nop

000e747c <__aeabi_i2d>:
   e747c:	f090 0f00 	teq	r0, #0
   e7480:	bf04      	itt	eq
   e7482:	2100      	moveq	r1, #0
   e7484:	4770      	bxeq	lr
   e7486:	b530      	push	{r4, r5, lr}
   e7488:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e748c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e7490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   e7494:	bf48      	it	mi
   e7496:	4240      	negmi	r0, r0
   e7498:	f04f 0100 	mov.w	r1, #0
   e749c:	e73e      	b.n	e731c <__adddf3+0x138>
   e749e:	bf00      	nop

000e74a0 <__aeabi_f2d>:
   e74a0:	0042      	lsls	r2, r0, #1
   e74a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   e74a6:	ea4f 0131 	mov.w	r1, r1, rrx
   e74aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   e74ae:	bf1f      	itttt	ne
   e74b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   e74b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e74b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   e74bc:	4770      	bxne	lr
   e74be:	f092 0f00 	teq	r2, #0
   e74c2:	bf14      	ite	ne
   e74c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e74c8:	4770      	bxeq	lr
   e74ca:	b530      	push	{r4, r5, lr}
   e74cc:	f44f 7460 	mov.w	r4, #896	; 0x380
   e74d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e74d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e74d8:	e720      	b.n	e731c <__adddf3+0x138>
   e74da:	bf00      	nop

000e74dc <__aeabi_ul2d>:
   e74dc:	ea50 0201 	orrs.w	r2, r0, r1
   e74e0:	bf08      	it	eq
   e74e2:	4770      	bxeq	lr
   e74e4:	b530      	push	{r4, r5, lr}
   e74e6:	f04f 0500 	mov.w	r5, #0
   e74ea:	e00a      	b.n	e7502 <__aeabi_l2d+0x16>

000e74ec <__aeabi_l2d>:
   e74ec:	ea50 0201 	orrs.w	r2, r0, r1
   e74f0:	bf08      	it	eq
   e74f2:	4770      	bxeq	lr
   e74f4:	b530      	push	{r4, r5, lr}
   e74f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   e74fa:	d502      	bpl.n	e7502 <__aeabi_l2d+0x16>
   e74fc:	4240      	negs	r0, r0
   e74fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e7502:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e7506:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e750a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   e750e:	f43f aedc 	beq.w	e72ca <__adddf3+0xe6>
   e7512:	f04f 0203 	mov.w	r2, #3
   e7516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e751a:	bf18      	it	ne
   e751c:	3203      	addne	r2, #3
   e751e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e7522:	bf18      	it	ne
   e7524:	3203      	addne	r2, #3
   e7526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   e752a:	f1c2 0320 	rsb	r3, r2, #32
   e752e:	fa00 fc03 	lsl.w	ip, r0, r3
   e7532:	fa20 f002 	lsr.w	r0, r0, r2
   e7536:	fa01 fe03 	lsl.w	lr, r1, r3
   e753a:	ea40 000e 	orr.w	r0, r0, lr
   e753e:	fa21 f102 	lsr.w	r1, r1, r2
   e7542:	4414      	add	r4, r2
   e7544:	e6c1      	b.n	e72ca <__adddf3+0xe6>
   e7546:	bf00      	nop

000e7548 <__aeabi_dmul>:
   e7548:	b570      	push	{r4, r5, r6, lr}
   e754a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e754e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e7552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e7556:	bf1d      	ittte	ne
   e7558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e755c:	ea94 0f0c 	teqne	r4, ip
   e7560:	ea95 0f0c 	teqne	r5, ip
   e7564:	f000 f8de 	bleq	e7724 <__aeabi_dmul+0x1dc>
   e7568:	442c      	add	r4, r5
   e756a:	ea81 0603 	eor.w	r6, r1, r3
   e756e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   e7572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   e7576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   e757a:	bf18      	it	ne
   e757c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   e7580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e7584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e7588:	d038      	beq.n	e75fc <__aeabi_dmul+0xb4>
   e758a:	fba0 ce02 	umull	ip, lr, r0, r2
   e758e:	f04f 0500 	mov.w	r5, #0
   e7592:	fbe1 e502 	umlal	lr, r5, r1, r2
   e7596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   e759a:	fbe0 e503 	umlal	lr, r5, r0, r3
   e759e:	f04f 0600 	mov.w	r6, #0
   e75a2:	fbe1 5603 	umlal	r5, r6, r1, r3
   e75a6:	f09c 0f00 	teq	ip, #0
   e75aa:	bf18      	it	ne
   e75ac:	f04e 0e01 	orrne.w	lr, lr, #1
   e75b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   e75b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   e75b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   e75bc:	d204      	bcs.n	e75c8 <__aeabi_dmul+0x80>
   e75be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   e75c2:	416d      	adcs	r5, r5
   e75c4:	eb46 0606 	adc.w	r6, r6, r6
   e75c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   e75cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   e75d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   e75d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   e75d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   e75dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e75e0:	bf88      	it	hi
   e75e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e75e6:	d81e      	bhi.n	e7626 <__aeabi_dmul+0xde>
   e75e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   e75ec:	bf08      	it	eq
   e75ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   e75f2:	f150 0000 	adcs.w	r0, r0, #0
   e75f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e75fa:	bd70      	pop	{r4, r5, r6, pc}
   e75fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   e7600:	ea46 0101 	orr.w	r1, r6, r1
   e7604:	ea40 0002 	orr.w	r0, r0, r2
   e7608:	ea81 0103 	eor.w	r1, r1, r3
   e760c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   e7610:	bfc2      	ittt	gt
   e7612:	ebd4 050c 	rsbsgt	r5, r4, ip
   e7616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e761a:	bd70      	popgt	{r4, r5, r6, pc}
   e761c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e7620:	f04f 0e00 	mov.w	lr, #0
   e7624:	3c01      	subs	r4, #1
   e7626:	f300 80ab 	bgt.w	e7780 <__aeabi_dmul+0x238>
   e762a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   e762e:	bfde      	ittt	le
   e7630:	2000      	movle	r0, #0
   e7632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   e7636:	bd70      	pople	{r4, r5, r6, pc}
   e7638:	f1c4 0400 	rsb	r4, r4, #0
   e763c:	3c20      	subs	r4, #32
   e763e:	da35      	bge.n	e76ac <__aeabi_dmul+0x164>
   e7640:	340c      	adds	r4, #12
   e7642:	dc1b      	bgt.n	e767c <__aeabi_dmul+0x134>
   e7644:	f104 0414 	add.w	r4, r4, #20
   e7648:	f1c4 0520 	rsb	r5, r4, #32
   e764c:	fa00 f305 	lsl.w	r3, r0, r5
   e7650:	fa20 f004 	lsr.w	r0, r0, r4
   e7654:	fa01 f205 	lsl.w	r2, r1, r5
   e7658:	ea40 0002 	orr.w	r0, r0, r2
   e765c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   e7660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e7664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e7668:	fa21 f604 	lsr.w	r6, r1, r4
   e766c:	eb42 0106 	adc.w	r1, r2, r6
   e7670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e7674:	bf08      	it	eq
   e7676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e767a:	bd70      	pop	{r4, r5, r6, pc}
   e767c:	f1c4 040c 	rsb	r4, r4, #12
   e7680:	f1c4 0520 	rsb	r5, r4, #32
   e7684:	fa00 f304 	lsl.w	r3, r0, r4
   e7688:	fa20 f005 	lsr.w	r0, r0, r5
   e768c:	fa01 f204 	lsl.w	r2, r1, r4
   e7690:	ea40 0002 	orr.w	r0, r0, r2
   e7694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e7698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e769c:	f141 0100 	adc.w	r1, r1, #0
   e76a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e76a4:	bf08      	it	eq
   e76a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e76aa:	bd70      	pop	{r4, r5, r6, pc}
   e76ac:	f1c4 0520 	rsb	r5, r4, #32
   e76b0:	fa00 f205 	lsl.w	r2, r0, r5
   e76b4:	ea4e 0e02 	orr.w	lr, lr, r2
   e76b8:	fa20 f304 	lsr.w	r3, r0, r4
   e76bc:	fa01 f205 	lsl.w	r2, r1, r5
   e76c0:	ea43 0302 	orr.w	r3, r3, r2
   e76c4:	fa21 f004 	lsr.w	r0, r1, r4
   e76c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e76cc:	fa21 f204 	lsr.w	r2, r1, r4
   e76d0:	ea20 0002 	bic.w	r0, r0, r2
   e76d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   e76d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e76dc:	bf08      	it	eq
   e76de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e76e2:	bd70      	pop	{r4, r5, r6, pc}
   e76e4:	f094 0f00 	teq	r4, #0
   e76e8:	d10f      	bne.n	e770a <__aeabi_dmul+0x1c2>
   e76ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   e76ee:	0040      	lsls	r0, r0, #1
   e76f0:	eb41 0101 	adc.w	r1, r1, r1
   e76f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e76f8:	bf08      	it	eq
   e76fa:	3c01      	subeq	r4, #1
   e76fc:	d0f7      	beq.n	e76ee <__aeabi_dmul+0x1a6>
   e76fe:	ea41 0106 	orr.w	r1, r1, r6
   e7702:	f095 0f00 	teq	r5, #0
   e7706:	bf18      	it	ne
   e7708:	4770      	bxne	lr
   e770a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   e770e:	0052      	lsls	r2, r2, #1
   e7710:	eb43 0303 	adc.w	r3, r3, r3
   e7714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   e7718:	bf08      	it	eq
   e771a:	3d01      	subeq	r5, #1
   e771c:	d0f7      	beq.n	e770e <__aeabi_dmul+0x1c6>
   e771e:	ea43 0306 	orr.w	r3, r3, r6
   e7722:	4770      	bx	lr
   e7724:	ea94 0f0c 	teq	r4, ip
   e7728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e772c:	bf18      	it	ne
   e772e:	ea95 0f0c 	teqne	r5, ip
   e7732:	d00c      	beq.n	e774e <__aeabi_dmul+0x206>
   e7734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e7738:	bf18      	it	ne
   e773a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e773e:	d1d1      	bne.n	e76e4 <__aeabi_dmul+0x19c>
   e7740:	ea81 0103 	eor.w	r1, r1, r3
   e7744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e7748:	f04f 0000 	mov.w	r0, #0
   e774c:	bd70      	pop	{r4, r5, r6, pc}
   e774e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e7752:	bf06      	itte	eq
   e7754:	4610      	moveq	r0, r2
   e7756:	4619      	moveq	r1, r3
   e7758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e775c:	d019      	beq.n	e7792 <__aeabi_dmul+0x24a>
   e775e:	ea94 0f0c 	teq	r4, ip
   e7762:	d102      	bne.n	e776a <__aeabi_dmul+0x222>
   e7764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   e7768:	d113      	bne.n	e7792 <__aeabi_dmul+0x24a>
   e776a:	ea95 0f0c 	teq	r5, ip
   e776e:	d105      	bne.n	e777c <__aeabi_dmul+0x234>
   e7770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   e7774:	bf1c      	itt	ne
   e7776:	4610      	movne	r0, r2
   e7778:	4619      	movne	r1, r3
   e777a:	d10a      	bne.n	e7792 <__aeabi_dmul+0x24a>
   e777c:	ea81 0103 	eor.w	r1, r1, r3
   e7780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e7784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e7788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e778c:	f04f 0000 	mov.w	r0, #0
   e7790:	bd70      	pop	{r4, r5, r6, pc}
   e7792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e7796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   e779a:	bd70      	pop	{r4, r5, r6, pc}

000e779c <__aeabi_ddiv>:
   e779c:	b570      	push	{r4, r5, r6, lr}
   e779e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e77a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e77a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e77aa:	bf1d      	ittte	ne
   e77ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e77b0:	ea94 0f0c 	teqne	r4, ip
   e77b4:	ea95 0f0c 	teqne	r5, ip
   e77b8:	f000 f8a7 	bleq	e790a <__aeabi_ddiv+0x16e>
   e77bc:	eba4 0405 	sub.w	r4, r4, r5
   e77c0:	ea81 0e03 	eor.w	lr, r1, r3
   e77c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e77c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e77cc:	f000 8088 	beq.w	e78e0 <__aeabi_ddiv+0x144>
   e77d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e77d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   e77d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   e77dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   e77e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   e77e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   e77e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   e77ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
   e77f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   e77f4:	429d      	cmp	r5, r3
   e77f6:	bf08      	it	eq
   e77f8:	4296      	cmpeq	r6, r2
   e77fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   e77fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
   e7802:	d202      	bcs.n	e780a <__aeabi_ddiv+0x6e>
   e7804:	085b      	lsrs	r3, r3, #1
   e7806:	ea4f 0232 	mov.w	r2, r2, rrx
   e780a:	1ab6      	subs	r6, r6, r2
   e780c:	eb65 0503 	sbc.w	r5, r5, r3
   e7810:	085b      	lsrs	r3, r3, #1
   e7812:	ea4f 0232 	mov.w	r2, r2, rrx
   e7816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   e781a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   e781e:	ebb6 0e02 	subs.w	lr, r6, r2
   e7822:	eb75 0e03 	sbcs.w	lr, r5, r3
   e7826:	bf22      	ittt	cs
   e7828:	1ab6      	subcs	r6, r6, r2
   e782a:	4675      	movcs	r5, lr
   e782c:	ea40 000c 	orrcs.w	r0, r0, ip
   e7830:	085b      	lsrs	r3, r3, #1
   e7832:	ea4f 0232 	mov.w	r2, r2, rrx
   e7836:	ebb6 0e02 	subs.w	lr, r6, r2
   e783a:	eb75 0e03 	sbcs.w	lr, r5, r3
   e783e:	bf22      	ittt	cs
   e7840:	1ab6      	subcs	r6, r6, r2
   e7842:	4675      	movcs	r5, lr
   e7844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   e7848:	085b      	lsrs	r3, r3, #1
   e784a:	ea4f 0232 	mov.w	r2, r2, rrx
   e784e:	ebb6 0e02 	subs.w	lr, r6, r2
   e7852:	eb75 0e03 	sbcs.w	lr, r5, r3
   e7856:	bf22      	ittt	cs
   e7858:	1ab6      	subcs	r6, r6, r2
   e785a:	4675      	movcs	r5, lr
   e785c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   e7860:	085b      	lsrs	r3, r3, #1
   e7862:	ea4f 0232 	mov.w	r2, r2, rrx
   e7866:	ebb6 0e02 	subs.w	lr, r6, r2
   e786a:	eb75 0e03 	sbcs.w	lr, r5, r3
   e786e:	bf22      	ittt	cs
   e7870:	1ab6      	subcs	r6, r6, r2
   e7872:	4675      	movcs	r5, lr
   e7874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   e7878:	ea55 0e06 	orrs.w	lr, r5, r6
   e787c:	d018      	beq.n	e78b0 <__aeabi_ddiv+0x114>
   e787e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   e7882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   e7886:	ea4f 1606 	mov.w	r6, r6, lsl #4
   e788a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   e788e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   e7892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   e7896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   e789a:	d1c0      	bne.n	e781e <__aeabi_ddiv+0x82>
   e789c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e78a0:	d10b      	bne.n	e78ba <__aeabi_ddiv+0x11e>
   e78a2:	ea41 0100 	orr.w	r1, r1, r0
   e78a6:	f04f 0000 	mov.w	r0, #0
   e78aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   e78ae:	e7b6      	b.n	e781e <__aeabi_ddiv+0x82>
   e78b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e78b4:	bf04      	itt	eq
   e78b6:	4301      	orreq	r1, r0
   e78b8:	2000      	moveq	r0, #0
   e78ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e78be:	bf88      	it	hi
   e78c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e78c4:	f63f aeaf 	bhi.w	e7626 <__aeabi_dmul+0xde>
   e78c8:	ebb5 0c03 	subs.w	ip, r5, r3
   e78cc:	bf04      	itt	eq
   e78ce:	ebb6 0c02 	subseq.w	ip, r6, r2
   e78d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e78d6:	f150 0000 	adcs.w	r0, r0, #0
   e78da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e78de:	bd70      	pop	{r4, r5, r6, pc}
   e78e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   e78e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   e78e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   e78ec:	bfc2      	ittt	gt
   e78ee:	ebd4 050c 	rsbsgt	r5, r4, ip
   e78f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e78f6:	bd70      	popgt	{r4, r5, r6, pc}
   e78f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e78fc:	f04f 0e00 	mov.w	lr, #0
   e7900:	3c01      	subs	r4, #1
   e7902:	e690      	b.n	e7626 <__aeabi_dmul+0xde>
   e7904:	ea45 0e06 	orr.w	lr, r5, r6
   e7908:	e68d      	b.n	e7626 <__aeabi_dmul+0xde>
   e790a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e790e:	ea94 0f0c 	teq	r4, ip
   e7912:	bf08      	it	eq
   e7914:	ea95 0f0c 	teqeq	r5, ip
   e7918:	f43f af3b 	beq.w	e7792 <__aeabi_dmul+0x24a>
   e791c:	ea94 0f0c 	teq	r4, ip
   e7920:	d10a      	bne.n	e7938 <__aeabi_ddiv+0x19c>
   e7922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e7926:	f47f af34 	bne.w	e7792 <__aeabi_dmul+0x24a>
   e792a:	ea95 0f0c 	teq	r5, ip
   e792e:	f47f af25 	bne.w	e777c <__aeabi_dmul+0x234>
   e7932:	4610      	mov	r0, r2
   e7934:	4619      	mov	r1, r3
   e7936:	e72c      	b.n	e7792 <__aeabi_dmul+0x24a>
   e7938:	ea95 0f0c 	teq	r5, ip
   e793c:	d106      	bne.n	e794c <__aeabi_ddiv+0x1b0>
   e793e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e7942:	f43f aefd 	beq.w	e7740 <__aeabi_dmul+0x1f8>
   e7946:	4610      	mov	r0, r2
   e7948:	4619      	mov	r1, r3
   e794a:	e722      	b.n	e7792 <__aeabi_dmul+0x24a>
   e794c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e7950:	bf18      	it	ne
   e7952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e7956:	f47f aec5 	bne.w	e76e4 <__aeabi_dmul+0x19c>
   e795a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   e795e:	f47f af0d 	bne.w	e777c <__aeabi_dmul+0x234>
   e7962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   e7966:	f47f aeeb 	bne.w	e7740 <__aeabi_dmul+0x1f8>
   e796a:	e712      	b.n	e7792 <__aeabi_dmul+0x24a>

000e796c <__gedf2>:
   e796c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   e7970:	e006      	b.n	e7980 <__cmpdf2+0x4>
   e7972:	bf00      	nop

000e7974 <__ledf2>:
   e7974:	f04f 0c01 	mov.w	ip, #1
   e7978:	e002      	b.n	e7980 <__cmpdf2+0x4>
   e797a:	bf00      	nop

000e797c <__cmpdf2>:
   e797c:	f04f 0c01 	mov.w	ip, #1
   e7980:	f84d cd04 	str.w	ip, [sp, #-4]!
   e7984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e7988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e798c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e7990:	bf18      	it	ne
   e7992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   e7996:	d01b      	beq.n	e79d0 <__cmpdf2+0x54>
   e7998:	b001      	add	sp, #4
   e799a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   e799e:	bf0c      	ite	eq
   e79a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   e79a4:	ea91 0f03 	teqne	r1, r3
   e79a8:	bf02      	ittt	eq
   e79aa:	ea90 0f02 	teqeq	r0, r2
   e79ae:	2000      	moveq	r0, #0
   e79b0:	4770      	bxeq	lr
   e79b2:	f110 0f00 	cmn.w	r0, #0
   e79b6:	ea91 0f03 	teq	r1, r3
   e79ba:	bf58      	it	pl
   e79bc:	4299      	cmppl	r1, r3
   e79be:	bf08      	it	eq
   e79c0:	4290      	cmpeq	r0, r2
   e79c2:	bf2c      	ite	cs
   e79c4:	17d8      	asrcs	r0, r3, #31
   e79c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   e79ca:	f040 0001 	orr.w	r0, r0, #1
   e79ce:	4770      	bx	lr
   e79d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e79d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e79d8:	d102      	bne.n	e79e0 <__cmpdf2+0x64>
   e79da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e79de:	d107      	bne.n	e79f0 <__cmpdf2+0x74>
   e79e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e79e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e79e8:	d1d6      	bne.n	e7998 <__cmpdf2+0x1c>
   e79ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e79ee:	d0d3      	beq.n	e7998 <__cmpdf2+0x1c>
   e79f0:	f85d 0b04 	ldr.w	r0, [sp], #4
   e79f4:	4770      	bx	lr
   e79f6:	bf00      	nop

000e79f8 <__aeabi_cdrcmple>:
   e79f8:	4684      	mov	ip, r0
   e79fa:	4610      	mov	r0, r2
   e79fc:	4662      	mov	r2, ip
   e79fe:	468c      	mov	ip, r1
   e7a00:	4619      	mov	r1, r3
   e7a02:	4663      	mov	r3, ip
   e7a04:	e000      	b.n	e7a08 <__aeabi_cdcmpeq>
   e7a06:	bf00      	nop

000e7a08 <__aeabi_cdcmpeq>:
   e7a08:	b501      	push	{r0, lr}
   e7a0a:	f7ff ffb7 	bl	e797c <__cmpdf2>
   e7a0e:	2800      	cmp	r0, #0
   e7a10:	bf48      	it	mi
   e7a12:	f110 0f00 	cmnmi.w	r0, #0
   e7a16:	bd01      	pop	{r0, pc}

000e7a18 <__aeabi_dcmpeq>:
   e7a18:	f84d ed08 	str.w	lr, [sp, #-8]!
   e7a1c:	f7ff fff4 	bl	e7a08 <__aeabi_cdcmpeq>
   e7a20:	bf0c      	ite	eq
   e7a22:	2001      	moveq	r0, #1
   e7a24:	2000      	movne	r0, #0
   e7a26:	f85d fb08 	ldr.w	pc, [sp], #8
   e7a2a:	bf00      	nop

000e7a2c <__aeabi_dcmplt>:
   e7a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   e7a30:	f7ff ffea 	bl	e7a08 <__aeabi_cdcmpeq>
   e7a34:	bf34      	ite	cc
   e7a36:	2001      	movcc	r0, #1
   e7a38:	2000      	movcs	r0, #0
   e7a3a:	f85d fb08 	ldr.w	pc, [sp], #8
   e7a3e:	bf00      	nop

000e7a40 <__aeabi_dcmple>:
   e7a40:	f84d ed08 	str.w	lr, [sp, #-8]!
   e7a44:	f7ff ffe0 	bl	e7a08 <__aeabi_cdcmpeq>
   e7a48:	bf94      	ite	ls
   e7a4a:	2001      	movls	r0, #1
   e7a4c:	2000      	movhi	r0, #0
   e7a4e:	f85d fb08 	ldr.w	pc, [sp], #8
   e7a52:	bf00      	nop

000e7a54 <__aeabi_dcmpge>:
   e7a54:	f84d ed08 	str.w	lr, [sp, #-8]!
   e7a58:	f7ff ffce 	bl	e79f8 <__aeabi_cdrcmple>
   e7a5c:	bf94      	ite	ls
   e7a5e:	2001      	movls	r0, #1
   e7a60:	2000      	movhi	r0, #0
   e7a62:	f85d fb08 	ldr.w	pc, [sp], #8
   e7a66:	bf00      	nop

000e7a68 <__aeabi_dcmpgt>:
   e7a68:	f84d ed08 	str.w	lr, [sp, #-8]!
   e7a6c:	f7ff ffc4 	bl	e79f8 <__aeabi_cdrcmple>
   e7a70:	bf34      	ite	cc
   e7a72:	2001      	movcc	r0, #1
   e7a74:	2000      	movcs	r0, #0
   e7a76:	f85d fb08 	ldr.w	pc, [sp], #8
   e7a7a:	bf00      	nop

000e7a7c <__aeabi_d2uiz>:
   e7a7c:	004a      	lsls	r2, r1, #1
   e7a7e:	d211      	bcs.n	e7aa4 <__aeabi_d2uiz+0x28>
   e7a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e7a84:	d211      	bcs.n	e7aaa <__aeabi_d2uiz+0x2e>
   e7a86:	d50d      	bpl.n	e7aa4 <__aeabi_d2uiz+0x28>
   e7a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e7a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e7a90:	d40e      	bmi.n	e7ab0 <__aeabi_d2uiz+0x34>
   e7a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e7a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e7a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e7a9e:	fa23 f002 	lsr.w	r0, r3, r2
   e7aa2:	4770      	bx	lr
   e7aa4:	f04f 0000 	mov.w	r0, #0
   e7aa8:	4770      	bx	lr
   e7aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e7aae:	d102      	bne.n	e7ab6 <__aeabi_d2uiz+0x3a>
   e7ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e7ab4:	4770      	bx	lr
   e7ab6:	f04f 0000 	mov.w	r0, #0
   e7aba:	4770      	bx	lr

000e7abc <__aeabi_uldivmod>:
   e7abc:	b953      	cbnz	r3, e7ad4 <__aeabi_uldivmod+0x18>
   e7abe:	b94a      	cbnz	r2, e7ad4 <__aeabi_uldivmod+0x18>
   e7ac0:	2900      	cmp	r1, #0
   e7ac2:	bf08      	it	eq
   e7ac4:	2800      	cmpeq	r0, #0
   e7ac6:	bf1c      	itt	ne
   e7ac8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   e7acc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   e7ad0:	f000 b9a2 	b.w	e7e18 <__aeabi_idiv0>
   e7ad4:	f1ad 0c08 	sub.w	ip, sp, #8
   e7ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   e7adc:	f000 f82a 	bl	e7b34 <__udivmoddi4>
   e7ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
   e7ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e7ae8:	b004      	add	sp, #16
   e7aea:	4770      	bx	lr

000e7aec <__aeabi_d2ulz>:
   e7aec:	b5d0      	push	{r4, r6, r7, lr}
   e7aee:	2200      	movs	r2, #0
   e7af0:	4b0e      	ldr	r3, [pc, #56]	; (e7b2c <__aeabi_d2ulz+0x40>)
   e7af2:	4606      	mov	r6, r0
   e7af4:	460f      	mov	r7, r1
   e7af6:	f7ff fd27 	bl	e7548 <__aeabi_dmul>
   e7afa:	f7ff ffbf 	bl	e7a7c <__aeabi_d2uiz>
   e7afe:	4604      	mov	r4, r0
   e7b00:	f7ff fcac 	bl	e745c <__aeabi_ui2d>
   e7b04:	2200      	movs	r2, #0
   e7b06:	4b0a      	ldr	r3, [pc, #40]	; (e7b30 <__aeabi_d2ulz+0x44>)
   e7b08:	f7ff fd1e 	bl	e7548 <__aeabi_dmul>
   e7b0c:	4602      	mov	r2, r0
   e7b0e:	460b      	mov	r3, r1
   e7b10:	4630      	mov	r0, r6
   e7b12:	4639      	mov	r1, r7
   e7b14:	f7ff fb64 	bl	e71e0 <__aeabi_dsub>
   e7b18:	f7ff ffb0 	bl	e7a7c <__aeabi_d2uiz>
   e7b1c:	4623      	mov	r3, r4
   e7b1e:	2200      	movs	r2, #0
   e7b20:	ea42 0200 	orr.w	r2, r2, r0
   e7b24:	4610      	mov	r0, r2
   e7b26:	4619      	mov	r1, r3
   e7b28:	bdd0      	pop	{r4, r6, r7, pc}
   e7b2a:	bf00      	nop
   e7b2c:	3df00000 	.word	0x3df00000
   e7b30:	41f00000 	.word	0x41f00000

000e7b34 <__udivmoddi4>:
   e7b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e7b38:	468c      	mov	ip, r1
   e7b3a:	460e      	mov	r6, r1
   e7b3c:	4604      	mov	r4, r0
   e7b3e:	9d08      	ldr	r5, [sp, #32]
   e7b40:	2b00      	cmp	r3, #0
   e7b42:	d150      	bne.n	e7be6 <__udivmoddi4+0xb2>
   e7b44:	428a      	cmp	r2, r1
   e7b46:	4617      	mov	r7, r2
   e7b48:	d96c      	bls.n	e7c24 <__udivmoddi4+0xf0>
   e7b4a:	fab2 fe82 	clz	lr, r2
   e7b4e:	f1be 0f00 	cmp.w	lr, #0
   e7b52:	d00b      	beq.n	e7b6c <__udivmoddi4+0x38>
   e7b54:	f1ce 0420 	rsb	r4, lr, #32
   e7b58:	fa20 f404 	lsr.w	r4, r0, r4
   e7b5c:	fa01 f60e 	lsl.w	r6, r1, lr
   e7b60:	ea44 0c06 	orr.w	ip, r4, r6
   e7b64:	fa02 f70e 	lsl.w	r7, r2, lr
   e7b68:	fa00 f40e 	lsl.w	r4, r0, lr
   e7b6c:	ea4f 4917 	mov.w	r9, r7, lsr #16
   e7b70:	0c22      	lsrs	r2, r4, #16
   e7b72:	fbbc f0f9 	udiv	r0, ip, r9
   e7b76:	fa1f f887 	uxth.w	r8, r7
   e7b7a:	fb09 c610 	mls	r6, r9, r0, ip
   e7b7e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   e7b82:	fb00 f308 	mul.w	r3, r0, r8
   e7b86:	42b3      	cmp	r3, r6
   e7b88:	d909      	bls.n	e7b9e <__udivmoddi4+0x6a>
   e7b8a:	19f6      	adds	r6, r6, r7
   e7b8c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   e7b90:	f080 8122 	bcs.w	e7dd8 <__udivmoddi4+0x2a4>
   e7b94:	42b3      	cmp	r3, r6
   e7b96:	f240 811f 	bls.w	e7dd8 <__udivmoddi4+0x2a4>
   e7b9a:	3802      	subs	r0, #2
   e7b9c:	443e      	add	r6, r7
   e7b9e:	1af6      	subs	r6, r6, r3
   e7ba0:	b2a2      	uxth	r2, r4
   e7ba2:	fbb6 f3f9 	udiv	r3, r6, r9
   e7ba6:	fb09 6613 	mls	r6, r9, r3, r6
   e7baa:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   e7bae:	fb03 f808 	mul.w	r8, r3, r8
   e7bb2:	45a0      	cmp	r8, r4
   e7bb4:	d909      	bls.n	e7bca <__udivmoddi4+0x96>
   e7bb6:	19e4      	adds	r4, r4, r7
   e7bb8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   e7bbc:	f080 810a 	bcs.w	e7dd4 <__udivmoddi4+0x2a0>
   e7bc0:	45a0      	cmp	r8, r4
   e7bc2:	f240 8107 	bls.w	e7dd4 <__udivmoddi4+0x2a0>
   e7bc6:	3b02      	subs	r3, #2
   e7bc8:	443c      	add	r4, r7
   e7bca:	ebc8 0404 	rsb	r4, r8, r4
   e7bce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   e7bd2:	2100      	movs	r1, #0
   e7bd4:	2d00      	cmp	r5, #0
   e7bd6:	d062      	beq.n	e7c9e <__udivmoddi4+0x16a>
   e7bd8:	fa24 f40e 	lsr.w	r4, r4, lr
   e7bdc:	2300      	movs	r3, #0
   e7bde:	602c      	str	r4, [r5, #0]
   e7be0:	606b      	str	r3, [r5, #4]
   e7be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e7be6:	428b      	cmp	r3, r1
   e7be8:	d907      	bls.n	e7bfa <__udivmoddi4+0xc6>
   e7bea:	2d00      	cmp	r5, #0
   e7bec:	d055      	beq.n	e7c9a <__udivmoddi4+0x166>
   e7bee:	2100      	movs	r1, #0
   e7bf0:	e885 0041 	stmia.w	r5, {r0, r6}
   e7bf4:	4608      	mov	r0, r1
   e7bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e7bfa:	fab3 f183 	clz	r1, r3
   e7bfe:	2900      	cmp	r1, #0
   e7c00:	f040 8090 	bne.w	e7d24 <__udivmoddi4+0x1f0>
   e7c04:	42b3      	cmp	r3, r6
   e7c06:	d302      	bcc.n	e7c0e <__udivmoddi4+0xda>
   e7c08:	4282      	cmp	r2, r0
   e7c0a:	f200 80f8 	bhi.w	e7dfe <__udivmoddi4+0x2ca>
   e7c0e:	1a84      	subs	r4, r0, r2
   e7c10:	eb66 0603 	sbc.w	r6, r6, r3
   e7c14:	2001      	movs	r0, #1
   e7c16:	46b4      	mov	ip, r6
   e7c18:	2d00      	cmp	r5, #0
   e7c1a:	d040      	beq.n	e7c9e <__udivmoddi4+0x16a>
   e7c1c:	e885 1010 	stmia.w	r5, {r4, ip}
   e7c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e7c24:	b912      	cbnz	r2, e7c2c <__udivmoddi4+0xf8>
   e7c26:	2701      	movs	r7, #1
   e7c28:	fbb7 f7f2 	udiv	r7, r7, r2
   e7c2c:	fab7 fe87 	clz	lr, r7
   e7c30:	f1be 0f00 	cmp.w	lr, #0
   e7c34:	d135      	bne.n	e7ca2 <__udivmoddi4+0x16e>
   e7c36:	1bf3      	subs	r3, r6, r7
   e7c38:	ea4f 4817 	mov.w	r8, r7, lsr #16
   e7c3c:	fa1f fc87 	uxth.w	ip, r7
   e7c40:	2101      	movs	r1, #1
   e7c42:	fbb3 f0f8 	udiv	r0, r3, r8
   e7c46:	0c22      	lsrs	r2, r4, #16
   e7c48:	fb08 3610 	mls	r6, r8, r0, r3
   e7c4c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   e7c50:	fb0c f300 	mul.w	r3, ip, r0
   e7c54:	42b3      	cmp	r3, r6
   e7c56:	d907      	bls.n	e7c68 <__udivmoddi4+0x134>
   e7c58:	19f6      	adds	r6, r6, r7
   e7c5a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   e7c5e:	d202      	bcs.n	e7c66 <__udivmoddi4+0x132>
   e7c60:	42b3      	cmp	r3, r6
   e7c62:	f200 80ce 	bhi.w	e7e02 <__udivmoddi4+0x2ce>
   e7c66:	4610      	mov	r0, r2
   e7c68:	1af6      	subs	r6, r6, r3
   e7c6a:	b2a2      	uxth	r2, r4
   e7c6c:	fbb6 f3f8 	udiv	r3, r6, r8
   e7c70:	fb08 6613 	mls	r6, r8, r3, r6
   e7c74:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   e7c78:	fb0c fc03 	mul.w	ip, ip, r3
   e7c7c:	45a4      	cmp	ip, r4
   e7c7e:	d907      	bls.n	e7c90 <__udivmoddi4+0x15c>
   e7c80:	19e4      	adds	r4, r4, r7
   e7c82:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   e7c86:	d202      	bcs.n	e7c8e <__udivmoddi4+0x15a>
   e7c88:	45a4      	cmp	ip, r4
   e7c8a:	f200 80b5 	bhi.w	e7df8 <__udivmoddi4+0x2c4>
   e7c8e:	4613      	mov	r3, r2
   e7c90:	ebcc 0404 	rsb	r4, ip, r4
   e7c94:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   e7c98:	e79c      	b.n	e7bd4 <__udivmoddi4+0xa0>
   e7c9a:	4629      	mov	r1, r5
   e7c9c:	4628      	mov	r0, r5
   e7c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e7ca2:	f1ce 0120 	rsb	r1, lr, #32
   e7ca6:	fa06 f30e 	lsl.w	r3, r6, lr
   e7caa:	fa07 f70e 	lsl.w	r7, r7, lr
   e7cae:	fa20 f901 	lsr.w	r9, r0, r1
   e7cb2:	ea4f 4817 	mov.w	r8, r7, lsr #16
   e7cb6:	40ce      	lsrs	r6, r1
   e7cb8:	ea49 0903 	orr.w	r9, r9, r3
   e7cbc:	fbb6 faf8 	udiv	sl, r6, r8
   e7cc0:	ea4f 4419 	mov.w	r4, r9, lsr #16
   e7cc4:	fb08 661a 	mls	r6, r8, sl, r6
   e7cc8:	fa1f fc87 	uxth.w	ip, r7
   e7ccc:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   e7cd0:	fb0a f20c 	mul.w	r2, sl, ip
   e7cd4:	429a      	cmp	r2, r3
   e7cd6:	fa00 f40e 	lsl.w	r4, r0, lr
   e7cda:	d90a      	bls.n	e7cf2 <__udivmoddi4+0x1be>
   e7cdc:	19db      	adds	r3, r3, r7
   e7cde:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   e7ce2:	f080 8087 	bcs.w	e7df4 <__udivmoddi4+0x2c0>
   e7ce6:	429a      	cmp	r2, r3
   e7ce8:	f240 8084 	bls.w	e7df4 <__udivmoddi4+0x2c0>
   e7cec:	f1aa 0a02 	sub.w	sl, sl, #2
   e7cf0:	443b      	add	r3, r7
   e7cf2:	1a9b      	subs	r3, r3, r2
   e7cf4:	fa1f f989 	uxth.w	r9, r9
   e7cf8:	fbb3 f1f8 	udiv	r1, r3, r8
   e7cfc:	fb08 3311 	mls	r3, r8, r1, r3
   e7d00:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   e7d04:	fb01 f60c 	mul.w	r6, r1, ip
   e7d08:	429e      	cmp	r6, r3
   e7d0a:	d907      	bls.n	e7d1c <__udivmoddi4+0x1e8>
   e7d0c:	19db      	adds	r3, r3, r7
   e7d0e:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   e7d12:	d26b      	bcs.n	e7dec <__udivmoddi4+0x2b8>
   e7d14:	429e      	cmp	r6, r3
   e7d16:	d969      	bls.n	e7dec <__udivmoddi4+0x2b8>
   e7d18:	3902      	subs	r1, #2
   e7d1a:	443b      	add	r3, r7
   e7d1c:	1b9b      	subs	r3, r3, r6
   e7d1e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   e7d22:	e78e      	b.n	e7c42 <__udivmoddi4+0x10e>
   e7d24:	f1c1 0e20 	rsb	lr, r1, #32
   e7d28:	fa22 f40e 	lsr.w	r4, r2, lr
   e7d2c:	408b      	lsls	r3, r1
   e7d2e:	4323      	orrs	r3, r4
   e7d30:	fa20 f70e 	lsr.w	r7, r0, lr
   e7d34:	fa06 f401 	lsl.w	r4, r6, r1
   e7d38:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   e7d3c:	fa26 f60e 	lsr.w	r6, r6, lr
   e7d40:	433c      	orrs	r4, r7
   e7d42:	fbb6 f9fc 	udiv	r9, r6, ip
   e7d46:	0c27      	lsrs	r7, r4, #16
   e7d48:	fb0c 6619 	mls	r6, ip, r9, r6
   e7d4c:	fa1f f883 	uxth.w	r8, r3
   e7d50:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   e7d54:	fb09 f708 	mul.w	r7, r9, r8
   e7d58:	42b7      	cmp	r7, r6
   e7d5a:	fa02 f201 	lsl.w	r2, r2, r1
   e7d5e:	fa00 fa01 	lsl.w	sl, r0, r1
   e7d62:	d908      	bls.n	e7d76 <__udivmoddi4+0x242>
   e7d64:	18f6      	adds	r6, r6, r3
   e7d66:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   e7d6a:	d241      	bcs.n	e7df0 <__udivmoddi4+0x2bc>
   e7d6c:	42b7      	cmp	r7, r6
   e7d6e:	d93f      	bls.n	e7df0 <__udivmoddi4+0x2bc>
   e7d70:	f1a9 0902 	sub.w	r9, r9, #2
   e7d74:	441e      	add	r6, r3
   e7d76:	1bf6      	subs	r6, r6, r7
   e7d78:	b2a0      	uxth	r0, r4
   e7d7a:	fbb6 f4fc 	udiv	r4, r6, ip
   e7d7e:	fb0c 6614 	mls	r6, ip, r4, r6
   e7d82:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   e7d86:	fb04 f808 	mul.w	r8, r4, r8
   e7d8a:	45b8      	cmp	r8, r7
   e7d8c:	d907      	bls.n	e7d9e <__udivmoddi4+0x26a>
   e7d8e:	18ff      	adds	r7, r7, r3
   e7d90:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   e7d94:	d228      	bcs.n	e7de8 <__udivmoddi4+0x2b4>
   e7d96:	45b8      	cmp	r8, r7
   e7d98:	d926      	bls.n	e7de8 <__udivmoddi4+0x2b4>
   e7d9a:	3c02      	subs	r4, #2
   e7d9c:	441f      	add	r7, r3
   e7d9e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   e7da2:	ebc8 0707 	rsb	r7, r8, r7
   e7da6:	fba0 8902 	umull	r8, r9, r0, r2
   e7daa:	454f      	cmp	r7, r9
   e7dac:	4644      	mov	r4, r8
   e7dae:	464e      	mov	r6, r9
   e7db0:	d314      	bcc.n	e7ddc <__udivmoddi4+0x2a8>
   e7db2:	d029      	beq.n	e7e08 <__udivmoddi4+0x2d4>
   e7db4:	b365      	cbz	r5, e7e10 <__udivmoddi4+0x2dc>
   e7db6:	ebba 0304 	subs.w	r3, sl, r4
   e7dba:	eb67 0706 	sbc.w	r7, r7, r6
   e7dbe:	fa07 fe0e 	lsl.w	lr, r7, lr
   e7dc2:	40cb      	lsrs	r3, r1
   e7dc4:	40cf      	lsrs	r7, r1
   e7dc6:	ea4e 0303 	orr.w	r3, lr, r3
   e7dca:	e885 0088 	stmia.w	r5, {r3, r7}
   e7dce:	2100      	movs	r1, #0
   e7dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e7dd4:	4613      	mov	r3, r2
   e7dd6:	e6f8      	b.n	e7bca <__udivmoddi4+0x96>
   e7dd8:	4610      	mov	r0, r2
   e7dda:	e6e0      	b.n	e7b9e <__udivmoddi4+0x6a>
   e7ddc:	ebb8 0402 	subs.w	r4, r8, r2
   e7de0:	eb69 0603 	sbc.w	r6, r9, r3
   e7de4:	3801      	subs	r0, #1
   e7de6:	e7e5      	b.n	e7db4 <__udivmoddi4+0x280>
   e7de8:	4604      	mov	r4, r0
   e7dea:	e7d8      	b.n	e7d9e <__udivmoddi4+0x26a>
   e7dec:	4611      	mov	r1, r2
   e7dee:	e795      	b.n	e7d1c <__udivmoddi4+0x1e8>
   e7df0:	4681      	mov	r9, r0
   e7df2:	e7c0      	b.n	e7d76 <__udivmoddi4+0x242>
   e7df4:	468a      	mov	sl, r1
   e7df6:	e77c      	b.n	e7cf2 <__udivmoddi4+0x1be>
   e7df8:	3b02      	subs	r3, #2
   e7dfa:	443c      	add	r4, r7
   e7dfc:	e748      	b.n	e7c90 <__udivmoddi4+0x15c>
   e7dfe:	4608      	mov	r0, r1
   e7e00:	e70a      	b.n	e7c18 <__udivmoddi4+0xe4>
   e7e02:	3802      	subs	r0, #2
   e7e04:	443e      	add	r6, r7
   e7e06:	e72f      	b.n	e7c68 <__udivmoddi4+0x134>
   e7e08:	45c2      	cmp	sl, r8
   e7e0a:	d3e7      	bcc.n	e7ddc <__udivmoddi4+0x2a8>
   e7e0c:	463e      	mov	r6, r7
   e7e0e:	e7d1      	b.n	e7db4 <__udivmoddi4+0x280>
   e7e10:	4629      	mov	r1, r5
   e7e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e7e16:	bf00      	nop

000e7e18 <__aeabi_idiv0>:
   e7e18:	4770      	bx	lr
   e7e1a:	bf00      	nop

000e7e1c <calloc>:
   e7e1c:	4b02      	ldr	r3, [pc, #8]	; (e7e28 <calloc+0xc>)
   e7e1e:	460a      	mov	r2, r1
   e7e20:	4601      	mov	r1, r0
   e7e22:	6818      	ldr	r0, [r3, #0]
   e7e24:	f000 b84d 	b.w	e7ec2 <_calloc_r>
   e7e28:	2003ba84 	.word	0x2003ba84

000e7e2c <__cxa_atexit>:
   e7e2c:	b510      	push	{r4, lr}
   e7e2e:	4c05      	ldr	r4, [pc, #20]	; (e7e44 <__cxa_atexit+0x18>)
   e7e30:	4613      	mov	r3, r2
   e7e32:	b12c      	cbz	r4, e7e40 <__cxa_atexit+0x14>
   e7e34:	460a      	mov	r2, r1
   e7e36:	4601      	mov	r1, r0
   e7e38:	2002      	movs	r0, #2
   e7e3a:	f3af 8000 	nop.w
   e7e3e:	bd10      	pop	{r4, pc}
   e7e40:	4620      	mov	r0, r4
   e7e42:	bd10      	pop	{r4, pc}
   e7e44:	00000000 	.word	0x00000000

000e7e48 <memcmp>:
   e7e48:	b510      	push	{r4, lr}
   e7e4a:	3901      	subs	r1, #1
   e7e4c:	4402      	add	r2, r0
   e7e4e:	4290      	cmp	r0, r2
   e7e50:	d007      	beq.n	e7e62 <memcmp+0x1a>
   e7e52:	f810 3b01 	ldrb.w	r3, [r0], #1
   e7e56:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e7e5a:	42a3      	cmp	r3, r4
   e7e5c:	d0f7      	beq.n	e7e4e <memcmp+0x6>
   e7e5e:	1b18      	subs	r0, r3, r4
   e7e60:	bd10      	pop	{r4, pc}
   e7e62:	2000      	movs	r0, #0
   e7e64:	bd10      	pop	{r4, pc}

000e7e66 <memcpy>:
   e7e66:	b510      	push	{r4, lr}
   e7e68:	1e43      	subs	r3, r0, #1
   e7e6a:	440a      	add	r2, r1
   e7e6c:	4291      	cmp	r1, r2
   e7e6e:	d004      	beq.n	e7e7a <memcpy+0x14>
   e7e70:	f811 4b01 	ldrb.w	r4, [r1], #1
   e7e74:	f803 4f01 	strb.w	r4, [r3, #1]!
   e7e78:	e7f8      	b.n	e7e6c <memcpy+0x6>
   e7e7a:	bd10      	pop	{r4, pc}

000e7e7c <memmove>:
   e7e7c:	4288      	cmp	r0, r1
   e7e7e:	b510      	push	{r4, lr}
   e7e80:	eb01 0302 	add.w	r3, r1, r2
   e7e84:	d801      	bhi.n	e7e8a <memmove+0xe>
   e7e86:	1e42      	subs	r2, r0, #1
   e7e88:	e00b      	b.n	e7ea2 <memmove+0x26>
   e7e8a:	4298      	cmp	r0, r3
   e7e8c:	d2fb      	bcs.n	e7e86 <memmove+0xa>
   e7e8e:	1881      	adds	r1, r0, r2
   e7e90:	1ad2      	subs	r2, r2, r3
   e7e92:	42d3      	cmn	r3, r2
   e7e94:	d004      	beq.n	e7ea0 <memmove+0x24>
   e7e96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   e7e9a:	f801 4d01 	strb.w	r4, [r1, #-1]!
   e7e9e:	e7f8      	b.n	e7e92 <memmove+0x16>
   e7ea0:	bd10      	pop	{r4, pc}
   e7ea2:	4299      	cmp	r1, r3
   e7ea4:	d004      	beq.n	e7eb0 <memmove+0x34>
   e7ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
   e7eaa:	f802 4f01 	strb.w	r4, [r2, #1]!
   e7eae:	e7f8      	b.n	e7ea2 <memmove+0x26>
   e7eb0:	bd10      	pop	{r4, pc}

000e7eb2 <memset>:
   e7eb2:	4402      	add	r2, r0
   e7eb4:	4603      	mov	r3, r0
   e7eb6:	4293      	cmp	r3, r2
   e7eb8:	d002      	beq.n	e7ec0 <memset+0xe>
   e7eba:	f803 1b01 	strb.w	r1, [r3], #1
   e7ebe:	e7fa      	b.n	e7eb6 <memset+0x4>
   e7ec0:	4770      	bx	lr

000e7ec2 <_calloc_r>:
   e7ec2:	b538      	push	{r3, r4, r5, lr}
   e7ec4:	fb02 f401 	mul.w	r4, r2, r1
   e7ec8:	4621      	mov	r1, r4
   e7eca:	f7fd fe59 	bl	e5b80 <_malloc_r>
   e7ece:	4605      	mov	r5, r0
   e7ed0:	b118      	cbz	r0, e7eda <_calloc_r+0x18>
   e7ed2:	4622      	mov	r2, r4
   e7ed4:	2100      	movs	r1, #0
   e7ed6:	f7ff ffec 	bl	e7eb2 <memset>
   e7eda:	4628      	mov	r0, r5
   e7edc:	bd38      	pop	{r3, r4, r5, pc}
	...

000e7ee0 <srand>:
   e7ee0:	b538      	push	{r3, r4, r5, lr}
   e7ee2:	4b12      	ldr	r3, [pc, #72]	; (e7f2c <srand+0x4c>)
   e7ee4:	681c      	ldr	r4, [r3, #0]
   e7ee6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e7ee8:	4605      	mov	r5, r0
   e7eea:	b9d3      	cbnz	r3, e7f22 <srand+0x42>
   e7eec:	2018      	movs	r0, #24
   e7eee:	f7fd fe1f 	bl	e5b30 <malloc>
   e7ef2:	f243 330e 	movw	r3, #13070	; 0x330e
   e7ef6:	63a0      	str	r0, [r4, #56]	; 0x38
   e7ef8:	8003      	strh	r3, [r0, #0]
   e7efa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   e7efe:	8043      	strh	r3, [r0, #2]
   e7f00:	f241 2334 	movw	r3, #4660	; 0x1234
   e7f04:	8083      	strh	r3, [r0, #4]
   e7f06:	f24e 636d 	movw	r3, #58989	; 0xe66d
   e7f0a:	80c3      	strh	r3, [r0, #6]
   e7f0c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   e7f10:	8103      	strh	r3, [r0, #8]
   e7f12:	2305      	movs	r3, #5
   e7f14:	8143      	strh	r3, [r0, #10]
   e7f16:	230b      	movs	r3, #11
   e7f18:	8183      	strh	r3, [r0, #12]
   e7f1a:	2201      	movs	r2, #1
   e7f1c:	2300      	movs	r3, #0
   e7f1e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e7f22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e7f24:	2200      	movs	r2, #0
   e7f26:	611d      	str	r5, [r3, #16]
   e7f28:	615a      	str	r2, [r3, #20]
   e7f2a:	bd38      	pop	{r3, r4, r5, pc}
   e7f2c:	2003ba84 	.word	0x2003ba84

000e7f30 <strcpy>:
   e7f30:	4603      	mov	r3, r0
   e7f32:	f811 2b01 	ldrb.w	r2, [r1], #1
   e7f36:	f803 2b01 	strb.w	r2, [r3], #1
   e7f3a:	2a00      	cmp	r2, #0
   e7f3c:	d1f9      	bne.n	e7f32 <strcpy+0x2>
   e7f3e:	4770      	bx	lr

000e7f40 <strlen>:
   e7f40:	4603      	mov	r3, r0
   e7f42:	f813 2b01 	ldrb.w	r2, [r3], #1
   e7f46:	2a00      	cmp	r2, #0
   e7f48:	d1fb      	bne.n	e7f42 <strlen+0x2>
   e7f4a:	1a18      	subs	r0, r3, r0
   e7f4c:	3801      	subs	r0, #1
   e7f4e:	4770      	bx	lr

000e7f50 <strstr>:
   e7f50:	b5f0      	push	{r4, r5, r6, r7, lr}
   e7f52:	7803      	ldrb	r3, [r0, #0]
   e7f54:	b963      	cbnz	r3, e7f70 <strstr+0x20>
   e7f56:	780b      	ldrb	r3, [r1, #0]
   e7f58:	2b00      	cmp	r3, #0
   e7f5a:	bf18      	it	ne
   e7f5c:	2000      	movne	r0, #0
   e7f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e7f60:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   e7f64:	b162      	cbz	r2, e7f80 <strstr+0x30>
   e7f66:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   e7f6a:	4297      	cmp	r7, r2
   e7f6c:	4630      	mov	r0, r6
   e7f6e:	d0f7      	beq.n	e7f60 <strstr+0x10>
   e7f70:	4603      	mov	r3, r0
   e7f72:	1c46      	adds	r6, r0, #1
   e7f74:	7800      	ldrb	r0, [r0, #0]
   e7f76:	b110      	cbz	r0, e7f7e <strstr+0x2e>
   e7f78:	1e4d      	subs	r5, r1, #1
   e7f7a:	1e5c      	subs	r4, r3, #1
   e7f7c:	e7f0      	b.n	e7f60 <strstr+0x10>
   e7f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e7f80:	4618      	mov	r0, r3
   e7f82:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e7f84 <gettimeofday>:
   e7f84:	4b02      	ldr	r3, [pc, #8]	; (e7f90 <gettimeofday+0xc>)
   e7f86:	460a      	mov	r2, r1
   e7f88:	4601      	mov	r1, r0
   e7f8a:	6818      	ldr	r0, [r3, #0]
   e7f8c:	f000 b802 	b.w	e7f94 <_gettimeofday_r>
   e7f90:	2003ba84 	.word	0x2003ba84

000e7f94 <_gettimeofday_r>:
   e7f94:	b538      	push	{r3, r4, r5, lr}
   e7f96:	4c07      	ldr	r4, [pc, #28]	; (e7fb4 <_gettimeofday_r+0x20>)
   e7f98:	2300      	movs	r3, #0
   e7f9a:	4605      	mov	r5, r0
   e7f9c:	4608      	mov	r0, r1
   e7f9e:	4611      	mov	r1, r2
   e7fa0:	6023      	str	r3, [r4, #0]
   e7fa2:	f7fb fc29 	bl	e37f8 <_gettimeofday>
   e7fa6:	1c43      	adds	r3, r0, #1
   e7fa8:	d102      	bne.n	e7fb0 <_gettimeofday_r+0x1c>
   e7faa:	6823      	ldr	r3, [r4, #0]
   e7fac:	b103      	cbz	r3, e7fb0 <_gettimeofday_r+0x1c>
   e7fae:	602b      	str	r3, [r5, #0]
   e7fb0:	bd38      	pop	{r3, r4, r5, pc}
   e7fb2:	bf00      	nop
   e7fb4:	2003e7ec 	.word	0x2003e7ec

000e7fb8 <dynalib_user>:
   e7fb8:	000d4021 000d405d 000d4089 000d408d     !@..]@...@...@..
   e7fc8:	00000000                                ....

000e7fcc <_ZL11awsRootCert>:
   e7fcc:	2d2d2d2d 4745422d 43204e49 49545245     -----BEGIN CERTI
   e7fdc:	41434946 2d2d4554 0d2d2d2d 49494d0a     FICATE-----..MII
   e7fec:	43545144 6d694143 49774167 49674142     DQTCCAimgAwIBAgI
   e7ffc:	796d4254 6d357a66 6f416a2f 42763435     TBmyfz5m/jAo54vB
   e800c:	506b6934 5a6a6c6d 416a7962 6b67424e     4ikPmljZbyjANBgk
   e801c:	696b6871 30773947 73514142 2a0a0d46     qhkiG9w0BAQsF..*
   e802c:	2a2a2a2a 0d2a2a2a 5871720a 6f626652     *******..rqXRfbo
   e803c:	5a6f6e51 71344773 50545735 53383634     QnoZsG4q5WTP468S
   e804c:	47767651 2d0a0d35 2d2d2d2d 20444e45     QvvG5..-----END 
   e805c:	54524543 43494649 2d455441 2d2d2d2d     CERTIFICATE-----
   e806c:	72615000 6c636974 00315f65 736e6573     .Particle_1.sens
   e807c:	742f726f 65706d65 75746172 2a006572     or/temperature.*
   e808c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   e809c:	6f692e2a 75652e74 6e65632d 6c617274     *.iot.eu-central
   e80ac:	612e312d 6f7a616d 7377616e 6d6f632e     -1.amazonaws.com
	...

000e80bd <_ZL13awsClientCert>:
   e80bd:	2d2d2d2d 4745422d 43204e49 49545245     -----BEGIN CERTI
   e80cd:	41434946 2d2d4554 0d2d2d2d 49494d0a     FICATE-----..MII
   e80dd:	43545744 476b4143 49774167 49674142     DWTCCAkGgAwIBAgI
   e80ed:	34394e55 76594764 6f4a5473 77765165     UN94dGYvsTJoeQvw
   e80fd:	4a367a78 64634a67 556a574f 59514477     xz6JgJcdOWjUwDQY
   e810d:	5a6f4b4a 63766849 4551414e 2a0a0d4c     JKoZIhvcNAQEL..*
   e811d:	2a2a2a2a 0a0d2a2a 76476449 726c6f4f     ******..IdGvOolr
   e812d:	424b6a72 79476168 346a7475 33537356     rjKBhaGyutj4VsS3
   e813d:	38555a4c 69617268 51722b69 35446679     LZU8hraii+rQyfD5
   e814d:	4d374a70 2b517138 56444f30 38623733     pJ7M8qQ+0ODV37b8
   e815d:	5939624e 2d2d0a0d 452d2d2d 4320444e     Nb9Y..-----END C
   e816d:	49545245 41434946 2d2d4554 002d2d2d     ERTIFICATE-----.

000e817d <_ZL12awsClientKey>:
   e817d:	2d2d2d2d 4745422d 52204e49 50204153     -----BEGIN RSA P
   e818d:	41564952 4b204554 2d2d5945 0d2d2d2d     RIVATE KEY-----.
   e819d:	49494d0a 49776f45 4b414142 45514143     .MIIEowIBAAKCAQE
   e81ad:	53643241 73482f2b 4e434749 74306436     A2dS+/HsIGCN6d0t
   e81bd:	5a422b7a 4e653851 4f38316a 4e6a7969     z+BZQ8eNj18OiyjN
   e81cd:	76657a42 4a644551 4b527434 67586663     BzevQEdJ4tRKcfXg
   e81dd:	2a0d0d6b 2a2a2a2a 4a0a0d2a 556c726e     k..******..JnrlU
   e81ed:	45373377 49484d5a 46464536 56614138     w37EZMHI6EFF8AaV
   e81fd:	73475248 674f6f68 39583865 57386758     HRGshoOge8X9Xg8W
   e820d:	776c654a 5a546b54 6c38336f 0d557a5a     JelwTkTZo38lZzU.
   e821d:	2d2d2d0a 4e452d2d 53522044 52502041     .-----END RSA PR
   e822d:	54415649 454b2045 2d2d2d59 00002d2d     IVATE KEY-----..
   e823d:	49514d06 03706473 514d0400 20045454     .MQIsdp...MQTT. 
   e824d:	00202120 252e6425 64252e64 0064252e      ! .%d.%d.%d.%d.

000e825d <_ZL14base64_dec_map>:
   e825d:	7f7f7f7f 7f7f7f7f 7f7f7f7f 7f7f7f7f     ................
   e826d:	7f7f7f7f 7f7f7f7f 7f7f7f7f 7f7f7f7f     ................
   e827d:	7f7f7f7f 7f7f7f7f 3e7f7f7f 3f7f7f7f     ...........>...?
   e828d:	37363534 3b3a3938 7f7f3d3c 7f7f407f     456789:;<=...@..
   e829d:	0201007f 06050403 0a090807 0e0d0c0b     ................
   e82ad:	1211100f 16151413 7f191817 7f7f7f7f     ................
   e82bd:	1c1b1a7f 201f1e1d 24232221 28272625     ....... !"#$%&'(
   e82cd:	2c2b2a29 302f2e2d 7f333231 7f7f7f7f     )*+,-./0123.....
   e82dd:	04000000                                         ...

000e82e0 <_ZL16aes_256_ecb_info>:
   e82e0:	00000104 00000100 000e83c0 00000000     ................
   e82f0:	00000000 00000010 000e8384              ............

000e82fc <_ZL16aes_128_ecb_info>:
   e82fc:	00000102 00000080 000e83d8 00000000     ................
   e830c:	00000000 00000010 000e8384              ............

000e8318 <_ZL12gcm_aes_info>:
   e8318:	00000002 00000000 000d7d3f 000d7d3f     ........?}..?}..
   e8328:	000d7d27 000d7d15                       '}...}..

000e8330 <mbedtls_cipher_definitions>:
   e8330:	00000002 000e82fc 00000003 000e83e4     ................
   e8340:	00000004 000e82e0 0000000e 000e8400     ................
   e8350:	0000000f 000e8368 00000010 000e841c     ....h...........
	...

000e8368 <_ZL16aes_192_gcm_info>:
   e8368:	0000060f 000000c0 000e83a8 0000000c     ................
   e8378:	00000001 00000010 000e8318              ............

000e8384 <_ZL8aes_info>:
   e8384:	00000002 000d7d7b 000d7d77 000d7d73     ....{}..w}..s}..
   e8394:	000d7d5b 000d7d49 2d534541 2d363532     [}..I}..AES-256-
   e83a4:	004d4347 2d534541 2d323931 004d4347     GCM.AES-192-GCM.
   e83b4:	2d534541 2d383231 004d4347 2d534541     AES-128-GCM.AES-
   e83c4:	2d363532 00424345 2d534541 2d323931     256-ECB.AES-192-
   e83d4:	00424345 2d534541 2d383231 00424345     ECB.AES-128-ECB.

000e83e4 <_ZL16aes_192_ecb_info>:
   e83e4:	00000103 000000c0 000e83cc 00000000     ................
   e83f4:	00000000 00000010 000e8384              ............

000e8400 <_ZL16aes_128_gcm_info>:
   e8400:	0000060e 00000080 000e83b4 0000000c     ................
   e8410:	00000001 00000010 000e8318              ............

000e841c <_ZL16aes_256_gcm_info>:
   e841c:	00000610 00000100 000e839c 0000000c     ................
   e842c:	00000001 00000010 000e8318 70636573     ............secp
   e843c:	72363532 00000031                       256r1...

000e8444 <_ZL20ecp_supported_curves>:
   e8444:	00170003 00000100 000e8438 00000000     ........8.......
	...

000e845c <_ZL11secp256r1_b>:
   e845c:	27d2604b 3bce3c3e cc53b0f6 651d06b0     K`.'><.;..S....e
   e846c:	769886bc b3ebbd55 aa3a93e7 5ac635d8     ...vU.....:..5.Z

000e847c <_ZL11secp256r1_n>:
   e847c:	fc632551 f3b9cac2 a7179e84 bce6faad     Q%c.............
   e848c:	ffffffff ffffffff 00000000 ffffffff     ................

000e849c <_ZL11secp256r1_p>:
   e849c:	ffffffff ffffffff ffffffff 00000000     ................
	...
   e84b4:	00000001 ffffffff                       ........

000e84bc <_ZL12secp256r1_gx>:
   e84bc:	d898c296 f4a13945 2deb33a0 77037d81     ....E9...3.-.}.w
   e84cc:	63a440f2 f8bce6e5 e12c4247 6b17d1f2     .@.c....GB,....k

000e84dc <_ZL12secp256r1_gy>:
   e84dc:	37bf51f5 cbb64068 6b315ece 2bce3357     .Q.7h@...^1kW3.+
   e84ec:	7c0f9e16 8ee7eb4a fe1a7f9b 4fe342e2     ...|J........B.O
   e84fc:	00000000                                ....

000e8500 <_ZL5last4>:
	...
   e8508:	00001c20 00000000 00003840 00000000      .......@8......
   e8518:	00002460 00000000 00007080 00000000     `$.......p......
   e8528:	00006ca0 00000000 000048c0 00000000     .l.......H......
   e8538:	000054e0 00000000 0000e100 00000000     .T..............
   e8548:	0000fd20 00000000 0000d940 00000000      .......@.......
   e8558:	0000c560 00000000 00009180 00000000     `...............
   e8568:	00008da0 00000000 0000a9c0 00000000     ................
   e8578:	0000b5e0 00000000                       ........

000e8580 <CSWTCH.35>:
   e8580:	000e8594 000e85c4 000e8654 000e85f4     ........T.......
   e8590:	000e8624                                $...

000e8594 <mbedtls_sha1_info>:
   e8594:	00000004 000e8c84 00000014 00000040     ............@...
   e85a4:	000dac45 000dac41 000dac3d 000df205     E...A...=.......
   e85b4:	000dac27 000dac15 000dac11 000dac0d     '...............

000e85c4 <mbedtls_sha224_info>:
   e85c4:	00000005 000e8caf 0000001c 00000040     ............@...
   e85d4:	000dac8d 000dac89 000dac85 000dac79     ............y...
   e85e4:	000dac63 000dac51 000dac4d 000dac49     c...Q...M...I...

000e85f4 <mbedtls_sha384_info>:
   e85f4:	00000007 000e8d09 00000030 00000080     ........0.......
   e8604:	000dacdd 000dacd9 000dacd5 000dacc9     ................
   e8614:	000dacb3 000daca1 000dac9d 000dac99     ................

000e8624 <mbedtls_sha512_info>:
   e8624:	00000008 000e8d36 00000040 00000080     ....6...@.......
   e8634:	000dace3 000dacd9 000dacd5 000daccf     ................
   e8644:	000dacb3 000daca1 000dac9d 000dac99     ................

000e8654 <mbedtls_sha256_info>:
   e8654:	00000006 000e8cdc 00000020 00000040     ........ ...@...
   e8664:	000dac93 000dac89 000dac85 000dac7f     ................
   e8674:	000dac63 000dac51 000dac4d 000dac49     c...Q...M...I...

000e8684 <_ZL18oid_x520_attr_type>:
   e8684:	000e8f39 00000003 000e8f3d 000e8f4e     9.......=...N...
   e8694:	000ea59a 000e8f5a 00000003 000e8f5e     ....Z.......^...
   e86a4:	000e8f70 000e8af5 000e8f78 00000003     p.......x.......
   e86b4:	000e8f7c 000e8f8b 000e8f94 000e8f96     |...............
   e86c4:	00000003 000e8f9a 000e8fa6 000e8fac     ................
   e86d4:	000e8faf 00000003 000e8fb3 000e8fca     ................
   e86e4:	000e8fd7 000e8fd9 00000003 000e8fdd     ................
   e86f4:	000e8ffa 000e9003 000e9006 00000009     ................
   e8704:	000e9010 000e901d 000e9010 000e902c     ............,...
   e8714:	00000003 000e9030 000e9043 000e9036     ....0...C...6...
   e8724:	000e9051 00000003 000e9055 000e9069     Q.......U...i...
   e8734:	000e905b 000e9078 00000003 000e907c     [...x.......|...
   e8744:	000e908d 000e9082 000e9099 00000003     ................
   e8754:	000e909d 000e90ab 000e90b3 000e90b6     ................
   e8764:	00000003 000e90ba 000e90ca 000e90d5     ................
   e8774:	000e90d8 00000003 000e90dc 000e90eb     ................
   e8784:	000e90e2 000e90f4 00000003 000e90f8     ................
   e8794:	000e9112 000e90fe 000e9127 00000003     ........'.......
   e87a4:	000e912b 000e9137 000e9131 000e913d     +...7...1...=...
   e87b4:	00000003 000e9141 000e9153 000e9147     ....A...S...G...
   e87c4:	000e9170 00000003 000e9174 000e9184     p.......t.......
   e87d4:	000e917a 000e918e 0000000a 000e9199     z...............
   e87e4:	000e91ac 000e91bd 000e91c0 00000003     ................
   e87f4:	000e91c4 000e91db 000e91ca 00000000     ................
	...

000e8814 <_ZL17oid_ext_key_usage>:
   e8814:	000e8d52 00000008 000e8d5b 000e8d6c     R.......[...l...
   e8824:	000e8d8a 00000008 000e8d93 000e8da4     ................
   e8834:	000e8dc2 00000008 000e8dcb 000e8ddd     ................
   e8844:	000e8dea 00000008 000e8df3 000e8e09     ................
   e8854:	000e8e1b 00000008 000e8e24 000e8e37     ........$...7...
   e8864:	000e8e45 00000008 000e8e4e 000e8e60     E.......N...`...
	...

000e8884 <_ZL10oid_pk_alg>:
   e8884:	000e8b00 00000009 000e8b0a 000e8b18     ................
   e8894:	00000001 000e8b1c 00000007 000e8b24     ............$...
   e88a4:	000e8b33 00000002 000e8b42 00000005     3.......B.......
   e88b4:	000e8b48 000e8b50 00000003 00000000     H...P...........
	...

000e88d4 <_ZL14oid_cipher_alg>:
   e88d4:	000e8ac7 00000005 000e8acd 000e89a3     ................
   e88e4:	00000021 000e8ad4 00000008 000e8add     !...............
   e88f4:	000e8aea 00000025 00000000 00000000     ....%...........
	...

000e8910 <_ZL11oid_ecp_grp>:
   e8910:	000e8af7 00000008 000e8438 000e8438     ........8...8...
   e8920:	00000003 00000000 00000000 00000000     ................
	...
   e8938:	8648862a 0c010df7 70000301 69576562     *.H........pbeWi
   e8948:	48536874 646e4141 654b2d33 69725479     thSHAAnd3-KeyTri
   e8958:	44656c70 432d5345 50004342 77204542     pleDES-CBC.PBE w
   e8968:	20687469 31414853 646e6120 4b2d3320     ith SHA1 and 3-K
   e8978:	33207965 00534544 8648862a 0c010df7     ey 3DES.*.H.....
   e8988:	70000401 69576562 48536874 646e4141     ...pbeWithSHAAnd
   e8998:	654b2d32 69725479 44656c70 432d5345     2-KeyTripleDES-C
   e89a8:	50004342 77204542 20687469 31414853     BC.PBE with SHA1
   e89b8:	646e6120 4b2d3220 33207965 00534544      and 2-Key 3DES.
   e89c8:	8648862a 07020df7 616d6800 41485363     *.H......hmacSHA
   e89d8:	4d480031 532d4341 312d4148 48862a00     1.HMAC-SHA-1.*.H
   e89e8:	020df786 6d680008 48536361 34323241     ......hmacSHA224
   e89f8:	414d4800 48532d43 32322d41 862a0034     .HMAC-SHA-224.*.
   e8a08:	0df78648 68000902 5363616d 35324148     H......hmacSHA25
   e8a18:	4d480036 532d4341 322d4148 2a003635     6.HMAC-SHA-256.*
   e8a28:	f7864886 000a020d 63616d68 33414853     .H......hmacSHA3
   e8a38:	48003438 2d43414d 2d414853 00343833     84.HMAC-SHA-384.
   e8a48:	8648862a 0b020df7 616d6800 41485363     *.H......hmacSHA
   e8a58:	00323135 43414d48 4148532d 3231352d     512.HMAC-SHA-512
   e8a68:	030e2b00 69001a02 68732d64 60003161     .+.....id-sha1.`
   e8a78:	65014886 04020403 2d646900 32616873     .H.e.....id-sha2
   e8a88:	60003432 65014886 01020403 2d646900     24.`.H.e.....id-
   e8a98:	32616873 60003635 65014886 02020403     sha256.`.H.e....
   e8aa8:	2d646900 33616873 60003438 65014886     .id-sha384.`.H.e
   e8ab8:	03020403 2d646900 35616873 2b003231     .....id-sha512.+
   e8ac8:	0702030e 73656400 00434243 8648862a     .....desCBC.*.H.
   e8ad8:	07030df7 73656400 6564652d 62632d33     .....des-ede3-cb
   e8ae8:	45440063 44452d53 432d3345 2a004342     c.DES-EDE3-CBC.*
   e8af8:	3dce4886 00070103 8648862a 01010df7     .H.=....*.H.....
   e8b08:	73720001 636e4561 74707972 006e6f69     ..rsaEncryption.
   e8b18:	00415352 ce48862a 0001023d 652d6469     RSA.*.H.=...id-e
   e8b28:	62755063 4b63696c 47007965 72656e65     cPublicKey.Gener
   e8b38:	45206369 656b2043 812b0079 000c0104     ic EC key.+.....
   e8b48:	652d6469 00484463 6b204345 66207965     id-ecDH.EC key f
   e8b58:	4520726f 00484443 8648862a 01010df7     or ECDH.*.H.....
   e8b68:	68730005 57312d61 52687469 6e454153     ..sha-1WithRSAEn
   e8b78:	70797263 6e6f6974 41535200 74697720     cryption.RSA wit
   e8b88:	48532068 2a003141 f7864886 0e01010d     h SHA1.*.H......
   e8b98:	61687300 57343232 52687469 6e454153     .sha224WithRSAEn
   e8ba8:	70797263 6e6f6974 41535200 74697720     cryption.RSA wit
   e8bb8:	48532068 32322d41 862a0034 0df78648     h SHA-224.*.H...
   e8bc8:	000b0101 32616873 69573635 53526874     ....sha256WithRS
   e8bd8:	636e4541 74707972 006e6f69 20415352     AEncryption.RSA 
   e8be8:	68746977 41485320 3635322d 48862a00     with SHA-256.*.H
   e8bf8:	010df786 73000c01 38336168 74695734     .......sha384Wit
   e8c08:	41535268 72636e45 69747079 52006e6f     hRSAEncryption.R
   e8c18:	77204153 20687469 2d414853 00343833     SA with SHA-384.
   e8c28:	8648862a 01010df7 6873000d 32313561     *.H.......sha512
   e8c38:	68746957 45415352 7972636e 6f697470     WithRSAEncryptio
   e8c48:	5352006e 69772041 53206874 352d4148     n.RSA with SHA-5
   e8c58:	2b003231 1d02030e 48862a00 01043dce     12.+.....*.H.=..
   e8c68:	64636500 772d6173 2d687469 31414853     .ecdsa-with-SHA1
   e8c78:	44434500 77204153 20687469 31414853     .ECDSA with SHA1
   e8c88:	48862a00 03043dce 63650001 2d617364     .*.H.=....ecdsa-
   e8c98:	68746977 4148532d 00343232 53444345     with-SHA224.ECDS
   e8ca8:	69772041 53206874 32324148 862a0034     A with SHA224.*.
   e8cb8:	043dce48 65000203 61736463 7469772d     H.=....ecdsa-wit
   e8cc8:	48532d68 36353241 44434500 77204153     h-SHA256.ECDSA w
   e8cd8:	20687469 32414853 2a003635 3dce4886     ith SHA256.*.H.=
   e8ce8:	00030304 73646365 69772d61 532d6874     ....ecdsa-with-S
   e8cf8:	38334148 43450034 20415344 68746977     HA384.ECDSA with
   e8d08:	41485320 00343833 ce48862a 0403043d      SHA384.*.H.=...
   e8d18:	64636500 772d6173 2d687469 35414853     .ecdsa-with-SHA5
   e8d28:	45003231 41534443 74697720 48532068     12.ECDSA with SH
   e8d38:	32313541 48862a00 010df786 52000a01     A512.*.H.......R
   e8d48:	53534153 53502d41 062b0053 07050501     SASSA-PSS.+.....
   e8d58:	69000103 706b2d64 7265732d 41726576     ...id-kp-serverA
   e8d68:	00687475 20534c54 20626557 76726553     uth.TLS Web Serv
   e8d78:	41207265 65687475 6369746e 6f697461     er Authenticatio
   e8d88:	062b006e 07050501 69000203 706b2d64     n.+........id-kp
   e8d98:	696c632d 41746e65 00687475 20534c54     -clientAuth.TLS 
   e8da8:	20626557 65696c43 4120746e 65687475     Web Client Authe
   e8db8:	6369746e 6f697461 062b006e 07050501     ntication.+.....
   e8dc8:	69000303 706b2d64 646f632d 67695365     ...id-kp-codeSig
   e8dd8:	676e696e 646f4300 69532065 6e696e67     ning.Code Signin
   e8de8:	062b0067 07050501 69000403 706b2d64     g.+........id-kp
   e8df8:	616d652d 72506c69 6365746f 6e6f6974     -emailProtection
   e8e08:	6d2d4500 206c6961 746f7250 69746365     .E-mail Protecti
   e8e18:	2b006e6f 05050106 00080307 6b2d6469     on.+........id-k
   e8e28:	69742d70 7453656d 69706d61 5400676e     p-timeStamping.T
   e8e38:	20656d69 6d617453 676e6970 01062b00     ime Stamping.+..
   e8e48:	03070505 64690009 2d706b2d 5053434f     ......id-kp-OCSP
   e8e58:	6e676953 00676e69 5053434f 67695320     Signing.OCSP Sig
   e8e68:	676e696e 131d5500 2d646900 622d6563     ning.U...id-ce-b
   e8e78:	63697361 736e6f43 69617274 0073746e     asicConstraints.
   e8e88:	69736142 6f432063 7274736e 746e6961     Basic Constraint
   e8e98:	1d550073 6469000f 2d65632d 5579656b     s.U...id-ce-keyU
   e8ea8:	65676173 251d5500 2d646900 652d6563     sage.U.%.id-ce-e
   e8eb8:	654b7478 61735579 45006567 6e657478     xtKeyUsage.Exten
   e8ec8:	20646564 2079654b 67617355 1d550065     ded Key Usage.U.
   e8ed8:	64690011 2d65632d 6a627573 41746365     ..id-ce-subjectA
   e8ee8:	614e746c 5300656d 656a6275 41207463     ltName.Subject A
   e8ef8:	4e20746c 00656d61 01488660 0142f886     lt Name.`.H...B.
   e8f08:	64690001 74656e2d 70616373 65632d65     ..id-netscape-ce
   e8f18:	79747472 4e006570 63737465 20657061     rttype.Netscape 
   e8f28:	74726543 63696669 20657461 65707954     Certificate Type
   e8f38:	03045500 2d646900 632d7461 6f6d6d6f     .U...id-at-commo
   e8f48:	6d614e6e 6f430065 6e6f6d6d 6d614e20     nName.Common Nam
   e8f58:	04550065 64690006 2d74612d 6e756f63     e.U...id-at-coun
   e8f68:	4e797274 00656d61 6e756f43 00797274     tryName.Country.
   e8f78:	00070455 612d6469 6f6c2d74 696c6163     U...id-at-locali
   e8f88:	4c007974 6c61636f 00797469 0455004c     ty.Locality.L.U.
   e8f98:	64690008 2d74612d 74617473 74530065     ..id-at-state.St
   e8fa8:	00657461 55005453 69000a04 74612d64     ate.ST.U...id-at
   e8fb8:	67726f2d 7a696e61 6f697461 6d614e6e     -organizationNam
   e8fc8:	724f0065 696e6167 6974617a 4f006e6f     e.Organization.O
   e8fd8:	0b045500 2d646900 6f2d7461 6e616772     .U...id-at-organ
   e8fe8:	74617a69 616e6f69 696e556c 6d614e74     izationalUnitNam
   e8ff8:	724f0065 6e552067 4f007469 862a0055     e.Org Unit.OU.*.
   e9008:	0df78648 00010901 69616d65 6464416c     H.......emailAdd
   e9018:	73736572 6d2d4500 206c6961 72646461     ress.E-mail addr
   e9028:	00737365 00050455 612d6469 65732d74     ess.U...id-at-se
   e9038:	6c616972 626d754e 53007265 61697265     rialNumber.Seria
   e9048:	756e206c 7265626d 10045500 2d646900     l number.U...id-
   e9058:	702d7461 6174736f 6464416c 73736572     at-postalAddress
   e9068:	736f5000 206c6174 72646461 00737365     .Postal address.
   e9078:	00110455 612d6469 6f702d74 6c617473     U...id-at-postal
   e9088:	65646f43 736f5000 206c6174 65646f63     Code.Postal code
   e9098:	04045500 2d646900 732d7461 614e7275     .U...id-at-surNa
   e90a8:	5300656d 616e7275 5300656d 0455004e     me.Surname.SN.U.
   e90b8:	6469002a 2d74612d 65766967 6d614e6e     *.id-at-givenNam
   e90c8:	69470065 206e6576 656d616e 004e4700     e.Given name.GN.
   e90d8:	002b0455 612d6469 6e692d74 61697469     U.+.id-at-initia
   e90e8:	4900736c 6974696e 00736c61 002c0455     ls.Initials.U.,.
   e90f8:	612d6469 65672d74 6172656e 6e6f6974     id-at-generation
   e9108:	6c617551 65696669 65470072 6172656e     Qualifier.Genera
   e9118:	6e6f6974 61757120 6966696c 55007265     tion qualifier.U
   e9128:	69000c04 74612d64 7469742d 5400656c     ...id-at-title.T
   e9138:	656c7469 2e045500 2d646900 642d7461     itle.U...id-at-d
   e9148:	6175516e 6966696c 44007265 69747369     nQualifier.Disti
   e9158:	6975676e 64656873 6d614e20 75712065     nguished Name qu
   e9168:	66696c61 00726569 00410455 612d6469     alifier.U.A.id-a
   e9178:	73702d74 6f647565 006d796e 75657350     t-pseudonym.Pseu
   e9188:	796e6f64 9209006d f2938926 1901642c     donym...&...,d..
   e9198:	2d646900 616d6f64 6f436e69 6e6f706d     .id-domainCompon
   e91a8:	00746e65 616d6f44 63206e69 6f706d6f     ent.Domain compo
   e91b8:	746e656e 00434400 002d0455 612d6469     nent.DC.U.-.id-a
   e91c8:	6e752d74 65757169 6e656449 69666974     t-uniqueIdentifi
   e91d8:	55007265 7571696e 64492065 69746e65     er.Unique Identi
   e91e8:	72656966 00000000                       fier....

000e91f0 <_ZL18oid_pkcs12_pbe_alg>:
   e91f0:	000e8938 0000000a 000e8943 000e8963     8.......C...c...
   e9200:	00002504 000e8980 0000000a 000e898b     .%..............
   e9210:	000e89ab 00002304 00000000 00000000     .....#..........
	...

000e922c <_ZL10oid_md_alg>:
   e922c:	000e8a69 00000005 000e8a6f 000e89df     i.......o.......
   e923c:	00000004 000e8a77 00000009 000e8a81     ....w...........
   e924c:	000e8bba 00000005 000e8a8b 00000009     ................
   e925c:	000e8a95 000e8bed 00000006 000e8a9f     ................
   e926c:	00000009 000e8aa9 000e8c20 00000007     ........ .......
   e927c:	000e8ab3 00000009 000e8abd 000e8c53     ............S...
   e928c:	00000008 00000000 00000000 00000000     ................
	...

000e92a4 <_ZL11oid_sig_alg>:
   e92a4:	000e8b60 00000009 000e8b6a 000e8b81     `.......j.......
   e92b4:	00000104 000e8b8f 00000009 000e8b99     ................
   e92c4:	000e8bb1 00000105 000e8bc2 00000009     ................
   e92d4:	000e8bcc 000e8be4 00000106 000e8bf5     ................
   e92e4:	00000009 000e8bff 000e8c17 00000107     ................
   e92f4:	000e8c28 00000009 000e8c32 000e8c4a     (.......2...J...
   e9304:	00000108 000e8c5b 00000005 000e8b6a     ....[.......j...
   e9314:	000e8b81 00000104 000e8c61 00000007     ........a.......
   e9324:	000e8c69 000e8c79 00000404 000e8c89     i...y...........
   e9334:	00000008 000e8c92 000e8ca4 00000405     ................
   e9344:	000e8cb6 00000008 000e8cbf 000e8cd1     ................
   e9354:	00000406 000e8ce3 00000008 000e8cec     ................
   e9364:	000e8cfe 00000407 000e8d10 00000008     ................
   e9374:	000e8d19 000e8d2b 00000408 000e8d3d     ....+.......=...
   e9384:	00000009 000e8d47 000e8d47 00000600     ....G...G.......
	...

000e93a8 <_ZL11oid_md_hmac>:
   e93a8:	000e89c8 00000008 000e89d1 000e89da     ................
   e93b8:	00000004 000e89e5 00000008 000e89ee     ................
   e93c8:	000e89f9 00000005 000e8a06 00000008     ................
   e93d8:	000e8a0f 000e8a1a 00000006 000e8a27     ............'...
   e93e8:	00000008 000e8a30 000e8a3b 00000007     ....0...;.......
   e93f8:	000e8a48 00000008 000e8a51 000e8a5c     H.......Q...\...
   e9408:	00000008 00000000 00000000 00000000     ................
	...

000e9420 <_ZL12oid_x509_ext>:
   e9420:	000e8e6d 00000003 000e8e71 000e8e88     m.......q.......
   e9430:	00000100 000e8e9a 00000003 000e8e9e     ................
   e9440:	000e8ecc 00000004 000e8ead 00000003     ................
   e9450:	000e8eb1 000e8ec3 00000800 000e8ed6     ................
   e9460:	00000003 000e8eda 000e8eef 00000020     ............ ...
   e9470:	000e8f00 00000009 000e8f0a 000e8f1f     ................
   e9480:	00010000 00000000 00000000 00000000     ................
	...
   e9498:	636f7250 7079542d 34203a65 434e452c     Proc-Type: 4,ENC
   e94a8:	54505952 69004445 6c61766e 50206469     RYPTED.invalid P
   e94b8:	0000004b                                K...

000e94bc <CSWTCH.19>:
   e94bc:	000e9550 000e9580 000e9520 000e94f0     P....... .......
   e94cc:	2e617372 7372004e 00452e61 656b6365     rsa.N.rsa.E.ecke
   e94dc:	00512e79 53444345 43450041 0048445f     y.Q.ECDSA.EC_DH.
   e94ec:	00004345                                EC..

000e94f0 <mbedtls_ecdsa_info>:
   e94f0:	00000004 000e94e0 000db32d 000db351     ........-...Q...
   e9500:	000db561 000db50d 00000000 00000000     a...............
   e9510:	000db4e1 000db4e5 000db4fb 000db331     ............1...

000e9520 <mbedtls_eckeydh_info>:
   e9520:	00000003 000e94e6 000db32d 000db345     ........-...E...
	...
   e9540:	000db4e1 000db4cb 000db4b9 000db331     ............1...

000e9550 <mbedtls_rsa_info>:
   e9550:	00000001 000e8b18 000db389 000db2ef     ................
   e9560:	000db46d 000db42d 000db3e1 000db395     m...-...........
   e9570:	000db385 000db36b 000db359 000db2fd     ....k...Y.......

000e9580 <mbedtls_eckey_info>:
   e9580:	00000002 000e94ec 000db32d 000db321     ........-...!...
   e9590:	000db585 000db517 00000000 00000000     ................
   e95a0:	000db4e1 000db4cb 000db4b9 000db331     ............1...
   e95b0:	8648862a 05010df7 862a000c 0df78648     *.H.......*.H...
   e95c0:	01010c01 48862a00 010df786 2d000d05     .....*.H.......-
   e95d0:	2d2d2d2d 20444e45 20415352 56495250     ----END RSA PRIV
   e95e0:	20455441 2d59454b 2d2d2d2d 2d2d2d00     ATE KEY-----.---
   e95f0:	45422d2d 204e4947 20415352 56495250     --BEGIN RSA PRIV
   e9600:	20455441 2d59454b 2d2d2d2d 2d2d2d00     ATE KEY-----.---
   e9610:	4e452d2d 43452044 49525020 45544156     --END EC PRIVATE
   e9620:	59454b20 2d2d2d2d 2d2d002d 422d2d2d      KEY-----.-----B
   e9630:	4e494745 20434520 56495250 20455441     EGIN EC PRIVATE 
   e9640:	2d59454b 2d2d2d2d 2d2d2d00 4e452d2d     KEY-----.-----EN
   e9650:	52502044 54415649 454b2045 2d2d2d59     D PRIVATE KEY---
   e9660:	2d002d2d 2d2d2d2d 49474542 5250204e     --.-----BEGIN PR
   e9670:	54415649 454b2045 2d2d2d59 2d002d2d     IVATE KEY-----.-
   e9680:	2d2d2d2d 20444e45 52434e45 45545059     ----END ENCRYPTE
   e9690:	52502044 54415649 454b2045 2d2d2d59     D PRIVATE KEY---
   e96a0:	2d002d2d 2d2d2d2d 49474542 4e45204e     --.-----BEGIN EN
   e96b0:	50595243 20444554 56495250 20455441     CRYPTED PRIVATE 
   e96c0:	2d59454b 2d2d2d2d 2d2d2d00 4e452d2d     KEY-----.-----EN
   e96d0:	53522044 55502041 43494c42 59454b20     D RSA PUBLIC KEY
   e96e0:	2d2d2d2d 2d2d002d 422d2d2d 4e494745     -----.-----BEGIN
   e96f0:	41535220 42555020 2043494c 2d59454b      RSA PUBLIC KEY-
   e9700:	2d2d2d2d 2d2d2d00 4e452d2d 55502044     ----.-----END PU
   e9710:	43494c42 59454b20 2d2d2d2d 2d2d002d     BLIC KEY-----.--
   e9720:	422d2d2d 4e494745 42555020 2043494c     ---BEGIN PUBLIC 
   e9730:	2d59454b 2d2d2d2d 05030200 110d0b07     KEY-----........
   e9740:	1f1d1713 2f2b2925 433d3b35 534f4947     ....%)+/5;=CGIOS
   e9750:	67656159 7f716d6b 958b8983 a7a39d97     Yaegkmq.........
   e9760:	bfb5b3ad d3c7c5c1 e9e5e3df 00fbf1ef     ................

000e9770 <_ZL1K>:
   e9770:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
   e9780:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
   e9790:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
   e97a0:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
   e97b0:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
   e97c0:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
   e97d0:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
   e97e0:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
   e97f0:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
   e9800:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
   e9810:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
   e9820:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
   e9830:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
   e9840:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
   e9850:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
   e9860:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

000e9870 <_ZL1K>:
   e9870:	d728ae22 428a2f98 23ef65cd 71374491     ".(../.B.e.#.D7q
   e9880:	ec4d3b2f b5c0fbcf 8189dbbc e9b5dba5     /;M.............
   e9890:	f348b538 3956c25b b605d019 59f111f1     8.H.[.V9.......Y
   e98a0:	af194f9b 923f82a4 da6d8118 ab1c5ed5     .O....?...m..^..
   e98b0:	a3030242 d807aa98 45706fbe 12835b01     B........opE.[..
   e98c0:	4ee4b28c 243185be d5ffb4e2 550c7dc3     ...N..1$.....}.U
   e98d0:	f27b896f 72be5d74 3b1696b1 80deb1fe     o.{.t].r...;....
   e98e0:	25c71235 9bdc06a7 cf692694 c19bf174     5..%.....&i.t...
   e98f0:	9ef14ad2 e49b69c1 384f25e3 efbe4786     .J...i...%O8.G..
   e9900:	8b8cd5b5 0fc19dc6 77ac9c65 240ca1cc     ........e..w...$
   e9910:	592b0275 2de92c6f 6ea6e483 4a7484aa     u.+Yo,.-...n..tJ
   e9920:	bd41fbd4 5cb0a9dc 831153b5 76f988da     ..A....\.S.....v
   e9930:	ee66dfab 983e5152 2db43210 a831c66d     ..f.RQ>..2.-m.1.
   e9940:	98fb213f b00327c8 beef0ee4 bf597fc7     ?!...'........Y.
   e9950:	3da88fc2 c6e00bf3 930aa725 d5a79147     ...=....%...G...
   e9960:	e003826f 06ca6351 0a0e6e70 14292967     o...Qc..pn..g)).
   e9970:	46d22ffc 27b70a85 5c26c926 2e1b2138     ./.F...'&.&\8!..
   e9980:	5ac42aed 4d2c6dfc 9d95b3df 53380d13     .*.Z.m,M......8S
   e9990:	8baf63de 650a7354 3c77b2a8 766a0abb     .c..Ts.e..w<..jv
   e99a0:	47edaee6 81c2c92e 1482353b 92722c85     ...G....;5...,r.
   e99b0:	4cf10364 a2bfe8a1 bc423001 a81a664b     d..L.....0B.Kf..
   e99c0:	d0f89791 c24b8b70 0654be30 c76c51a3     ....p.K.0.T..Ql.
   e99d0:	d6ef5218 d192e819 5565a910 d6990624     .R........eU$...
   e99e0:	5771202a f40e3585 32bbd1b8 106aa070     * qW.5.....2p.j.
   e99f0:	b8d2d0c8 19a4c116 5141ab53 1e376c08     ........S.AQ.l7.
   e9a00:	df8eeb99 2748774c e19b48a8 34b0bcb5     ....LwH'.H.....4
   e9a10:	c5c95a63 391c0cb3 e3418acb 4ed8aa4a     cZ.....9..A.J..N
   e9a20:	7763e373 5b9cca4f d6b2b8a3 682e6ff3     s.cwO..[.....o.h
   e9a30:	5defb2fc 748f82ee 43172f60 78a5636f     ...]...t`/.Coc.x
   e9a40:	a1f0ab72 84c87814 1a6439ec 8cc70208     r....x...9d.....
   e9a50:	23631e28 90befffa de82bde9 a4506ceb     (.c#.........lP.
   e9a60:	b2c67915 bef9a3f7 e372532b c67178f2     .y......+Sr..xq.
   e9a70:	ea26619c ca273ece 21c0c207 d186b8c7     .a&..>'....!....
   e9a80:	cde0eb1e eada7dd6 ee6ed178 f57d4f7f     .....}..x.n..O}.
   e9a90:	72176fba 06f067aa a2c898a6 0a637dc5     .o.r.g.......}c.
   e9aa0:	bef90dae 113f9804 131c471b 1b710b35     ......?..G..5.q.
   e9ab0:	23047d84 28db77f5 40c72493 32caab7b     .}.#.w.(.$.@{..2
   e9ac0:	15c9bebc 3c9ebe0a 9c100d4c 431d67c4     .......<L....g.C
   e9ad0:	cb3e42b6 4cc5d4be fc657e2a 597f299c     .B>....L*~e..).Y
   e9ae0:	3ad6faec 5fcb6fab 4a475817 6c44198c     ...:.o._.XGJ..Dl
   e9af0:	6e6b6e75 006e776f 2d534c54 48444345     unknown.TLS-ECDH
   e9b00:	43452d45 2d415344 48544957 5345412d     E-ECDSA-WITH-AES
   e9b10:	3832312d 4d43472d 4148532d 00363532     -128-GCM-SHA256.
   e9b20:	2d534c54 48444345 43452d45 2d415344     TLS-ECDHE-ECDSA-
   e9b30:	48544957 5345412d 3635322d 4d43472d     WITH-AES-256-GCM
   e9b40:	4148532d 00343833 2d534c54 2d415352     -SHA384.TLS-RSA-
   e9b50:	48544957 5345412d 3635322d 4d43472d     WITH-AES-256-GCM
   e9b60:	4148532d 00343833 2d534c54 2d415352     -SHA384.TLS-RSA-
   e9b70:	48544957 5345412d 3832312d 4d43472d     WITH-AES-128-GCM
   e9b80:	4148532d 00363532 2d534c54 2d4b5350     -SHA256.TLS-PSK-
   e9b90:	48544957 5345412d 3832312d 4d43472d     WITH-AES-128-GCM
   e9ba0:	4148532d 00363532 2d534c54 2d4b5350     -SHA256.TLS-PSK-
   e9bb0:	48544957 5345412d 3635322d 4d43472d     WITH-AES-256-GCM
   e9bc0:	4148532d 00343833 2d534c54 2d415352     -SHA384.TLS-RSA-
   e9bd0:	2d4b5350 48544957 5345412d 3832312d     PSK-WITH-AES-128
   e9be0:	4d43472d 4148532d 00363532 2d534c54     -GCM-SHA256.TLS-
   e9bf0:	2d415352 2d4b5350 48544957 5345412d     RSA-PSK-WITH-AES
   e9c00:	3635322d 4d43472d 4148532d 00343833     -256-GCM-SHA384.

000e9c10 <_ZL23ciphersuite_definitions>:
   e9c10:	0000c02b 000e9af8 0004060e 00000003     +...............
   e9c20:	00000003 00000003 00000003 00000000     ................
   e9c30:	0000c02c 000e9b20 00040710 00000003     ,... ...........
   e9c40:	00000003 00000003 00000003 00000000     ................
   e9c50:	0000009d 000e9b48 00010710 00000003     ....H...........
   e9c60:	00000003 00000003 00000003 00000000     ................
   e9c70:	0000009c 000e9b68 0001060e 00000003     ....h...........
   e9c80:	00000003 00000003 00000003 00000000     ................
   e9c90:	000000a8 000e9b88 0005060e 00000003     ................
   e9ca0:	00000003 00000003 00000003 00000000     ................
   e9cb0:	000000a9 000e9ba8 00050710 00000003     ................
   e9cc0:	00000003 00000003 00000003 00000000     ................
   e9cd0:	000000ac 000e9bc8 0007060e 00000003     ................
   e9ce0:	00000003 00000003 00000003 00000000     ................
   e9cf0:	000000ad 000e9bec 00070710 00000003     ................
   e9d00:	00000003 00000003 00000003 00000000     ................
   e9d10:	00000000 000e8b09 00000000 00000000     ................
	...

000e9d30 <_ZL22ciphersuite_preference>:
   e9d30:	0000cca8 0000cca9 0000ccaa 0000c02c     ............,...
   e9d40:	0000c030 0000009f 0000c0ad 0000c09f     0...............
   e9d50:	0000c024 0000c028 0000006b 0000c00a     $...(...k.......
   e9d60:	0000c014 00000039 0000c0af 0000c0a3     ....9...........
   e9d70:	0000c087 0000c08b 0000c07d 0000c073     ........}...s...
   e9d80:	0000c077 000000c4 00000088 0000c05d     w...........]...
   e9d90:	0000c061 0000c053 0000c049 0000c04d     a...S...I...M...
   e9da0:	0000c045 0000c02b 0000c02f 0000009e     E...+.../.......
   e9db0:	0000c0ac 0000c09e 0000c023 0000c027     ........#...'...
   e9dc0:	00000067 0000c009 0000c013 00000033     g...........3...
   e9dd0:	0000c0ae 0000c0a2 0000c086 0000c08a     ................
   e9de0:	0000c07c 0000c072 0000c076 000000be     |...r...v.......
   e9df0:	00000045 0000c05c 0000c060 0000c052     E...\...`...R...
   e9e00:	0000c048 0000c04c 0000c044 0000ccac     H...L...D.......
   e9e10:	0000ccad 000000ab 0000c0a7 0000c038     ............8...
   e9e20:	000000b3 0000c036 00000091 0000c091     ....6...........
   e9e30:	0000c09b 0000c097 0000c0ab 0000c06d     ............m...
   e9e40:	0000c071 0000c067 000000aa 0000c0a6     q...g...........
   e9e50:	0000c037 000000b2 0000c035 00000090     7.......5.......
   e9e60:	0000c090 0000c096 0000c09a 0000c0aa     ................
   e9e70:	0000c06c 0000c070 0000c066 0000c0ff     l...p...f.......
   e9e80:	0000009d 0000c09d 0000003d 00000035     ........=...5...
   e9e90:	0000c032 0000c02a 0000c00f 0000c02e     2...*...........
   e9ea0:	0000c026 0000c005 0000c0a1 0000c07b     &...........{...
   e9eb0:	000000c0 00000084 0000c08d 0000c079     ............y...
   e9ec0:	0000c089 0000c075 0000c05f 0000c063     ....u..._...c...
   e9ed0:	0000c051 0000c04b 0000c04f 0000c03d     Q...K...O...=...
   e9ee0:	0000009c 0000c09c 0000003c 0000002f     ........<.../...
   e9ef0:	0000c031 0000c029 0000c00e 0000c02d     1...).......-...
   e9f00:	0000c025 0000c004 0000c0a0 0000c07a     %...........z...
   e9f10:	000000ba 00000041 0000c08c 0000c078     ....A.......x...
   e9f20:	0000c088 0000c074 0000c05e 0000c062     ....t...^...b...
   e9f30:	0000c050 0000c04a 0000c04e 0000c03c     P...J...N...<...
   e9f40:	0000ccae 000000ad 000000b7 00000095     ................
   e9f50:	0000c093 0000c099 0000c06f 0000c069     ........o...i...
   e9f60:	000000ac 000000b6 00000094 0000c092     ................
   e9f70:	0000c098 0000c06e 0000c068 0000ccab     ....n...h.......
   e9f80:	000000a9 0000c0a5 000000af 0000008d     ................
   e9f90:	0000c08f 0000c095 0000c0a9 0000c06b     ............k...
   e9fa0:	0000c065 000000a8 0000c0a4 000000ae     e...............
   e9fb0:	0000008c 0000c08e 0000c094 0000c0a8     ................
   e9fc0:	0000c06a 0000c064 0000c008 0000c012     j...d...........
   e9fd0:	00000016 0000c034 0000008f 0000000a     ....4...........
   e9fe0:	0000c00d 0000c003 00000093 0000008b     ................
   e9ff0:	0000c007 0000c011 0000c033 0000008e     ........3.......
   ea000:	00000005 00000004 0000c00c 0000c002     ................
   ea010:	00000092 0000008a 00000015 00000009     ................
   ea020:	0000c006 0000c010 0000c03b 0000c03a     ........;...:...
   ea030:	0000c039 000000b5 000000b4 0000002d     9...........-...
   ea040:	0000003b 00000002 00000001 0000c00b     ;...............
   ea050:	0000c001 000000b9 000000b8 0000002e     ................
   ea060:	000000b1 000000b0 0000002c 00000000     ........,.......

000ea070 <CSWTCH.336>:
   ea070:	07060504 696c6308 20746e65 696e6966     .....client fini
   ea080:	64656873 72657300 20726576 696e6966     shed.server fini
   ea090:	64656873 73616d00 20726574 72636573     shed.master secr
   ea0a0:	6b007465 65207965 6e617078 6e6f6973     et.key expansion
   ea0b0:	4c535300 302e3376 534c5400 302e3176     .SSLv3.0.TLSv1.0
   ea0c0:	534c5400 312e3176 534c5400 322e3176     .TLSv1.1.TLSv1.2
	...

000ea0d2 <CSWTCH.236>:
   ea0d2:	04000200 10000800                       ........

000ea0da <CSWTCH.338>:
   ea0da:	05040302 48862a06 010df786 20000801     .....*.H....... 
   ea0ea:	2c00202b 73250020 3f3f003d 003a003d     + ., .%s=.??=.:.
   ea0fa:	58323025 2e007325 002e2e2e 003f3f3f     %02X%s......???.
   ea10a:	73252820 474d202c 252d3146 30202c73      (%s, MGF1-%s, 0
   ea11a:	32302578 25002958 656b2073 69732079     x%02X).%s key si
   ea12a:	5500657a 0000251d 00010000                       ze.U.%....

000ea134 <_ZL23x509_crt_verify_strings>:
   ea134:	00000001 000ea504 00000002 000ea529     ............)...
   ea144:	00000004 000ea558 00000008 000ea59d     ....X...........
   ea154:	00000010 000ea5d7 00000020 000ea609     ........ .......
   ea164:	00000040 000ea61c 00000080 000ea634     @...........4...
   ea174:	00000100 000ea659 00000200 000ea687     ....Y...........
   ea184:	00000400 000ea6b5 00000800 000ea6d0     ................
   ea194:	00001000 000ea6fc 00002000 000ea730     ......... ..0...
   ea1a4:	00004000 000ea75e 00008000 000ea793     .@..^...........
   ea1b4:	00010000 000ea7dc 00020000 000ea82e     ................
   ea1c4:	00040000 000ea85b 00080000 000ea89c     ....[...........
	...

000ea1dc <mbedtls_x509_crt_profile_default>:
   ea1dc:	000000f0 0fffffff 0fffffff 00000800     ................
   ea1ec:	65757274 6c616600 0a006573 74726543     true.false..Cert
   ea1fc:	63696669 20657461 75207369 696e696e     ificate is unini
   ea20c:	6c616974 64657369 25000a21 72656373     tialised!..%scer
   ea21c:	76202e74 69737265 20206e6f 3a202020     t. version     :
   ea22c:	0a642520 73732500 61697265 756e206c      %d..%sserial nu
   ea23c:	7265626d 20202020 00203a20 6973250a     mber     : ..%si
   ea24c:	65757373 616e2072 2020656d 20202020     ssuer name      
   ea25c:	00203a20 7373250a 656a6275 6e207463      : ..%ssubject n
   ea26c:	20656d61 20202020 00203a20 6973250a     ame      : ..%si
   ea27c:	65757373 6f202064 2020206e 20202020     ssued  on       
   ea28c:	25203a20 2d643430 64323025 3230252d      : %04d-%02d-%02
   ea29c:	30252064 253a6432 3a643230 64323025     d %02d:%02d:%02d
   ea2ac:	73250a00 69707865 20736572 20206e6f     ..%sexpires on  
   ea2bc:	20202020 203a2020 64343025 3230252d           : %04d-%02
   ea2cc:	30252d64 25206432 3a643230 64323025     d-%02d %02d:%02d
   ea2dc:	3230253a 250a0064 67697373 2064656e     :%02d..%ssigned 
   ea2ec:	6e697375 20202067 3a202020 250a0020     using      : ..%
   ea2fc:	312d2573 203a7338 62206425 00737469     s%-18s: %d bits.
   ea30c:	6273250a 63697361 6e6f6320 61727473     .%sbasic constra
   ea31c:	73746e69 43203a20 73253d41 6d202c00     ints : CA=%s., m
   ea32c:	705f7861 6c687461 253d6e65 250a0064     ax_pathlen=%d..%
   ea33c:	62757373 7463656a 746c6120 6d616e20     ssubject alt nam
   ea34c:	3a202065 250a0020 72656373 74202e74     e  : ..%scert. t
   ea35c:	20657079 20202020 3a202020 73250020     ype        : .%s
   ea36c:	204c5353 65696c43 2500746e 4c535373     SSL Client.%sSSL
   ea37c:	72655320 00726576 6d457325 006c6961      Server.%sEmail.
   ea38c:	624f7325 7463656a 67695320 676e696e     %sObject Signing
   ea39c:	52732500 72657365 00646576 53537325     .%sReserved.%sSS
   ea3ac:	4143204c 45732500 6c69616d 00414320     L CA.%sEmail CA.
   ea3bc:	624f7325 7463656a 67695320 676e696e     %sObject Signing
   ea3cc:	00414320 6b73250a 75207965 65676173      CA..%skey usage
   ea3dc:	20202020 20202020 00203a20 69447325              : .%sDi
   ea3ec:	61746967 6953206c 74616e67 00657275     gital Signature.
   ea3fc:	6f4e7325 6552206e 69647570 6f697461     %sNon Repudiatio
   ea40c:	7325006e 2079654b 69636e45 72656870     n.%sKey Encipher
   ea41c:	746e656d 44732500 20617461 69636e45     ment.%sData Enci
   ea42c:	72656870 746e656d 4b732500 41207965     pherment.%sKey A
   ea43c:	65657267 746e656d 4b732500 43207965     greement.%sKey C
   ea44c:	20747265 6e676953 43732500 53204c52     ert Sign.%sCRL S
   ea45c:	006e6769 6e457325 68706963 4f207265     ign.%sEncipher O
   ea46c:	00796c6e 65447325 68706963 4f207265     nly.%sDecipher O
   ea47c:	00796c6e 6573250a 6b207478 75207965     nly..%sext key u
   ea48c:	65676173 20202020 00203a20 73257325     sage     : .%s%s
   ea49c:	25732500 25000a73 6b6e5573 6e776f6e     .%s%s..%sUnknown
   ea4ac:	61657220 206e6f73 69687428 68732073      reason (this sh
   ea4bc:	646c756f 746f6e20 70616820 296e6570     ould not happen)
   ea4cc:	2d2d000a 422d2d2d 4e494745 52454320     ..-----BEGIN CER
   ea4dc:	49464954 45544143 2d2d2d2d 2d2d002d     TIFICATE-----.--
   ea4ec:	452d2d2d 4320444e 49545245 41434946     ---END CERTIFICA
   ea4fc:	2d2d4554 002d2d2d 20656854 74726563     TE-----.The cert
   ea50c:	63696669 20657461 696c6176 79746964     ificate validity
   ea51c:	73616820 70786520 64657269 65685400      has expired.The
   ea52c:	72656320 69666974 65746163 73616820      certificate has
   ea53c:	65656220 6572206e 656b6f76 69282064      been revoked (i
   ea54c:	6e6f2073 43206120 00294c52 20656854     s on a CRL).The 
   ea55c:	74726563 63696669 20657461 6d6d6f43     certificate Comm
   ea56c:	4e206e6f 20656d61 294e4328 656f6420     on Name (CN) doe
   ea57c:	6f6e2073 616d2074 20686374 68746977     s not match with
   ea58c:	65687420 70786520 65746365 4e432064      the expected CN
   ea59c:	65685400 72656320 69666974 65746163     .The certificate
   ea5ac:	20736920 20746f6e 72726f63 6c746365      is not correctl
   ea5bc:	69732079 64656e67 20796220 20656874     y signed by the 
   ea5cc:	73757274 20646574 54004143 43206568     trusted CA.The C
   ea5dc:	69204c52 6f6e2073 6f632074 63657272     RL is not correc
   ea5ec:	20796c74 6e676973 62206465 68742079     tly signed by th
   ea5fc:	72742065 65747375 41432064 65685400     e trusted CA.The
   ea60c:	4c524320 20736920 69707865 00646572      CRL is expired.
   ea61c:	74726543 63696669 20657461 20736177     Certificate was 
   ea62c:	7373696d 00676e69 74726543 63696669     missing.Certific
   ea63c:	20657461 69726576 61636966 6e6f6974     ate verification
   ea64c:	73617720 696b7320 64657070 68744f00      was skipped.Oth
   ea65c:	72207265 6f736165 6328206e 62206e61     er reason (can b
   ea66c:	73752065 62206465 65762079 79666972     e used by verify
   ea67c:	6c616320 6361626c 5400296b 63206568      callback).The c
   ea68c:	69747265 61636966 76206574 64696c61     ertificate valid
   ea69c:	20797469 72617473 69207374 6874206e     ity starts in th
   ea6ac:	75662065 65727574 65685400 4c524320     e future.The CRL
   ea6bc:	20736920 6d6f7266 65687420 74756620      is from the fut
   ea6cc:	00657275 67617355 6f642065 6e207365     ure.Usage does n
   ea6dc:	6d20746f 68637461 65687420 79656b20     ot match the key
   ea6ec:	67617355 78652065 736e6574 006e6f69     Usage extension.
   ea6fc:	67617355 6f642065 6e207365 6d20746f     Usage does not m
   ea70c:	68637461 65687420 74786520 65646e65     atch the extende
   ea71c:	79654b64 67617355 78652065 736e6574     dKeyUsage extens
   ea72c:	006e6f69 67617355 6f642065 6e207365     ion.Usage does n
   ea73c:	6d20746f 68637461 65687420 43736e20     ot match the nsC
   ea74c:	54747265 20657079 65747865 6f69736e     ertType extensio
   ea75c:	6854006e 65632065 66697472 74616369     n.The certificat
   ea76c:	73692065 67697320 2064656e 68746977     e is signed with
   ea77c:	206e6120 63616e75 74706563 656c6261      an unacceptable
   ea78c:	73616820 54002e68 63206568 69747265      hash..The certi
   ea79c:	61636966 69206574 69732073 64656e67     ficate is signed
   ea7ac:	74697720 6e612068 616e7520 70656363      with an unaccep
   ea7bc:	6c626174 4b502065 676c6120 67652820     table PK alg (eg
   ea7cc:	41535220 20737620 53444345 002e2941      RSA vs ECDSA)..
   ea7dc:	20656854 74726563 63696669 20657461     The certificate 
   ea7ec:	73207369 656e6769 69772064 61206874     is signed with a
   ea7fc:	6e75206e 65636361 62617470 6b20656c     n unacceptable k
   ea80c:	28207965 62206765 63206461 65767275     ey (eg bad curve
   ea81c:	5352202c 6f742041 6873206f 2974726f     , RSA too short)
   ea82c:	6854002e 52432065 7369204c 67697320     ..The CRL is sig
   ea83c:	2064656e 68746977 206e6120 63616e75     ned with an unac
   ea84c:	74706563 656c6261 73616820 54002e68     ceptable hash..T
   ea85c:	43206568 69204c52 69732073 64656e67     he CRL is signed
   ea86c:	74697720 6e612068 616e7520 70656363      with an unaccep
   ea87c:	6c626174 4b502065 676c6120 67652820     table PK alg (eg
   ea88c:	41535220 20737620 53444345 002e2941      RSA vs ECDSA)..
   ea89c:	20656854 204c5243 73207369 656e6769     The CRL is signe
   ea8ac:	69772064 61206874 6e75206e 65636361     d with an unacce
   ea8bc:	62617470 6b20656c 28207965 62206765     ptable key (eg b
   ea8cc:	63206461 65767275 5352202c 6f742041     ad curve, RSA to
   ea8dc:	6873206f 2974726f 0000002e              o short)....

000ea8e8 <mbedtls_x509_crt_profile_suiteb>:
   ea8e8:	00000060 0000000a 0000000c 00000000     `...............

000ea8f8 <_ZTVN5spark13EthernetClassE>:
	...
   ea900:	000e5c51 000e5c47 000e5c3d 000e5c33     Q\..G\..=\..3\..
   ea910:	000e5c27 000e5c1b 000e5c0f 000e5c07     '\...\...\...\..
   ea920:	000e5bfd 000e5bf3 000e6015              .[...[...`..

000ea92c <_ZTV7TwoWire>:
	...
   ea934:	000e5c71 000e5cbb 000e5c93 000e5c73     q\...\...\..s\..
   ea944:	000e5c9b 000e5ca3 000e5cab 000e5cb3     .\...\...\...\..

000ea954 <_ZTV9IPAddress>:
	...
   ea95c:	000e5d0d 000e5cfd 000e5cff 64756162     .]...\...\..baud
   ea96c:	72655300 006c6169 69726553 00316c61     .Serial.Serial1.
   ea97c:	61726170 6d63006d 64690064 646e6800     param.cmd.id.hnd
   ea98c:	72747300 6966006d 6c00746c 61006c76     .strm.filt.lvl.a
   ea99c:	61486464 656c646e 65720072 65766f6d     ddHandler.remove
   ea9ac:	646e6148 0072656c 6d756e65 646e6148     Handler.enumHand
   ea9bc:	7372656c 4f534a00 7274534e 4c6d6165     lers.JSONStreamL
   ea9cc:	6148676f 656c646e 70610072 30250070     ogHandler.app.%0
   ea9dc:	20753031 00205d00 203a2928 005b2000     10u .] .(): . [.
   ea9ec:	65646f63 00203d20 64006925 69617465     code = .%i.detai
   ea9fc:	3d20736c 0a0d0020 6c006600 6e66006e     ls = ....f.ln.fn
   eaa0c:	74656400 006c6961 656e6f6e 61727400     .detail.none.tra
   eaa1c:	69006563 006f666e 6e726177 72726500     ce.info.warn.err
   eaa2c:	7000726f 63696e61 6c6c6100 00000000     or.panic.all....

000eaa3c <_ZTVN5spark9MeshClassE>:
	...
   eaa44:	000e5e8f 000e5e85 000e5e7b 000e5e71     .^...^..{^..q^..
   eaa54:	000e5e65 000e5e59 000e5e4d 000e5e45     e^..Y^..M^..E^..
   eaa64:	000e5e3b 000e5e31 000e6015              ;^..1^...`..

000eaa70 <_ZTVN5spark12NetworkClassE>:
	...
   eaa78:	000e5fad 000e5fb7 000e5fc1 000e5fcb     ._..._..._..._..
   eaa88:	000e5fd5 000e5fe1 000e5fed 000e5ff9     ._..._..._..._..
   eaa98:	000e6001 000e600b 000e6015              .`...`...`..

000eaaa4 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   eaaac:	000e64c5 000e64cb 000e69b3 000e64d9     .d...d...i...d..
   eaabc:	000e64c7                                .d..

000eaac0 <_ZTV9TCPClient>:
	...
   eaac8:	000d4585 000d45b9 000e643d 000e6457     .E...E..=d..Wd..
   eaad8:	000e6859 000e65ab 000e657d 000e6481     Yh...e..}e...d..
   eaae8:	000e6735 000e6631 000e65df 000e6829     5g..1f...e..)h..
   eaaf8:	000e6483 000e64bb 000e6469 000e64dd     .d...d..id...d..
   eab08:	000e655d 69726977 7200676e 20766365     ]e..wiring.recv 
   eab18:	6f727265 203d2072 5a006425 302b2500     error = %d.Z.%+0
   eab28:	253a6433 00753230 252d5925 64252d6d     3d:%02u.%Y-%m-%d
   eab38:	3a482554 253a4d25 007a2553 74637361     T%H:%M:%S%z.asct
   eab48:	00656d69                                ime.

000eab4c <_ZTV11USARTSerial>:
	...
   eab54:	000e69e1 000e6a31 000e6a3f 000e60f5     .i..1j..?j...`..
   eab64:	000e69f5 000e6a17 000e6a03 000e6a2b     .i...j...j..+j..
   eab74:	000e69e3 000e69e7                       .i...i..

000eab7c <_ZTV9USBSerial>:
	...
   eab84:	000e6ae9 000e6b39 000e6b47 000e60f5     .j..9k..Gk...`..
   eab94:	000e6b25 000e6aeb 000e6b01 000e6b33     %k...j...k..3k..
   eaba4:	000e6b17 000e6ae5                       .k...j..

000eabac <_ZTVN5spark9WiFiClassE>:
	...
   eabb4:	000e6c53 000e6c49 000e6c3f 000e6bf5     Sl..Il..?l...k..
   eabc4:	000e6c33 000e6c27 000e6c1b 000e6c13     3l..'l...l...l..
   eabd4:	000e6c09 000e6bff 000e6015              .l...k...`..

000eabe0 <_ZSt7nothrow>:
   eabe0:	00000000                                ....

000eabe4 <__sf_fake_stdin>:
	...

000eac04 <__sf_fake_stdout>:
	...

000eac24 <__sf_fake_stderr>:
	...

000eac44 <link_const_variable_data_end>:
   eac44:	000d41b9 	.word	0x000d41b9
   eac48:	000d44b5 	.word	0x000d44b5
   eac4c:	000d5045 	.word	0x000d5045
   eac50:	000e5bb9 	.word	0x000e5bb9
   eac54:	000e5c5d 	.word	0x000e5c5d
   eac58:	000e5e21 	.word	0x000e5e21
   eac5c:	000e5f5d 	.word	0x000e5f5d
   eac60:	000e60e1 	.word	0x000e60e1
   eac64:	000e6195 	.word	0x000e6195
   eac68:	000e6409 	.word	0x000e6409
   eac6c:	000e69cd 	.word	0x000e69cd
   eac70:	000e6c5d 	.word	0x000e6c5d
   eac74:	000e6f49 	.word	0x000e6f49
   eac78:	000e700d 	.word	0x000e700d
   eac7c:	000e7091 	.word	0x000e7091
   eac80:	000e7115 	.word	0x000e7115

000eac84 <link_constructors_end>:
	...
